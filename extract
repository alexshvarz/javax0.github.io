#!/usr/local/bin/python3
import re
import xml.dom.minidom


def untab_quotes(lines):
    in_quote = 0
    for i in range(0, len(lines)):
        line = lines[i]
        if in_quote == 0 and line == "[quote]":
            in_quote = 1
            continue
        if in_quote == 1 and line == "____":
            in_quote = 2
            continue
        if in_quote == 2 and line == "____":
            in_quote = 0
            continue
        if in_quote == 2:
            line = re.sub("^\\s*", "", line)
        # restore the line
        lines[i] = line


def html2adoc(text):
    text = re.sub("Â ", " ", text)
    text = re.sub('<a.+?href="(.*?)">\\s*<img.+src="(.*?)".*?/?>\\s*</a>', "image:\\2[link=\"\\2\"]", text)
    text = re.sub('<a.+?href="(.*?)".*?>(.*?)</a>', "link:\\1[\\2]", text)
    text = re.sub('<img.+?src="(.*?)".*?/?>', "image::\\1[]", text)
    text = re.sub("<pre.*?>(.*?)</pre>", "[source]\n----\n\\1\n----\n", text, flags=re.DOTALL)
    text = re.sub("</?hr.*?>", "", text)
    text = re.sub("</?font.*?>", "", text)
    text = re.sub("</?ul.*?>", "", text)
    text = re.sub("</?ol.*?>", "", text)
    text = re.sub("</?p.*?>", "", text)
    text = re.sub("</?br.*?>", "\n", text)
    text = re.sub("<li.*?>(.*?)</li>", "* \\1", text, flags=re.DOTALL)
    text = re.sub("<li.*?>", "* ", text)
    text = re.sub('<im\\s+src="(.*?)"/?>', 'image::\\1[]', text)
    text = re.sub("</?tt>", "`", text)
    text = re.sub("</?code>", "`", text)
    text = re.sub("<em>(.*?)</em>", "__\\1__", text)
    text = re.sub("<i>(.*?)</i>", "__\\1__", text)
    text = re.sub("\\[code\\s+language=\"(.*)\"]", "[source,\\1]\n----", text)
    text = re.sub("\\[code\\s+language=(\\w+)]", "[source,\\1]\n----", text)
    text = re.sub("\\[code\\s+lang=\"(.*)\"]", "[source,\\1]\n----", text)
    text = re.sub("\\[code\\s+lang=(\\w+)]", "[source,\\1]\n----", text)
    text = re.sub("\\[sourcecode\\s+language=\"(.*?)\".*?]", "[source,\\1]\n----", text)
    text = re.sub("\\[sourcecode\\s+language=(\\w+).*?]", "[source,\\1]\n----", text)
    text = re.sub("\\[sourcecode\\s+lang=\"(.*?)\".*?]", "[source,\\1]\n----", text)
    text = re.sub("\\[sourcecode\\s+lang=(\\w+).*?]", "[source,\\1]\n----", text)
    text = re.sub("\\[sourcecode.*?]", "[source]\n----", text)
    text = re.sub("\\[/code]", "----\n", text)
    text = re.sub("\\[/sourcecode]", "----\n", text)
    text = re.sub("<h1.*?>(.*?)</h.>", "\n{%section |\\1%}\n", text)
    text = re.sub("<h2.*?>(.*?)</h.>", "\n{%subsection |\\1%}\n", text)
    text = re.sub("<h3.*?>(.*?)</h.>", "\n{%subsubsection |\\1%}\n", text)
    text = re.sub("<blockquote.*?>(.*?)</blockquote>", "[quote]\n____\n\\1\n____\n", text, flags=re.DOTALL)
    text = re.sub("<(\\w+).*?>\\s*(.*?)\\s*</\\1>", "[\\1]#\\2#", text, flags=re.DOTALL)
    text = re.sub("<!--\\s*/?\\s*wp:.*?-->", "", text)
    text = re.sub("<!--.*?-->", "", text)
    lns = text.split("\n")
    untab_quotes(lns)
    text = "\n".join(lns)

    if text.find("<") != -1:
        print("There is residual html in the generated Asciidoc in %s." % fn)

    text = re.sub("&lt;", "<", text)
    text = re.sub("&gt;", ">", text)
    text = re.sub('&quot;', '"', text)
    return text


def wp2adoc(text, title):
    text = html2adoc(text)
    text = '''---
title: "%s" 
layout: posta
comments: on
---
{%%@import javax0.jim%%}
%s
''' % (title, text)
    return text


def comments(X):
    return X.getElementsByTagName("wp:comment")


def attr(X, att):
    elements = X.getElementsByTagName(att)
    if len(elements) == 0:
        return ""
    kinder = elements[0].childNodes
    if len(kinder) == 0:
        return ""
    return kinder[0].data


def title(X):
    return attr(X, "title")


def post_id(X):
    return attr(X, "wp:post_id")


def post_name(X):
    return attr(X, "wp:post_name")


def post_date(X):
    return attr(X, "wp:post_date")[:10]


def content(X):
    return attr(X, "content:encoded")


def append_comments(cmnts):
    comment_text = ""
    for comment in cmnts:
        id = attr(comment, "wp:comment_id")
        author = attr(comment, "wp:comment_author")
        author_email = attr(comment, "wp:comment_author_email")
        author_url = attr(comment, "wp:comment_author_url")
        author_IP = attr(comment, "wp:comment_author_IP")
        date = attr(comment, "wp:comment_date")
        date_gmt = attr(comment, "wp:comment_date_gmt")
        content = attr(comment, "wp:comment_content")
        approved = attr(comment, "wp:comment_approved")
        type = attr(comment, "wp:comment_type")
        parent = attr(comment, "wp:comment_parent")
        user_id = attr(comment, "wp:comment_user_id")
        comment_text += "\n"
        id = attr(comment, "wp:comment_id")
        comment_text += "*%s* %s\n" % (author, date)
        comment_text += "{%%@comment id: %s %%}\n" % id
        comment_text += "{%%@comment author_email: %s %%}\n" % author_email
        comment_text += "{%%@comment author_url: %s %%}\n" % author_url
        comment_text += "{%%@comment author_IP: %s %%}\n" % author_IP
        comment_text += "{%%@comment date_gmt: %s %%}\n" % date_gmt
        comment_text += "[quote]\n____\n%s\n____\n" % html2adoc(content)
        comment_text += "{%%@comment approved: %s %%}\n" % approved
        comment_text += "{%%@comment type: %s %%}\n" % type
        comment_text += "{%%@comment parent: %s %%}\n" % parent
        comment_text += "{%%@comment user_id: %s %%}\n" % user_id
    if len(comment_text) > 0:
        comment_text = "\n=== Comments imported from Wordpress\n\n" + comment_text
    return comment_text

doc = xml.dom.minidom.parse("wordpress/javadeep.wordpress.2022-12-11.000.xml")

for item in doc.getElementsByTagName("item"):
    id = post_id(item)
    tit = title(item)
    cont = content(item)
    if len(tit) == 0 or len(cont) == 0 or cont.startswith("http://"):
        print("%s has no content or no title or is a link" % id)
    else:
        date = post_date(item)
        if date in ('2018-11-29','2021-02-17','2021-02-10'):
            continue
        name = post_name(item)
        if name == "about":
            continue
        fn = "%s-%s" % (date, name)
        cnt = wp2adoc(cont, tit)
        cmnts = comments(item)
        cnt += append_comments(cmnts)
        f = open("_posts/%s.adoc.jam" % fn, "w")
        f.write(cnt)
        f.close()
