{@comment}
define the 'section', 'subsection' and 'subsubsection' macros that number the individual sections

{@counter:define id=:scount}
{@counter:define id=:sscount}
{@counter:define id=:ssscount}
{@define section($x)=== {scount}. $x{@counter:define id=:sscount}}
{@define subsection($x)==== {scount last}.{sscount}. $x{@counter:define id=:ssscount}}
{@define subsubsection($x)===== {scount last}.{sscount last}.{ssscount}. $x}


{@define article($fileName,$refText)=link:/{@replace (regex) |$fileName|(\d)-|$1/|}.html[$refText]}
{@define liquid($x)={@escape* `liquid`{`liquid`} $x {@escape* `liquid`}`liquid`}}
{@define raw($x)={liquid raw}$x{liquid endraw}}

{@define png($x,...$Y)=image::https://javax0.github.io/assets/images/$x.png[$Y]}

{@define java($X)=[source,java]
----
{@snip (actions=number,trim format="%2d. ") $X}
----}

{@define codeDisclaimer=
[%collapsible,title=Code Sample Disclaimer, sidebar]
====
[sidebar]
The code samples are available on GitHub in the link:https://github.com/javax0/javax0.github.io/tree/master/_projects[project directory].
Each article has a project directory named `YYYY-MM-DD-article-title` where the project code files are.
The samples are automatically copied from the project directory to the article using Jamal.
No manual copy, no outdated stale samples.
====}

{@define outputDisclaimer=
[%collapsible,title=Output Disclaimer, sidebar]
====
[sidebar]
The output in the unit tests is redirected calling `System.setOut()`.
The output is collected to a file and then this file is included calling `include [verbatim]` Jamal macro into the article.
====}

{@define sampleOutput($X)=[source,text]
----
{#include [verbatim] ../_projects/{ARTICLE}/$X}
----}
