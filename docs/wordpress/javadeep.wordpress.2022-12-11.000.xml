<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2022-12-11 14:50"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Java Deep</title>
<link>https://javax0.wordpress.com</link>
<description>Pure Java, nothing else</description>
<pubDate>Sun, 11 Dec 2022 14:50:19 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://javax0.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>31131067</wp:author_id>
  <wp:author_login>verhas</wp:author_login>
  <wp:author_email>peter@verhas.com</wp:author_email>
  <wp:author_display_name><![CDATA[Peter Verhas]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Peter]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Verhas]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_id>17895174</wp:author_id>
  <wp:author_login>lukaseder</wp:author_login>
  <wp:author_email>lukas.eder@datageekery.com</wp:author_email>
  <wp:author_display_name><![CDATA[lukaseder]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Lukas]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Eder]]></wp:author_last_name>
</wp:author>
<wp:author>
  <wp:author_id>156803035</wp:author_id>
  <wp:author_login>mihalyverhas</wp:author_login>
  <wp:author_email>misi.verhas@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[mihalyverhas]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>780</wp:term_id>
  <wp:category_nicename>development</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[development]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>185108</wp:term_id>
  <wp:category_nicename>expert</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[expert]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>63941</wp:term_id>
  <wp:category_nicename>guest</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[GUEST]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1017</wp:term_id>
  <wp:category_nicename>java</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Java]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>33210</wp:term_id>
  <wp:category_nicename>light</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[light]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>370740</wp:term_id>
  <wp:tag_slug>jamal</wp:tag_slug>
  <wp:tag_name><![CDATA[jamal]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>101728070</wp:term_id>
  <wp:tag_slug>java9</wp:tag_slug>
  <wp:tag_name><![CDATA[java9]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>713857825</wp:term_id>
  <wp:tag_slug>javageci</wp:tag_slug>
  <wp:tag_name><![CDATA[javageci]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>172054</wp:term_id>
  <wp:tag_slug>lambda</wp:tag_slug>
  <wp:tag_name><![CDATA[lambda]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>54025</wp:term_id>
  <wp:tag_slug>regex</wp:tag_slug>
  <wp:tag_name><![CDATA[regex]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Java Deep</title>
		<link>https://javax0.wordpress.com</link>
	</image>
	<item>
  <title><![CDATA[About]]></title>
  <link>https://javax0.wordpress.com/about/</link>
  <pubDate>Tue, 29 Jan 2013 14:12:30 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[javax0 is a technical Java oriented blog. Whenever I find something interesting, in the mood and feel the power to publish it, you will get it here. Publications are usually released on Wednesday 15:00am GMT.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2013-01-29 15:12:30</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:12:30</wp:post_date_gmt>
  <wp:post_modified>2015-01-15 09:08:12</wp:post_modified>
  <wp:post_modified_gmt>2015-01-15 08:08:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>896</wp:comment_id>
    <wp:comment_author><![CDATA[Birke Heeren]]></wp:comment_author>
    <wp:comment_author_email>internet@copepod.de</wp:comment_author_email>
    <wp:comment_author_url>https://java.net/projects/tonion/downloads</wp:comment_author_url>
    <wp:comment_author_IP>87.142.222.4</wp:comment_author_IP>
    <wp:comment_date>2014-07-05 11:22:30</wp:comment_date>
    <wp:comment_date_gmt>2014-07-05 10:22:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Dear Mr. Verhas,

for a Java project with forms and datamasks, I needed a layoutmanager fÃ¼r Swing, that resizes responsively to the space available. The layout was supposed to look neat and the code necessary, too. I wanted to be able to set the minimum and maximum size of each component.

Since I could not find such a layoutmanager, I wrote one: TOnionLayout. This layout consists of two layoutmanagers:
TrainLayout: a row of components from left to right with equal height and individual width.
Totemlayout: a column of components from top to bottom with equal width and individual height.
Both layoutmanagers can be stacked into each other (like the layers of an onion). TOnionLayout can also be placed into a JScrollPane. In case the window is made smaller, the TOnionLayout will get smaller, too, down to its minimum size. Only when space decreases further the scrollbars appear.

For all first inner objects of a TOnionLayout it is possible to set minimum and maximum sizes. Without these the space is spread evenly. It is also possible to mix objects with sizes set and without sizes set.
JButtons should be placed into a JPanel with FlowLayout, and the minimum and maximum sizes should be set on the JPanel.
JTables should be placed into a JPanel with BorderLayout, into the CENTER component. Also the sizes should be set on the JPanel.

The minimum and maximum sizes set in a TOnionLayout only have to fit together approximately. The exact alignment is done by the layout. Errors in sizes, are automaically adjusted. In case a minimum is larger than a maximum, maximum = minimum ist set. If the test classes TrainLayoutTest and TotemLayoutTest are used the errors are displayed on the console.
In case a TOnion layer is sometimes filled and sometimes empty, it is possible to set minimum and maximum sizes on that layer also. These sizes are used only, when the layer is in its empty state.

Coding with TOnionLayout produces neat code that can be easily managed. The layout is therefore fit to be used by Java beginners.

The trick of TOnionLayout is, that even though the layout is done topdown, each layer inquires about the minimum and maximum sizes of all its contents. To get a good performance these sizes are cached. Only when adding or deleting a component the sizes of that layer and all layers outwards are recalculated.

Please feel free to download and test TOnion layout. I appreciate if you write about this layout, for many people to profit from my work.

Best regards,
Birke Heeren]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1404557076]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-05 10:22:33]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1404557076]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404557077.0446369647979736328125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404555751.406569004058837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[2]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11692</wp:comment_id>
    <wp:comment_author><![CDATA[ylilarry]]></wp:comment_author>
    <wp:comment_author_email>ylilarry@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://ylilarry.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>72.141.220.3</wp:comment_author_IP>
    <wp:comment_date>2017-11-06 08:02:19</wp:comment_date>
    <wp:comment_date_gmt>2017-11-06 07:02:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter, I like your blog. Is there any chance you can add a search box to the site? It's a bit hard to navigate. Best wishes!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>107330072</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1509956534]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1509956534]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1509956534.3384039402008056640625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1509951740.328013896942138671875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"ylilarry";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28160</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.228.143</wp:comment_author_IP>
    <wp:comment_date>2019-09-03 16:16:52</wp:comment_date>
    <wp:comment_date_gmt>2019-09-03 15:16:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In the current version of the layout, there is a search box on the right.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11692</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1567523813]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1567523814.022019;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1567523814]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[459020_3300794751447_452461829_o]]></title>
  <link>https://javax0.wordpress.com/459020_3300794751447_452461829_o/</link>
  <pubDate>Tue, 29 Jan 2013 14:16:49 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/01/459020_3300794751447_452461829_o.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2013-01-29 14:16:49</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:16:49</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 14:16:49</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 14:16:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>459020_3300794751447_452461829_o</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/01/459020_3300794751447_452461829_o.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/459020_3300794751447_452461829_o.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:108:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/459020_3300794751447_452461829_o.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/piano-black]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Saving Bytes]]></title>
  <link>https://javax0.wordpress.com/2013/01/30/saving-bytes/</link>
  <pubDate>Wed, 30 Jan 2013 16:30:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=6</guid>
  <description/>
  <content:encoded><![CDATA[In the good old day's we were hacking Z80 machine code and we were writing assembly on paper. I had a laminated card with all the opcodes and I had to look up the codes from the card and write on the paper along the assembly. The calculation of relative jumps was also a good practice, which is nowadays extinct. At third grade I wrote a small booklet on Z80 programming with some sample programs and explanation that was replicated in the official printer factory of the Uni. PDF, eMail? It was late '80. I used <a href="http://en.wikipedia.org/wiki/Tasword">Tasword</a>. Can any of you recall?

Those days we were competing on who can write the shorter program for a given problem. There were many tricks that we could use to save up bytes. We created code that used the byte offset of the jump instruction as an op code depending on where the program was coming from and the decimal BCD correction instructions in totally different way they were supposed to be used. Good old days.

These days we do not need to save up bytes and I am happy about that. We can focus on problems that make more sense and higher level. These low level issues are to be solved by compilers, loaders and after all we have plenty of memory these days. My mac has 8GB memory, which is 175000 times more than the memory than the ZX Spectrum had. If we would line up that many Spectrums side by side on the road it would make 61km, that is 38 miles. And the compilers and optimizers also know this and they are not keen on spending much CPU time to find some clever way to compress the program. So good so far. Usually.

Some days ago on a forum I was discussing with some guy about clean code practice and I said that any method argument variable in Java should have been final. And it is a good practice to write the final keyword in front of each argument variable and this is a language design flaw that these variables are not final by definition. The reply was that some of the variables are altered and in this case a new local variable is to be used. Waste of memory. Well, yes, and no. The JIT compiler in HotSpot JVM will optimize that. "Too late" the answer came. By the time the JIT optimizes the JVM code was already loaded into the limited memory phone. And javac does not optimize too much: should not, that would be premature optimization.

So we are saving bytes again? Unfortunately. The compiler and the other tools are designed for the major use. Niche use should use <a href="http://www.yworks.com/en/products_yguard_about.html">niche tools</a> if exist. Some do. But then phones also tend to have huge enough memory to accommodate our code. Then the vacuum cleaners will come, and the light switches. But at some time all memory shortage will disappear, no? Well, I have to say no. Memory, perhaps. Then comes the bandwidth shortage. You will want to download some program to your personal space-ship that is 2h light speed away close to Jupiter. Hand shaking, error corrections, lag... bytes count again. Then this is solved later and something new comes, perhaps some swarm effect in hyperspace that we can not even imagine today.

What is the morale? No matter what happens old technologies and tricks come back from time to time. They will perhaps have slightly different format, but the root problem is always the same: do not waste resources. Save the trees, eat ... whatever.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2013-01-30 17:30:17</wp:post_date>
  <wp:post_date_gmt>2013-01-30 16:30:17</wp:post_date_gmt>
  <wp:post_modified>2013-08-13 12:57:59</wp:post_modified>
  <wp:post_modified_gmt>2013-08-13 11:57:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>saving-bytes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1</wp:comment_id>
    <wp:comment_author><![CDATA[SpÃ³roljunk a bÃ¡jtokon | tifyty]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tifyty.wordpress.com/2013/01/30/sporoljunk-a-bajtokon/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.7.44</wp:comment_author_IP>
    <wp:comment_date>2013-01-30 17:36:53</wp:comment_date>
    <wp:comment_date_gmt>2013-01-30 16:36:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] erÅforrÃ¡sokat pazarolni. Ãs ez nem csak a programozÃ¡sra igaz. VÃ©dd a fÃ¡kat, egyÃ©l hÃ³dot! (angolul ez egy kicsit pikÃ¡nsabban [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359563815.1647260189056396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1359563848]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359563848.05550098419189453125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-01-30 16:36:53]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[No loop, do break]]></title>
  <link>https://javax0.wordpress.com/2013/01/30/no-loop-do-break/</link>
  <pubDate>Wed, 30 Jan 2013 16:42:46 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=8</guid>
  <description/>
  <content:encoded><![CDATA[<img src="http://tifyty.files.wordpress.com/2013/01/ax.png?w=300" alt="ax" width="150" height="107" class="alignleft size-medium wp-image-1115" />Reading the standard of the Java language I found something interesting. Something that implies that <tt>break</tt> can be used without a loop, and not only inside a loop but inside any block. And it does:
<div style="display:inline-block;height:60px;width:1px;"></div>
[sourcecode language="java" wraplines="false"]
package wierdo;

public class Wierdo {
	public static void main(String[] args) {
		label: {
			if (args.length == 0)
				break label;
			System.out.println(&quot;We happy, we have arguments!&quot;);
		}
		System.out.println(&quot;Hello Wierldo!&quot;);
	}
}
[/sourcecode]

Weird, is it? You can read some more <a href="https://www.google.hu/search?q=java+break+block">on this</a>.

Practical consequences? If you are an architect and you work with subordinates: keep an axe by your side to chop off hands writing those in prod code. If you are coders: mind the architect approaching with the axe. (Just kidding...)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2013-01-30 17:42:46</wp:post_date>
  <wp:post_date_gmt>2013-01-30 16:42:46</wp:post_date_gmt>
  <wp:post_modified>2013-01-30 17:43:37</wp:post_modified>
  <wp:post_modified_gmt>2013-01-30 16:43:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>no-loop-do-break</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6d64de9ee9ff232f49a363fc52a0592f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_81edcdd0d7154e750be15d780d18817b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ae36a6cacec264a062fcc46157b0ac3f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d039aa4a22d1be3c1cae60ffc09c5ea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1ebb3601e8610900bbd8606bba601ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.227.46.131</wp:comment_author_IP>
    <wp:comment_date>2013-04-07 08:17:14</wp:comment_date>
    <wp:comment_date_gmt>2013-04-07 07:17:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yeah. That twisted "goto" emulation has proven handy millions of times in my code ;-)
You can also "jump backwards" using "continue" to leverage the byte-code "goto" instruction:
http://stackoverflow.com/a/6373262/521799]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1365319034]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365319035.1852779388427734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-04-07 07:17:14]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Problem with Java Security]]></title>
  <link>https://javax0.wordpress.com/2013/01/29/problem-with-java-security/</link>
  <pubDate>Tue, 29 Jan 2013 14:24:32 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=9</guid>
  <description/>
  <content:encoded><![CDATA[<em>
This article is about my thoughts about the currently emerged security issue related to Java. Not too technical and only general thoughts.
</em>

Recently a new vulnerability of the Java runtime emerged. You can have a look at http://nakedsecurity.sophos.com/2013/01/10/protect-yourself-against-latest-java-zero-day-vulnerability-now-maljavajar-b/ and http://nakedsecurity.sophos.com/2013/01/11/apple-and-mozilla-just-say-no-to-java/ and also http://www.pcworld.com/article/2025160/its-time-to-rewrite-java-from-scratch-security-expert-says.html

The latest article suggest not less than rewriting the security part of the Java system. The title exaggerates to rewriting Java as a whole. And this is one of the major, though not the largest problem with Java security that I will discuss in this article: journalism. But we will see that later. The first question I want to talk about is why this issue came up now and not earlier. Similar vulnerabilities were discovered in Java last year and that time I could not see articles stating that Java generally is insecure.

You can think of this process of awakening like the two stages of incident management and problem management that may sound familiar if you know ITIL. When the problem first appeared it was fixed. That is the most important thing because many businesses depend on Java and if Java turns to be unusable as a whole that costs a lot of money. Really a lot. Fortunately there is marginal probability to find Java insecure without reasonable way to fix the issue. Even if the issue is fixed the vulnerability costs us money. There can be security breaches during the period between the vulnerability discovery and the time the fix is applied. Applying the fix is also cost for many businesses and institutions, and those are not happy spending money for something that does not lead to higher income. Thus we raise the question: "this happened this time, but can we trust your technology that it will not happen in the future?". To find the answer is problem management.

Institutions like men working in support are lazy. After all we are programmers down in our heart and programmers are lazy. Actually programmers have to be lazy to be good in their job. Because of that support people say "this was a one time problem, we fixed it, but it is not likely that there are more such bugs in the system". Wrong. Totally wrong this time and, my personal opinion is that such answer and attitude is totally wrong at any time. If you find a cockroach under your bed, it is a vain hope that it was a lonely warrior. There will be more and you better call bug hunters. As for Java it became obvious this year on January 11, 2013. A similar bug to the one appeared a year ago emerged again. Dear ORACLE: what are you doing with it now? What is your answer to the "problem management" question. What will you do so that it does not happen any more time? We wait for the answer not being ready from the vendor side. In the meantime we may speculate what the answer can be. There are technical aspects to anticipate the answer as well as industry answers.

In this article I would like to express my thoughts on the topic. Before getting into the details I want to state that I am not a security expert. Even not being one you can not avoid dealing with security issues if you work for the IT industry for more than 20 years, which I do.
<h3>problem #1</h3>
<h1>Nothing is prohibited...</h1>
The first and most technical issue with Java considering security that the language and the runtime are rather permissive. When you start a Java application with some security context (discussed a bit later) you can do anything unless the security context forbids that. This is not a secure approach. The secure approach is to forbid everything that is not allowed. Java is just the other way. Why?

This is because secure systems are hard to use. Their use costs a lot because of the hardness of the use. To set the permissions properly so that our business functions smoothly you have to discover your business processes and set the permissions to that everybody can do what it needs to do to operate the business. Having a more exhaustive map of the business processes costs way more than the permissive approach. If you trust the players at your company you can use the permissive approach. There are some things that are definitely forbidden: for example your secretary can not give herself raise. On the other hand she can occasionally handle parcels arriving to the company when you are away. If the company controls are permissible there is no need to say that: it is common sense. When the players can not be trusted you need to be restrictive. You can replace a secretary you do not trust but you can not replace the Internet users. They, or rather we are the people of the earth with our human nature. Crime, fighting, war, on-line felony are inherent part of human nature. Live with it!

This control issue goes down to every aspect of your company from key distribution (I mean keys made of metal to doors) down to software, even Java. Java is permissive.
<h3>problem #2</h3>
<h1>Way too complex</h1>
When you start a Java application the security context that is meant to control the access to various resources is null. This is not the case for Java Applets, but I will talk about that later. It is possible to set the security context programmatically and most application servers do that. Opps... sorry. They actually don't. They can be configured to do that. By default they do not. Why? Because it would be so difficult to use them if they forced the administrators to configure the security that the majority of their user base would be nonexistent. Security is complex. This is the unfortunate fact but it is not because of Java. It is a general fact. I have never seen any production installation of Tomcat configured with non null security context.

For applets this is not the case. Applets run in a sand box of the Internet browser and the Java programs are allowed to mangle the sand only in the box. The sand is a metaphor an in this case means files to be read, written, executed, ports to listen on, memory objects out of the process space of the applet thread and other operating system resources. The Java system, more specifically the JVM that executes the code uses these resources on behalf of the Java programs and it does not check security (I am not absolutely sure about that, but the depth I dig into showed that). Java code is supposed to be blocked by the JDK routines to reach that level. And there are many functions that have to be controlled by security. It is like a house that has many entrances. One for the house master, one for the kids, one for the maid and there is even some hole on the wall for the mice. Each one except the forgotten ones has guards. Some are good, some have some faults as we see recently. One is fixed does not guarantee there isn't another somewhere else. Even these doors are connected with a complex maze of tunnels. Way too complex.

If you want security controlled you need something as simple as possible. The more complex the more bugs there can be. Have only one door and simple rules.
<h2>Forget Applets</h2>
The easiest solution to this problem on the problem management level is what Apple and Firefox did. Switch off Java for the browsers. Applets are Java programs that intended to give client side functionality to browsers. The idea was perhaps too early, or just became the victim of the Sun vs. MS war. It alone would be a long post to discuss the reasons. Whatever: Java applets are rarely used and are generally considered legacy. Most of the functionality that was meant to be solved using applets are solved now by JavaScript that developed enormously during the recent years. Even though applets are still around and the browsers support applets. There are a very few applications that need them. I personally know two. One is a home banking application. Terminate your account and contract a different bank! The other one I know and recently faces is Atlassian JIRA that uses applet to ease the upload of screen shots. You can upload the JPG file instead. No problem.

Thus my suggestion to solve the issue on the problem management level is to forget applets once and for all. At least that is the way we are heading.
<h3>problem #3</h3>
<h1>Scripting languages on the road</h1>
Would forgetting applets solve the issue? For the current issue yes, but again: this is incident management. From a different angle the issue remains. Java is not secured inside. If we want to use Java as language and runtime environment in which some of the players are not trusted then the architecture is not appropriate. I do not see such use in addition to applets at the moment but with the dawn of scripting languages and their viral spread on JVM raises similar issue again:

Soon we will want to run scripted programs inside the JVM. These programs will source from untrusted players who extend the functionality of the program. This is as blog engine's HTML pages were extended by the HTML text of the blogger and the commenter. Does WordPress trust me that much? I doubt. Thus they make counter measures so that I can not inject XSS, click jacking and other naughty things (or can I?). We will create/use applications that allow the users to write simple scripts to perform operations that are tailor made and that are not readily available from top of the head of the application designers.

This situation is similar to the applet. In case of the applet the outside world has to be protected from untrusted code written in Java. In case of scripts the outside world including the JVM and Java code running in the application has to be protected from the scripting solution. Many of the scripting implementation do not go that way. Programs written in JRuby, Scala, Jython and so on are compiled to JVM byte code and run just as they were written in Java. The Java architecture however is far from being ready to protect one piece of Java code from the other running in the same JVM. There is no internal access control in the JVM.

We have a long way to go.
<h3>problem #4</h3>
<h1>Journalism</h1>
The aim of journalists is to gather as many readers as possible. Even I, writing this article, do it to have many readers. Not for money, though. To have readers the article has to be interesting and appealing. If the truth is not appealing enough a bit of color, slipping a bit the facts does not harm. Or does it?

Yes, it does, especially in the arena of security. People like to feel threatened. That is why horror movies and thrillers exist. That is the reason most of the people read security related articles. It helps the soul reassuring ourselves. The side effect is that some of the people not only shivers reading the articles but partially understands some of the statements. Not all, only some of them. And most of the people are not knowledgeable enough to judge the statements. If there are some bend in the facts, some statements slip then the perception may diverge from reality 180 degree. Just going the other way around.

The articles say that Apple and Firefox "say no to Java". Actually they say no to Java applets and Java application started right from the web. Apple actually does that for all applications anyway unless you configure security setting to differ from default.

The title of the other article says: <em>"It's time to rewrite Java from scratch, security expert says"</em>. If you read the article it talks about the security part of Java.

The casual reader from these will deduct that Java is wrong. That is not the case and if you believe something that is different from the fact you get poorer. You make decisions whether you want to use Java in your company or become a Microsoft shop based on your knowledge. Thus those exaggerations are good to the competitors only. Not for the users of the technology and at the end of the line the customers of the users of the technology.
<h1>Summary</h1>
Consider these as random thoughts only. I wanted to be as precise as I could, however security and Java security is not my major. These are just some spots on the whole issue and many areas remain darkened. Feel free to discuss what you agree or see my approach wrong.

My personal area that is a bit related to this area is ScriptBasic for Java, which is a scripting language NOT compiled to Java byte code, but rather interpreted by Java code (thus it actually is slower) and can be fully controlled by the embedding application what scripts can do. It was designed to provide a mean to application programmers to provide a tool to users to extend applications embedding the interpreter in a way that can not harm the application.

Enough of me. Now: what are your thoughts?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2013-01-29 14:24:32</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:24:32</wp:post_date_gmt>
  <wp:post_modified>2015-07-17 13:08:18</wp:post_modified>
  <wp:post_modified_gmt>2015-07-17 12:08:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>problem-with-java-security</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/H5pxG1cFkr9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12815971037]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6027780668904267776&type=U&a=IeV-]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206047710724557";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/622015004552728577";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8352</wp:comment_id>
    <wp:comment_author><![CDATA[VerhÃ¡s IstvÃ¡n]]></wp:comment_author>
    <wp:comment_author_email>istvan@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.facebook.com/100001049515746</wp:comment_author_url>
    <wp:comment_author_IP>92.249.176.130</wp:comment_author_IP>
    <wp:comment_date>2015-07-17 15:14:55</wp:comment_date>
    <wp:comment_date_gmt>2015-07-17 14:14:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You use the word "Java" sometimes confusing. Actually Java is a set of specifications that can be rewritten but i have no knowledge that the Java specifications have any security issue. As such there is no need to rewrite the Java specifications. The JVM is one part of the Java specifications and it has many implementations. One of the implementations is the Sun/Oracle one that has the above mentioned security issue. In theory it is also possible to change the vendor of the JVM and not just waiting for the answer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437142496.2694339752197265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1437142496]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1437142496]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/100001049515746/picture?type=large&_md5=af682f890efef778a035db4e0e4668ec]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[100001049515746]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8812</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Jacob]]></wp:comment_author>
    <wp:comment_author_email>jacob@j-e-b.net</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+MichaelJacob</wp:comment_author_url>
    <wp:comment_author_IP>109.193.251.112</wp:comment_author_IP>
    <wp:comment_date>2015-09-24 01:48:11</wp:comment_date>
    <wp:comment_date_gmt>2015-09-24 00:48:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My thoughts? Simple: "(1) Always expect any program written in a fully speced language to be able to do everything you can do. Period." and then: "(2) Be prepared for any program that handles untrusted data to have bugs that allow the untrusted data to execute code in the program's context." and to be complete: "(3) #2 also applies to the clause 'you can do' in #1"

When I look at security context in application servers, I apply #1 and "if you cannot trust an application that handles you business transactions not to do bad things to the system it runs on, why do you trust it to process your business transaction correctly?" in combination with #2 and "if someone breaks in here, they will have access to all this application's data and everything running on the same account/computer/database as it. So don't put anything else there."

In the end it comes to "data that is so valuable that you cannot survive it being stolen and network cards don't belong on/in the same computer". (Same for "backups"/"destroyed")]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-LaQFTW84P4U/AAAAAAAAAAI/AAAAAAAAAjQ/dp6zR-pcezI/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[117273292432791213925]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1443055693]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1443055693]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443055693.3780269622802734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How to mock the System.class]]></title>
  <link>https://javax0.wordpress.com/2013/01/29/how-to-mock-the-system-class/</link>
  <pubDate>Tue, 29 Jan 2013 14:56:55 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=12</guid>
  <description/>
  <content:encoded><![CDATA[In this article I will show you a way to test code that uses static methods from a final class and how to mock that class. The example to mock is the <tt>System</tt> class. (We are not playing in the sand, we are real warriors.) We will use mockito, powermock, maven, eclipse and lots of brain of yours to follow. (You are also a java warrior after all!)
<p>
<h1>The Problem</h1>
When you unit test your application you usually use some mocking framework. Some of the most known are EasyMock and Mockito. There are others as well but for now I am not going to talk about these. They are light weight tools when you are really heavily into testing. Especially when you are creating test code that was created without caring about testability. Consider for example the following code fragment:

[sourcecode language="java" wraplines="false"]
    public String getConfigValue(final String key) {
        String configValue = null;
        final String envKey = &quot;sb4j.&quot; + key;
        if (configProperties != null &amp;&amp; configProperties.containsKey(key)) {
            configValue = configProperties.getProperty(key);
        }
        String sysValue = null;
        if ((sysValue = System.getenv(envKey)) != null) {
            configValue = sysValue;
        }
        if ((sysValue = System.getProperty(envKey)) != null) {
            configValue = sysValue;
        }
        return configValue;
    }
[/sourcecode]

A very simple code that tries to look up some configuration key in a <tt>Properties</tt> type variable (not defined here in the fragment, it is defined as a field in the class) but the configuration value for a certain key can be redefined in the environment variables and in the system properties (those defined with the java option <tt>-D</tt> on the command line). The strongest is the system property. If that is defined everything else is irrelevant. The second strongest is the environment variable, and the final choice is the configuration properties variable that are read from a <tt>.properties</tt> file (reading also not listed here to save space).
<p>
<small>You may notice that the system property and the environment variable names are prefixed using the string "sb4j." You can guess that this code fragment is from ScriptBasic for Java while it was under development.</small>
<p>
The code is simple and seems to be OK, but trust me (not because I am engineer [as a matter of fact I am], but because of my experience): no code can be so simple that it can not contain a bug. I have learnt it modifying a method once, simpler than this above and since I had ten more minutes before heading towards home not to miss my movie for the evening I wrote a unit test. The movie was long time over when I finished with the fifth unit test that I created that night: every new bug you find deserves its own unit test.
<p>
We have to write unit test for the code. We need to mock the external classes that are used by the code. Some of them at least. We have the classes <tt>java.util.Properties</tt>, <tt>java.lang.String</tt> and <tt>java.lang.System</tt>. Obviously we need not mock <tt>String</tt>. Even though this is a class, it is almost like a primitive type. Similarly we need not mock <tt>Properties</tt>. Whatever the mock could provide us a stub instance of the <tt>Properties</tt> class can provide. We will not be able to check that the properties were really read using <tt>containsKey</tt> and <tt>getProperty</tt> method calls but if we get back the value we inserted into the stub properties variable we should be ok.
<p>
What we need to mock however is <tt>System</tt> and we have to mock the static methods <tt>getenv</tt> and <tt>getProperty</tt>.
<p>
<h1>The Solution</h1>
To do that we have to use Powermock. This is an extension to EasyMock and to Mockito (my fav is the second over the first one) and gives methods that let us mock static methods. To do so it needs to craft some hefty things into the Java byte code that I would not ever like to have in a production code except for testing and mocking. I am not knowledgeable how power mock really works, but I have the feeling that they are poking some areas that are beyond the official Java contract. I never mind this at this moment. Lets go and prepare the test.
<p>
To do so we need a unit test and we have to tell the test framework that we use Powermock so that a modified runner provided by Powermock is used instead of the standard JUnit runner. This is very simple to tell it actually, all we have to do is to annotate the class using the annotations:
[sourcecode language="java" wraplines="false"]
@RunWith(PowerMockRunner.class)
@PrepareForTest({ System.class })
public class TestBasicConfiguration {
[/sourcecode]
<tt>RunWith</tt> is <tt>org.junit.runner.RunWith</tt> and it is processed by the JUnit framework. <tt>PrepareForTest</tt> is <tt>org.powermock.core.classloader.annotations.PrepareForTest</tt> and informs PowerMock that it has to prepare the list of classes (in our case a single class, called <tt>System</tt>) to be mocked.
<p>
For your reference I include here the full source code of the test with all test methods as they were in the test class:
[sourcecode language="java" wraplines="false" collapse="true"]
package com.scriptbasic.configuration;

import java.util.Properties;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.bdd.Business;
import com.scriptbasic.interfaces.Configuration;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ System.class })
public class TestBasicConfiguration {

    private static final Configuration config = new BasicConfiguration();
    private static final String key = &quot;key&quot;;
    private static final String value = &quot;value&quot;;
    private static final String badValue = &quot;badValue&quot;;

    @Test
    public void testGetConfigValueWhenConfigKeyExistsShallReturnValue() {
        new Business() {
            private String actual;
            private Properties props;

            @Override
            public void given() {
                props = Mockito.mock(Properties.class);
                config.setConfigProperties(props);
                Mockito.when(props.containsKey(key)).thenReturn(true);
                Mockito.when(props.getProperty(key)).thenReturn(value);
            }

            @Override
            public void when() {
                actual = config.getConfigValue(key);
            }

            @Override
            public void then() {
                Mockito.verify(props).containsKey(key);
                Mockito.verify(props).getProperty(key);
                Assert.assertEquals(value, actual);
            }

        }.execute();
    }

    @Test
    public void testGetConfigValueWhenEnvironmentKeyExist() {
        String actual;
        Properties props;
        // GIVEN
        props = PowerMockito.mock(Properties.class);
        PowerMockito.mockStatic(System.class);
        config.setConfigProperties(props);
        Mockito.when(props.containsKey(key)).thenReturn(true);
        Mockito.when(props.getProperty(key)).thenReturn(badValue);
        Mockito.when(System.getenv(&quot;sb4j.&quot; + key)).thenReturn(value);
        // WHEN
        actual = config.getConfigValue(key);
        // THEN
        Mockito.verify(props).containsKey(key);
        Mockito.verify(props).getProperty(key);
        PowerMockito.verifyStatic();
        System.getenv(&quot;sb4j.&quot; + key);
        Assert.assertEquals(value, actual);
    }

    @Test
    public void testGetConfigValueWhenEnvironmentKeyExists() {
        new Business() {
            private String actual;
            private Properties props;

            @Override
            public void given() {
                props = PowerMockito.mock(Properties.class);
                PowerMockito.mockStatic(System.class);
                config.setConfigProperties(props);
                Mockito.when(props.containsKey(key)).thenReturn(true);
                Mockito.when(props.getProperty(key)).thenReturn(badValue);
                Mockito.when(System.getenv(&quot;sb4j.&quot; + key)).thenReturn(value);
            }

            @Override
            public void when() {
                actual = config.getConfigValue(key);
            }

            @Override
            public void then() {
                Mockito.verify(props).containsKey(key);
                Mockito.verify(props).getProperty(key);
                PowerMockito.verifyStatic();
                System.getenv(&quot;sb4j.&quot; + key);
                Assert.assertEquals(value, actual);
            }

        }.execute();
    }

    @Test
    public void testGetConfigValueWhenSystemPropertyExists(){
        new Business() {
            private String actual;
            private Properties props;
            
            @Override
            public void given() {
                props = PowerMockito.mock(Properties.class);
                PowerMockito.mockStatic(System.class);
                config.setConfigProperties(props);
                Mockito.when(props.containsKey(key)).thenReturn(true);
                Mockito.when(props.getProperty(key)).thenReturn(badValue);
                Mockito.when(System.getenv(&quot;sb4j.&quot; + key)).thenReturn(badValue);
                Mockito.when(System.getProperty(&quot;sb4j.&quot; + key)).thenReturn(value);
            }
            
            @Override
            public void when() {
                actual = config.getConfigValue(key);
            }
            
            @Override
            public void then() {
                Mockito.verify(props).containsKey(key);
                Mockito.verify(props).getProperty(key);
                PowerMockito.verifyStatic();
                System.getenv(&quot;sb4j.&quot; + key);
                PowerMockito.verifyStatic();
                System.getProperty(&quot;sb4j.&quot; + key);
                Assert.assertEquals(value, actual);
            }
        }.execute();
    }
}
[/sourcecode]
<small>For demonstration purposes some comments were deleted, but other than those, the code above is complete.</small>
PowerMock is powerful and makes life easy when testing static method, but not that powerful. If we execute maven, we get the following error:
[sourcecode language="text" wraplines="false" light="true"]
Results :

Failed tests: 
  testGetConfigValueWhenEnvironmentKeyExist(com.scriptbasic.configuration.TestBasicConfiguration): 

Tests in error: 
  testGetConfigValueWhenEnvironmentKeyExists(com.scriptbasic.configuration.TestBasicConfiguration): 
  testGetConfigValueWhenSystemPropertyExists(com.scriptbasic.configuration.TestBasicConfiguration): 

Tests run: 56, Failures: 1, Errors: 2, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 20.666s
[/sourcecode]
What is the problem? Let us have a look at the surefire reports file:

[sourcecode language="text" wraplines="false" highlight="20,21,22"]
$ cat target/surefire-reports/com.scriptbasic.configuration.TestBasicConfiguration.txt 
-------------------------------------------------------------------------------
Test set: com.scriptbasic.configuration.TestBasicConfiguration
-------------------------------------------------------------------------------
Tests run: 4, Failures: 1, Errors: 2, Skipped: 0, Time elapsed: 3.455 sec &lt;&lt;&lt; FAILURE!
testGetConfigValueWhenEnvironmentKeyExist(com.scriptbasic.configuration.TestBasicConfiguration)  Time elapsed: 0.83 sec  &lt;&lt;&lt; FAILURE!
Wanted but not invoked java.lang.System.getenv(&quot;sb4j.key&quot;);
Actually, there were zero interactions with this mock.
	at org.powermock.api.mockito.internal.invocationcontrol.MockitoMethodInvocationControl.performIntercept(MockitoMethodInvocationControl.java:292)
	at org.powermock.api.mockito.internal.invocationcontrol.MockitoMethodInvocationControl.invoke(MockitoMethodInvocationControl.java:194)
	...

testGetConfigValueWhenEnvironmentKeyExists(com.scriptbasic.configuration.TestBasicConfiguration)  Time elapsed: 0.083 sec  &lt;&lt;&lt; ERROR!
org.mockito.exceptions.misusing.MissingMethodInvocationException: 
when() requires an argument which has to be 'a method call on a mock'.
For example:
    when(mock.getArticles()).thenReturn(articles);

Also, this error might show up because:
1. you stub either of: final/private/equals()/hashCode() methods.
   Those methods *cannot* be stubbed/verified.
2. inside when() you don't call method on mock but on some other object.

	at com.scriptbasic.configuration.TestBasicConfiguration$2.given(TestBasicConfiguration.java:109)
	at com.bdd.Business.execute(Business.java:17)
[/sourcecode]
You can see on the highlighted code the relevant error messages. <tt>System</tt> was NOT mocked, and not because it is a system class but rather because this is final. Looking at the code in RT you can see that it really is, just as you can also have a look at the documentation: http://docs.oracle.com/javase/7/docs/api/java/lang/System.html
<p>
We are doomed? We can not test this code?
<p>
The good approach, generally is, to move all these external dependencies to a utility class, having static methods proxying the call to the <tt>System</tt> class. In that case we can mock the utility class and life is beautiful again. To be honest, I could do that in the example case. The developed code of sb4j was in my hands and I could modify it any way I wanted. But the idea to overcome this issue just did not leave my mind. There is a problem that I can have a workaround for and not a solution. The solution is to test the code as it is now!
<p>
If I only had a <tt>System</tt> class that was not final. Hey!! Wait!! I can have a class named <tt>System</tt> that is not final:
[sourcecode language="java" wraplines="false"]
public class System {
    public static String getenv(String key) {
        return java.lang.System.getenv(key);
    }

    public static String getProperty(String key) {
        return java.lang.System.getProperty(key);
    }
}
[/sourcecode]
If I place this class in the same package as the tested code then the compiler will compile the tested class again this <tt>System</tt> stub instead of the <tt>java.lang.System</tt> and this class can be mocked. But this alter the code base. Does not change the code itself but the class file at the end calls this stub, which calls system and this affects performance. After all this is all about reading configuration, so performance should not be a big issue, but even though: I just do not like it. And if the production code contains the stub <tt>System</tt> then it also needs testing even if it as simple as cold water. And to test it I have to mock <tt>java.lang.System</tt> and the circle of hell just closed.
<p>
What if this code would only be compiled against the code for the testing and not for the compilation of the production code? In that case I test the original code without modification and the production <tt>.class</tt> is not influenced by the test needs. Even more: if I use my stub <tt>System</tt> class only for testing, it does not need to proxy the methods <tt>getenv</tt> and <tt>getProperty</tt> to <tt>java.lang.System</tt> since it will never been used in production code. And we do not need testing it since this is not production code.
<p>
Interesting is it? Let's give it a try. Let me create a class under <tt>src/test/java</tt> in the same class as the above code containing a simpler version of the above class:
[sourcecode language="java" wraplines="false"]
public class System {
    public static String getenv(String key) {
        return null;
    }

    public static String getProperty(String key) {
        return null;
    }
}
[/sourcecode]
And executing the code in Eclipse: tadam! It works. Problem solved.
<p>
Almost. Running <tt>mvn clean install</tt> from the command line I get exactly the same error as the above. The version of the class used for testing is still compiled against the <tt>java.lang.System</tt>. On second thought this is fine. When we compile using maven we get one set of classes from our java sources. If you look at the maven log on the screen, you see:

[sourcecode language="text" wraplines="false" light="true"]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ jscriptbasic ---
[INFO] Compiling 243 source files to ... target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ jscriptbasic ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 31 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ jscriptbasic ---
[INFO] Compiling 38 source files to ... target/test-classes
[/sourcecode]
that the test compilation compiles only the test classes, which are few in this case compared to the production classes.
<small>Note that I deleted the full path from the printout.</small>
When the tests run the directories <tt>target/test-classes</tt> and <tt>targed/classes</tt> are on the classpath in this order. It means that test classes are found first and production classes are found the second. If I want to have a version of the tested class for testing then I have to compile it twice: once for the production code and once for the test. There will be two versions of the class on the classpath: one in the <tt>target/test-classes</tt> directory and one in the <tt>targed/classes</tt> directory, and the test framework will perform the tests on the first one, "linked" against the stub <tt>System</tt>.
<p>
The only issue that remained is how to tell maven to compile the source code again for testing. There is no easy solution as maven, by default is handling sources from a single directory. I also do not want to have the test classes in the production JAR file and even more I do not want to have the production code compiled against my stub.
<p>
The help comes with the maven helper plugin that can be used to configure extra directories for the test compilation. Actually this is a bit of hack: we tell the compiler that there are "generated" sources (ha ha :-D ) for the test:

[sourcecode language="xml" wraplines="false"]
&lt;plugin&gt;
	&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	&lt;artifactId&gt;build-helper-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;1.4&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;add-test-source&lt;/id&gt;
			&lt;phase&gt;generate-sources&lt;/phase&gt;
			&lt;goals&gt;
				&lt;goal&gt;add-test-source&lt;/goal&gt;
			&lt;/goals&gt;
			&lt;configuration&gt;
				&lt;sources&gt;
					&lt;source&gt;${basedir}/src/main&lt;/source&gt;
				&lt;/sources&gt;
			&lt;/configuration&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;
[/sourcecode]
And finally we are there. What we gained is that 
<ul>
<li> we tested the source code
<li> we did mock the System.class
<li> there is no production code left untested
</ul>

The drawbacks are

<ul>
<li> we tested the code, but a different compilation, not the same <tt>.class</tt>
<li> all production classes are compiled twice
</ul>

<h1>The Conclusion</h1>
There was a code that used System static methods directly and needed testing. Usually those dependencies should be "moved far away" from the code and the code should be crafted bearing in mind the testability. I did not discuss how to make the code testable. I only focused on the technical issue: how to test the given class without modifying the source code.
<p>
What we test actually is the source code. Usually we do not make any distinction between testing the source code or testing the compiled class file. In this case there is difference and the approach found does test the source code compiled to a test class file. Does it matter?
<p>
When we execute unit tests we use mocks. The test class uses a to-be-mocked stub implementation of the class that we need to mock instead of the original. If we could mock the original the test would execute exactly the same way. For this reason I see no real risk in this approach. We never measure what we are interested in. In this case, how the code behaves in operation. You can not test that. Not only in practice, but also theory supports that: you can not tell if SchrÃ¶dinger's cat is dead or alive. Instead we measure something that is close to the thing we really are interested in. In this case we test the compiled code in a test environment. Now using this approach we test the source code compiled to a test class in a test environment. We moved a bit from the usual measuring point, however I believe that the move was tangential, and the distance did not change.
<p>
My final note below this article: if you need to mock static methods, and especially methods from the system class: start to consider refactoring the code.
<p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2013-01-29 14:56:55</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:56:55</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 14:56:55</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 14:56:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-mock-the-system-class</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46a90dd0f0efbb9c76c687a9b7a4cc64</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_afd96ccacf310e6c3613455f09b39a2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ff7c9e09f4fda3257da699d97cda3e7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_608f8231308753a42102d46f6c4ca6fd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad810f11f9ed11b957431671e2c2a538</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ab5a036af287374383b2d2a6107e6d70</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2ff90e8571f82d611e90cf365e60b7ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_247018614ab348adb59329ac1d1ec7ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b148327e18916fa1dd6f8463e9eb0db7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ece22794db35e6d5e5b17531e09823a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05904143ba76351c6aaddcaececb31cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c982bfcb6d617d9cc1b48219d67c6cff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_349baba16211236df1651d55abefb20d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d2876d1da82705e1b52c875b53cc37c0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89f2d0605ea89ad8900bbfaac9d62e57</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_011d64f60092dd8b7ffb4f18e5d97842</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fdef7b3762435d5c17aff1622eeceae4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dd13000661270e13a60e2b863c11a1a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dff9df4c1481807abf460672d2ae0807</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dd6da8160b24f72b86d7085acaa6ee0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_960254507d678ca3be40f0afa09d6225</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_acb1ea8214438d63d5055ac21ba0abd9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd74a8d88bbd24a147ec91e60567f624</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_612c2ad78604291c4f8163487ff4117f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de0bf263845d5ed3cf5a7ed043263121</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ea945e9a379d8667394b97e85ae05e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e6e108374df557298098b4e5a8fccdd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8816a0cb6efb53d975ea6da92cf32337</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e00b916015f565a91cc7a0eb1ab2a6e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15f0383e545c9a8bfb4e3a17d9fd3e48</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1de532d30d93a62bf0472d8fdd12bdbf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddb510b5fe421101cb4dc3061603ec0e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c6113893f73cee6d85f9a64851b422dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98d39fbecddbce0667662a68a2da8f0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7a761a70607d9a6ffbf9ca3a71cfe02</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eb32b140c88365d6251f3fb155934023</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa983721cbe16966a909bddb3510b46d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cbfd7a443d395619af691bd81fd4b8ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ecf2ad916ff40bd25b51ec873844955</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc62d5709871d60a517a513ee233f754</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_82ea9b06f9ea0022d68c21287ec3ae98</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2bc63c84e5dd4852019bdd5d985041d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b90c0e55f968457f7d741e36e01719e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3a0295b5770ffeb6ff3098763f5fb9a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_634c978692a8ce6b669b858a4a89b266</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7ab033b99be50a54e2ebaf7398967ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ca70e8f833fcd4df09b9e33f1358f41c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53603c147a61aa85bc8e6ab1c6655f19</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_35d323ef4021aaee91ac3a618afef3e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_757a240f7aae4124efe816f749b6796e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_35da937e8c3e352856ceafc8d1d173a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b08287ff823d76cb45d7ab089e1754d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6aabb60fcee94de1150fa1762252f133</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff5bd26ce5bef5087973699a27467869</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_035ea4f93e467f1d198e84b8d4f10f70</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ac853d1a6fc5df143fcd811664fc2eb3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f647ba25ccb73a51d0e1c789d0721cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_58892935753a12bac9345a1407d0e2a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19a6025745c44fa12e81e30382111cef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98d4ac1b4bc156d74ffd3e80bc83e1c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_96ad9fc4bc6861d9d8e593ddac1fc64a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d59b0d15f1266cdbd13cf54509a5573e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff52183e1903b5200e79cf7937209987</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c8432986fe7842ce6bfd8dc12f6012f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_58fb283cac6685ad40531fd0ab860e1a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1707374ded24b47463115be5daa690d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_795f82c15ee514b59dd752d11e586038</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8cf9d1aead00e47a70e50a817d5060f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e775d7b18a1e6fd4df8595657bc64961</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cabe02507d37893cf512f8e26016bbb0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b978a557ffebbbc7a76c651d126b755e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dbe9f37ae57c8b8208d9d0aa645c0c03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_563a47defb59ceefd71c0f70f5a3c314</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eef91311744f55844fc31aa349319694</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1b37e70f6131900a33eef403dfa1116b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72a02deb0bf7b364fed9ef50798b049c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e31d1acb205a67c4c709f5897e260290</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2cd07143670ad49ccb2cbe779cab0842</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62b44a371c24d704b52746aea6798e2c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7fb0e8580b354f503ebbac83f20efd48</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75cb25a639ac3f0bc12643c89a2eddd6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_039cebfd3c610398ef2f26b0c26938ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_44a2878acc1b990f3f47587b747b03eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a106e8ecbfa3a6038a774e0d7ebc1282</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7b17da3db051c1b69f47e032d2815053</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ceceafea6c738a3bb3d2325ce8f8120f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23887fa987654ef1c336b92033f32497</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_69448f9a1fd70f4b544097edfaa07c25</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_acdbcca0712563da4b60213efb86e54c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e9c59c5a2d2a8b365117605ffcb306bd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3cc63063235623511888017d7b6949cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ec0cdb1cb5b5f8b6235a5a4c5aa8e500</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46e5288f826ad79f938833dcf09933e5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c91418b29bfdac2b0d7180f8f6a8d9bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_572036f62bd282e70aed7f27009eb7a6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4f68108e0276fa015961879aef9ef7b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d8d3e80d92ea230aa0f858efa64e5ba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6546b64f2a5b825ed86db134c6d5377b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d95b873e4b154748e6294987039f45c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e90bf99b29a6ba24a828c9d018d2166</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dd1cf7ec2dfff7bab1cdbeddb11a7710</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2cfb99aa7ef573d023829f316db58e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9599f73d577dbb979672c7c15039bbdc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b269164bee17f06335c7100fecf430f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1af31bdc9f0c220a4a7f70c4de53705</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edca627c1b1f73b0bd913ee6542ec601</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_996b1b657ebed7c166d53943d42ba443</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4a763bbb8fcd03023153d25a9c96dae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb92bd2b424f749e4d4a839b3ded88d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_50b4a4a33016ecc8d57c1ae4fc95746d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b7bbc9e2ca053d49a499823ed334b09</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9eda2b551c19d4d5ad1397b9be8d074</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bfa923df4a34962b48b2d9ff7ea4f2e5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ab45bf32c20c8a5d2d0cdbd9ef3fb2cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83dd9845d1af6efc7629cd9025194b33</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1778a51d79a35cf5fafa65a10992ffe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c96f6c9ed000697d87439efd5d564f9e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e93a4ad943747c17689788abebdbdefc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_56face8ae2dc656b63138da196dacfa9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0eff9d79f9ded1e104534203f2042474</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1c253673ef72701c03697048f17d549</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_982db32737c15052c07e65ade11f22d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5a570ae1f1a5e1dc0ab518d5b0e97b2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_100f907fea89a0e07bd7af4520dc48c9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c2ef74f196c4f215e06ca180361566f8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f4f0ed788df14b2b884104a380f07491</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5e8240db300c1ebd1be673a70a67caa0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b25d9e01ed0e62d5acb3d2c972c50192</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4ffefe78f924475b6d19e146725634b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4735bc52b49e7afa6a937d0e5facae31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86f1baa9c4861e9226aa9fa7c99ffebc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_da1359d150e3e108366f7bc6525f5f02</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75886201a5abcaaadf4803b7942669e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_76d98227b7e8238ee247ae8569955fdb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d91b7899d8f0867ee78e4b08ed001ec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d2a1fef409666300cb14061942a191d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9fa9e53735b952ce08197398d521d82</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1b312559bc2b1ae0960dd1a2ca1f20e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5d2d60c1e9f3cb85e62dbeb906f7c82</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7e5f7a6d6e027849789179741b6c4b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e59c1b2b8ef928ea8202316bd586e6e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0822ce342dc6badf3b89f832ec4b67bd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fcffb33e65adcabb60d676b458c85de0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fbd88b08bc19dbaa344979bed83dfd9c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8e0b911f3af48fa1b08a7f58562a884a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b2609a9d3a768cab3e6215745da1589</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5ef6f48828377010ae50cd65740a415</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c57fd5f7f4513973b6ee2c6cb151b355</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_302252de5be350dbc73d86df32dbe8a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dffba45661654eced929dcc57a497602</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6298922171198d74140e46c7d2bd2aeb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_431d7612f5bf9581903330950c397183</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8b8fc4f92b9ba6ed9fdf4cef57ad9abd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_710f857cb6b5f816d0e220caf4164a0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b0ba5f7adfb228e5bc4bcfb317ac9b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6936a4cdcb73eb5db28529cc1d014393</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a867892d3e081ffb211558b7340be570</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_807f7a8bbfbb873dcc3c5123483aaf07</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7086ad84aad7c5171233d130e7eb625b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e154669cfd34c6fbe5dc81a6178cc219</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cf961ae59d2071099712bb2d35aeada5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d738772b7d28ca273d8922a35eb862df</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0027734ec868bf95a0fd2d1f887465e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_138bc17192de9bb2666b599f816819fd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f323d8580cd9a23de250444bae75f244</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd572bc846b8a55be6b39830301ac12a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa53e65315033bb03eeb5c38af5e0733</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3fe480f50b2b6da55e440bc85e8ba714</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bdc224e9dea18fccae7d53ecf276e1aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed7c49e3abe84b6ec51c26357d6fc1a7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ada3658ddd8610f81d01063956e75929</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d75da896034ca0fae4d6e01a3b365b25</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5de17f8a642ecf75cdc4dd1bf99a9fa9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_57a14d9229eef3c4b4a2860758531350</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_00a01aace6e68984f2116458f6e64ace</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a91d09dc2a52e6ca3770ccb26d597595</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a27b54acf70f216803b586683046dfd2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3e6e336d426dd46364c78bde97ee7496</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6921b2be0db958b948f9bbabd2ed292</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddba27d6612b9f606e9f88246a4ae57f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_920c940966ea1d92749186057465302d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cccda96e17ac6b63a9219f6eecd342d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d4edac407d79099b84669bc9bef3a927</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a19d21c54c586df73a75cdfcf55df3fc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cb638f63820b138ce2a0ac8bb7f9747c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25d9c2cc70ca9e8b657615b805285352</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9a395725419fa4a5113fae3e8c5ac4a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_81bdf09bf177efe543cbe2a9ccfbee8f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fe2ff92b7135bf28a15d4765aac6bf3a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5a52af1124c94a7d8acd1bb018f066b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68b52a72a0d63b1ed77dc5aac185f826</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_01c2186de4688ecd9eb434b4c9e51828</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_793f827ee6c4ef8716c4ec93ecb9a713</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8e16218be9880e458fbb4cf21351358</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a6160a74a3269ab736a8faec6195a809</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_875e38215a59f97422ee0a91c59c16a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ac1c8b5d349bf1b67819a8c51b9b36ca</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21843e9898600b17ae4a89d0081af8ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1cf3324196e886beb9ff7474b3c0c0b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be7dcd14d1f40f83babb3ea79d715460</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>90</wp:comment_id>
    <wp:comment_author><![CDATA[mikesrobi]]></wp:comment_author>
    <wp:comment_author_email>robert@mikes.hu</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/mikesrobi</wp:comment_author_url>
    <wp:comment_author_IP>165.222.185.132</wp:comment_author_IP>
    <wp:comment_date>2013-11-28 17:31:02</wp:comment_date>
    <wp:comment_date_gmt>2013-11-28 16:31:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[JMockit is able to mock out static methods, final classes and private methods without modifying existing code, see: 
http://stackoverflow.com/questions/1629841/how-to-jmockit-system-getenvstring
For more details also see the answers in: 
http://stackoverflow.com/questions/4105592/comparison-between-mockito-vs-jmockit-why-is-mockito-voted-better-than-jmockit]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385656262.607201099395751953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"mikesrobi";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1385656324]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1385656324]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1385656262]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17171809004]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-28 16:31:02]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Does javac do optimization? Does not seem...]]></title>
  <link>https://javax0.wordpress.com/2013/01/29/does-javac-do-optimization-does-not-seem/</link>
  <pubDate>Tue, 29 Jan 2013 14:56:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=22</guid>
  <description/>
  <content:encoded><![CDATA[We usually say that java programmers have to write code that looks good and all other issues are solved by the compiler. For example having a complex boolean expression is better moved to a separate method with a good name and with a single <tt>return</tt> statement containing the expression. The original <tt>if</tt> or <tt>while</tt> will be much easier to understand. The java compiler is clever enough to see that the code is only called from a single place and will move the code inline.
<p>
Is it really true? I have heard that the JIT compiler does the optimization and the javac compiler does not. Let us have a look at some simple class:

[sourcecode lang="java"]
public class OptimizeThis {
	private int a(int x, int y) {
		return x + y;
	}

	public int add(int x, int y, int z) {
		return a(a(x, y), z);
	}
}
[/sourcecode]

There is a lot of space for optimization. The method <tt>a()</tt> could be left out from all the fun. The code could be included in the method <tt>add()</tt> and the code would be much faster.
Something like this:
[sourcecode lang="java"]
public class Optimized {
	public int add(int x, int y, int z) {
		return x + y + z;
	}
}
[/sourcecode]
Let us compile the class <tt>OptimizeThis</tt> and disassemble using <tt>javap</tt>:

[sourcecode lang="text" highlight="42,53" toolbar="false"]
verhasp:java verhasp$ javac OptimizeThis.java
$ javap -v -p OptimizeThis.class
Classfile /Users/verhasp/.../src/main/java/OptimizeThis.class
  Last modified 2012.07.08.; size 327 bytes
  MD5 checksum 9ba33fe0979ff0948a683fab2dc32d12
  Compiled from &quot;OptimizeThis.java&quot;
public class OptimizeThis
  SourceFile: &quot;OptimizeThis.java&quot;
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #4.#15         //  java/lang/Object.&quot;&lt;init&gt;&quot;:()V
   #2 = Methodref          #3.#16         //  OptimizeThis.a:(II)I
   #3 = Class              #17            //  OptimizeThis
   #4 = Class              #18            //  java/lang/Object
   #5 = Utf8               &lt;init&gt;
   #6 = Utf8               ()V
   #7 = Utf8               Code
   #8 = Utf8               LineNumberTable
   #9 = Utf8               a
  #10 = Utf8               (II)I
  #11 = Utf8               add
  #12 = Utf8               (III)I
  #13 = Utf8               SourceFile
  #14 = Utf8               OptimizeThis.java
  #15 = NameAndType        #5:#6          //  &quot;&lt;init&gt;&quot;:()V
  #16 = NameAndType        #9:#10         //  a:(II)I
  #17 = Utf8               OptimizeThis
  #18 = Utf8               java/lang/Object
{
  public OptimizeThis();
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
         4: return
      LineNumberTable:
        line 1: 0

  private int a(int, int);
    flags: ACC_PRIVATE
    Code:
      stack=2, locals=3, args_size=3
         0: iload_1
         1: iload_2
         2: iadd
         3: ireturn
      LineNumberTable:
        line 3: 0

  public int add(int, int, int);
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: aload_0
         2: iload_1
         3: iload_2
         4: invokespecial #2                  // Method a:(II)I
         7: iload_3
         8: invokespecial #2                  // Method a:(II)I
        11: ireturn
      LineNumberTable:
        line 7: 0
}
verhasp:java verhasp$
[/sourcecode]

You can see we have both of the methods. The code

[sourcecode lang="text" toolbar="false" firstline="42"]
  private int a(int, int);
    flags: ACC_PRIVATE
    Code:
      stack=2, locals=3, args_size=3
         0: iload_1
         1: iload_2
         2: iadd
         3: ireturn
[/sourcecode]

is the private method <tt>a()</tt> and the code

[sourcecode lang="text" toolbar="false" firstline="53"]
  public int add(int, int, int);
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: aload_0
         2: iload_1
         3: iload_2
         4: invokespecial #2                  // Method a:(II)I
         7: iload_3
         8: invokespecial #2                  // Method a:(II)I
        11: ireturn
[/sourcecode]

is the public method <tt>add()</tt>. The code itself is simple. The method <tt>a()</tt> loads on the operand stack the first local variable (<tt>iload_1</tt>), then it does the same with the second (<tt>iload_2</tt>), and then adds the two (<tt>iadd</tt>). What is left on the operand stack is used to return (<tt>ireturn</tt>).
<ol>
	<li>the local variable number zero is <tt>this</tt> in case of non-static methods</li>
	<li>the arguments are also treated as local variables</li>
	<li>for the first few local variables there are shorthand java byte codes, because the generated code accesses these the most and this saves some space and speed</li>
	<li>we are using <tt>int</tt> only and thus we need not care about more complex issues, like a <tt>double</tt> occupying two slots.</li>
</ol>
Them method <tt>add()</tt> is almost as simple. Loads the value of <tt>this</tt> on the operand stack two times. It is needed to call the non-static method <tt>a()</tt>. After that it loads the first and the second local variable on the stack (the first two method arguments) and in the command #4 (line 61.) calls the method <tt>a()</tt>. After this it loads the third local variable on the stack. This time the stack contains the variable <tt>this</tt>, the result of the previous call to method <tt>a()</tt> and then the third local variable, which is the third argument to the method <tt>add()</tt>. Then it calls the method <tt>a()</tt>.
<p>
Let us have a look at the code generated from the class <tt>Optimized</tt>:

[sourcecode lang="text" toolbar="false"]
$ javap -v -p Optimized.class
Classfile /Users/verhasp/.../src/main/java/Optimized.class
  Last modified 2012.07.08.; size 251 bytes
  MD5 checksum 2765acd1d55048184e9632c1a14a8e21
  Compiled from &quot;Optimized.java&quot;
public class Optimized
  SourceFile: &quot;Optimized.java&quot;
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #3.#12         //  java/lang/Object.&quot;&lt;init&gt;&quot;:()V
   #2 = Class              #13            //  Optimized
   #3 = Class              #14            //  java/lang/Object
   #4 = Utf8               &lt;init&gt;
   #5 = Utf8               ()V
   #6 = Utf8               Code
   #7 = Utf8               LineNumberTable
   #8 = Utf8               add
   #9 = Utf8               (III)I
  #10 = Utf8               SourceFile
  #11 = Utf8               Optimized.java
  #12 = NameAndType        #4:#5          //  &quot;&lt;init&gt;&quot;:()V
  #13 = Utf8               Optimized
  #14 = Utf8               java/lang/Object
{
  public Optimized();
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
         4: return
      LineNumberTable:
        line 1: 0

  public int add(int, int, int);
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=4
         0: iload_1
         1: iload_2
         2: iadd
         3: iload_3
         4: iadd
         5: ireturn
      LineNumberTable:
        line 3: 0
}
[/sourcecode]

Much simpler. Is it also faster? The proof of the pudding is in the eating. If it is not tasty then the dog will eat it. However...

Here we have again the two classes extended with some <tt>main</tt> methods (one for each).
[sourcecode lang="java" collapse="true"]
public class OptimizeThis {
	private int a(int x, int y) {
		return x + y;
	}

	public int add(int x, int y, int z) {
		return a(a(x, y), z);
	}

	public static void main(String[] args) {
		OptimizeThis adder = new OptimizeThis();
		final int outer = 100_0000_000;
		final int loop = 100_0000_000;
		Long tStart = System.currentTimeMillis();
		for (int j = 0; j &lt; outer; j++) {
			for (int i = 0; i &lt; loop; i++) {
				int x = 1;
				int y = 2;
				int z = 3;
				adder.add(x, y, z);
			}
		}
		Long tEnd = System.currentTimeMillis();
		System.out.println(tEnd - tStart);
	}
}
[/sourcecode]

and

[sourcecode lang="java" collapse="true"]
public class Optimized {
	public int add(int x, int y, int z) {
		return x + y + z;
	}

	public static void main(String[] args) {
		Optimized adder = new Optimized();
		final int outer = 100_0000_000;
		final int loop = 100_0000_000;
		Long tStart = System.currentTimeMillis();
		for (int j = 0; j &lt; outer; j++) {
			for (int i = 0; i &lt; loop; i++) {
				int x = 1;
				int y = 2;
				int z = 3;
				adder.add(x, y, z);
			}
		}
		Long tEnd = System.currentTimeMillis();
		System.out.println(tEnd - tStart);
	}
}
[/sourcecode]

In addition to this we also created an empty class, named <tt>Empty</tt> that returns constant zero.

[sourcecode lang="java" collapse="true"]
public class Empty {
	public int add(int x, int y, int z) {
		return 0;
	}

	public static void main(String[] args) {
		Empty adder = new Empty();
		final int outer = 100_0000_000;
		final int loop = 100_0000_000;
		Long tStart = System.currentTimeMillis();
		for (int j = 0; j &lt; outer; j++) {
			for (int i = 0; i &lt; loop; i++) {
				int x = 1;
				int y = 2;
				int z = 3;
				adder.add(x, y, z);
			}
		}
		Long tEnd = System.currentTimeMillis();
		System.out.println(tEnd - tStart);
	}
}
[/sourcecode]

Here we have an executing script that can be called after executing the command <tt>javac *.java</tt>:

[sourcecode lang="bash" collapse="true"]
#! /bin/sh
echo &quot;Empty&quot;
java Empty
echo &quot;Optimized&quot;
java Optimized
echo &quot;OptimizeThis&quot;
java OptimizeThis
[/sourcecode]

And the result:
<strong>STOP!!!!</strong> Before you open it try to estimate the ration between the optimized and non-optimized version and also how much faster the class <tt>Empty</tt> is. If you have your estimation you can open the result:

[sourcecode lang="bash" collapse="true"]
verhasp:java verhasp$ ./testrun.sh
Empty
1970
Optimized
1987
OptimizeThis
1970
verhasp:java verhasp$ ./testrun.sh
Empty
1986
Optimized
2026
OptimizeThis
2001
verhasp:java verhasp$ ./testrun.sh
Empty
1917
Optimized
1892
OptimizeThis
1899
verhasp:java verhasp$ ./testrun.sh
Empty
1908
Optimized
1903
OptimizeThis
1899
verhasp:java verhasp$ ./testrun.sh
Empty
1898
Optimized
1891
OptimizeThis
1892
verhasp:java verhasp$ ./testrun.sh
Empty
1896
Optimized
1896
OptimizeThis
1897
verhasp:java verhasp$ ./testrun.sh
Empty
1897
Optimized
1903
OptimizeThis
1897
verhasp:java verhasp$ ./testrun.sh
Empty
1908
Optimized
1892
OptimizeThis
1900
verhasp:java verhasp$ ./testrun.sh
Empty
1899
Optimized
1905
OptimizeThis
1904
verhasp:java verhasp$ ./testrun.sh
Empty
1891
Optimized
1896
OptimizeThis
1896
verhasp:java verhasp$ ./testrun.sh
Empty
1895
Optimized
1891
OptimizeThis
1904
verhasp:java verhasp$ ./testrun.sh
Empty
1898
Optimized
1889
OptimizeThis
1894
verhasp:java verhasp$ ./testrun.sh
Empty
1917
Optimized
1894
OptimizeThis
1898
verhasp:java verhasp$
[/sourcecode]

Conclusion? Before you vote on the first choice read all the possible answers!

[polldaddy poll=6445870]

<small>
The tests were executed on a 8GB memory MacBook Pro7,1 with  OS X 10.7.4, 7-es Java (you could notice it that it was already java7) Still here you can have the output of 'java -version':
</small>

[sourcecode lang="bash" collapse="true"]
verhasp:java verhasp$ java -version
java version &quot;1.7.0_04&quot;
Java(TM) SE Runtime Environment (build 1.7.0_04-b21)
Java HotSpot(TM) 64-Bit Server VM (build 23.0-b21, mixed mode)
[/sourcecode]

<small>
Next time something more interesting.
</small>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>22</wp:post_id>
  <wp:post_date>2013-01-29 14:56:41</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:56:41</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 14:56:41</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 14:56:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>does-javac-do-optimization-does-not-seem</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_4fbf8f80652bd9e9a835fa1f78347f75</wp:meta_key>
    <wp:meta_value><![CDATA[1521494282]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4fbf8f80652bd9e9a835fa1f78347f75</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-polldaddy"><script type="text/javascript" charset="utf-8" src="https://secure.polldaddy.com/p/6445870.js"></script><noscript><a href="https://polldaddy.com/poll/6445870/">Honest anonymous answers, please</a></noscript></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>korondi.mark@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://markkorondi.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.224.131.41</wp:comment_author_IP>
    <wp:comment_date>2013-01-30 19:41:33</wp:comment_date>
    <wp:comment_date_gmt>2013-01-30 18:41:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[On âreturn a(a(x, y), z);ââ¦

A loosely connected topic was on conversation this morning when I popped the question to my girlfriend: âNow itâs OK, that Java[8] and C++[11] is going down the road building lambdas and such functional elements into the language, but will those elements be only syntactic masâ¦bation, or could we make use of the optimalizations already known from FP langs?â [1] [2]

I meant that Haskell could handle lists of infinite length passed to a function, and could take the first n element of it, while in many languages we cannot even âcreateâ an infinite-length list:

&gt; let takefive x = take 5 x
&gt; takefive [1..]
[1,2,3,4,5]

Or just look at the âsolve problems with recursive functionsâ approach of these languages.

These examples, apart from the fact that the lazyness of FP languages explains a lot of such things, must imply a lot of compiler/parser optimizations.

Now back to your example of how dummy our javac compiler is when coming to such a simply recursion-like embedding: a(a(x,y), z); If this couldnât be unrolled by a compiler, then I am pretty sure massively recursive functions are not eitherâ¦ :-( Yet. Weâll see.

[1] OK, I should have read on about compilers implementation, but I came across your post first.
[2] Yeah, popping the question isnât the traditional way, but she is also a programmer, so this legitimates the situation ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>33237381</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359571293.53929901123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"kmarc11";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1359573421]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-01-30 18:41:33]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1590</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.3.188.140</wp:comment_author_IP>
    <wp:comment_date>2014-08-29 13:57:36</wp:comment_date>
    <wp:comment_date_gmt>2014-08-29 12:57:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the comment. It is true that JIT can optimize even more after warming up. The experiments above, which are not meant to be benchmarks, simply demonstrate that JIT optimize even before warm up.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1589</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409317056]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409317056.8896920680999755859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409317057]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-29 12:57:37]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1589</wp:comment_id>
    <wp:comment_author><![CDATA[Esko Luontola]]></wp:comment_author>
    <wp:comment_author_email>esko.luontola@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+EskoLuontola</wp:comment_author_url>
    <wp:comment_author_IP>109.204.231.126</wp:comment_author_IP>
    <wp:comment_date>2014-08-29 13:30:49</wp:comment_date>
    <wp:comment_date_gmt>2014-08-29 12:30:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Your benchmarks are faulty. The JIT would even remove the whole for loops if the code was warmed properly.

To better understand micro benchmarking on Java, see http://shipilev.net/#benchmarking]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409315449.6249730587005615234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-AmDv-VVhQBU/AAAAAAAAAAI/AAAAAAAAAPU/cW6ZRaRXaEs/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[102883237794451111459]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409315499]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-29 12:30:50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409315499]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409315500.0281469821929931640625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10153</wp:comment_id>
    <wp:comment_author><![CDATA[Microbenchmarking comes to Java 9 | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/09/11/microbenchmarking-comes-to-java-9/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.81</wp:comment_author_IP>
    <wp:comment_date>2016-09-11 15:20:21</wp:comment_date>
    <wp:comment_date_gmt>2016-09-11 14:20:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] years ago I was writing about how Java compiler optimizes the code it executes. Or rather how javac does not do that and the same time JIT does. I made some [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1473603621.8167550563812255859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1473605528]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1473605529.1429119110107421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[A little bit of testing]]></title>
  <link>https://javax0.wordpress.com/2013/01/29/a-little-bit-of-testing/</link>
  <pubDate>Tue, 29 Jan 2013 14:56:15 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=24</guid>
  <description/>
  <content:encoded><![CDATA[Behaviour Driven Development usually says that the test structure consists of
<ul>
	<li>GIVEN</li>
	<li>WHEN</li>
	<li>THEN</li>
</ul>
Even Mockito has an DBBMockito faÃ§ade implementation that fits to this habit. If you want a big shot you can have JBehave. However for now let us starts with some simple unit test:

[sourcecode language="java" wraplines="false"]
    private static final Configuration config = new BasicConfiguration();
    private static final String key = &quot;key&quot;;
    private static final String value = &quot;value&quot;;
    private static final String badValue = &quot;badValue&quot;;
...
    public void testGetConfigValueWhenEnvironmentKeyExists() {
        String actual;
        Properties props;
        // GIVEN
        props = PowerMockito.mock(Properties.class);
        PowerMockito.mockStatic(System.class);
        config.setConfigProperties(props);
        Mockito.when(props.containsKey(key)).thenReturn(true);
        Mockito.when(props.getProperty(key)).thenReturn(badValue);
        Mockito.when(System.getenv(&quot;sb4j.&quot; + key)).thenReturn(value);
        // WHEN
        actual = config.getConfigValue(key);
        // THEN
        Mockito.verify(props).containsKey(key);
        Mockito.verify(props).getProperty(key);
        PowerMockito.verifyStatic();
        System.getenv(&quot;sb4j.&quot; + key);
        Assert.assertEquals(value, actual);
    }
[/sourcecode]

Do you feel something under you skin that this is not the real one? What are those comments? Whenever I feel the need to write comments into a method I start to think about better variable and method names and refactoring. Why is this method so complex that this is hard to understand without the comments? Yes, sure: I can remove those three comment lines, but even then it is not really an improvement.
<p>
What if we could create a simple <tt>Business</tt> class and we could book our ticked from the economy class to business class? We are not even forced to finish the class, it is OK half way ready:

[sourcecode language="java" wraplines="false"]
public abstract class Business {

    abstract public void given();
    abstract public void when();
    abstract public void then();
    public void execute(){
        given();
        when();
        then();
    }

}
[/sourcecode]

It is so small that it just fits any project. Whenever we have it the test code looks much better:

[sourcecode language="java" wraplines="false"]
    @Test
    public void testGetConfigValueWhenEnvironmentKeyExists() {
        new Business() {
            private String actual;
            private Properties props;

            @Override
            public void given() {
                props = PowerMockito.mock(Properties.class);
                PowerMockito.mockStatic(System.class);
                config.setConfigProperties(props);
                Mockito.when(props.containsKey(key)).thenReturn(true);
                Mockito.when(props.getProperty(key)).thenReturn(badValue);
                Mockito.when(System.getenv(&quot;sb4j.&quot; + key)).thenReturn(value);
            }

            @Override
            public void when() {
                actual = config.getConfigValue(key);
            }

            @Override
            public void then() {
                Mockito.verify(props).containsKey(key);
                Mockito.verify(props).getProperty(key);
                PowerMockito.verifyStatic();
                System.getenv(&quot;sb4j.&quot; + key);
                Assert.assertEquals(value, actual);
            }

        }.execute();
    }
[/sourcecode]

Much better, is it. The only question remaining: who in the hell could we mock the <tt>System</tt> class? Believe me: the code above is copy/paste without modification from a real live test and it works. Stay tuned for some coming posts where I detail how it was made.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2013-01-29 14:56:15</wp:post_date>
  <wp:post_date_gmt>2013-01-29 14:56:15</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 14:56:15</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 14:56:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-little-bit-of-testing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[cropped-459020_3300794751447_452461829_o.jpg]]></title>
  <link>https://javax0.wordpress.com/cropped-459020_3300794751447_452461829_o-jpg/</link>
  <pubDate>Tue, 29 Jan 2013 16:13:48 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2013-01-29 16:13:48</wp:post_date>
  <wp:post_date_gmt>2013-01-29 16:13:48</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 16:13:48</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 16:13:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-459020_3300794751447_452461829_o-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/cropped-459020_3300794751447_452461829_o.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:951;s:6:"height";i:160;s:4:"file";s:116:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/cropped-459020_3300794751447_452461829_o.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/piano-black]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[cropped-459020_3300794751447_452461829_o1.jpg]]></title>
  <link>https://javax0.wordpress.com/cropped-459020_3300794751447_452461829_o1-jpg/</link>
  <pubDate>Tue, 29 Jan 2013 16:16:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o1.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2013-01-29 16:16:12</wp:post_date>
  <wp:post_date_gmt>2013-01-29 16:16:12</wp:post_date_gmt>
  <wp:post_modified>2013-01-29 16:16:12</wp:post_modified>
  <wp:post_modified_gmt>2013-01-29 16:16:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-459020_3300794751447_452461829_o1-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/01/cropped-459020_3300794751447_452461829_o1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/cropped-459020_3300794751447_452461829_o1.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:951;s:6:"height";i:160;s:4:"file";s:117:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/01/cropped-459020_3300794751447_452461829_o1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/piano-black]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[To comment or not to comment, that is the question]]></title>
  <link>https://javax0.wordpress.com/2013/04/07/to-comment-or-not-to-comment-that-is-the-question/</link>
  <pubDate>Sun, 07 Apr 2013 00:53:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[I was reading the article <a href="http://blog.jooq.org/2013/02/26/the-golden-rules-of-code-documentation/">
The Golden Rules of Code Documentation</a> and I thought to give an example of how I handle the situation expressed there using the following sentence:

<blockquote>If you need comments to clarify code, better think how to write code differently, so it is more understandable. You do not need yet another language (comments) to mess with the primary language (code).</blockquote>

The referenced article argues with the statement above even letting personal feelings out:

<blockquote>Quite obviously, this person has written 1-2 âHello worldâ applications, where this obviously holds true.</blockquote>

I felt touched, since I totally agree with the statement quoted first and at the same time I strongly believe that after 25 years of programming I can not be categorized as a "hello word" programmer. Those who do not know me: I wrote ScriptBasic (C language), Jamal (Perl), jScriptBasic (Java) to mention an excerpt from the few OS projects I was heavily involved in. I can mention but not list the codes I created professionally to feed myself and family for different banks, telcos and honey water companies.

To proof his point, the author of the before mentioned article says:



<blockquote>    How would you write this business logic down into code, such that you can live without comments?

    <em>A stock exchange order of clearing type code 27 needs to be grouped with all other subsequent orders of type code 27 (if and only if they have a rounding lot below 0.01), before actually unloading them within a time-frame of at most 35 seconds (fictional example in a real-life application).</em></blockquote>

I had three thoughts:
<ol>
	<li>Challenge accepted (first instinct, usually stupid)</li>
	<li>The text in the quoted quote was about comments between the lines of the code and not the JavaDoc and not even the documentation of the project. The requirement text given as an example is by no means to be put into the code. That is a requirement.</li>
	<li>Nothing heals badly formatted requirements like the sample given above. Never mind, that is not a real spec. only an example. Forget this last comment, I do not want to open flame war on this. There is enough battlefield elsewhere.</li>
</ol>

The rest of the referenced article talks about documentation and if I replace the word "comment" with "documentation" in the text I can generally be agreeable with that.

But lets have a look at the fun part! Read again the "spec" above and have a look at the code:

[sourcecode language="java"]
package stock;

public class StockExchangeOrderUploader implements Runnable {

	private final StockExchangeOrderSource source;

	public StockExchangeOrderUploader(StockExchangeOrderSource source) {
		this.source = source;
	}

	private StockExchangeOrderGroup pendingGroup = null;

	public void setPendingGroup(StockExchangeOrderGroup group) {
		pendingGroup = group;
	}

	@Override
	public void run() {
		while (source.hasNext()) {
			final StockExchangeOrder order = source.next();
			if (order.isBelowRoundingLotLimit() &amp;&amp; order.isOfClearingType27()) {
				if (There.isA(pendingGroup)
						.whichWasStartedNotSoonerThan35SecondsBeforeThis(order)) {
					Add.the(order).toThe(pendingGroup);
				} else {
					if (There.isAny(pendingGroup)) {
						Upload.the(pendingGroup);
					}
					Add.the(order).toThe(pendingGroup);
				}
			}else{
				Upload.the(order);
			}
		}
		if( There.isAny(pendingGroup)){
			Upload.the(pendingGroup);
		}
	}

}
[/sourcecode]

Do you feel the need to put any comment between the lines? Do you need anything?

Oh.... jah.. sorry. Perhaps the other interfaces and classes:

https://github.com/verhas/commentOrNotToComment
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2013-04-07 01:53:54</wp:post_date>
  <wp:post_date_gmt>2013-04-07 00:53:54</wp:post_date_gmt>
  <wp:post_modified>2013-04-07 01:53:54</wp:post_modified>
  <wp:post_modified_gmt>2013-04-07 00:53:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>to-comment-or-not-to-comment-that-is-the-question</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_576df44b7f8948146ade0621caf9b5bb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c9caf2eb3fa0be9440d9ac3fbb16394</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6b01578ac34461abfb9e11ebfd2c540</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e076db26cf85359abfaa23b8fcb146fc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_324fddd1dcda8a25180e60cee6ebfa1d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c6f42f6eddfe2459f558a8e2d59eeebf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9346d597fe3b8903300dd89e7bddad5a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_96f8f192cb54d94a3549ddb62d1d14d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>16</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.227.46.131</wp:comment_author_IP>
    <wp:comment_date>2013-04-07 08:01:36</wp:comment_date>
    <wp:comment_date_gmt>2013-04-07 07:01:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Aaahaha, I have to "like" this one. Of course, this code still communicates "what", not "why". It does so in a fluent / OO way, instead of an imperative way, which is ultimately no different, except that the API is now polluted with hardly reusable knowledge about this particular requirement. 

Why was it so important in the twisted requirements, to do all this stuff only for clearing type cd 27? And why only for a rounding lot &lt; 0.01. And &quot;why&quot; ...

Anyway, thanks for the great counter-rant:-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365318097.886074066162109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1365318864]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-04-07 07:01:36]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.9.81</wp:comment_author_IP>
    <wp:comment_date>2013-04-07 16:10:27</wp:comment_date>
    <wp:comment_date_gmt>2013-04-07 15:10:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I still believe that the explanation of 'why' should not get into the comments. Especially not into the in-line code comment, which I mean is not JavaDoc. The 'why' is there in the specification if there is any.

Any text in the program should either be

<ol>
<li>something needed to execute the code, or</li>
<li>something needed to maintain the code</li>
</ol>

The first one is the program code itself and whenever there is any tool that depends on the content of the code to generate code or alter the behaviour of the code: it is the clear sign of some weakness of the language, or just bad tool. One should decide in the actual case which one that is.

The other one is the code and the comments. The code, no question, is needed to maintain the code. Without it there is nothing to maintain. The comment is solely for documentation purposes. There are other documents as well in our everyday practice that are for documentation purposes, like wiki pages being Confluence or md5, generated site reports and so on. The comment part of the documentation is special, because it is inside the code.

We do two things with documents: we read them, and we write them. Probably the writing part comes first, but for our discussion it is irrelephant. Documentation should be tied to the code, in other words be in comment, that is better to be read along with the code or better to write along the code.

JavaDoc is comment because it is written along the code. (Well, yes, if written at all. I mean in ideal case.) You, as a developer, can also read it along the code, but 99% of the cases you read them on web pages, or in the hoover box in Eclipse.

In-line comment is there, because the one, who writes it believes that it helps it being read along the code. It is written by the programmer.

The "'why' does the program do that" part comes from the specification. It is not written by the programmer, but rather a Business Analyst. If ever the requirement changes the BA will not change the comment in the code. If the programmer copies the spec to the code as a comment the data is duplicated while the information remained constant: there is a risk of misalignment of the information between the different representation, even if it is verbatim copy. You may not copy all the document, you may not copy a relevant part: possibility of error. If you must, reference the spec.

If the comment is not about the spec, but some other 'why' then there is some problem. What were your ideas when you wrote that code? Should you write that in a comment? Why isn't that clear from the code. Perhaps you are still programming FORTRAN or some other language that is not expressive enough and you have to extend the code with in-line comments so that it is understandable. Perhaps you use Java, which is a bit more expressive than FORTRAN (just as an example) but you use it in a non-expressive way. That is the point when you have to think about your own style. Perhaps Java as a language is not expressive enough.

Nobody (well, at least wise programmers) says not to use in-line comments ever. The advice is: if you feel like you need some, better think before if there is any other way that is better.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>16</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1365347427]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365347427.8932259082794189453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-04-07 15:10:27]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.227.46.131</wp:comment_author_IP>
    <wp:comment_date>2013-04-11 23:02:55</wp:comment_date>
    <wp:comment_date_gmt>2013-04-11 22:02:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes yes ;-)

I'm talking about referencing the spec (ideally along with ticket IDs) and outlining it in 1-2 sentences. If absolutely needed, of course. I'm not talking about verbatim copying of 50 paragraphs of specs. Where did you get *that* idea from? ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>19</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1365717776]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365717777.30177402496337890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-04-11 22:02:55]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>809</wp:comment_id>
    <wp:comment_author><![CDATA[Logging or Commenting ? | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/06/25/logging-or-commenting/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.8.52</wp:comment_author_IP>
    <wp:comment_date>2014-06-25 12:00:06</wp:comment_date>
    <wp:comment_date_gmt>2014-06-25 11:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] and does not fit the code, please visit the article The Golden Rules of Code Documentation and the rant to the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403694007.682260036468505859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-06-25 11:00:08]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1403694035]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403694035.7752780914306640625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8811</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Jacob]]></wp:comment_author>
    <wp:comment_author_email>jacob@j-e-b.net</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+MichaelJacob</wp:comment_author_url>
    <wp:comment_author_IP>109.193.251.112</wp:comment_author_IP>
    <wp:comment_date>2015-09-24 01:02:48</wp:comment_date>
    <wp:comment_date_gmt>2015-09-24 00:02:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I put down a comment detailing the "why" every time I suspect that someone who will read the code in the future will think "This could be implemented much shorter/cleaner/correct using [solution I tried first and spent an hour finding out that it doesn't work that way, why it won't work that ways and how to do it in a way that actually works]"

And every time I see some code that behaves differently in some borderline case I stare at the screen and wish there was a comment telling me if that was intentional or not. (Consider yourself lucky if you have specs down to the method level. Or anything that is more than functional requirements and UI design.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>19</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-LaQFTW84P4U/AAAAAAAAAAI/AAAAAAAAAjQ/dp6zR-pcezI/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[117273292432791213925]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1443052970]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1443052970]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443052970.4422829151153564453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11800</wp:comment_id>
    <wp:comment_author><![CDATA[Rahul Kale]]></wp:comment_author>
    <wp:comment_author_email>kalerahul86@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>115.114.135.174</wp:comment_author_IP>
    <wp:comment_date>2017-11-24 06:27:22</wp:comment_date>
    <wp:comment_date_gmt>2017-11-24 05:27:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Code here is very good example, It made me to think differently]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1511507548]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1511506168.6150019168853759765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1511507548]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1511507548.227777957916259765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1511501244.467155933380126953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Lead developer]]></title>
  <link>https://javax0.wordpress.com/2013/04/11/lead-developer/</link>
  <pubDate>Thu, 11 Apr 2013 09:30:46 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[Wikipedia on page http://en.wikipedia.org/wiki/Lead_programmer defines what a lead developer is.

Then there is a another page on Wikipedia http://en.wikipedia.org/wiki/Lead_poisoning

What's the relation between these two pages? Perhaps nothing. Perhaps...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2013-04-11 10:30:46</wp:post_date>
  <wp:post_date_gmt>2013-04-11 09:30:46</wp:post_date_gmt>
  <wp:post_modified>2013-04-11 10:30:46</wp:post_modified>
  <wp:post_modified_gmt>2013-04-11 09:30:46</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>lead-developer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Bence]]></wp:comment_author>
    <wp:comment_author_email>bence_sarosi@epam.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2013-04-11 13:30:27</wp:comment_date>
    <wp:comment_date_gmt>2013-04-11 12:30:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[OMG, score!
Now what about unleaded fuel?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1365683428.6323759555816650390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1365743662]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-04-11 12:30:27]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Exam, job interview]]></title>
  <link>https://javax0.wordpress.com/2013/05/28/exam-job-interview/</link>
  <pubDate>Tue, 28 May 2013 11:09:04 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=48</guid>
  <description/>
  <content:encoded><![CDATA[I grew old. Now my son visits university classes and passes exams. Many years ago I was delivering some lectures at TU Budapest in Hungary, right during my university years as an assistant and later as a Ph.D. student. During those years I also conducted exams although I am not absolutely sure that level I was allowed to do so. Practically it was correct. I always wanted to be fair and correct and after that many years, I still believe I was.

Shortly after 2000, I created a special tutorial that students could select to attend optionally for credits. We delivered the subject with my old friend George Pongor. The topic was about the structure of ScriptBasic and generally about how to create a scripting language. Compilers were favorite subjects for George anyway. He was the first person I learned Java from. The tutorial was delivered only in a single semester. During the next semester, only a few students applied, and thus the subject was not started. Before the next semester, George died in a sudden heart attack after a tennis game. He was about the age I am closing now. His personal home page at TU <del>is still frozen, and available as it was</del>. (Not anymore.)

This did not conclude my carrier as a teacher since being a teacher is not a job. It is rather a vocation. I did deliver lectures for a living at a Hungarian high school and also as part of many projects in my own company. At my current employer, I also deliver training regularly.

When you are a teacher it is not only delivering the lectures and the training but also the exams. And even nowadays I also do exams: job interviews. There is, however, a significant difference between exams and job interviews. When you perform a job interview you face people you have never met before. On the other end, exams close a period of teaching, learning: you were delivering knowledge and helped them to develop skills.

I realized that this is a very significant difference. When a student fails the exam, the teacher also fails. If my student fails it means that I did not teach sufficiently good, I could not motivate them to learn the topic or at least awake their awareness. Sometimes I realized that the topic is simply not for the person. After all, not everybody is meant to be a programmer. But this is also a failure if the discovery happens not sooner but during the exam.

On the job interview, however, the candidate can be clever, can be dumb as earth: it does not qualify me. Even though it makes me happy to meet a candidate I would like to work with later and sad if I can not recommend the candidate. Before making false assumptions: I am not measured on success rate. No more glory or money comes to my head or pocket if I turn down a candidate or if I suggest for hiring.

Job interviews are usually successful. At least that is I feel, though I can not be sure. How come that a job interview is always successful? Comes from the definition of success: it does its job perfectly. If the candidates fit, they can go on. If the candidates are not appropriate for the position, the knowledge and skill set is not compatible with the requirements then this is better for the company as well as for the candidates if it is discovered during a one-hour session. There were a lot of people, who passed and got recommended from my side. There were many, who were not appropriate for the position thus I did not recommend them. Did I turn down anyone who was appropriate and I judged wrong? I cannot know, but I hope I did not.

The job interview, the exam is full of stress. A bit less for me, a bit more for the candidate. This is the case even though the exam itself does change very few things in life. When it comes to the exam: all are decided. The candidate either knows what he/she has to know or does not. The only risk in the exam is if the teacher is bad. It does happen sometimes that the examiner turns somebody down because of a bad mood, or the other way around: the candidate is successful fooling the examiner presenting more knowledge than really there is. As for the first one: I pay extreme care not to let my judgment been affected by mood. As for the second one, fooling the examiner, all I can say: lol.

There is a very small, though mathematically not zero, positive chance that somebody could fool me continuously in diverse subjects. I ask something about a subject and after a half sentence, I am 99% sure when the candidate has no idea at all. I wait for a few sentences and I know the next few questions to ask to disclose that remaining 1%. These are very important questions. It did happen that I asked the questions just for me being sure and I had to realize at that time the 1% change was winning. (99% is not much when you do hundreds of interviews.) The candidate knows the subject, but there is a problem with the communication skills (which are also very important, but I do Java tech interviews.) And there are some examples just the other way around as well.

Once I gave a helping hand to a job interview when we were searching for someone knowledgeable about ITIL. We were searching for the person because this special knowledge was needed for a given project and we did not have anyone being expert in ITIL. I also was not an ITIL expert, but in my previous position a few years back I did some work related to it and therefore I had at least the knowledge to reach for the spoon or the fork when it was served although I could not chew and swallow the subject. The candidate came in and listed the different projects and tasks he performed utilizing ITIL. He was communicating overwhelming but somewhere in my brain, there was an itchy feeling that most of it are empty talk. But I did not ask any question since I avoid asking a question for which I do not absolutely know the perfect answer. (About this later.) At a certain point, I asked him how he could create a DSS in the imagined situation we were actually talking about. He listed the different aspects for five minutes and he was such a good talker that I only suspected that he had no idea at all. Twenty minutes later at the end of the interview, I asked him the question: what does DSS stand for? Abracadabra and communication magic does not help. No more empty talk. You know it or you do not know it. He did not.

And now the topic: why you should not ask something you do not yourself know the answer? Because of the job interview or the exam is not for that purpose. I am not an oracle to know everything. I also do not expect the candidate to know everything. Why would anyone expect me to know all the answers? When you talk to a peer over a coffee, it is joyful to talk about your profession and learn new things perhaps on both sides. In an exam, there is the examiner and the candidate. One of the jobs of the examiner to evaluate the exam (not the person, only the actual performance) and this works only when the examiner is above the candidate on some kind of knowledge scale, otherwise a refused candidate will not accept the result at least remains mentally disturbed. It is not good for anyone. It bad for the candidate as well as for the company. Knowledge, however, is not an ordered set. It is rather a multidimensional vector space or something. You just can not say that Einstein was cleverer than Napoleon, or that Mary behind the buffet counter is cleverer than Kathy, the cleaning lady. Everybody has some knowledge that he or she knows better than someone else. If I do seem to be cleverer than the candidate in each and every topic that is raised during an interview: there is no problem. The candidate will accept the judgment. Even though it is obvious that I am not cleverer in all aspects. I can not be. But I can pay attention to seem like cleverer. That is the best solution. For both of us.

What happens if there is something he knows better and the topic comes up? If (s)he passes and I need not turn him/her down: it is OK. He or she will accept it. There is also no problem when the candidate does not have any chance to be more knowledgable than I am in the narrow area of my profession. This is sad because it not only means that he is not appropriate for the position but it also means that there is a huge gap. Probably the candidate is not aware of his/her own knowledge and/or skill. I realize the situation early and the rest of the hour I spend teaching the candidate. I tell him/her (usually him, for some magical reason women are way better knowing their capabilities) what the problem is: what to read, how to practice. If I suspect some behavioral problem: why not to be a programmer. There are other positions, like project manager, business analyst, still in the wider area of the profession.

The real task is when the candidate's skill and knowledge are somewhere in the middle. He/she just does not make it and still thinks that he/she is ok, and only the evil interviewer turned him/her down for false reasons. There was a single occasion when a candidate expressed openly his opposition about my decision refusing him. It was discomforting. It was discomforting for me, but I am sure that this was discomforting for him as well. It would have been better to protect him from this experience and having a false feeling that he was knowledgeable enough only the bastard interviewer turned him down. That is the way such a person usually experiences the situation. They are in the denying phase and many of them remain that phase until death or until Herr Alzheimer is knocking on the door. There was a certain and good reason I decided not to accept the person. And it was not the style and the arrogance. I am not evaluating behavior, though it certainly influences me. I also have a psyche and I can not disclose feelings. Knowledge and skills. Those are the only things that matter. If I seem to be cleverer in all aspects it is better. At least safer. And I am extremely happy when I interview a person about whom I have the feeling that he/she will be a good co-worker a lot to learn from.

But there is another source of stress on a job interview. In the end, you feel that you knew nothing. I had the same feeling when I was applying for my current position. What is the reason for that? The specialty of the situation: I ask something from the candidate. I know the answer, therefore I am not interested in the answer as content. I just want to know whether the candidate knows the answer. When he/she said enough I stop him/her. That time I know the knowledge level on the area the question covered, it would be a waste of time to let the candidate go on talking about the obvious. Getting stopped when you know and then getting new questions all the time is extremely frustrating. To soothe the pain I always give positive feedback when I stop the candidate. I tell him/her that this was good. It helps.

The interview consists of two parts: there is a series of theoretical questions we talk about and there is a task. Different task each time. Well, being honest there is only a bunch of tasks and not a new one for each candidate. Somehow these task definitions slip out of the building. Once a candidate made the oblivious statement: "This is not the task I was expecting. My friend two weeks ago had to solve a different task." Well, life is hard. Btw: he could solve the freshly pressed task easily.

There is a lot to learn from the two parts and how the two parts relate to each other. There are candidates who have great experience in technology but cannot solve a simple algorithmic task. At the same time, there are freshmen, who had little experience but were genius solving the task. And it was also very valuable when a candidate was carving a solution on the whiteboard that was different from the "official" one I created beforehand. It was shorter, faster and most importantly more readable and elegant. He is my colleague now.

As I mentioned before it is extremely important that I never evaluate the person. I only evaluate the actual performance during the interview. I never say that "Hey, buddy, you are dumb." It can be argued and does no good for anybody. Pointless. The result of the interview is different though. Go or no go. But does the result of the interview correlate with the real skill and knowledge?

When I was teaching at the university a student raised this question and said that exams are not fair since they measure the actual performance and not the knowledge that they are supposed to. By that time it was not only informatics but rather electric engineering they studied and thus I could refer to quantum mechanics that guarantees that you will never measure the physical quantity you are interested in. With the measure itself, you affect the system, thus the result of the measurement will not be accurate. We also know that we hardly ever measure the physical quantity we are interested in. We are, for example, interested in the current. Instead, we measure how much a pointer swings to the right by the forces of magnetic fields caused by the current. We prefer the situation when the measured quantity and the quantity we have an interest in depending on each other. If this can not be reached we are lucky to measure something that does not depend, but at least correlate. In real life, many times the measured thing has no relation at all to the quantity we would like to know. For example, not the person, who drives dangerous is fined, but the one who drives fast.

However, as a bottom line statement, if the teacher, the interviewer is professional, then the result of the interview and the skills and knowledge of the candidate correlate.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2013-05-28 12:09:04</wp:post_date>
  <wp:post_date_gmt>2013-05-28 11:09:04</wp:post_date_gmt>
  <wp:post_modified>2019-07-01 15:38:43</wp:post_modified>
  <wp:post_modified_gmt>2019-07-01 14:38:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exam-job-interview</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Should it be readable or should it work?]]></title>
  <link>https://javax0.wordpress.com/2013/07/17/should-it-be-readable-or-should-it-work/</link>
  <pubDate>Wed, 17 Jul 2013 06:20:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=54</guid>
  <description/>
  <content:encoded><![CDATA[<em>Should it be readable or should it work?</em>

This question was given to me by a junior programmer from my team a few month ago. The person was asking it aggressive and frustrated because the project was late and there was big pressure from the management to have the software delivered.

The answer, in such a stressful situation is evident: programs should work, otherwise they are just a list of characters or bytes. When adrenaline rushes there are only two choices: hit or run. That is the way our specie survived during the million years of evolution. But after a while, when you calm down you can start thinking. You end up with a working (really working ?) bunch of code. It passed UAT thus you are still alive, not fired and the Spanish inquisition packed their dreadful tools and went back to their offices on the top floor, for a while. The sun shines again, the dark clouds vanished, as for now. But what will come next after just two weeks when the next sprint finishes?

You take a deep breath and start to run again for the next sprint. The "working" code remains without re-factoring the way it is now. We need that code executing and readability comes into place only when you want to modify the code. Code modification is not in the scope for the moment. Delivering the next functionality, however, is. Project manager is swinging the whip above your head and you slowly realize that your code you imagined to be the best ever program on earth degrades to a heap of X (X can be different things based on your current mood, education and language versatility).

<blockquote>Any temporary code is terminal.</blockquote>

When you write a few lines of code to fix a bug and you put there a <tt>//TODO this has to be changed later</tt> you should know that the probability of the change is very small. The code will remain as it is. In some cases it will be re-factored but that is even worse. Why? Let me explain!

The refactoring is usually done because a developer can not stand the spaghetti macrame the code became and devotes some "free" time to do the re-factoring or re-structuring. This is not a professional approach. 

From the technology point of view it can be professional. There are unit tests and functional and integration tests and all the bells and whistles that are needed for a professional refactor. The non professional part is the financing.


<blockquote>If you found free lunch, better do not eat that. You never know why it was free.</blockquote>


It is not professional in the meaning that this is a work done for pure enthusiasm and not for the money. This work is financed by someone, who is not the consumer of the product of the work. Such a situation is never professional. There is no free lunch, and what is more: you better do want to pay for your lunch. That will ensure that you will have the quality lunch today, tomorrow and in the future so long as long you pay for it. You need the lunch, they need the money. The same holds for programming. In other words: you will get what you paid for. Low price: no meat in the soup.

Refactors are like lunches. You better pay for it if you are in the customer shoes. How much to pay? How much refactor you will really need to get the best code you can? Tricky question that is hard to answer.

<blockquote>Sometimes it is more important to have a code that is readable than a code that works.</blockquote>

The key word in this sentence is: <strong>sometimes</strong>. When the delivery is not in jeopardy. When this is the decision to do it Q&amp;D and go for a beer (or bear if you are the hunter type) or to DIR. <small>(Q&amp;D stands for quick and dirty, DIR is do it right)</small> I also feel the urge to finish something fast though not for rushing for the beer, neither the bear. First running the code I feel like Victor Frankenstein seeing his creature's first movement. But then, if it works, why mend? I do not want to kill my creature just to have a better looking code. The feeling when I can see bugs appearing that were not present in the ten-minutes-ago ugly code. Yes, it was ugly, but it worked. Why did I started to re-factor it? And then I bang my head against the wall.

But there is a caveat: if the ugly code worked but the refined, good looking code does not, there is a good chance that the old code was faulty as well, just unseen. You just did not realized the bugs were there. Turn on the light and the small feet run to the little holes at the side of the floor. Software bug is not cockroach. If you turn on the light they can be seen. Write unit tests. Write tons of unit tests and spend time thinking how your code could look better. It will pay for it. And the long run: the customer will pay it, and on the other hand customer will also get the value. Then you will not face the question any more <em>Should it be readable or should it work?</em>

So long as long the next project starts...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2013-07-17 07:20:08</wp:post_date>
  <wp:post_date_gmt>2013-07-17 06:20:08</wp:post_date_gmt>
  <wp:post_modified>2013-07-17 07:20:08</wp:post_modified>
  <wp:post_modified_gmt>2013-07-17 06:20:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>should-it-be-readable-or-should-it-work</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Partial redesign]]></title>
  <link>https://javax0.wordpress.com/2013/05/27/partial-redesign/</link>
  <pubDate>Mon, 27 May 2013 14:32:15 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=67</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>The difference between refactoring and redesign is 10 minutes.</blockquote>

Ten minutes a lot of time. It is just enough to get drown. If you are young it can be enough for a quick something, for example to run a mile. And ten minutes is the difference between refactoring and redesign. Anything that takes longer than ten minutes can not be refactoring. That can be redesign.

Based on these I could imply that refactor is what you can do holding your breathe, but that won't work. First of all there are only a few men, who can hold their breathe for ten minutes and usually they are not quite good at programming. At second thought you need brain power to do programming and the apnoe diving is not about deep sinking... thinking.

So now we know that redesign is something like refactor but it is longer. Horsey refactor is redesign. What about partial?

Partial redesign is practice when you can not perform a whole redesign and therefore you chop it up. There can be multiple reasons for not being able to perform the whole redesing in a single sprint besides being old. There may not be enough time. That is a 100% indicator: if you planned redesign in a sprint and the plan says that it will not fit, you can be very sure, no matter how bad you estimate that it will not fit.

When you chop up a redesign into small drops you have to ensure you have working code after each drop is swallowed. This is also a difference between refactor. When you do refactor you continuously have working code. (Or not.) You can do redesing also that way but sometimes you just decide not to do that since that may be too expensive requiring lot of temporary code that is needed only to keep the code alive during the process and that is not needed nor before neither after the redesign. (Lucky we are. Doing open heart surgery there is no such option.)

So you make partial redesign. And then comes the experience: if you successful with the first drop of the partial redesign it will stuck at that point. There will be no further time to continue with the rest of the redesign. Trust me, I am an engineer: it is the way it is going to be. In other words if the drops do not deliver value individually: better do not do them at all.

Making it clear and clean: If there is a scout camp that has to be redesigned and you want to replace the location of the kitchen and the latrine, do  not start transforming the kitchen, because when you stop after the first partial redesign you will have two latrines and no place to eat. And then you will be in deep trouble.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>67</wp:post_id>
  <wp:post_date>2013-05-27 15:32:15</wp:post_date>
  <wp:post_date_gmt>2013-05-27 14:32:15</wp:post_date_gmt>
  <wp:post_modified>2013-05-27 15:32:15</wp:post_modified>
  <wp:post_modified_gmt>2013-05-27 14:32:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>partial-redesign</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Project lollipop]]></title>
  <link>https://javax0.wordpress.com/2013/07/27/project-lollipop/</link>
  <pubDate>Sat, 27 Jul 2013 21:51:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=86</guid>
  <description/>
  <content:encoded><![CDATA[When a young child goes to see a doctor he or she usually gets a lollipop. This is not something really needed for their health, especially argued by dentists. Lollipops do not increase health. They do not make checkup easier. They simply make the whole process more pleasant for the children.

This is similar in IT projects. Stakeholders spend money on your project right from the start but see no benefit for long time. If you provide lollipop, the process may be a bit more pleasant and you can lower the risk of financing change during the project especially in ramp-up period.

Lollipop is not quick win. Quick wins are also very important and should be part of a project to make success more certain. They deliver "real" business value and help to assure all project participants that the project will deliver value in the long run as well. Stakeholders as well as other participants, typically users. Quick wins are part of the final solution in the long run, just scheduled to be delivered sooner than their logical delivery time would otherwise be. Their early schedule usually costs extra money, but it pays back on the human factor. Sometimes quick win deliveries are altered by time, sometimes they are eliminated totally by the end of the project so it may seem that their development was totally waste. But still: they are used for a period and they deliver significant business values.

Lollipops are different a bit. Lollipop is not something necessary for the goal of the project, for the "real" business. They are some features that some of the stakeholders like. Something like adding an Excell export from some database. Business people like Excell exports like children like lollipop. They do not deliver great business value, however they are cheap. Just like lollipop. And then again, some time they turn out to be of real business value: found money, be happy. (This is not really the case for lollipops.)

When you design your projects, think about the possible lollipops. They may be different for each stakeholder, but it is worth devoting the time to find them. If you did it is less likely when you explain why you overrun the budget or time they angrily ask you: where is the poop?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>86</wp:post_id>
  <wp:post_date>2013-07-27 22:51:54</wp:post_date>
  <wp:post_date_gmt>2013-07-27 21:51:54</wp:post_date_gmt>
  <wp:post_modified>2013-07-27 22:51:54</wp:post_modified>
  <wp:post_modified_gmt>2013-07-27 21:51:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>project-lollipop</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd610fed0268dfa03ae09f60363535ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63913f598b4e60746f406b95c09a30a6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_20216f3eb1c4ff590c535546636a0a83</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_309783793e7276a3f2fb5923ea7684fb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>26</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.164.230.186</wp:comment_author_IP>
    <wp:comment_date>2013-07-29 13:09:34</wp:comment_date>
    <wp:comment_date_gmt>2013-07-29 12:09:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Haha, nice one! We used to call them "VIP-requirements", issued by stakeholders from the very top who didn't have a lot of say in the project, otherwise.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1375099775]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375099775.6190741062164306640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-07-29 12:09:34]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.185.132</wp:comment_author_IP>
    <wp:comment_date>2013-07-29 15:09:39</wp:comment_date>
    <wp:comment_date_gmt>2013-07-29 14:09:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very close but this is not exactly the same. Gently exceeding your users expectation is sometimes possible, sometimes not. There are users for whom you just simply can not exceed any expectations. That is bad for them since they are always dissatisfied, and it is bad for the developer because of the imminent stress that it builds. You just can not disclose.

Lollipop is something that does not pay back business wise and if the psychological effects were not taken into account a good project manager would negotiate them off. But she/he does not because they are kind of munitions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>25</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375106979.557364940643310546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1375106979]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-07-29 14:09:39]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.98.237.33</wp:comment_author_IP>
    <wp:comment_date>2013-07-28 21:36:36</wp:comment_date>
    <wp:comment_date_gmt>2013-07-28 20:36:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think this is what the pragmatic programmers call "Gently exceed your users' expectations"
http://pragmatictips.com/69]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375043849.8182780742645263671875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1375043849]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375043797.190659046173095703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-07-28 20:36:36]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Should I write a new unit test?]]></title>
  <link>https://javax0.wordpress.com/2013/08/08/should-i-write-a-new-unit-test/</link>
  <pubDate>Thu, 08 Aug 2013 16:38:20 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=89</guid>
  <description/>
  <content:encoded><![CDATA[Recently in a project a method was altered from <tt>private</tt> to be <tt>public</tt>. The functionality that was used only inside the class was needed from outside and the without any other change the method got into the interface the class implemented and the keyword <code>private</code> was changed to <code>public</code>. To do that this was a task. We estimated the effort. How much was it? 2 hours. Although the 2-hour time is not a huge one in a project, project management was not happy with that and practicing control they asked, what does it take so long to replace <code>private</code> to <code>public</code> in a Java source file. The discussion was something like this:

<ul>
	<li>Why is it two hours to replace the word private to public?</li>
	<li>We also have to write unit test for the method.</li>
	<li>But there are already unit tests for the class, not?</li>
	<li>Yes, but we do not test private methods in unit tests and thus there are no unit tests testing this method.</li>
	<li>I assume that the coverage of the unit tests is 100%</li>
	<li>Yes it is.</li>
	<li>Then this method is also covered by unit tests 100%. Right?</li>
	<li>Well, yes... as long as code coverage. But functional coverage...</li>
</ul>

This is a situation where functional coverage and code coverage has significant differences. When we create unit tests we are interested in functional coverage. If the methods of a class can perform all the functions they have to, and this is tested by the unit tests, then the class has 100% functional coverage in unit tests. If running unit tests executes each and every line at least once, and all possible branches of code execution is executed both way (part after the <code>then</code> and also after the <code>else</code>) then the code coverage is 100%.

We usually measure the code coverage for the practical reason that we can measure that cheaply. Functional coverage can not be measured so easily. We need a formal definition of the functions and some test versus functionality matching and coverage estimation that is hard if not impossible to automate. On the other hand code coverage is a good measure and we can get very far measuring that even though we know it is not perfect.

There are four different cases:

[cols="1,2"]
|===
|*cF* code coverage &lt; 100% functional coverage 100%
|*CF* code coverage 100%  functional coverage 100%

|code coverage 100% functional coverage &lt; 100%
|*cf* code coverage &lt; 100%  functional coverage &lt; 100%

|===

<b>CF</b> is the ideal case, when both functional and code coverage is 100%. We may never reach that state, but that is what we aim for. The problem is you can never prove or know how close you got there.

<b>cf</b> is the usual case when we do not have enough unit tests and thus neither code nor functional coverage is 100%.

<b>Cf</b> is also very frequent. This is the case in most projects. The code is covered by unit tests, still there can be some cases not tested. If you look at the simple sample method:

[sourcecode language="java"]
double div(double a, double b){ return a/b; }
[/sourcecode]

A simple test dividing <tt>2.0</tt> by <tt>1.0</tt> will result 100% code coverage, still we did not test the case when <code>b</code> is zero.

The tricky combination is <b>cF</b>. Juniors usually say that this is not possible. They are right in the sense that there is very limited practical value in this case. It happens rarely. But sometimes it does and it means that there is dead code. If all the functions can be executed without ever touching a certain line, than that line is superfluous.

So what does it have to do with the situation making a private method public? The code did not change thus it will not change <b>C</b> to <b>c</b> in code coverage, but functionality changed implicitly.

The functionality of a private method is limited by the use of the method inside the class. The contract between the private method and their clients is very informal, and since they are tightly coupled there is no too much room for worries caring about special argument values. If the method in the example above is called ensuring in the caller that <code>b</code> is never zero then this is fine. There is no JavaDoc, there is no checking. If the method becomes public then the contract changes. The general part does not change, but the fine prints do.

You have to declare that argument <code>b</code> should never be zero, and you have to define what happens if some client happens to call it that way. This is a new functionality that just emerged without any new code just making the method public. New functionality deserves new unit tests.

<big>Summary</big>

If you change a private method to be public and you promote it to be part of the interface the class implements do not assume that this is only a keyword change. Create the appropriate tests that double check the functionality.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2013-08-08 17:38:20</wp:post_date>
  <wp:post_date_gmt>2013-08-08 16:38:20</wp:post_date_gmt>
  <wp:post_modified>2013-08-08 17:38:20</wp:post_modified>
  <wp:post_modified_gmt>2013-08-08 16:38:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>should-i-write-a-new-unit-test</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[We do not use UML, we are agile]]></title>
  <link>https://javax0.wordpress.com/2013/08/14/we-do-not-use-uml-we-are-agile/</link>
  <pubDate>Wed, 14 Aug 2013 08:50:58 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=101</guid>
  <description/>
  <content:encoded><![CDATA[I have heard many times the sentence(s) in the title and I can not argue with that. These are two independent statements, and it is out of my scope to disagree. Your group does not use <a href="http://en.wikipedia.org/wiki/Unified_Modeling_Language">UML</a>. Fact. You are working agile: again: fact. What to argue about? The problem usually is the implied "because" between the two statements. If you say <i>"We do not use uml BECAUSE we are agile."</i> then there is a problem. Not a life threatening issue, but still something to think about again and perhaps get things better. After all agile is all about constant improvement.

UML is a tool that can be used different level, different purposes and there may be some place to use it even when you are working agile. There are <a href="http://saturnnetwork.wordpress.com/2010/10/22/five-reasons-developers-dont-use-uml-and-six-reasons-to-use-it/">several reasons</a> why not to use and also why to use UML. My experience for the reasoning why not to use uml lists the same reasons as the article referenced above. You can see yourself that these argument are also very lame. All of them can be summarized as: "I do not know it, therefore I do not use it." All other words are just psychological self-confirmation to push aside the bad feeling for the poor decision not to learn the right tool. Learning new topics is hard and people are inherently lazy to learn new things. Very true. But this is what makes us, experts having good job. Are you an expert?

This is even worse when people learn new things (this time this is about UML) but learn it half-way and do not take the pain to use it properly. Here I list a few examples of extremely bad UML use that you have to avoid by all cost. I personally have seen examples of each.

<blockquote>Intimidate customer BA using UML</blockquote>

Once I met a software company who created vast amount of UML diagrams and presented the architecture to the technical people of the customer in this form. This alone was not a problem. The issue with this was that the technical people were aware of UML as such but were now knowledgeable. They just could not read UML and were afraid to admit it. They were afraid to ask, complain about flaws in the design and the architecture documents went approved without significant feedback. This made the architect's life easier for the time, but caused significant headache for the company on the long run. Even though the architecture design is the responsibility of the vendor it is not without reason they are to be approved by the customer. After all: this is a cake baked by the vendor but is eaten by the customer.

<blockquote>Creating UML for the obvious</blockquote>

This was very similar to the first one: UML was used to impress the customer. There was an UML model created for each and every class, even the simple utility classes, component, communication models and everything. Then the UML tool created hundreds of pages, redundant PDF documents with all the diagrams that were imaginable generated from the model. Fortunately the PDF was never printed killing trees.

<blockquote>Diagrams UML like</blockquote>

I have seen many times diagrams that looked like UML diagrams at the first view. On the second glance you spot some strange notations and then you realize that different diagram elements are mixed in a single diagram, and they are used in totally wrong ways. I have seen many times class diagram elements used to depict relations between modules. What seemed to be inheritance by the notation turned to be a communication from one component denoted as a class to the other by the intention of the designer. The complaint was: <i>"our drawing tool does not support component diagrams"</i>. OMG! Use a different tool then! Pencil and paper version 1.0 ?

<blockquote>We know UML</blockquote>

<i>"We know UML."</i> The problem was that the members of the team knew UML differently. They sketched something on the white board discussing the architecture but instead of doing the effective work, soon they fiercely argued on a specific line if that is composition, aggregation or a simple relation. C'mon: focus on the real issue.

<h2>Conclusion</h2>

I do not tell you have to use UML. I do recommend though. Learn it a bit. But do not learn it to the extreme. Learn it to use it and not for knowing all the bits of it. (This is true for almost anything.) Do not be shy admitting if you do not understand something. Ask for clarification. If you lack UML knowledge and you are the customer, ask the vendor to setup a workshop for you and explain the notation. If they say: "hey, this is UML" you can bravely say: "Hey, I am the customer."

Do not generate UML documentation, huge, many page PDF files. Whenever you create a document ask yourself the question: who will read it and what is the purpose to read it? If you are the customer, be strict and limit the size of the documentation you are willing to accept and read.

It may happen you use UML "like" drawings, but do not be happy getting drowned into that mud. Learn and strive for the correct use. Other professionals will understand your diagrams if it means what it is meant to mean.

And last, but not least: use UML as a tool and focus on the work to be done. Use UML and be agile.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>101</wp:post_id>
  <wp:post_date>2013-08-14 09:50:58</wp:post_date>
  <wp:post_date_gmt>2013-08-14 08:50:58</wp:post_date_gmt>
  <wp:post_modified>2013-08-14 09:50:58</wp:post_modified>
  <wp:post_modified_gmt>2013-08-14 08:50:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>we-do-not-use-uml-we-are-agile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[kingbabounebaboune]]></wp:comment_author>
    <wp:comment_author_email>seyvet@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/kingbaboune</wp:comment_author_url>
    <wp:comment_author_IP>213.114.144.237</wp:comment_author_IP>
    <wp:comment_date>2013-08-17 19:03:04</wp:comment_date>
    <wp:comment_date_gmt>2013-08-17 18:03:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Problem starts when people use UML to produce code and believe this to be the grail. When in fact they use a subset of UML that they selected for their needs and their documentation purposes.  As a modeling language for generating code, UML is flawed and too complex to use for a project vs a programming languages made up of words and semantics.  Yes, it is good for illustration when (As pointed out) people understand it. To express the various flows of a real complete (code level) project requires too many different UML diagrams. This ends up as being so many pictures that it is simply not human readable. Books (words and semantics) are used to tell stories, I doubt a series of diagrams can do better in an efficient way.  At least that is my perception.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376762584.8303949832916259765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"kingbaboune";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1376763605]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-08-17 18:03:04]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29</wp:comment_id>
    <wp:comment_author><![CDATA[Tom]]></wp:comment_author>
    <wp:comment_author_email>thomas.legrand@genmymodel.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.genmymodel.com</wp:comment_author_url>
    <wp:comment_author_IP>81.66.216.222</wp:comment_author_IP>
    <wp:comment_date>2013-08-18 21:57:20</wp:comment_date>
    <wp:comment_date_gmt>2013-08-18 20:57:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Peter, this is a very interesting post. Thousands of software architects couldn't agree more with your arguments. Congrats for your outspokenness.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376859440.3959519863128662109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"genmymodel";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1376893755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-08-18 20:57:20]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30</wp:comment_id>
    <wp:comment_author><![CDATA[Tom]]></wp:comment_author>
    <wp:comment_author_email>thomas.legrand@genmymodel.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.genmymodel.com</wp:comment_author_url>
    <wp:comment_author_IP>81.66.216.222</wp:comment_author_IP>
    <wp:comment_date>2013-08-18 22:05:35</wp:comment_date>
    <wp:comment_date_gmt>2013-08-18 21:05:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I understand what you mean but the first goal of UML is neither to produce code nor to model the code. It 's mainly a communication tool used at a higher level of abstraction. Diagrams shouldn't tell the whole story with all the details; they rather should give the plot so that you can enjoy the sentences :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376859935.404612064361572265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"genmymodel";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1376893807]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-08-18 21:05:35]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31</wp:comment_id>
    <wp:comment_author><![CDATA[kingbaboune]]></wp:comment_author>
    <wp:comment_author_email>seyvet@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/kingbaboune</wp:comment_author_url>
    <wp:comment_author_IP>194.237.142.20</wp:comment_author_IP>
    <wp:comment_date>2013-08-19 07:32:52</wp:comment_date>
    <wp:comment_date_gmt>2013-08-19 06:32:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Tom: Exactly. UML should communicate the plot.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>30</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376893972.4310400485992431640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"kingbaboune";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1376895823]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376895823.657599925994873046875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-08-19 06:32:52]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.185.132</wp:comment_author_IP>
    <wp:comment_date>2013-08-19 08:04:31</wp:comment_date>
    <wp:comment_date_gmt>2013-08-19 07:04:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>29</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1376895871]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376895872.1952350139617919921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-08-19 07:04:31]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>168</wp:comment_id>
    <wp:comment_author><![CDATA[lmm]]></wp:comment_author>
    <wp:comment_author_email>md401@srcf.ucam.org</wp:comment_author_email>
    <wp:comment_author_url>http://m50d.github.io</wp:comment_author_url>
    <wp:comment_author_IP>86.144.221.174</wp:comment_author_IP>
    <wp:comment_date>2014-03-25 15:46:12</wp:comment_date>
    <wp:comment_date_gmt>2014-03-25 14:46:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have seen plenty of bad UML but I've never seen good UML. How many chances am I supposed to give it before I give up and conclude that the technology is fundamentally broken?

UML seems to be opposed to agile because as far as I can see it's only ever used for non-functional requirements, which are anti-agile. It's not a good tool for expressing functional/business requirements. It's not a good tool for expressing technical design, which in any case should not be done ahead of time - the best, agile way is to allow design to be emergent, arising from test-driven implementation of requirements rather than architecting up front.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395758774]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22770850523]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395758773]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395758773.79666805267333984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"m50d";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-25 14:46:12]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>169</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-03-25 20:29:25</wp:comment_date>
    <wp:comment_date_gmt>2014-03-25 19:29:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You are unlucky you have not seen any good UML.

Agile or not, sometimes you need to draw. When you communicate with your co-workers, with your customers you talk, you write and sometimes you draw pictures. A picture is worth a thousand words. When drawing it is better to use some standard and a standard toolset. For example draw UML using a pencil on paper: standard format and standard toolset. I recommend <a href="http://martinfowler.com/books/uml.html" rel="nofollow">UML Distilled by Martin Fowler</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>168</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395775765]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395775765.958756923675537109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22777172878]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395775766]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-25 19:29:25]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>171</wp:comment_id>
    <wp:comment_author><![CDATA[lmm]]></wp:comment_author>
    <wp:comment_author_email>md401@srcf.ucam.org</wp:comment_author_email>
    <wp:comment_author_url>http://m50d.github.io</wp:comment_author_url>
    <wp:comment_author_IP>86.144.221.174</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 18:06:23</wp:comment_date>
    <wp:comment_date_gmt>2014-03-26 17:06:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think if you're using pencil and paper you're not using what most developers understand by UML and what we tend to object to.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>169</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395853583]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395853584.026607990264892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"m50d";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22803352114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395853584]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-26 17:06:23]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>173</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 18:34:06</wp:comment_date>
    <wp:comment_date_gmt>2014-03-26 17:34:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Have a look at UML Distilled. It is short, practical, focusing on real use. It discusses the levels. Most of the time I use whiteboard, Visual-Paradigm, MagicDraw UML, EA or MS Visio. Whatever is available for the project. I hardly ever use UML more than sketching. That is where, in my opinion, UML adds the most value.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>169</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395855247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395855247.6097528934478759765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22803977450]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395855248]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-26 17:34:06]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How to instantiate the system class]]></title>
  <link>https://javax0.wordpress.com/2013/08/21/how-to-instantiate-the-system-class/</link>
  <pubDate>Wed, 21 Aug 2013 07:55:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[This question is raised many times by novices. I have seen it many times on different forums and yesterday it came in front of me on LinkedIn. There are numerous answers to this questions, and we can learn a bit from the different answers.

The question itself is triggered by the fact that the <code>System</code> class is a utility class that has only <code>static</code> fields and methods and is not meant to be instantiated. Because it is not meant to be instantiated it has an explicit private, argument-less constructor and there is no factory method inside the class calling this constructor. Because of this you just can not write

[sourcecode language="java"]
System system = new System();
[/sourcecode]

without getting compilation error.

<h2>Answer#1, use reflection</h2>

[sourcecode language="java"]
Constructor&lt;System&gt; constructor = System.class.getDeclaredConstructor(null);
constructor.setAccessible(true);
System system = (System) constructor.newInstance(null);
[/sourcecode]

This is a very straightforward answer and you can get a kick start and motivation to learn reflection. On the other hand it does not give much to your java knowledge development in addition to waking your curiosity.

People wanting to educate usually give another answer



<h2>Answer#2 You Shall Not</h2>

Why do you want to instantiate the System class? There is no use of it and it was designed not to be instantiated. It was designed not to be instantiated and engineers at SUN did all measures to prevent you to do that.

Really? All measures?

Well, not really. All measures that are on economic level. There can be more things to do. And here comes the next topic in the chain of thoughts:

<h2>How to protect utility classes</h2>

The <code>System</code> class is protected the way it is and we will return at the end of this article why it is not protected more. If there are more ways to protect a utility class to be instantiated is another question. The possibilities are the following:

<ol>
	<li>Document the class and clearly express that the user of the class is not expected to instantiate the class. This helps a lot, but the user may still accidentally instantiate the class not fully understanding the documentation and the intended use of the class. This happens quite often, therefore using more technology to prevent this is easy to justify.</li>
	<li>Have an argument less private constructor. This will prevent the casual user to instantiate the class. Even if the user was sloppy or hard understanding the documentation language he or she will face the fact that the compiler will not compile the code that contains <code>new UtilityClass</code>. On the other hand the users still can use reflection. Do we care? For now, yes.</li>
	<li>Do not call this private constructor from you static methods. Obviously this would just ruin all your efforts you invested making the constructor private.</li>
	<li>Make the class final. Why does it help? It will not prevent the direct user of the class to use reflection but will prevent anyone to create a library that extends the utility class and makes it instantiable using special tricks. The next user using the extending class may fall into a trap without  wrong intention getting an instance of your class through the extended class.</li>
	<li>To prevent reflection initiating the class throw a run-time exception from the constructor of the class. Even if you catch this exception in the code that uses reflection, you can not get access to the created objects being half way initialized, since the assignment to a variable or any use of the object the operator <code>new</code> returns would execute after the constructor returns. And the constructor just does not return.</li>
</ol>

These are the tools to make a utility class safe. There may be some more tricks that one can apply, but I strongly believe that this is already more than enough. SUN engineers made the class <code>final</code> and the constructor <code>private</code>. They believed that anything else is overkill, and I tend to agree with them.

Bonus question for the not faint of hearts:

How can you still get access to an instance of a class that was created using all the above (1-5) preventive measures? I will tell you on this blog in the next article, apprx in a week.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2013-08-21 08:55:41</wp:post_date>
  <wp:post_date_gmt>2013-08-21 07:55:41</wp:post_date_gmt>
  <wp:post_modified>2013-08-21 08:55:41</wp:post_modified>
  <wp:post_modified_gmt>2013-08-21 07:55:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-instantiate-the-system-class</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc2011a2becaad68c370f151e0544bce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Do not return from 'try' block]]></title>
  <link>https://javax0.wordpress.com/2013/10/02/do-not-return-from-try-block/</link>
  <pubDate>Wed, 02 Oct 2013 08:12:49 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=131</guid>
  <description/>
  <content:encoded><![CDATA[The document JPS_Coding_Standard_java R43 suggest that you do not abruptly exit a finally block. This means returning from it, throwing exception. The document lists two examples that are great, but then there are more things not to do:

<blockquote>
Do not abruptly return from a try block!
</blockquote>


Assume you have a try/finally construct and you return from the 'try' branch:

[sourcecode language="java"]
    StringBuilder stringed(final int a) {
        final StringBuilder b = new StringBuilder();
        try {
            b.append(a);
            return b;
        }
        finally {
            b.append(new StringBuilder().append(a).reverse());
        }
    }
[/sourcecode]

What you actually should expect is to have a string builder returned containing the decimal representation of the <tt>int</tt> number <tt>a</tt>. However the finally branch modifies the object even before the method returns. Clean code says that there should be only one return statement in a method. Here we have only one, and still it is not clear what happens.

One may argue that the method works properly and it is supposed to return the string builder that contains the decimal representation of the number twice, once normal and once reversed and this is the way try and finally works. You may be a hard core old programmer who eats Java code for breakfast, but the code to be produced should always be targeting the average Java programmer, who will have trouble maintaining the code and understanding reading it is a must.

Better: never ever return from a try block. And just to try to impress you: the following is also a perfectly valid, and the same time perfectly mindless Java code:

[sourcecode language="java"]
    int $_() {
        $_: {
            try {
                return 1;
            }
            finally {
                break $_;
            }
        }
        return 0;
    }
[/sourcecode]

If you can tell me the return value without hesitation and with total certainty, you are in the top 1% of the Java programmers. In that case you know the language more than needed and you wasted your time learning it to that level.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>131</wp:post_id>
  <wp:post_date>2013-10-02 09:12:49</wp:post_date>
  <wp:post_date_gmt>2013-10-02 08:12:49</wp:post_date_gmt>
  <wp:post_modified>2013-10-02 09:12:49</wp:post_modified>
  <wp:post_modified_gmt>2013-10-02 08:12:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-return-from-try-block</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5791082121594413056&type=U&a=Tdzg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[How to instantiate utility class]]></title>
  <link>https://javax0.wordpress.com/2013/08/28/how-to-instantiate-utility-class/</link>
  <pubDate>Wed, 28 Aug 2013 08:58:16 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=133</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="#">previous blog</a> we had a look how to protect utility classes to be instantiated. We finally got to this class:

[sourcecode language="java"]
public final class YouJustCanNotInstantiate {
    private YouJustCanNotInstantiate() {
        throw new RuntimeException(&quot;You just can not instantiate this class.&quot;);
    }
}
[/sourcecode]

Seems to be a tough guy. Still there are ways to get an instance of this class:

[sourcecode language="java"]
Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);
f.setAccessible(true);
Unsafe unsafe = (Unsafe) f.get(null);
YouJustCanNotInstantiate s1 = (YouJustCanNotInstantiate) unsafe.allocateInstance(YouJustCanNotInstantiate.class);
[/sourcecode]

It works fine on ORACLE JVM, but be aware that this is not standard and may not work on other JVMs. Actually there is no guaranteed Java way that always works. However there is a project called <a href="https://code.google.com/p/objenesis/">Objenesis</a> that does the trick and works on Android, Rockit, Gcj and Perc JVM in addition to the "standard" ORACLE JVM. Have a look at it! It is an interesting project at least to learn from.

<b>WARNING:</b> if a class was not meant to be instantiated and was protected from that the way above, then you will deserve what you get following this pattern. You have been warned.

<small>Credit: Yuriy Fuksenko, and Norbert MadarÃ¡sz for pointing out these solutions on LinkedIn</small>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>133</wp:post_id>
  <wp:post_date>2013-08-28 09:58:16</wp:post_date>
  <wp:post_date_gmt>2013-08-28 08:58:16</wp:post_date_gmt>
  <wp:post_modified>2013-08-28 09:58:16</wp:post_modified>
  <wp:post_modified_gmt>2013-08-28 08:58:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-instantiate-utility-class</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_469b19c1e5f3b7fdcc29bba5ab5fd95c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f7fbaa5b9f6b17c64f692d3d2d392f2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04723295bbf6317a7dc8e5bac01b1149</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e9459350d293321594660e148ab8caff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[JavaDoc the Elephant]]></title>
  <link>https://javax0.wordpress.com/2013/09/04/javadoc-the-elephant/</link>
  <pubDate>Wed, 04 Sep 2013 11:14:44 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=152</guid>
  <description/>
  <content:encoded><![CDATA[Clean code says that you should not write inline comments, and you also should not write java doc for things that are trivial. I, myself also get mad seeing comments like

[sourcecode language="java"]
    /**
     * Calculates a/b
     * @param a the nominator
     * @param b the denominator
     * @return the calculated value
     */
    double div(final double a, final double b) {
...
[/sourcecode]

This is absolutely pointless. However on the other end there are examples when non-commenting gets to the extreme. The following is an imagined situation.
<hr />
<ul>
	<li>Joe: We need to transport branches. Did you prepare the library for the purpose?</li>
	<li>Aliz: Yes, as agreed. Here you have the code, the compiled version is in the repository. Have a good day.</li>
	<li>Joe: Wait! Wait! Where is the documentation?</li>
	<li>Aliz: Documentation? You have the code. This is self explanatory. We follow clean code. There is no reason to repeat in English that is best described by the code.</li>
	<li>Joe: Hm... Ok. We will see.</li>
	<li>Aliz: You are experienced programmers, it should not be a problem to understand our code.</li>
</ul>

Joe then starts to read the code and this is what he sees:
<img src="http://upload.wikimedia.org/wikipedia/commons/1/1e/Elefant_pune.jpg" width="50%" />

<blockquote>This is an elephant.</blockquote>

"Great! Aliz delivered us an elephant to transport branches. We need a tamer, harness. Not a big cost to produce, still a bit inconvenient. But on the other hand we can also use this as a shower. When the elephant is in good mood it is playful and sprinkles water on people, which is fun and can also serve as a kind of cleaning process in certain situations, so we can transport branches cleaned."

So Joe, and his troop start to use the transport appliance, and at the same time complains that Aliz and her team deliver the harness and the tamer in the next release.

<ul>
	<li>Joe: So you delivered the next release of the library to transport branches.</li>
	<li>Aliz: Yes, and we listened to your complaints and you do not need any tamer anymore neither have you the burden to fix a harness on the appliance.</li>
	<li>Joe: And how can we use the new version?</li>
	<li>Aliz: Just as the previous one. Just put on the branches and have them transported. There may be some small differences in the usage, but you, as senior programmer will easily solve that. Read the code!</li>
</ul>

Joe then starts to read the code and this is what he sees:

<img src="http://upload.wikimedia.org/wikipedia/commons/7/70/Yellow_Mercedes_Benz_Sprinter.PNG" width="50%" />

<blockquote>This is a van.</blockquote>

"We do not need a tamer, but we need a driver, which is certainly more common these days and is a simpler task to provide. Although this has to be a truck driver and not a system driver, it is still manageable. But how can we use this thing to clean the branches?"

Since Joe and his team already have the tamer, and the harness, and since they already have a well tamed elephant, they feel reluctant to use the new version. Also the sprinkler is fun, though that is not the main purpose but still: it makes them like the version 1.0.0 of the transport appliance as opposed to the version 1.1.0

Time passes and after a few month Aliz sees that the team of Joe still reports bugs (no matter how often the elephant is cleaned) of the version 1.0.0 and had not started to use the second version. What is the problem?

<hr />

The problem is that there was no documentation clearly defining what is delivered as guaranteed function and what is delivered by "accident", internal methods and packages that in Java world can not be totally hidden. If the elephant were declared as a transport appliance and the method to sprinkle water were documented clearly as an internal functionality then the team of Joe would not have used that. Every responsible developer knows that non-supported methods, classes, packages should not be used from outside of the library or else there are consequences: typically version lock in.

For example ORACLE (and formerly SUN) engineers clearly documented that the packages <tt>sun.*</tt> are for internal use and no real developer dared to use those classes in production code. <a href="http://www.infoq.com/news/2013/08/Oracle-Resurrects-getCallerClass">Or am I wrong?</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>152</wp:post_id>
  <wp:post_date>2013-09-04 12:14:44</wp:post_date>
  <wp:post_date_gmt>2013-09-04 11:14:44</wp:post_date_gmt>
  <wp:post_modified>2013-09-04 12:14:44</wp:post_modified>
  <wp:post_modified_gmt>2013-09-04 11:14:44</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>javadoc-the-elephant</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.98.237.33</wp:comment_author_IP>
    <wp:comment_date>2013-09-04 19:16:14</wp:comment_date>
    <wp:comment_date_gmt>2013-09-04 18:16:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I really like this elephant metaphor, especially the part when the team builds dependencies on the trunk :)

One example I witnessed at a client of ours was this: They had a classical JEE application: they had an appserver, they had an Oracle database, moreover they even had an open mq. So far so good. If you take a closer look at open mq documentation, you'll learn that you can configure it to store its messages in a DB. So, the developers concluded, let's write selects to that DB! But, if they write selects, why not make them participate in distributed XA transactions? It was great fun debugging it.

Here is another elephant's trunk. I am guilty of this one: Once I had to extend a JComboBox to display a few values which are not selectable. Among other things I had to wrap a few actions in its ActionMap. The key of that map are documented nowhere. You can either print them to the console or you can find them as private static fields of the BasicComboBoxUI.Actions inner class. It makes me shiver when I think about it.


Regarding the documentation, I prefer tests as example code. They should be fine for in-team documentation. For the world out there, well, one has to design an API and thoroughly document it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1378318574]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378318574.7317049503326416015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-09-04 18:16:14]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Something you did not know about the ternary operator]]></title>
  <link>https://javax0.wordpress.com/2013/09/18/something-you-did-not-know-about-the-ternary-operator/</link>
  <pubDate>Wed, 18 Sep 2013 09:15:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=159</guid>
  <description/>
  <content:encoded><![CDATA[Recently I had a little surprise. It started me compiling some Java class and it did not work the way I expected. This is not the surprise itself: this is just the way I live. Develop, debug, release cycles. So the development cycle started. I was looking to find a bug in my code and as I tightened the bug boundary it came down to a ternary operator. The following sample demonstrates the situation:

[sourcecode language="java" wraplines="false"]
public class Bug{
    public static Number q(Number in) {
        return in instanceof Long ? 1L : 1.0;
    }
}
[/sourcecode]

It was supposed to return a <tt>Long</tt> or a <tt>Double</tt> value of one, depending on the type of the argument. However the method returned a 1.0 <tt>Double</tt>.
<p>
I looked at the code generated by javac using the javap disassembler and I saw that the case is really the one I explained above:
[sourcecode language="text" wraplines="false"]
public static java.lang.Number q(java.lang.Number);
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0       
         1: instanceof    #2                  // class java/lang/Long
         4: ifeq          11
         7: dconst_1      
         8: goto          12
        11: dconst_1      
        12: invokestatic  #3                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        15: areturn       
[/sourcecode]

No matter what type the argument has, the code loads a constant <tt>Double</tt> on the operational stack executing the bytecode (<tt>dconst_1</tt>). This code is not good. But it does not mean that there is a bug in the javac compiler. This is not a bug, this is a feature.

The next thing I consulted was the Java language specification. You can read it from the URL <a href="http://docs.oracle.com/javase/specs/jls/se7/html/index.html">http://docs.oracle.com/javase/specs/jls/se7/html/index.html</a> and it talks about the <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.25">ternary operator</a>: 
<p>
<i>Otherwise, if the second and third operands have types that are convertible (Â§5.1.8) to numeric types, then there are several cases: </i><br>
...<br>
<i>Otherwise, binary numeric promotion (Â§5.6.2) is applied to the operand types, and the type of the conditional expression is the promoted type of the second and third operands.</i>
<p>

In our case numeric promotion happens according to Â§5.6.2 :
<p>
<i>If either operand is of type double, the other is converted to double.</i>
<p>
It explains why this code above is useless. in situations like that use the good old 'if' 'then' 'else' construct.
<p>

<h3>Update</h3>

Recently Lukas Eder posted a <a href="http://blog.jooq.org/2013/10/08/java-auto-unboxing-gotcha-beware/"> similar article</a> on his JOOQ blog worth following. This article is brief and highlights a different effect of the same issue.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2013-09-18 10:15:37</wp:post_date>
  <wp:post_date_gmt>2013-09-18 09:15:37</wp:post_date_gmt>
  <wp:post_modified>2013-10-10 10:53:55</wp:post_modified>
  <wp:post_modified_gmt>2013-10-10 09:53:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>something-you-did-not-know-about-the-ternary-operator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_f57cc732ba3a77c4f119204f5a4afd6c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d642b33e5ee37e3a64b9783e4a650570</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b03cc5bf6b9bda42c7874ad19ea7d117</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68dfbb5febc866a47bbcc887e567241e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_80f320ec06f5df29e6344ccc792a5c7a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15125e8018dcef5041b7b84c333d5824</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc3b9b19f1f1f2623f80f098120f8b88</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ccea28769fc2e0ee60ecc2bcd8ed372f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9af307087ae5f9889267ac6ac67c81e6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40c55d91367379d95f369192cb2118a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_889068e58fca13c2f17565000a99deab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f702fac907983a0ac6e91fea88837e01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c53361ba29cb2acb22dc6a55f0468dad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d448fb42f36aacb4620ff975d643ba6f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5ca6f5a50b51f6cc500bc4a543b201e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d95c65f5e688506f592a9102ab791d07</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0cf6cf7bee0e9ff5048b5cad13e2092c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93ae5afc6540e172ae7d3202c8f91d01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c6738e10f191d43881f181d88242a7e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_73426cc83c7704c79831c1f7786b4ffb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d02ddacdd6c87d28625a3bb40db85488</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0c9db887252f20e7380460b91c5e4f5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a72e79ef27a9a68d30f15893b92b10bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[Tyborg]]></wp:comment_author>
    <wp:comment_author_email>tyborg@tyborg.hu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>188.6.18.208</wp:comment_author_IP>
    <wp:comment_date>2013-10-10 10:07:20</wp:comment_date>
    <wp:comment_date_gmt>2013-10-10 09:07:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can cast it to Number, and this will work well:
        return in instanceof Long ? (Number) 1L : (Number) 1.0;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381396040.2828619480133056640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1381398156]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381398156.342936038970947265625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-10-10 09:07:20]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Don't write boilerplate, use scriapt]]></title>
  <link>https://javax0.wordpress.com/2013/09/11/dont-write-biolerplate-use-scriapt/</link>
  <pubDate>Wed, 11 Sep 2013 07:52:50 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=170</guid>
  <description/>
  <content:encoded><![CDATA[A good programmer never writes boilerplate code. Instead he/she recognizes the repetitive patterns after writing some, or even before it gets written, and creates some abstract code that serves the purpose, creates a new class, a new method and instead of copy paste calls the method and/or uses instances of the new class.

In modern languages this is possible to a wide extent. When I started Java I was missing the good old C preprocessor a lot. But this craving passed away, I learned the language and I know much better how to use it proficiently without repeating myself. I do not usually write boilerplate code because I can avoid that and I deliberately want to avoid that because writing boilerplate code is boring as such it is source of error. Since I have not been writing boilerplate code for a long time I got recently annoyed when I had to create a huge Java <tt>enum</tt>, of a few hundred codes that were reflecting the business domain record names.

These record names appeared in XML files traveling in JMS and in JSON format traveling over https and had to appear many times at different locations in out Java code. When we started the project we realized that using the strings as key in <tt>Map</tt>s is error prone: a changing one 1etter in the name of a key can cause bugs hard to find. If we maintain a huge enum that has a symbolic name for each of the keys and the key associated to it, then any typo is identified by the Eclipse IDE signaling the syntax error. (Did you recognize that in the previous sentence I wrote '1etter' instead of 'letter'? Many do not, and this is the problem.)

Maintaining the enum is a bit tedious. It looks something like this:

[sourcecode language="java"]
package com.javax0.scriapt.sample;

public enum DomainEnum {
	FIX_4_2(&quot;FIX.4.2&quot;), A9(&quot;9&quot;), A35(&quot;35&quot;), A49_PHLX(&quot;49=PHLX&quot;), A56_PERS(
			&quot;56=PERS&quot;), A20071123_05_30_00_000(&quot;20071123-05:30:00.000&quot;), ATOMNOCCC9990900(
			&quot;ATOMNOCCC9990900&quot;), PHLX_EQUITY_TESTING(&quot;PHLX EQUITY TESTING&quot;), DEUT(
			&quot;DEUT&quot;), DE(&quot;DE&quot;), FF(&quot;FF&quot;), DK(&quot;DK&quot;), KK(&quot;KK&quot;), ;
	final String name;

	DomainEnum(final String s) {
		name = s;
	}
}
[/sourcecode]

Even though this is not the real example you can see that the keys can not be used as identifiers, not too meaningful unless you know the business domain well (which may not be the case this time because this is a made up example). The allocation of the identifiers for each key is simple and algorithmic:

<ol>
<li> If the key starts with a non-alpha character prepend it with the letter 'A'.</li>
<li> Replace any non alphanumeric character in the key with '_' underscore.</li>
</ol>

A junior can be assigned to the task to maintain this file, but even then this is unreadable and tedious and for these reasons: error prone.

There was also many boilerplate code written defining the classes for the business domain, mainly different type of field (usually Strings) with setters and getters and converters that convert the XML and the JSON files to domain model objects and the other way around (marshaling).

To omit the setters and the getters you can use groovy that does a good job in things like these, and there are also various solutions to solve the marshaling problem especially when this is such a wide spread and ubiquitous  format as JSON and XML. Unfortunately groovy is out of question when the programming language of the project is Java and full stop. Management decided and that is it.

General marshaling is based on reflection and run time structure parsing of the JSON/XML as well as the Java structure. The JSON and the XML can not be parsed before but the Java structure is there during compile time. If something can be done during compile time then it should not be done using tools that operate during run time without good reason. I do not argue against the current marshaling frameworks: having a mature framework, that just does the job and there is no performance bottleneck in the system can be a good reason.

However in our case, as an experiment we decided to eliminate the boilerplate code writing a JavaScript that generates the enumeration. Code to generate the domain objects and the various marshalers can be written in a similar way. The script can be executed manually, and whenever there is some modification in the script containing the list of the fields and also the Java generating code it has to be executed. This is a manual process, even though much less effort than maintaining the source files manually. However I wanted to eliminate this manual process as well totally.

The first thing that came to my mind was to write a maven plugin, but the second thought was to create an annotation processor instead. If an annotation processor is used to execute the script, then we are totally independent of the build tool. It can be maven, ant, graddle, buildr or even make. All we need is some annotation on some class that triggers the execution of the annotation processor.

I created an annotation processor before, the <a href="https://github.com/verhas/fluflu">fluflu</a> fluent API generator and thus had some experience. This time the annotation processor was even simpler. It is so simple that it should not take more than ten minutes for an experienced Java programmer to understand. <a href="https://github.com/verhas/scriapt/blob/master/src/main/java/com/javax0/scriapt/Processor.java">Here it is.</a>

If a class is annotated by the annotation <tt>CompileScript</tt> it will trigger the execution of the script. The script can be JavaScript or any other script that can be invoked using the JSR223 standard. It can be python, groovy or even my little child <a href="https://github.com/verhas/jScriptBasic">ScriptBasic for Java</a>. The only requirement is that the interpreter should be available on the classpath during compile time. In case of JavaScript this is guaranteed when you use Java version 6 or later, in the form of the Rhino interpreter.

The actual trigger class as you can see in the example repo on github <a href="https://github.com/verhas/scriapt-samples">scriapt samples</a> is simple as this:

[sourcecode language="java"]
package com.javax0.scriapt.sample;

import com.javax0.scriapt.CompileScript;

@CompileScript(value=&quot;compilescripts/generateEnums.js&quot;)
public class EnumGeneratorTriggerClass {
}
[/sourcecode]

It does nothing, it is only to trigger the script execution during the compilation phase.

And then comes the big question: what else can we use it for? We have a general purpose weapon to generate java code freely during compilation phase. The possibilities are endless.

What would You use it for?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>170</wp:post_id>
  <wp:post_date>2013-09-11 08:52:50</wp:post_date>
  <wp:post_date_gmt>2013-09-11 07:52:50</wp:post_date_gmt>
  <wp:post_modified>2013-09-11 09:07:36</wp:post_modified>
  <wp:post_modified_gmt>2013-09-11 08:07:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dont-write-biolerplate-use-scriapt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.98.237.33</wp:comment_author_IP>
    <wp:comment_date>2013-09-11 21:54:29</wp:comment_date>
    <wp:comment_date_gmt>2013-09-11 20:54:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I happen to have an idea, just let me experiment it with first: I'd like to generate a poor man's test  harness.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1378932869]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378932869.552565097808837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-09-11 20:54:29]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9668</wp:comment_id>
    <wp:comment_author><![CDATA[Java compile in Java | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/03/09/java-compile-in-java/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.48</wp:comment_author_IP>
    <wp:comment_date>2016-03-09 16:13:28</wp:comment_date>
    <wp:comment_date_gmt>2016-03-09 15:13:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Note that the classes you create this way are only available to your code during run-time. You can create immutable versions of your objects for example. If you want to have classes that are available during compile time you should use annotation processor like scriapt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1457540497]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1457540497.688549041748046875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1457536408.5742609500885009765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12482</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Source Code, a Compromise | Java Code Geeks | Aquaiver IT Solutions]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://articles.aquaiver.com/generating-source-code-a-compromise-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>199.231.189.6</wp:comment_author_IP>
    <wp:comment_date>2018-05-24 15:09:49</wp:comment_date>
    <wp:comment_date_gmt>2018-05-24 14:09:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] parameters in Javaâ, or Scriapt Java annotation processing tool described in the article âDonât write boilerplate, use scriaptâ. These tools are Java specific and build time executable. They are annotation processors, that [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527175683.474346;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1527185205.100533;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1527185211.774092;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1527185213.213291;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1527185205]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527170990.767089;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12477</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Source Code, a Compromise | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2018/05/23/generating-source-code-a-compromise/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.169</wp:comment_author_IP>
    <wp:comment_date>2018-05-23 15:01:12</wp:comment_date>
    <wp:comment_date_gmt>2018-05-23 14:01:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] in Java&#8220;, or Scriapt Java annotation processing tool described in the article &#8220;Donât write boilerplate, use scriapt&#8220;. These tools are Java specific and build time executable. They are annotation processors, [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1527104338.601225;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1527104338]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527084073.452097;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527088111.394091;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27921</wp:comment_id>
    <wp:comment_author><![CDATA[Annotation Handling and JPMS | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/07/31/annotation-handling-and-jpms/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.56</wp:comment_author_IP>
    <wp:comment_date>2019-07-31 16:02:38</wp:comment_date>
    <wp:comment_date_gmt>2019-07-31 15:02:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] during run-time, others hook into the compilation phase implementing an annotation processor. I wrote about annotation processors and how to create one. This time we focus on the simpler way: handling annotations during run-time. We do not even [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1564589834.40602;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1564585358.934541;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1565162467]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1565162467.767661;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30905</wp:comment_id>
    <wp:comment_author><![CDATA[gä»£ç çæå¨ æºä»£ç _çææºä»£ç ï¼è¿æ¯ä¸ä¸ªå¦¥å - ç®æ³ç½]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://itpcb.com/a/1066993</wp:comment_author_url>
    <wp:comment_author_IP>43.128.14.191</wp:comment_author_IP>
    <wp:comment_date>2021-09-01 21:59:33</wp:comment_date>
    <wp:comment_date_gmt>2021-09-01 20:59:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] æåå»ºäºæçæç« â Javaä¸­çå½ååæ° âä¸­æå°çFlufluä¹ç±»çå·¥å·ï¼æâ å«åæ ·æ¿ï¼ä½¿ç¨scriapt âä¸æä¸­æè¿°çScriapt Javaæ³¨éå¤çå·¥å·ã [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1630601256]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1630601257.350166;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1630601260.000976;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1630601263.841935;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630529974.403981;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630535218.918751;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java memory leak]]></title>
  <link>https://javax0.wordpress.com/2013/09/25/java-memory-leak/</link>
  <pubDate>Wed, 25 Sep 2013 09:05:25 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=179</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>Java has garbage collector and therefore there is no such things as memory leak.<p>WRONG</blockquote>

This is wrong on many different levels. Although this is true that there is a garbage collector (GC) that collects the memory chunks that are not used anymore this is still not the stone of the philosophers. GC offloads a huge amount of error prone job from the programmers shoulder, but does not solve every problem related to memory allocation. To make the things a bit worse there are constructs in the Java environment that may "trick" the GC to keep some allocated memory as allocated even though our program is not using it any more. After 20 years of programming of C and 7 years of Java (some overlapping) I can state that Java is far better in this aspect than C or C++. Still there is some room for improvement. Until those improvements become reality programmers better know the nuts and bolts of memory handling and the usual pitfalls not to fall into the traps. But first thing first.

<i>What is a memory leak?</i>

<blockquote>Memory leak is the repetitive allocation of memory without consequential release of it when no longer used, leading to the consumption of ever increasing memory limited by external measures not controlled by the program possibly rendering the execution to a degraded state.</blockquote>

In good old C programming time we talked about memory leak when the program was loosing reference to an allocated memory segment and did not release it. In such a situation the program has no means to get a grab to any handle or pointer to that memory segment to call the run-time function <tt>free</tt> and as such the memory segment remains allocated, it can not be reused by the program and this way it is totally wasted. The memory is reclaimed by the OS when the process exits, though.

This is a very typical memory leak, but the definition I gave above is wider than that. It may happen that the code still has a pointer to the allocated memory but it does not release the memory and at the same time it does not uses it anymore. A programmer may build up a linked list hooking up all memory segments allocated calling <tt>malloc</tt> still never calling <tt>free</tt> has the same result. Since the result is the same, it is not really interesting if there is a possibility to get access to the memory pointer which is needed to release it or not if we do not release it anyway. It only affects the way to fix the bug, but in either case bugfixing needs code modification.

If we look at Java and the GC you can see that this is nearly impossible to produce the classical memory leak where the program looses all references to the allocated memory and thus looses the possibility to release the memory. In that case the GC recognizes the loose of all references to the allocated memory and does the release process. As a matter of fact, that is the standard way to release the memory in Java: just loose all references to an object and GC will collect it. There are no garbage cans, no selective bins. Just throw it away and they will collect it. This is the very reason why many programmers believe that there is no memory leak when programming in Java. From the practical point of view this is close to correct: there are much less hassle hunting memory leaks when programming in Java than it is when programming C, C++ or any other language that does not have a garbage collector.

This is the point where we reach to the question: how can memory leak happen in Java?

<tt>Thread</tt> and <tt>ThreadLocal</tt> storage is a very good candidate for memory leak. You can get a memory leaking applications in five easy steps: (List was composed by Daniel Pryden in a <a href="http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java">stackoverflow post</a>.)

<ol>
<li>The application creates a long-running thread (or use a thread pool to leak even faster).</li>
<li>The thread loads a class via an (optionally custom) <tt>ClassLoader</tt>.</li>
<li>The class allocates a large chunk of memory (e.g. <tt>new byte[1000000]</tt>), stores a strong reference to it in a static field, and then stores a reference to itself in a <tt>ThreadLocal</tt>. Allocating the extra memory is optional (leaking the Class instance is enough), but it will make the leak work that much faster.</li>
<li>The thread clears all references to the custom class or the <tt>ClassLoader</tt> it was loaded from.</li>
<li>Repeat.</li>
</ol>

Since you have no reference to the class and the loader of it you can not get access to the thread local storage and thus you can not get access to the allocated memory (unless you are desperate enough to use reflection). Still the thread local storage has reference and does not allow GC to collect the memory. Thread local storage is not weak. (Btw: why isn't is weak?)

If you have never experienced anything like that you may think that this is an extremely artificial scenario composed by an evil brain. The truth is that the pattern was created by nature (well, programmers, but not with the intention to create memory leak) and was distilled to the above simple form debugging applications running in Tomcat. Those are very common in the Java word. Redeploying applications without restarting the Tomcat instance many times caused slow degradation of memory because of exactly the above pattern and there are not too much Tomcat can do against it. The applications should be careful using thread local.

You should also be careful when storing large data referenced by static variables. Better avoid static variables if ever you can and better rely on containers you program runs in. They are more flexible than the Java class loader hierarchy. If you store large amount of data in a Map or Set why not to use the weak version of the map or set? If you do not have the key, will you even need the value attached to it?

And now the hash maps and sets. If you use objects as keys that does not implement, or implement the methods <tt>equals()</tt> and <tt>hashCode</tt> wrong then calling <tt>put()</tt> will throw your data into a sink hole. You will never be able to recover it from the hash set/map and what is worse you will get duplicates (or better multiplicates) just as many times you put an object into the structure. You just throw your memory into a sinkhole.

There are numerous examples of possible memory leaks in Java. Even though they are magnitude less frequent than they are in C, or C++. Usually it is better to have a GC than not having.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>179</wp:post_id>
  <wp:post_date>2013-09-25 10:05:25</wp:post_date>
  <wp:post_date_gmt>2013-09-25 09:05:25</wp:post_date_gmt>
  <wp:post_modified>2013-10-02 09:09:28</wp:post_modified>
  <wp:post_modified_gmt>2013-10-02 08:09:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-memory-leak</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[Norbert MadarÃ¡sz]]></wp:comment_author>
    <wp:comment_author_email>norbert.madarasz@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.253.200.106</wp:comment_author_IP>
    <wp:comment_date>2013-09-25 15:14:15</wp:comment_date>
    <wp:comment_date_gmt>2013-09-25 14:14:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Another term for java memory leak is object loitering: holding strong references to unused objects.

There is a nice and simple example of it in Joshua Bloch's Effective Java:
[sourcecode language="java"]
// Can you spot the &quot;memory leak&quot;?
public class Stack {
    private Object[] elements;
    private int size = 0;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;
    public Stack() {
        elements = new Object[DEFAULT_INITIAL_CAPACITY];
    }
    public void push(Object e) {
        ensureCapacity();
        elements[size++] = e;
    }
    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();
       return elements[--size];
    }

    /**
    * Ensure space for at least one more element, roughly
    * doubling the capacity each time the array needs to grow.
    */
    private void ensureCapacity() {
        if (elements.length == size)
            elements = Arrays.copyOf(elements, 2 * size + 1);
    }
}
[/sourcecode]
"Whenever a class manages its own memory, the programmer should be alert for memory leaks. Whenever an element is freed, any object references contained in the element should be nulled out. Another common source of memory leaks is caches."

The corrected version of the pop method looks like this:
[sourcecode language="java"]
    public Object pop() {
        if (size == 0)
            throw new EmptyStackException();
        Object result = elements[--size];
        elements[size] = null; // Eliminate obsolete reference
        return result;
    }
[/sourcecode]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380118456.358087062835693359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1380122495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380122495.590075969696044921875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-09-25 14:14:15]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>52</wp:comment_id>
    <wp:comment_author><![CDATA[Third time lucky? | cartesian product]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cartesianproduct.wordpress.com/2013/10/13/third-time-lucky/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.13</wp:comment_author_IP>
    <wp:comment_date>2013-10-13 19:38:42</wp:comment_date>
    <wp:comment_date_gmt>2013-10-13 18:38:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Java memory leak (javax0.wordpress.com) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381689523.1438739299774169921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1381733648]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-10-13 18:38:42]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>79</wp:comment_id>
    <wp:comment_author><![CDATA[Pit]]></wp:comment_author>
    <wp:comment_author_email>teeter23@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>82.131.1.107</wp:comment_author_IP>
    <wp:comment_date>2013-11-06 20:55:06</wp:comment_date>
    <wp:comment_date_gmt>2013-11-06 19:55:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[nice!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383767706.453176975250244140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1383767758]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-06 19:55:06]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1347</wp:comment_id>
    <wp:comment_author><![CDATA[Ivo]]></wp:comment_author>
    <wp:comment_author_email>ivo@plumbr.eu</wp:comment_author_email>
    <wp:comment_author_url>https://www.plumbr.eu</wp:comment_author_url>
    <wp:comment_author_IP>90.191.175.164</wp:comment_author_IP>
    <wp:comment_date>2014-08-17 21:41:54</wp:comment_date>
    <wp:comment_date_gmt>2014-08-17 20:41:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is truly well explained, having worked in the leak detection domain for years now, it is seldom when I see so clearly expressed thoughts around memory management principles in Java. And whenever one can actually express the memory management principles in more details, they tend to have some systems programming background with C.

Anyhow, whenever you stumble upon the next leak suspect in your life, you might consider giving Plumbr (https://plumbr.eu) a trial run, we would find all the cases described in your post and pinpoint you down to the single line in code where the leak originated.

Ivo, the Product guy from Plumbr.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408308114.6942451000213623046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[336143954]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1408310020]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-17 20:41:56]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1408310020]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408310020.0320570468902587890625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Defining constants in an interface]]></title>
  <link>https://javax0.wordpress.com/2013/10/31/defining-constants-in-an-interface/</link>
  <pubDate>Thu, 31 Oct 2013 17:07:47 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=204</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java</a> says in Item 19, that "Use interfaces only to define types". This time I would like to argue with this statement, but before starting a debate lets see the reasoning of that short chapter. What is the ground for the advice that diverts us from defining constants in interfaces. (Constants I mean <tt>public static final</tt> variables.)

The <em>constant interface</em> pattern says that
<ol>
	<li>you define the constants in an interface, and</li>
	<li>the classes needing the constants implement the interface.</li>
</ol>

This way the constants can be used as they were defined inside the class. The interface and thus the constants defined in it became part of the class. This is easy and convenient. What is the problem?

The problem is that the interface does not only become part of the implementation of the class but it also becomes part of the definition of the class. A class has tangible part that you face every day as a programmer: this is the implementation. The intangible part is the definition of the class: what it is for. Since you can define and use a class without implementing any interface the definition of a class may be implicit. If there are no interfaces that the class implement, or even if the class implements some interfaces the definition of the class lies in the documentation of the class, in the signature of the accessible methods and generally in common sense.

When a class implements an interface the interface becomes part of the <em>definition of the class</em>.

<blockquote>The constant interface pattern is a poor use of interfaces.</blockquote>

The before-mentioned book says "implementing a constant interface causes the implementation detail leak into the class's exported API". Later on the book draws the conclusion "In summary, interfaces should be used only to define types. They should not be used to export constants."

And now the debate:

Drawing this conclusion is too bald, in my opinion. The pattern contains two steps: 1. defining constants in interface, 2. implementing the interface. The conclusion focuses on the first step of the pattern. Of course if you avoid step 1 you can not do number 2. But the problem is actually not the interface defining constants. The problem is that the class is implementing the interface.

The book suggests to use utility classes to define constants. However interfaces could be used exactly the same way as utility classes defining only constants. There is no even syntactic difference in the use. You import the class/interface, you can do static import if that fits your personal/corporate style and you use the constants defined in the class/interface. The major difference is that the interface can not be instantiated by its nature while utility classes can. Utility classes should have a private constructor to avoid accidental instantiation. In an interface all variables are <tt>public static final</tt> by default. In utility classes you have to define them to be like that, which leads to code clutter. Using an interface you may not accidentally forget the <tt>final</tt>, <tt>public</tt> or <tt>static</tt> because they "are there" by default. <a href="http://checkstyle.sourceforge.net/">Checkstyle</a> even warns you not to use those keywords in an interface. The compiler knows it anyway and the person who reads the code to maintain it is supposed to know Java.

What is the drawback of defining constants in an interface then? It may accidentally be implemented and this is against the nature of an interface to deliver implementation. While I can not argue with the first part of the statement the nature of interfaces are not that solid. What about Java8? There can be static methods in an interface, and default method implementations. You may like it or not but the direction Java currently goes with interfaces is more towards the practical way. Using a pattern that defines constants in an interface to import it instead of "implementing" is directly this way.

As a summary, my suggestion is to avoid using the <em>interface pattern</em> as defined in "Effective Java". Never implement an interface in any of your classes only to get access to the constants defined in the class, unless the constants are inherent part of the definition of the class and not only the part of the implementation. On the other hand I see no significant danger to define a constants only interface and import it into your class and use the constants.

Next week I will write about an extended pattern using interfaces to define constants that avoids the possibility to accidentally "implement" them.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>204</wp:post_id>
  <wp:post_date>2013-10-31 18:07:47</wp:post_date>
  <wp:post_date_gmt>2013-10-31 17:07:47</wp:post_date_gmt>
  <wp:post_modified>2013-10-31 18:07:47</wp:post_modified>
  <wp:post_modified_gmt>2013-10-31 17:07:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>defining-constants-in-an-interface</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5801725994133909504&type=U&a=pTI0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>78</wp:comment_id>
    <wp:comment_author><![CDATA[Defining constants in an interface: the good pattern | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2013/11/06/defining-constants-in-an-interface-the-good-pattern/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.101</wp:comment_author_IP>
    <wp:comment_date>2013-11-06 10:38:02</wp:comment_date>
    <wp:comment_date_gmt>2013-11-06 09:38:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post I analyzed a bit the constant interface pattern and I got to the conclusion that there is nothing [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1383732371]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383730682.8609371185302734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383732371.7703149318695068359375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-06 09:38:02]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1660</wp:comment_id>
    <wp:comment_author><![CDATA[vine]]></wp:comment_author>
    <wp:comment_author_email>vinetech416@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>203.115.183.18</wp:comment_author_IP>
    <wp:comment_date>2014-09-02 08:39:34</wp:comment_date>
    <wp:comment_date_gmt>2014-09-02 07:39:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree with your practical argument!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409646164]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-02 07:39:37]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409646164]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409646164.41815090179443359375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409643574.5555179119110107421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Defining constants in an interface: the good pattern]]></title>
  <link>https://javax0.wordpress.com/2013/11/06/defining-constants-in-an-interface-the-good-pattern/</link>
  <pubDate>Wed, 06 Nov 2013 09:00:24 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=221</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="http://javax0.wordpress.com/2013/10/31/defining-constants-in-an-interface/">previous post</a> I analyzed a bit the <em>constant interface</em> pattern and I got to the conclusion that there is nothing horrible defining constants in an interface so long as long there is no any class that implements the interface.

The problem is that you may implement the interface. The reason to do that may be sheer ignorance or just simple mistake.

The first and easiest solution is to use <tt>@interface</tt> keyword instead of <tt>interface</tt>. This will define an annotation interface that can be implemented by a class but it requires the definition of the method

[sourcecode language="java"]
@Override
public Class&lt;? extends Annotation&gt; annotationType() {
    return null;
}
[/sourcecode]

If this does not stop somebody implementing the interface "accidentally" then nothing is.

Also since this is not a usual practice to implement such an interface Eclipse will not offer the interface after the <tt>implements</tt> keyword for completion.

My personal taste however is not compatible with this approach. This is technically possible, but I consider this rather to be an entry in some weird obfuscated code contest than production code.

The solution I prefer over the previous one is a nested structure. The outer element is a class that has an interface and a class inside. The interface is private thus you can not implement it outside even if you are ignorant. This interface defines the constants. Since the interface is private the constants can not be accessed from outside directly, but we overcome this obstacle. Along with the interface there is a final and public member class. This class implements the interface (sorry for the purists) and contains a private default constructor. But this is all it does. The template code for this looks something like:

[sourcecode language="java"]
public class ConstantClass {
  private interface ConstantInterface {
    int a = 13;
  }
  
  public final class Constants implements ConstantInterface {
      private Constants(){}
  }
}
[/sourcecode]

Since the class <tt>Constants</tt> is final it can not be extended, and since this is the only class for which <tt>ConstantInterface</tt> is visible there can be no other classes that implement the interface. This ensures that the <em>constant interface</em> pattern step number 2 (implementing the interface by a class) can not accidentally be done and thus the interface can not leak into the definition of any class except the very one <tt>Constants</tt> class.

The use of the constants is the same as they were defined directly in the utility class.

If you compare this pattern to the pattern that is using a <em>utility class</em> to define constants you see that this pattern does not require you to use the keywords <tt>public static final</tt> in front of each constant. This is a bit more error prone as you can not forget the keywords. On the other hand this pattern is more complex.

There is also an advantage of this pattern that shines in the unlikely case when there are many constants you want to structure and group into different groups. You can have many private member interfaces each defining one set of the constants and then many member classes that can implement one or more of the interfaces. This can give you a very structured way to define your constants. If you have many. Which, to be honest, is not likely to happen. If you only have a few constants then simply go on with the good old utility class solution. Using a pattern should make your code simpler and not more complex.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>221</wp:post_id>
  <wp:post_date>2013-11-06 10:00:24</wp:post_date>
  <wp:post_date_gmt>2013-11-06 09:00:24</wp:post_date_gmt>
  <wp:post_modified>2014-02-26 20:39:16</wp:post_modified>
  <wp:post_modified_gmt>2014-02-26 19:39:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>defining-constants-in-an-interface-the-good-pattern</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5803787110678810624&type=U&a=S1bm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7e15696f71ccf0895020552ff40c5225</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_434cfc41c93ce8ffacb8c153f96e45e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c72c1ea0e9bae2b45b40eb20dd93114</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f0186e3ef241bbf78dc62149aad7176</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_44cd53b44325ffbda04d39dfc9816b43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d28fcd38e257a5caba64d01acd8ebf7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>139</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-02-26 20:47:36</wp:comment_date>
    <wp:comment_date_gmt>2014-02-26 19:47:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You simply suggest to release the <tt>private</tt> restriction of the interface to package private and instead packaging the whole mess into a class to put it all in a package.

This is possible. Matter of taste. A bit less restrictive toward accidental implementation of the interface.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>138</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393444056]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393444056.3734219074249267578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22131858578]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1393444056]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-26 19:47:36]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>140</wp:comment_id>
    <wp:comment_author><![CDATA[Epo Jemba]]></wp:comment_author>
    <wp:comment_author_email>epo.jemba@kametic.com</wp:comment_author_email>
    <wp:comment_author_url>https://github.com/kametic/nuun-framework</wp:comment_author_url>
    <wp:comment_author_IP>82.238.154.3</wp:comment_author_IP>
    <wp:comment_date>2014-02-26 21:16:19</wp:comment_date>
    <wp:comment_date_gmt>2014-02-26 20:16:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Your "simply" make me smile ;) My comment wasn't meant to be critical, I naively though you'll enjoy it. My comment was here only to bring this possibility as alternative, as you were iterating on this topic. I think this version is clean, because no inner class and valid according java. "All tastes are in nature", they say and it is a good thing :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>139</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393445780]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393445780.8995440006256103515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22132456631]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1393445781]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-26 20:16:19]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>138</wp:comment_id>
    <wp:comment_author><![CDATA[Epo Jemba]]></wp:comment_author>
    <wp:comment_author_email>epo.jemba@kametic.com</wp:comment_author_email>
    <wp:comment_author_url>https://github.com/kametic/nuun-framework</wp:comment_author_url>
    <wp:comment_author_IP>194.250.98.243</wp:comment_author_IP>
    <wp:comment_date>2014-02-26 19:39:01</wp:comment_date>
    <wp:comment_date_gmt>2014-02-26 18:39:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter, this very clean idea. To prove my gratitude, I try to contribute in order to remove the last "cons" of the pattern. 

Compilation Unit can hold more than one class definition but only one have to be public. I'm sure you see the trick now. 

1) You drop your outer class "ConstantClass"
2) You remove "private" before ConstantInterface
3) You rename ConstantClass.java to Constants.java

And you're done. Constants.a is available and not ConstantClass.Constants.a. So the pattern now is usable even by purists ;).

Hope you like it.

Epo Jemba
Kametic
https://github.com/kametic/nuun-framework]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393439942.3900139331817626953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393439942]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22131672773]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1393443487]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393443487]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393443488.438549041748046875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-26 18:39:01]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1662</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.3.188.140</wp:comment_author_IP>
    <wp:comment_date>2014-09-02 09:25:37</wp:comment_date>
    <wp:comment_date_gmt>2014-09-02 08:25:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you drop the outer class and relax the access restriction on the interface you increase the risk of a programmer "implementing" the interface. Making the structure a way that the interface can not directly be implemented was an important point.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>139</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409646337]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409646337.510241985321044921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[747563914]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1409646337]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-02 08:25:38]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10690</wp:comment_id>
    <wp:comment_author><![CDATA[DucQuoc.wordpress.com]]></wp:comment_author>
    <wp:comment_author_email>ducquoc.vn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://ducquoc.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>123.21.189.18</wp:comment_author_IP>
    <wp:comment_date>2017-04-05 02:24:06</wp:comment_date>
    <wp:comment_date_gmt>2017-04-05 01:24:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Why don't we use an Enum? That way seems OK without being called "over-engineering" !]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17424645</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1491355447.7805080413818359375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"ducquoc";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[3643628443]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1491355749]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1491355588]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1491355588.277225017547607421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1491355747.8658540248870849609375;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1491355749.3217620849609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10691</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.149.202</wp:comment_author_IP>
    <wp:comment_date>2017-04-05 02:31:47</wp:comment_date>
    <wp:comment_date_gmt>2017-04-05 01:31:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What is the gain of enum over a normal class? You can not inherit from it. Okay: have a final class.

You still have to write 'public static final' in front of the constant declarations, just like in case of a class and in addition you should have at least one constant that is enum type, you may not need.

Could you give me some example of an enum declaring two global constants? One is type int, the other is String.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10690</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1491355907]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1491355907]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1491355907.168346881866455078125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[3643688309]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12335</wp:comment_id>
    <wp:comment_author><![CDATA[jhake]]></wp:comment_author>
    <wp:comment_author_email>jhake.kineticsnw@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>97.113.15.94</wp:comment_author_IP>
    <wp:comment_date>2018-04-05 23:14:32</wp:comment_date>
    <wp:comment_date_gmt>2018-04-05 22:14:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I like this idea. The usage helps clarify the source of the constants:
import com.company.project.package.ConstantClass.Constants;
public class myClass {
   int foo = Constants.a + 1; 
}
This example assumes I want to define constants on a particular package basis, which may be a matter of taste.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1522966473.79611110687255859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16505115088]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1522970532]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1522970532]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1522970533.2604329586029052734375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Creating Immutable Objects Run-Time]]></title>
  <link>https://javax0.wordpress.com/2013/11/13/creating-immutable-objects-run-time/</link>
  <pubDate>Wed, 13 Nov 2013 09:57:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=238</guid>
  <description/>
  <content:encoded><![CDATA[Java supports immutable variables, in the form of <tt>final</tt> modifier for fields and local variables, but it does not support the immutability of objects on the language level. There are design patterns that aim to distinguish mutator and query methods in objects, but the standard library and libraries from different sources may not support the feature.

Using immutable objects makes the code safer because they reveal programming mistakes manifesting run time sooner. This is the so called "fail-fast" principle that you can certainly understand and appreciate if you came from the C or C++ programming field to Java. If you can have an immutable version of an object and you pass it on to a library (be it external or your own) an exception occurs as soon as the code tries to call any method that is a mutator. Having no immutable version the error such a call causes manifests much later when the program fails with the modified and thus presumably inconsistent-state object.

Because of these advantages of immutable objects there are libraries that deliver immutability for some special cases. The most known and most widely used example is the Guava immutable collection library from Google. This creates immutable versions for collections. However collections are not the total world of Java classes.

When you have the code under your own control you can split your interfaces to a query and a mutator part, the mutator eventually extending the query interface. The implementation can also be done in two classes: a query class implementing the query interface, and a mutator class extending the query class implementing the mutator interface (that also includes the query interface functions). When you want an immutable version of an object you cast it and pass on using the query interface. This is, however not 100% security. The library can, by sheer ignorance of the code or by mistake, cast the object back and mutate the object state. The fool proof solution is to implement the query interface in a class that is set up with a reference to mutable object and implementing delegation to all methods defined in the query interface. Though this is cumbersome to maintain such code in Java in case of numerous and huge classes the solution is generally simple and straightforward. You can even generate the delegating query implementation (extending the mutable class) when the query/mutator interfaces, and class implementations are not separated.

The project <a href="https://github.com/verhas/immutator">Immutator</a> delivers this functionality during run-time. Using the library you can create a delegating proxy class during run-time that will extend the mutator class and will pass the method calls to the original object when the method is considered query but throw a runtime exception when the method is considered to be a mutator. The use of the class is very simple, all you have to do is to call a static method of the <tt>Immutable</tt> class:

[sourcecode language="java"]
MyMutatorClass proxy = Immutable.of(mutableObject);
[/sourcecode]

The generated proxy will belong to a class that extends the original class <tt>mutableObject</tt> belongs to, therefore you can pass along <tt>proxy</tt> to any code where you would pass the <tt>mutableObject</tt> but you do not want the code to alter the state of the object.

How does the library know which methods are query and which methods are mutators? The library immutator in this simple case (there are more complex calls if the simple case is not sufficient) assumes that any method that is <tt>void</tt> is also a mutator, and any method that returns some value is a query method.

To support the ever increasing popularity of <a>fluent api</a> the call can be written in the form:

[sourcecode language="java"]
MyMutatorClass proxy = Immutable.of.fluent(mutableObject);
[/sourcecode]

in which case any method that returns a value compatible with the class of the argument is also considered to be a mutator method.

If even this functionality does not describe the behavior of the class to proxy then the general form of the call is:

[sourcecode language="java"]
MyMutatorClass proxy = Immutable.of.using(Query.class).of(mutableObject);
[/sourcecode]

which believes that any method defined in the interface <tt>Query</tt> is a query and the methods that do not present in the interface <tt>Query</tt> are mutators. Using this form an query proxy can be created for any objects.

This is nice and interesting. Having said all that there are some limitations in the implementation of the library that partially come from the Java language and from the available JDK.

You can not declare any final method as mutator method. The reason for it is that the generated proxy class has to extend the original class so that the proxy object can be used at the place of the original object. It can not, however override the final methods. Final methods are actually not proxied, but execution is passed directly to the original method. This is how Java works.

The proxy object is created in Java source and compiled during run time. This may be slower than, for example using <a href="http://cglib.sourceforge.net/">cglib</a> that uses the <a href="http://asm.ow2.org/">asm</a> package and generates byte-code directly. On the other hand the library may be more resilient to Java version changes and it is easier to have look at the internal working of the library and the proxy.

Last, but not least the library uses some unsafe package calls (google that if you need), that may not work on all platforms. This is needed to create the instance of the proxy object. Since the proxy class is the extension of the original class creating a proxy object the "normal way" would implicitly invoke the constructor of the extended class. This may not be a problem, but in some cases, when the constructor does some heavy duty work, this may be.

Knowing all those incorporating the library into your application is very simple. Since the <tt>com.javax0</tt> libraries are stored in Sonatype repository all you have to do is inserts the library as a dependency into your <tt>pom.xml</tt> file as

[sourcecode language="xml"]
                         &lt;dependency&gt;
                             &lt;groupId&gt;com.javax0&lt;/groupId&gt;
                             &lt;artifactId&gt;immutator&lt;/artifactId&gt;
                             &lt;version&gt;1.0.0&lt;/version&gt;
                         &lt;/dependency&gt;
[/sourcecode]

and stay tuned for upcoming releases.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>238</wp:post_id>
  <wp:post_date>2013-11-13 10:57:41</wp:post_date>
  <wp:post_date_gmt>2013-11-13 09:57:41</wp:post_date_gmt>
  <wp:post_modified>2013-11-13 10:57:41</wp:post_modified>
  <wp:post_modified_gmt>2013-11-13 09:57:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-immutable-objects-run-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5806328798589124608&type=U&a=JeU0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>83</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.185.132</wp:comment_author_IP>
    <wp:comment_date>2013-11-21 13:31:32</wp:comment_date>
    <wp:comment_date_gmt>2013-11-21 12:31:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This article was reposted on DZONE http://java.dzone.com/articles/creating-immutable-objects-run]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385037093.4674189090728759765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1385037092]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1385037094]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-21 12:31:32]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9667</wp:comment_id>
    <wp:comment_author><![CDATA[Java compile in Java | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/03/09/java-compile-in-java/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.48</wp:comment_author_IP>
    <wp:comment_date>2016-03-09 16:13:26</wp:comment_date>
    <wp:comment_date_gmt>2016-03-09 15:13:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the classes you create this way are only available to your code during run-time. You can create immutable versions of your objects for example. If you want to have classes that are available during compile [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1457536406.35542201995849609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1457540494]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1457540494.3254969120025634765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30729</wp:comment_id>
    <wp:comment_author><![CDATA[javaç¨ä»ä¹ç¼è¯å¨_Javaç¨Javaç¼è¯ - ç®æ³ç½]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://itpcb.com/a/995547</wp:comment_author_url>
    <wp:comment_author_IP>43.128.14.191</wp:comment_author_IP>
    <wp:comment_date>2021-08-18 00:48:49</wp:comment_date>
    <wp:comment_date_gmt>2021-08-17 23:48:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] ä¾å¦ï¼æ¨å¯ä»¥åå»ºå¯¹è±¡çä¸å¯åçæ¬ã [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629244130.345858;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629247935.649423;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1629362349]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1629362349.628281;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Cheap programming languages]]></title>
  <link>https://javax0.wordpress.com/2013/11/21/cheap-programing-language/</link>
  <pubDate>Thu, 21 Nov 2013 12:30:28 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=252</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
Twitter: @chesterbr 2012.05.23. 17:24
Choosing a language because it has cheaper developers is like building your house with Lego so you can hire anyone as a construction worker.
</blockquote>

This is an old tweet that recently came into my eyes via a repost. I read it and I was nodding: very true. But on the second thought I just started to think about the practice that I see when large companies choose technology.

Recently I was part of a decision to go for JavaScript and some native JS framework on the client instead of GWT. I was busy warning the management that the huge load of JS developers available on moderate price is guarantee for failure. You can buy just as much JS developer as you want for low price, but they are the low quality producing guys. Low price, low quality. You have to hire the JavaScript developers who have higher price tags. (Not for the price tag alone of course.)

If you want acceptable quality you have to pay for it. In case of JS, because the language gives you more freedom the price may even be higher. Partially on price per hour of experts who are really good, and the total number of hours may be more as well. If you do not take that serious you will face the sad truth: the more freedom you have the more trouble you can get into, unless you have self discipline. And self discipline comes at a price tag. Pay nuts and get only the monkeys working for you.

And then I was going on thinking. What technologies did the construction workers use when my house was renovated ten years ago? Was it state of the art? No it was not. Why? Because these people were just not able to handle modern technology. The electrician (one of the cleverer guys, still illiterate, and I mean literally: he could not write or read)  fixed tubes on the wall for the wires to run in and boxes for the outlets. Then the bricklayers came and put a cover of mortar. The electrician had to find and dig out the outlets. Bricklayers just did not care the work of the other person. But the technology was prepared for that. This is lego. When you can not adjust the quality of people, you adjust the technology. We do the building of your house from lego. Not the toy type, but the same principles. The toy lego is adjusted to the brain capabilities of a child, the house construction lego is adjusted to the construction workers. Not a big difference.

The same is true for software. Many years ago a German bank IT person was eMailing me questions and explained they considered to replace a few hundred of Perl scripts to their ScriptBasic equivalent. After that the maintenance could be just cheaper. Perl programmers were scarce that time and pricey. ScriptBasic is on the other hand is just BASIC. Everybody knows BASIC just as well as the little girl from Jurassic park knows unix. (This is an extreme example though.)

JavaScript is the dominant language on the client side and bites into the server side as well. PHP is wide spread in the web arena. Why? Because they are the lego types compared to languages like Java, Python, Ruby, Scala, Haskel.

Looking again at the quote we started the article with. <i>Choosing a language because it has cheaper developers is like building your house with Lego so you can hire anyone as a construction worker.</i> Looking at a different angle, and without exaggeration: yes it is exactly. We choose a cheaper language so we can hire cheaper (still just not anyone) as a construction worker. Very true. And that is really, what IT managers really do. Even though they know they will have something built of lego.

Just with a special spice added to it: quality control.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>252</wp:post_id>
  <wp:post_date>2013-11-21 13:30:28</wp:post_date>
  <wp:post_date_gmt>2013-11-21 12:30:28</wp:post_date_gmt>
  <wp:post_modified>2013-11-21 23:12:54</wp:post_modified>
  <wp:post_modified_gmt>2013-11-21 22:12:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cheap-programing-language</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5809266365085147136&type=U&a=doh4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>170</wp:comment_id>
    <wp:comment_author><![CDATA[Mike S.]]></wp:comment_author>
    <wp:comment_author_email>keeper_of_the_wolf@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.80.24.124</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 14:27:38</wp:comment_date>
    <wp:comment_date_gmt>2014-03-26 13:27:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're making a case for using building bricks better than legos, but you're almost making the case that it rarely makes sense to hire poorly skilled developers no matter what tool you use.  A small team of highly skilled developers using language X will make something better than any size team of developers with mediocre skill using language Y for most values of X and Y.   

I understand that, and I agree with it.  I'm fortunate right now to work with a bunch of brilliant developers and I am pleased to be struggling to keep up because I know it will make me better in the long run.  

On the other hand, it leads to another question - if a company chooses to invest wisely and consistently hires a handful of highly skilled developers instead of two or three times as many moderately skilled ones, then how does the industry newbie get a chance to go from newbie to highly skilled?  Do you have to work at a gas station during the day and post code to github at night for ten years before some employer taps you for a top tier developer team?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395840459.01344394683837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1395840495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395840495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395840496.015779972076416015625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-26 13:27:38]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[Code Of Code | Programing languages poll]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://codeofcode.wordpress.com/2013/11/23/programing-language-poll/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.101</wp:comment_author_IP>
    <wp:comment_date>2013-11-28 21:47:23</wp:comment_date>
    <wp:comment_date_gmt>2013-11-28 20:47:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Cheap programing language (javax0.wordpress.com) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1385671850]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385671643.8392550945281982421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-28 20:47:23]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>172</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 18:31:09</wp:comment_date>
    <wp:comment_date_gmt>2014-03-26 17:31:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is a certain level you have to reach on your own. But this is usually school time. After that juniors should find their position. It is a very complex issue to create a good team. Teams need different type of people, different seniority and different ... anything. You can not have a team where everybody is a genius. They will not perform. Summary: there is more chance for junior programmers than change for actors in Hollywood. You need not be a waiter or waitress until you get the position.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>170</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395855070]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395855070.736278057098388671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22803912582]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395855071]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-26 17:31:09]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9617</wp:comment_id>
    <wp:comment_author><![CDATA[The Little Architect | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/02/10/the-little-architect/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.141</wp:comment_author_IP>
    <wp:comment_date>2016-02-10 16:00:47</wp:comment_date>
    <wp:comment_date_gmt>2016-02-10 15:00:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] to be used. This may also be a smell that you wanted to use some niche technology that may require expensive developers in the coming years to maintain the product. You better [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1455116569]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1455116569.9705049991607666015625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1455116448.0082569122314453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Semantic versioning is a simplification]]></title>
  <link>https://javax0.wordpress.com/2013/11/27/semantic-versioning-is-a-simplification/</link>
  <pubDate>Wed, 27 Nov 2013 09:00:48 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=264</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://semver.org/">Semantic version</a> seems to become a de facto standard in the industry. This is very good since the versioning of software packages is very important when we want to compare two versions and decide which one  to use. Without semantic versioning you have to consult the documentation to decide if you can upgrade the use library from version 1.34 to 1.36. When you rely on semantic versioning the answer is simple (in theory): yes, you can. Version 1.36 has to be backward compatible with version 1.34 Decision is as easy as saying it out loud and then the time saved can be used for some more precious work that needs brain. In practice there may be some problem, but in that case the basic assumption, semver was used, turns out to be false.

How can we tell that 1.36 is backward compatible with version 1.34? That comes from the definition of semantic versioning. The <tt>M.m.p</tt> scheme, Major, minor, patch, says that Major versions introduce incompatible change, minor compatible change and patch is what the name says: bug fix.

You can notice that <tt>M</tt> and <tt>m</tt> talks about the <i>specification</i> of the library, while <tt>p</tt> about the <i>implementation</i> . There is nothing new about this. Java SE documentation contains a <a href="http://docs.oracle.com/javase/tutorial/deployment/jar/packageman.html">chapter</a> about product versioning. The chapter talks about how to version packages, and recommends to use separate specification and implementation versions. The versions are defined in the manifest file in the JAR file that contains the package. Specification version is recommended to have the form <tt>major.minor.micro</tt>. There is no recommendation for the implementation version. A sample manifest file looks:

[sourcecode language="text"]
Manifest-version: 1.0

Name: java/util/
Specification-Title: &quot;Java Utility Classes&quot;
Specification-Version: &quot;1.2&quot;
Specification-Vendor: &quot;Sun Microsystems Inc.&quot;
Package-Title: &quot;java.util&quot;
Package-Version: &quot;build57&quot;
Package-Vendor: &quot;Sun Microsystems. Inc.&quot;
[/sourcecode]

Semantic versioning as an approach is compatible with this. Semver does not support micro versions for the specification, only major and minor, but after all the ORACLE/SUN documentation itself does not say too much about the micro: <em> major version numbers identify significant functional changes, minor version numbers identify smaller extensions to the functionality, micro versions are even finer grained versions.</em> Even finer grained. That is all about it. Do we need that? My suggestion is: not. And this is the implicit suggestion of semver.

Einstein <a href="http://quoteinvestigator.com/2011/05/13/einstein-simple/">allegedly</a> said: <em>Everything should be made as simple as possible, but not simpler.</em>

This is the case of semantic versioning and Java package versioning. As time proved, Java packaging versioning is simply not simple. It is too complex to be practical and real life versioning problems do not need this level of complexity. Other versioning approaches may be too simple and at the end of the day semver may just fit the purpose.

Maven is a huge supporter of semantic versioning and the <a href="http://maven.apache.org/shared/maven-archiver/index.html">archiver plugin</a> helps you to include the versions into the manifest file so that your package is compatible with the Java SE recommendation and Java RT can query the version of a package. The version of your library is specified in the <tt>pom.xml</tt> file and this version is used when creating the manifest.

[sourcecode language="text"]
Implementation-Title: ${project.name}
Implementation-Version: ${project.version}
Implementation-Vendor-Id: ${project.groupId}
Implementation-Vendor: ${project.organization.name}

Specification-Title: ${project.name}
Specification-Version: ${project.version}
Specification-Vendor: ${project.organization.name}
[/sourcecode]

Interesting that both the specification and the implementation version contains the whole package version. The semantic version compatible solution would be to include only the <tt>M.m</tt> version in the specification version and either the whole version number or only the rest for the implementation version.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>264</wp:post_id>
  <wp:post_date>2013-11-27 10:00:48</wp:post_date>
  <wp:post_date_gmt>2013-11-27 09:00:48</wp:post_date_gmt>
  <wp:post_modified>2013-12-02 09:18:22</wp:post_modified>
  <wp:post_modified_gmt>2013-12-02 08:18:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>semantic-versioning-is-a-simplification</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5811390275628978176&type=U&a=1jLB]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc1301bd5dc9aae4af45658eea434d79</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6a50dd62ff6dae87f7cd2e136ae3832</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_999d71cce9668cac8304762c737f61e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed876837353df8e2d5ef147a7273cae4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f13caaed4bcca82e1bd1f1b92c83601c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>89</wp:comment_id>
    <wp:comment_author><![CDATA[VerhÃ¡s IstvÃ¡n]]></wp:comment_author>
    <wp:comment_author_email>istvan@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/istvan.verhas.7</wp:comment_author_url>
    <wp:comment_author_IP>92.249.176.130</wp:comment_author_IP>
    <wp:comment_date>2013-11-28 12:50:10</wp:comment_date>
    <wp:comment_date_gmt>2013-11-28 11:50:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[At first the missing link for product versioning is http://docs.oracle.com/javase/7/docs/technotes/guides/versioning/spec/versioning2.html. The documentation is confused and therefore the quoted part in this blog also. It calls Package-* properties instead of Implementation-* ones. On the other hand in the maven example and also the offical tutorial changes into Implementation-* properties. To make it clear i have created a sample MANIFEST.MF and a very short App:

[sourcecode language=""]
MANIFEST.MF
Manifest-version: 1.0

Name: sandbox/
Specification-Title: &quot;Java Utility Classes&quot;
Specification-Version: &quot;1.2&quot;
Specification-Vendor: &quot;Sun Microsystems Inc.&quot;
Package-Title: &quot;java.util&quot;
Package-Version: &quot;build57&quot;
Package-Vendor: &quot;Sun Microsystems. Inc.&quot;
Implementation-Title: ${project.name}
Implementation-Version: ${project.version}
Implementation-Vendor-Id: ${project.groupId}
Implementation-Vendor: ${project.organization.name}
[/sourcecode]

<code>App.java</code>

[sourcecode language=""]
package sandbox;

public class App {

    public static void main(String[] args) {
        Package thisPackage = Package.getPackage(&quot;sandbox&quot;);

        System.out.println(&quot;thisPackage.getImplementationVersion()=&quot; + thisPackage.getImplementationVersion());
        System.out.println(&quot;thisPackage.getSpecificationVersion()=&quot; + thisPackage.getSpecificationVersion());
    }
}
[/sourcecode]

after building the result is:
[sourcecode language=""]
verhasi$ java -cp target/sandbox-1.0.0-SNAPSHOT.jar sandbox.App
thisPackage.getImplementationVersion()=1.0.0-SNAPSHOT
thisPackage.getSpecificationVersion()=&quot;1.2&quot;
verhasi$ java -version
java version &quot;1.7.0_21&quot;
Java(TM) SE Runtime Environment (build 1.7.0_21-b12)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)
verhasi$
[/sourcecode]

As a conclusion we can state that at least this version of java uses the Implementation-* properties in the Package class returning getImplementationVersion(). I have filed it as a bug at http://bugreport.sun.com/bugreport Bug Id: 9008521.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/100001049515746/picture?type=large]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[100001049515746]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1385639410]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385639410.1830670833587646484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1385641059]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17162340100]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1385641059]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-11-28 11:50:10]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Given, When, Then...]]></title>
  <link>https://javax0.wordpress.com/2013/12/04/given-when-then/</link>
  <pubDate>Wed, 04 Dec 2013 09:00:19 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=269</guid>
  <description/>
  <content:encoded><![CDATA[The words <em>given, when, then</em> should ring the bell for anybody, who was writing BDD tests. If not, then you should read a <a href="http://martinfowler.com/bliki/GivenWhenThen.html">recent article</a> of Martin Fowler.

The structure of a test as for BDD has three parts:
<ul>
	<li>GIVEN the part, that describes the structure of the system before the tests starts. The test itself "describes" this state with a series of setup commands to move the system under test (SUT) into the state that is prerequisite of the test.</li>
	<li>WHEN is the part that triggers the SUT. The triggers are usually method calls to the SUT and ideally contains only a few calls that are necessary to test the feature of the system that is the tested feature of the system.</li>
	<li>THEN test that the state of the SUT has changed appropriately and shows the observable changes that the test is focusing on.</li>
</ul>

As Martin Fowler writes <em>"Some people like to put Given-When-Then as comments to mark informal blocks inside unit tests."</em> I also followed this approach and I was busy writing <tt>//GIVEN</tt>, <tt>//WHEN</tt>, <tt>//THEN</tt> comments, but I was always bothered by comments. I am not excluding comments from my programming arsenal, but many times when I feel to write comments, especially inline comments, I can find better ways. Many times I find it to be a better approach to move even a single line, not to mention two or more lines, into a separate method with a speaking name and calling the private method from the place where the lines originally were. This proves to be much better in most cases than writing comment on the lines.

What is it then with the <tt>//GIVEN</tt>, <tt>//WHEN</tt>, <tt>//THEN</tt> comments? Is there any way to express the test better?

Certainly there are better ways. One way is to use some framework to express your tests, like <a href="http://cukes.info/">Cucumber</a>, or <a href="http://jbehave.org/">JBehave</a> or if you use some non-Java language some other framework as described on the <a>wiki page of Behavior driven development</a>. I personally recommend to devote the time and learn those frameworks, and use one that fits your taste. Just as in the general case: time invested into testing in any form is never wasted.


<blockquote>Time invested into testing is never wasted.</blockquote>


But what to do if you just write some simple test project. Something of a few classes that does not justify the use of any such test frameworks. Of course, you still need testing, as there is only one project that does not need testing: the <tt>null</tt> project (or <tt>/dev/null</tt> for old school gentlemen). So you just start a very small project, say a half afternoon, and you start to write your code (of the unit test at first place of course). Should you write <tt>//GIVEN</tt>, <tt>//WHEN</tt>, <tt>//THEN</tt> comments?

Well, your taste. Recently I realized that I can also write the <tt>GIVEN</tt>, <tt>WHEN</tt>, <tt>THEN</tt> as labels in front of the blocks that contain the 'given', 'when' and 'then' code. Do not feel surprised, if you have never heard of labels in Java. Most Java programmers did not. They are stone age residues, totally useless and are kept for compatibility reason. I opt that they are in the language by mistake inherited from C, Perl and other fossils. However, if they are there, why not use them? The example code

[sourcecode language="java"]
	@Test
	@SuppressWarnings(&quot;unused&quot;)
	public void given_AnACL_when_SubjectQueryAFunction_then_GivesPermisssion() {
		final Subject subject;
		final AccessControlList acl;
		final Function function;
		GIVEN: {
			subject = mock(Subject.class);
			function = mock(Function.class);
			acl = new AccessControlList.Builder().add(
					new AccessControlElement.Builder().subject(subject)
							.function(function).build()).build();
		}
		final boolean permitted;
		WHEN: {
			permitted = can(subject).using(acl).execute(function);
		}
		THEN: {
			assertThat(permitted, is(true));
		}
	}
[/sourcecode]

shows you the idea. Is it better than

[sourcecode language="java"]
	@Test
	public void given_AnACL_when_SubjectQueryAFunction_then_GivesPermisssion() {
		final Subject subject;
		final AccessControlList acl;
		final Function function;
		// GIVEN
		subject = mock(Subject.class);
		function = mock(Function.class);
		acl = new AccessControlList.Builder().add(
				new AccessControlElement.Builder().subject(subject)
						.function(function).build()).build();

		final boolean permitted;
		// WHEN
		permitted = can(subject).using(acl).execute(function);

		// THEN
		assertThat(permitted, is(true));

	}
[/sourcecode]

? Matter of taste. Your opinion?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>269</wp:post_id>
  <wp:post_date>2013-12-04 10:00:19</wp:post_date>
  <wp:post_date_gmt>2013-12-04 09:00:19</wp:post_date_gmt>
  <wp:post_modified>2013-11-26 11:37:34</wp:post_modified>
  <wp:post_modified_gmt>2013-11-26 10:37:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>given-when-then</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5813926052132962304&type=U&a=jRwX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_315ce5373e54c2a1dfadac26560e1521</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_436bf3c308d9bd93a6ada748003c7410</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb337dac9e41c1ae57c9d4a72cd60069</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_67e2d9347d696f266c6794136601f88f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa79c1227dab2f75fe9712cfc4239eb9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>102</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>194.230.155.86</wp:comment_author_IP>
    <wp:comment_date>2013-12-12 08:18:40</wp:comment_date>
    <wp:comment_date_gmt>2013-12-12 07:18:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's quite clever, Peter! I had never thought of using labels this way.

I love labels, by the way. They're the window functions / grouping sets of Java. A device whose mystery is only exceeded by its power ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1386832720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386832720.883284091949462890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17825829202]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1386832720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-12 07:18:40]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>101</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>194.230.155.86</wp:comment_author_IP>
    <wp:comment_date>2013-12-12 08:16:39</wp:comment_date>
    <wp:comment_date_gmt>2013-12-12 07:16:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>Well, I think using barely known language elements arenât good for code readability</blockquote>

Worse than barely known DSLs? :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>96</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1386832600]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386832601.2860260009765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1386832602]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-12 07:16:39]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>97</wp:comment_id>
    <wp:comment_author><![CDATA[stokito]]></wp:comment_author>
    <wp:comment_author_email>stokito@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://stokito.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>77.122.181.166</wp:comment_author_IP>
    <wp:comment_date>2013-12-08 11:48:13</wp:comment_date>
    <wp:comment_date_gmt>2013-12-08 10:48:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I would like to recommend you Spock. It looks like exactly what you need.
https://code.google.com/p/spock/wiki/SpockBasics

class HelloSpock extends spock.lang.Specification {
    def "length of Spock's and his friends' names"() {
        expect:
        name.size() == length

        where:
        name     | length
        "Spock"  | 5
        "Kirk"   | 4
        "Scotty" | 6
    }
}]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>15527361</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386499693.9018061161041259765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"stokito";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1386507433]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1386507433]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-08 10:48:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>96</wp:comment_id>
    <wp:comment_author><![CDATA[Norbert CsÃ­k]]></wp:comment_author>
    <wp:comment_author_email>norbert.csik@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://csiknet.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>77.234.74.6</wp:comment_author_IP>
    <wp:comment_date>2013-12-07 22:02:20</wp:comment_date>
    <wp:comment_date_gmt>2013-12-07 21:02:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, I think using barely known language elements aren't good for code readability. However, the structure of the code is better than before.
I would prefer the inline comments.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3127750</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1386485855]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386450141.0314729213714599609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"csiknor";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1386485855]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-07 21:02:20]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>115</wp:comment_id>
    <wp:comment_author><![CDATA[tomekkaczanowski]]></wp:comment_author>
    <wp:comment_author_email>tkaczano@poczta.onet.pl</wp:comment_author_email>
    <wp:comment_author_url>http://practicalunittesting.com</wp:comment_author_url>
    <wp:comment_author_IP>195.116.242.159</wp:comment_author_IP>
    <wp:comment_date>2014-01-02 12:21:36</wp:comment_date>
    <wp:comment_date_gmt>2014-01-02 11:21:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting idea to use labels - I have never thought of this. I use inline comments cause my whole team like this, however sometimes blank lines are enough.
BTW. If you interested in such things you might enjoy my latests (free) book "Bad Tests, Good Tests" (at http://practicalunittesting.com). It includes many examples of imperfect tests and discusses how they could be improved. Cheers!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18833021661]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1388665953]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1388665953]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388661696.845272064208984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:16:"tomekkaczanowski";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-01-02 11:21:36]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11655</wp:comment_id>
    <wp:comment_author><![CDATA[Gabriel Kohen]]></wp:comment_author>
    <wp:comment_author_email>gabriel@kohenfamily.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>108.171.130.172</wp:comment_author_IP>
    <wp:comment_date>2017-10-30 20:05:16</wp:comment_date>
    <wp:comment_date_gmt>2017-10-30 19:05:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I would add method-name-tested_ before the test name to easily group and navigate to unit tests for that method.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1509394334.466147899627685546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1509390318.1212608814239501953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10908219963]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1509402053]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1509402053]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1509402053.193749904632568359375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Design Patterns: Pattern or Anti-Pattern, that is the question]]></title>
  <link>https://javax0.wordpress.com/2013/12/11/design-patterns-pattern-or-anti-pattern-that-is-the-question/</link>
  <pubDate>Wed, 11 Dec 2013 13:21:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=278</guid>
  <description/>
  <content:encoded><![CDATA[I have recently encountered the wiki page <a href="http://en.wikipedia.org/wiki/Anti-pattern#Software_engineering">Anti-pattern</a> that has an exhaustive list of anti patterns. Some of them were obvious for me. Some of them made me think a bit, other a bit more. Then I started to look for the anti-pattern "singleton" on the page and I could not find it. (Text search stops at singlet...)

<blockquote>Is singleton a pattern or an anti-pattern?</blockquote>

Do not worry. I will not talk about singletons. There are more than <a href="http://stackoverflow.com/questions/11292109/why-is-singleton-considered-an-anti-pattern-in-java-world-sometimes">enough discussions</a> about that on the net. For now let me just use singleton as an example. In case of singleton there is no clean line between pattern and anti-pattern.

As an example, singleton can easily be used, it is easy to understand and serves the purpose being a good example. Singletons were very popular until a few years ago until they started to be considered as anti-pattern. What has changed? Do computer scientists became cleverer and discover that something they thought as a good pattern was actually anti-pattern? Was singleton an anti-pattern from the very start, we just did not know it? Or did singleton itself change from being a good design pattern to be an anti-pattern?

In my opinion, the answer, strangely: both of the cases. It is very similar to physical theory. Newtons theorem says that the force is proportional with the acceleration and the mass of the body accelerating. Einstein said that this is not true, and the larger the speed the larger the error is. Was Newton wrong? Yes, in some sense. Can we still use Newton's laws? Yes we can, and actually we do in case of low speed (as compared to the speed of light).

Were singletons bad from the very start? Yes, just as much as they are now. Can we still use singletons? Yes we can, and actually we do in case of low spee... ops in case of simple problems that do not need considerations that make singleton to be an anti-pattern.

It seems that anti-pattern is environment dependent. And in this case environment is much more complex than in case of physics. Quantum theory, relativity or irreversible thermodynamics (that my father is professor of) are simple, because they do not consider humans. They are only about the matter. 

<blockquote>Programming is about people.</blockquote>

This is something that we tend to forget many times. When it all started it was all about bits and bytes, registers, memory and hexa code. A program was either running and executing well or not. But later it became more and more complex. Computer science became information technology. More and more people use IT and more and more people write programs. They are programmers who do this for living. Even a relatively simple project, if it is commercial needs six to eight programmers. They, we are also part of the environment that the "pattern or anti-pattern"-ness depends on.

The environment also contains simple things, like frameworks, programming languages, operating systems and other technical details, but none of them individually or together has a complexity comparable that of the humans.

<a href="http://javax0.files.wordpress.com/2013/11/anti-design-pattern.jpg"><img src="http://javax0.files.wordpress.com/2013/11/anti-design-pattern.jpg?w=269" alt="anti-design-pattern" width="269" height="300" class="alignnone size-medium wp-image-287" /></a>

When making a decision on the pattern versus anti-pattern debate many asks the question: what can the pattern be used for? What is this good for? What good can it do? These are important questions. If there is no good: no reason to consider the pattern. But it does not make it anti-pattern. If there is no good then the approach is simply not a pattern. The important question what bad it can do? What way average Joe can f@#k up the structure. How likely is it that someone applying the pattern will shoot his own leg? This is not new thing. <a href="http://en.wikipedia.org/wiki/Game_theory">Game theory</a> also states that this is more important to minimize the maximum loss than to maximize the possible gain.

Looking at a pattern, can you tell that? Probably not. In some cases, yes. Congrats, you found an anti-pattern. In other cases you can not find any wrong use. It does not mean there is none. Time will show. Average Joe will come and will use the pattern in ways you could not imagine in your wildest dream (or night mare for that matter).

Thus anti-pattern is not something inherently bad, just as guns do not kill people. The use of patterns in a wrong way is bad. When people tend to use a pattern more the wrong way, then it is an anti-pattern. This is the case with singletons.

Similar thing can be captured with code commenting. When I started to learn programming Pascal our <a />teacher</a> required that 50% of the code has to be meaningful comment. How does it come today? Clean code says that comment is evil. Sort of. Too many comments smell. At times I find myself in projects where comments are totally evicted. Not even Javadoc is allowed. Weird? This is just the way they apply the clean code pattern.

So the question that starts to bug me these days is whether using design patterns in programming is a good pattern or is that itself an anti-pattern?
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>278</wp:post_id>
  <wp:post_date>2013-12-11 14:21:37</wp:post_date>
  <wp:post_date_gmt>2013-12-11 13:21:37</wp:post_date_gmt>
  <wp:post_modified>2013-12-11 14:21:46</wp:post_modified>
  <wp:post_modified_gmt>2013-12-11 13:21:46</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>design-patterns-pattern-or-anti-pattern-that-is-the-question</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5816526992518324224&type=U&a=uhvn]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>112</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2013-12-20 20:12:13</wp:comment_date>
    <wp:comment_date_gmt>2013-12-20 19:12:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<i>"because I believe being asked about in an interview is the main purpose of their existence"</i>

You just made my day!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>111</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387566733]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387566733.2260570526123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1387566733]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-20 19:12:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>130</wp:comment_id>
    <wp:comment_author><![CDATA[Design Patterns: Still controversial | tamasrev]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tamasrev.wordpress.com/2014/02/13/design-patterns-still-controversial/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.8.72</wp:comment_author_IP>
    <wp:comment_date>2014-02-13 23:15:06</wp:comment_date>
    <wp:comment_date_gmt>2014-02-13 22:15:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Verhas uses a great metaphor here: whether a design pattern is a good thing or a bad thing is the same question whether guns are good [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392329707.163281917572021484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392371977]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392371977.6514739990234375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-13 22:15:06]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>109</wp:comment_id>
    <wp:comment_author><![CDATA[TervezÃ©si minta: belsÅ Ã©pÃ­tÅ megvÃ¡ltoztathatatlan objektumokhoz | tifyty]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tifyty.wordpress.com/2013/12/20/tervezesi-minta-belso-epito-megvaltoztathatatlan-objektumokhoz/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.59</wp:comment_author_IP>
    <wp:comment_date>2013-12-20 14:56:08</wp:comment_date>
    <wp:comment_date_gmt>2013-12-20 13:56:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] mÃºlt hÃ©ten a Javax0 blogon jelentettem meg egy kis agymenÃ©st arrÃ³l, hogy jÃ³k-e egyÃ¡ltalÃ¡n a tervezÃ©si mintÃ¡k. Ezen a hÃ©ten pedig ezt cikket Ã­rtam, [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387547768.737432003021240234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387548423]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387548423.56175899505615234375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-20 13:56:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>104</wp:comment_id>
    <wp:comment_author><![CDATA[Bence TakÃ¡cs]]></wp:comment_author>
    <wp:comment_author_email>takacs.bence@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://hu.linkedin.com/in/bencetakacs</wp:comment_author_url>
    <wp:comment_author_IP>178.48.22.141</wp:comment_author_IP>
    <wp:comment_date>2013-12-16 15:37:31</wp:comment_date>
    <wp:comment_date_gmt>2013-12-16 14:37:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think Singleton is the best example you could bring up: to declare an object to be singleton/multiton per PC/JVM/process/classloader/thread is a very important feature. It was 10 years ago and it is nowadays too. Additionally it is such an important feature that it happened to be integrated into frameworks in a decoupled and easily extendable way. And now it is claimed to be an antipattern to implement it again in the old-style coupled and specific way. This is a very good example to the evolution you are speaking about :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387204651.81711101531982421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1387204737]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387204737]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-16 14:37:31]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>106</wp:comment_id>
    <wp:comment_author><![CDATA[Design Pattern: Immutable Embedded Builder | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2013/12/18/design-pattern-immutable-embedded-builder/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.199</wp:comment_author_IP>
    <wp:comment_date>2013-12-18 15:57:56</wp:comment_date>
    <wp:comment_date_gmt>2013-12-18 14:57:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] week I wrote about what makes a pattern anti-pattern. This week I present a design pattern&#8230; or wait&#8230; [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387378676.7924549579620361328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387379320]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387379320.9754788875579833984375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-18 14:57:56]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>111</wp:comment_id>
    <wp:comment_author><![CDATA[PÃ©ter AndrÃ¡s SzÃ¡szvÃ¡ri]]></wp:comment_author>
    <wp:comment_author_email>iorek@kvazi.hu</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/iorek.madvefy</wp:comment_author_url>
    <wp:comment_author_IP>188.142.217.199</wp:comment_author_IP>
    <wp:comment_date>2013-12-20 20:05:28</wp:comment_date>
    <wp:comment_date_gmt>2013-12-20 19:05:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Many questions, few answers. Why do I have the feeling that you have more answers than this? Average Joe is hurting me. Many ways. One way is that Average Joe comes along and asks me about design patterns on an interview (because I believe being asked about in an interview is the main purpose of their existence).  Reminds me to Mr PÃ³lya in his book "How to Solve It" as he tries to formulate the good way of problem solving, creative thinking to Average Joe. Will not happen. Let's face it. It all boils down to one thing. You will have to think. For that you will have to be able to do so. The capable percentage of the population is not changing, determined by biology for thousands of years. Let me not say the rest...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387566328.9762599468231201171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/100004510777454/picture?type=large&_md5=cc44ef45f166e72c3c957dab73409eaa]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[100004510777454]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1387566566]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387566566]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387566566.3305170536041259765625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-20 19:05:28]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[anti-design-pattern]]></title>
  <link>https://javax0.wordpress.com/2013/12/11/design-patterns-pattern-or-anti-pattern-that-is-the-question/anti-design-pattern/</link>
  <pubDate>Sat, 30 Nov 2013 21:16:45 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/11/anti-design-pattern.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>287</wp:post_id>
  <wp:post_date>2013-11-30 22:16:45</wp:post_date>
  <wp:post_date_gmt>2013-11-30 21:16:45</wp:post_date_gmt>
  <wp:post_modified>2013-11-30 22:16:45</wp:post_modified>
  <wp:post_modified_gmt>2013-11-30 21:16:45</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>anti-design-pattern</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>278</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/11/anti-design-pattern.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/11/anti-design-pattern.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:457;s:6:"height";i:508;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/11/anti-design-pattern.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[embedded-builder-2]]></title>
  <link>https://javax0.wordpress.com/embedded-builder-2/</link>
  <pubDate>Sun, 01 Dec 2013 10:35:38 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/12/embedded-builder-2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>289</wp:post_id>
  <wp:post_date>2013-12-01 11:35:38</wp:post_date>
  <wp:post_date_gmt>2013-12-01 10:35:38</wp:post_date_gmt>
  <wp:post_modified>2013-12-01 11:35:38</wp:post_modified>
  <wp:post_modified_gmt>2013-12-01 10:35:38</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>embedded-builder-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/12/embedded-builder-2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/12/embedded-builder-2.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/12/embedded-builder-2.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[embedded-builder-1]]></title>
  <link>https://javax0.wordpress.com/embedded-builder-1/</link>
  <pubDate>Sun, 01 Dec 2013 10:35:42 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2013/12/embedded-builder-1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>290</wp:post_id>
  <wp:post_date>2013-12-01 11:35:42</wp:post_date>
  <wp:post_date_gmt>2013-12-01 10:35:42</wp:post_date_gmt>
  <wp:post_modified>2013-12-01 11:35:42</wp:post_modified>
  <wp:post_modified_gmt>2013-12-01 10:35:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>embedded-builder-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2013/12/embedded-builder-1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/12/embedded-builder-1.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:801;s:6:"height";i:711;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2013/12/embedded-builder-1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Design Pattern: Immutable Embedded Builder]]></title>
  <link>https://javax0.wordpress.com/2013/12/18/design-pattern-immutable-embedded-builder/</link>
  <pubDate>Wed, 18 Dec 2013 14:57:52 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=291</guid>
  <description/>
  <content:encoded><![CDATA[Last week I <a href="http://javax0.wordpress.com/2013/12/11/design-patterns-pattern-or-anti-pattern-that-is-the-question/">wrote</a> about what makes a pattern anti-pattern. This week I present a design pattern... or wait... perhaps this is an anti-pattern. Or is it? Let' see!

The builder pattern is a programming style when there is a class that builds an instance of another. The original aim of the builder pattern is to separate the building process of an object, that can be fairly complex in some cases, from the class of the object itself thus the builder can deliver different types of objects based on how the building process progresses. This is a clear example of the separation of concerns.

Immutable objects are objects that are created and can not be altered after the creation process.

<blockquote>Builders and immutable objects just come together very natural.</blockquote>

The builder and the built objects are very closely related and therefore they are usually put into the same package. But why are they implemented in separate classes? On one hand: they have to be separate classes of course. That is the whole thing is about. But on the other hand: why can not the builder be an inner class of the built class? Builder usually collect the building information in their own state and when the caller requests the object to be built this information is used to build the built object. This "use" is a copy operation most of the time. If the builder is an inner class all this information can be stored in the built object. Note that the inner class can access all private parts of the class embedding it. The builder can create a built object just not ready yet and store the build information in it. When requested to build all it does are the final paintings.

This pattern is followed by Guava for the immutable collections. The builders are static inner classes. If you look at the code of <a href="https://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/collect/ImmutableList.java">ImmutableList</a> you can see that there is an internal <tt>Builder</tt> class inside the abstract class.

But this is not the only way to embed the builder and the implementation. What if we embed the implementation inside the builder? The builder is the only code that needs mutable access to the class. An interface defining the query methods the class implements should be enough for anybody else. And if we get to this point why not to create a matryoshka?

Let's have an interface. Let's have a builder inside the interface as an inner class (static and public by default and can not be any other way). Let's have the implementation inside the builder as a private static class implementing the outer interface.

[sourcecode language="java"]
public interface Knight {
    boolean saysNi();

    public class Builder {
        private Implementation implementation = new Implementation();

        public Builder setState(String say) {
            implementation.say = say;
            return this;
        }

        public Implementation build() {
            Implementation knight = implementation;
            implementation = null;
            return knight;
        }

        private static class Implementation implements Knight {
            private String say;

            public boolean saysNi() {
                return say.indexOf(&quot;ni&quot;) != -1;
            }
        }
    }
}
[/sourcecode]

The builder can access any fields of the Knight implementation since they are in the same top level class. (JLS1.7, section 6.6.1 Determining Accessibility)

There is no other way (except nasty reflection tricks or bytecode abuse, which are out of scope for now) to get access to the implementation except using the builder.

The builder can be used to build the implementation and once it returned it has no access to that anymore, there is no way to modify the implementation via the builder. If the implementation is immutable it is guaranteed to save the state.

Is this a pattern or an antipattern?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>291</wp:post_id>
  <wp:post_date>2013-12-18 15:57:52</wp:post_date>
  <wp:post_date_gmt>2013-12-18 14:57:52</wp:post_date_gmt>
  <wp:post_modified>2018-03-02 16:05:46</wp:post_modified>
  <wp:post_modified_gmt>2018-03-02 15:05:46</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>design-pattern-immutable-embedded-builder</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5819087920732479488&type=U&a=jz6M]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>133</wp:comment_id>
    <wp:comment_author><![CDATA[HÃ­deljÃ¡rÃ¡sok Ã©s volatile metÃ³dusok | tifyty]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tifyty.wordpress.com/2014/02/19/hideljarasok-es-volatile-metodusok/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.255.73</wp:comment_author_IP>
    <wp:comment_date>2014-02-19 14:22:31</wp:comment_date>
    <wp:comment_date_gmt>2014-02-19 13:22:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] az) a belsÅ private vÃ¡ltozÃ³k kÃ­vÃ¼lrÅl is elÃ©rhetÅek. Ezt ki is hasznÃ¡lja pÃ©ldÃ¡ul az immutable embedded builder pattern. Ez egyÃ©bkÃ©nt le van Ã­rva a Java nyelvi speckÃ³ban is, hogy Ã­gy kell lennie: ami a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392816151.411334991455078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392816194]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392816195.4252269268035888671875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-19 13:22:31]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>110</wp:comment_id>
    <wp:comment_author><![CDATA[TervezÃ©si minta: belsÅ Ã©pÃ­tÅ megvÃ¡ltoztathatatlan objektumokhoz | tifyty]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tifyty.wordpress.com/2013/12/20/tervezesi-minta-belso-epito-megvaltoztathatatlan-objektumokhoz/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.59</wp:comment_author_IP>
    <wp:comment_date>2013-12-20 14:56:10</wp:comment_date>
    <wp:comment_date_gmt>2013-12-20 13:56:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] meg egy kis agymenÃ©st arrÃ³l, hogy jÃ³k-e egyÃ¡ltalÃ¡n a tervezÃ©si mintÃ¡k. Ezen a hÃ©ten pedig ezt cikket Ã­rtam, aminek ez kb. a [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387547770.7998950481414794921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387548421]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387548421.222836971282958984375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-20 13:56:10]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>137</wp:comment_id>
    <wp:comment_author><![CDATA[Syntethic and bridge methods | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/02/26/syntethic-and-bridge-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.140</wp:comment_author_IP>
    <wp:comment_date>2014-02-26 09:37:47</wp:comment_date>
    <wp:comment_date_gmt>2014-02-26 08:37:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] variables and methods of the nested class are reachable from the top level class. This used by the immutable embedded builder pattern. This is a well defined behavior of Java, defined in the language [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393403867.7581140995025634765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393403885]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393403886.2322750091552734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-26 08:37:47]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1144</wp:comment_id>
    <wp:comment_author><![CDATA[Java private, protected, public and default | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/07/30/java-private-protected-public-and-default/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.77</wp:comment_author_IP>
    <wp:comment_date>2014-07-30 20:47:32</wp:comment_date>
    <wp:comment_date_gmt>2014-07-30 19:47:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The field i is accessible from the enclosing class as well as from inside the NestedClass. This example is also simple but more to the point that the specification example misses. Is there any real use of this possibility? Not really. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406749653.026248931884765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-30 19:47:33]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1406749690]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406749691.500876903533935546875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Never Test Logging]]></title>
  <link>https://javax0.wordpress.com/2014/02/19/never-test-logging/</link>
  <pubDate>Wed, 19 Feb 2014 08:32:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=303</guid>
  <description/>
  <content:encoded><![CDATA[Technical logging is usually not tested. As <a href="http://stackoverflow.com/users/20487/avdi">commentator</a>  write on <a href="http://stackoverflow.com/questions/1168151/unit-testing-logging-and-dependency-injection">stack overflow</a>:

<blockquote>
... I practice TDD/BDD pretty religiously and I almost never test logging. With some exceptions logging is either a developer convenience or a usability factor, not part of the method's core specification.
</blockquote>

There is also a technical side why developers are reluctant, as <a href="http://stackoverflow.com/users/22656/jon-skeet">Jon</a> writes on the same page:

<blockquote>
It's a pain, either making the production code messy (due to injecting the logger) or the test smelly (replacing the static logger with a mock). 
</blockquote>

After those two statements we have to stop and think for a while. (After all, thinking never hurts, does it?) When we are talking about logging, do we mean the logging as a function or the tools that we use? Many times there is no difference: we use logging tools for logging. Absolutely logical. On the other hand when somebody asks a question about how to test logging there is a good chance that s/he is using the logging tool for something else than logging.

<blockquote>Using logging tools and logging functionality are sometimes not the same.</blockquote>

When testing logging comes into picture you should feel <a href="http://en.wikipedia.org/wiki/Code_smell">code smell</a>.

<h3>Testing Logging Functionality</h3>

The first question that we have to answer is : what is logging as a functionality? What is it for? (And this time this is not about deforestation.)

When you write statements, like <tt>log.debug("accountIsDisabled() returned true");</tt>, is there any functional specification that you fulfill? I bet there is none. Technical logging is not a functional requirement. Logging is used to help the developer and the support people to better understand the behavior of the program, when something non expected happens in the program. This is not something that is inherent to the core functionality of the code.

The important fraction of the above sentences is "when something non expected happens". I hear the roar of junior and semi senior developers: "We also log when something expected but exception occurs, like database connection dropped." Well, my friend, let me tell you that you only think you log. You actually do not log. You alert. You presumably use some logging tool to perform alerting and this is what makes you think that you do logging. In reality, however, you are not. And this is very important.

I do not say that you should not use a logging tool for anything else other that logging. You can send alerts to a file, send SMS, tweet, whatever using a special log4j appender. No problem. However make sure that this is the best choice from the available tools. If you think you are logging, if you are not aware that you are actually alerting you prevent yourself realizing that you perhaps use a sub optimal tool for the purpose. When you send anything through your log tool's drain to a log file that describes something, which is the description and the details of a well expected behavior then you should ask yourself the question: am I logging, or am I doing something else?

(Note: that something non-expected may happen outside of the program as well, in which case we also need logging. However that is not technical logging. Typically this is legal audit logging. You should test such logging.)

After we defined what I really mean when I talk about logging, my next statement is the following:

<blockquote>You should not test technical logging!</blockquote>

The statement may be shocking the first time. Why did not I write "you need not test"? Simply because there is nothing in programming that you "may but need not do" if you are a professional. You and your team have a goal. It includes product, time, budget, quality and all other "such" things. You get there on a way paved with effort. You have to minimize this effort. Not for your own good, or because you are lazy, but for the shareholders sake. Effort is cost. They provide the budget not for your enjoyment, but rather for achieving a business goal. That is the way businesses work, and professional programmers operate in business. That is one of the mandatory requirements to be professional. If you need not do something to achieve the goals, then you should not. Otherwise you waste the money that is not yours.

If you still feel that there is a real business need to test logging then start to sniff. This is code smell again. You probably are not logging, only using logging tools.

<h3>Testing Logging Tools Functionality</h3>

When you use a logging tool for something other than logging then you may well want to do some testing. Assume you decided after careful and professional assessment of all the possible technical solutions that you will use a logging framework for something, which is not logging. Alerting for example. In that case you want to test that your code uses the logging appropriately. Then comes the issue with the <tt>private static final</tt> loggers that you can not overwrite even using reflection. (You may succeed if you try, but that is against the JLS and JVM standards and may not always work.)

But again: this is not logging, this is using only the logging tool for some function, say alerting. Alerting functionality should be coded testable. In that case put aside the static loggers and focus on functionality. Separate the technical logging from alerting and properly inject dependency and mock the objects as usual during testing. Wrap alerting into a separate class, package and mock that while testing and test the wrap separately.

Whenever you program something to be tested you have to code it testable. Which is obvious since you develop your code using TDD.



]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>303</wp:post_id>
  <wp:post_date>2014-02-19 09:32:10</wp:post_date>
  <wp:post_date_gmt>2014-02-19 08:32:10</wp:post_date_gmt>
  <wp:post_modified>2014-02-19 09:32:10</wp:post_modified>
  <wp:post_modified_gmt>2014-02-19 08:32:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>never-test-logging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202347080411112]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/hAdxhD3rhK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5841821312716533760&type=U&a=pL21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>162</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 11:45:50</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 10:45:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I myself would say that statics are bad design in many cases. Not always.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>161</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395657950]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395657951.2797400951385498046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22737724618]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395657952]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 10:45:50]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>163</wp:comment_id>
    <wp:comment_author><![CDATA[Wengfu Zhoudong]]></wp:comment_author>
    <wp:comment_author_email>wengfu@hushmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>124.183.180.179</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 12:32:21</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 11:32:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Perhaps the problem is the language that is being used. It is acknowledged by most IT professionals that Java is obsolete, riddled with security issues and is old-fashioned in its structure.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395660741.3741719722747802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22739302060]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395663620]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395663620]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395663620.8848969936370849609375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 11:32:21]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>161</wp:comment_id>
    <wp:comment_author><![CDATA[lmm]]></wp:comment_author>
    <wp:comment_author_email>md401@srcf.ucam.org</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/m50d</wp:comment_author_url>
    <wp:comment_author_IP>88.211.40.154</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 11:37:51</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 10:37:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Statics are bad design; unfortunately log4j etc. encourage this on dubious performance grounds (sure, you don't want to be instantiating a new logger every time you create some hot object - but if you understand basic program design you won't do that. Instantiating a new database accessor object would be just as bad - should those be static too?). If you use ordinary OOP techniques and DI then logging becomes no harder to test than anything else.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395657720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395657720.651792049407958984375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395657720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1395657472]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22737657768]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395657471.9869530200958251953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"m50d";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 10:37:51]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>132</wp:comment_id>
    <wp:comment_author><![CDATA[ReadingLog: a fresh one about test logging | What Folti thought...]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://ljszalai.wordpress.com/2014/02/19/readinglog-a-fresh-one-about-test-logging/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.8.131</wp:comment_author_IP>
    <wp:comment_date>2014-02-19 11:34:54</wp:comment_date>
    <wp:comment_date_gmt>2014-02-19 10:34:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] article is about relation of test and logging. It was very thought provoking for me just because in my team [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392806095.6113069057464599609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392807669]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392807670.3057320117950439453125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-19 10:34:54]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164</wp:comment_id>
    <wp:comment_author><![CDATA[m50d]]></wp:comment_author>
    <wp:comment_author_email>md401@srcf.ucam.org</wp:comment_author_email>
    <wp:comment_author_url>http://m50d.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>85.255.234.2</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 13:32:34</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 12:32:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Those are bold claims to be making without citations. Java certainly lacks some modern language features and applets should probably be retired but for server-side apps I'd argue that its design is inherently more secure than e.g. Ruby or Javascript.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>163</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395664355.6252329349517822265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"m50d";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22739664083]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395664979]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395664980]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395664980.4849469661712646484375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 12:32:34]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>134</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.98.192.126</wp:comment_author_IP>
    <wp:comment_date>2014-02-22 23:13:51</wp:comment_date>
    <wp:comment_date_gmt>2014-02-22 22:13:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow, this starts a train of thoughts:

Alerting, monitoring, self-debugging, collecting usage statistics, collecting debug data from the production system: They mostly fulfill non-functional requirements:
- The customer needs a maintainable system. (alerting, monitoring, self-debugging; sometimes: collecting debug data)
- The customer needs to know what's going on with their service (collecting usage statistics)

There is an exception though: sometimes when we cannot reproduce a bug then we might add logging to the production system, then wait until it occurs again. Or, maybe, it's alerting too.

Anyway, there is one case when one *must* test technical logging: when we change legacy code then other modules might depend on the logging - even though we don't know about it. At least, once I fall into this fallacy: I edited a perl script that generated html and csv files. It had a strange logging, which I failed to fully preserve. Later I learned that the crontab sent this strange lines to my boss and to the boss of his boss. I should've tested and preserved the stdout logging too.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393107231]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393107231.7285900115966796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393107231]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-22 22:13:51]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 13:44:00</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 12:44:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You mean "less secure" ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>164</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395665041]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395665042.10323810577392578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22739680585]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395665042]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 12:44:00]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166</wp:comment_id>
    <wp:comment_author><![CDATA[m50d]]></wp:comment_author>
    <wp:comment_author_email>md401@srcf.ucam.org</wp:comment_author_email>
    <wp:comment_author_url>http://m50d.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>85.255.234.2</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 13:49:08</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 12:49:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@peter I mean more secure. The type system makes it easier to write secure code, the servlet API is well isolated, and consider e.g. tomcat's ability to enforce security policies on each individual war.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>164</wp:comment_parent>
    <wp:comment_user_id>58557341</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395665348]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395665348.2428219318389892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"m50d";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22739761920]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395665348]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 12:49:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-24 14:09:22</wp:comment_date>
    <wp:comment_date_gmt>2014-03-24 13:09:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Right, it is my English. I agree with your statements.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>163</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395666562]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395666563.31161403656005859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22740104711]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395666564]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-24 13:09:22]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>961</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2014-07-10 02:01:25</wp:comment_date>
    <wp:comment_date_gmt>2014-07-10 01:01:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Even when using DI as much as possible, I see no reason for injecting loggers. There are needed in too many places and are pretty irrelevant for the functionality (with a few exceptions already mentioned like alerting, but then I would inject an Alerter encapsulating the Logger), so injecting them is IMHO code pollution. And there are also some objects which don't get created via DI and polluting their constructor by loggers would be too bad. For me,

private static final Logger = MyLoggerFactory.newLogger();

works best. It's hack determining the Logger name from the stack trace (doing this once per class is cheap), it's refactoring-proof, and can be (via an ugly static property) be used to mock the Logger. It's ugly, but totally practical.

And no, I'd never use it for a DB or anything but logging.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>162</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404954085.86056995391845703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[104379794518123041179]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25247647979]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1405005508]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-10 01:01:27]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1405005508]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1405005509.11017894744873046875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Alan Turing Receives Royal Pardon]]></title>
  <link>https://javax0.wordpress.com/2013/12/25/alan-turing-receives-royal-pardon/</link>
  <pubDate>Wed, 25 Dec 2013 12:51:19 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=310</guid>
  <description/>
  <content:encoded><![CDATA[Alan Turing <a href="http://www.theguardian.com/science/2013/dec/24/enigma-codebreaker-alan-turing-royal-pardon">receives royal pardon</a>. 

Is this good? No. It just happens not to be bad.

On one hand he did not receive the glory and admiration in his life he deserved, just as many others didn't he was working with in the Bletchley park. But this is not a disaster.

On the other hand royal pardon is not the proper way to express what happened was wrong. The justice and the treatment of Turing was against humanity. The reasoning that this was according to the actual law leaves a bit of bitter taste since NÃ¼rnberg.

Giving pardon to Turing now or the time would not have been correct because he is a war hero of a form. Even heroes should not have such privileges. They should not break in, kill or rob anyone without legal consequences. At the same time homosexuality, as we see it now is not a felony, it is not a sin: there is no place for conviction.

Therefore it is not proper that Turing was given pardon. It would be good to state that chemical castration of homosexuals is and was inhuman. Even in the light of the fact that homosexuality by the time was felony. All such convictions should be repealed retroactively. 

This would not only be good, but also important. Not for Turing or for those not publicly known who were convicted. It is important for all of us wanting to live in a free society. For us, who want to have the right to make own decisions in aspects of our life that no government nor any other power has business with. Not even in England.

It is important for us, who want to live in a world where the surrounding power can face the reality. As a first step it has to face the reality that 60 years ago the government, ourself, the people made errors. Where not only the defeated are forced to accept and acknowledge that some of their acts, even being lawful, were wrong and have consequences. The ruling power should be strong enough, we ourselves should be strong enough to state it without external force.

After that statement, when we can face the fact of the errors, it is not Turing to give pardon, but ourselves, our government, the jury, who convicted him. We made errors in our history, but we have pardon and we improve.

I know that giving pardon to Turing is the first step to this direction. And this is not bad.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>310</wp:post_id>
  <wp:post_date>2013-12-25 13:51:19</wp:post_date>
  <wp:post_date_gmt>2013-12-25 12:51:19</wp:post_date_gmt>
  <wp:post_modified>2013-12-25 13:51:19</wp:post_modified>
  <wp:post_modified_gmt>2013-12-25 12:51:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>alan-turing-receives-royal-pardon</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5821592787304738816&type=U&a=UT6B]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"linkedin";a:1:{s:10:"H1e-oy_lq2";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Use Java annotation deprecated the right way]]></title>
  <link>https://javax0.wordpress.com/2014/02/05/use-java-annotation-deprecated-the-right-way/</link>
  <pubDate>Wed, 05 Feb 2014 17:48:55 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=313</guid>
  <description/>
  <content:encoded><![CDATA[There is hardly anything more infuriating that seeing a method <tt>@Deprecated</tt> without a proper documentation. I feel lost. Should I still use the method? Probably that is not the intention of the developer, that is why he/she added the deprecation annotation. Should I use something else? So....

<blockquote>What are the rules using <tt>@Deprecated</tt>?</blockquote>

<h3>Rule #1: do Javadoc how not to</h3>

Whenever you deprecate a method create a JavaDoc that tells the programmer how not to use this method any more. Do not only say that "this method is deprecated, don't use it". That is exactly what the deprecation annotation and the JavaDoc <tt>@deprecated</tt> word says. There is no point to repeat it in English. The targeted audience is Java programmer, supposed to know what deprecation means.

Name the new methods, that replace the old one. (Use <tt>@link</tt>!) This may or may not be enough. The new method will have some documentation that explains how to use it. Do not repeat that (text or meaning) in the JavaDoc. Just do not repeat yourself, documentation should also be DRY. On the other hand you may want to describe how to replace the old call with the new one. You may give hint for the refactoring.

<h3>Rule #2: do not Javadoc how to</h3>

Remove the old JavaDoc documentation. Some may argue that users who maintain the legacy code may still need that. The fact is that they use an old version of the method in an old version of a library. The documentation in the old version is still there, frozen carved into stone (or rather carved into a release in the repository). The actual version that deprecates the method should not contain the outdated documentation. That would encourage the programmers to keep on using the method. There is one single way to use a deprecated method: not using it. JavaDoc should be current describing only that, as described above in rule#1.

<h3>Rule #3: no apology in JavaDoc</h3>

Do not explain in the JavaDoc why the method was deprecated. You are a responsible developer. This is your decision. You made your choice. Others have to live with it. Write a blog about the background of the architectural decision if you wish. It may be helpful, but JavaDoc is not the place for it.

<blockquote>Deprecated API JavaDoc is exclusively to explain how not to use.</blockquote>

The emphasis is on <em>how</em>. Not "why not to use it".

<h3>Rule #4: do deprecate</h3>

If you feel like needing to deprecate a method: do it! If you are afraid of your users and you do not want to make their life miserable deprecating some method this decision will make your life miserable instead. Do all measures to have an API that will not need deprecation so long as long possible. But if ever something needs to be deprecated: throw it right away. Do not feel guilty why you did not see the future when the api was designed. None of us sees the future perfect. After all, life would be boring knowing the future.

If you are interested on opinions about this topic on <a href="http://stackoverflow.com/questions/5039723/should-i-use-javadoc-deprecation-or-the-annotation-in-java">stakcoverflow</a> visit the linked page. Or just start a flame war, if you wish, here. I am totally trollerant.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>313</wp:post_id>
  <wp:post_date>2014-02-05 18:48:55</wp:post_date>
  <wp:post_date_gmt>2014-02-05 17:48:55</wp:post_date_gmt>
  <wp:post_modified>2014-02-05 18:48:55</wp:post_modified>
  <wp:post_modified_gmt>2014-02-05 17:48:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-java-annotation-deprecated-the-right-way</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202262747142833]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/WPfHrxYr0h]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5836887996846465024&type=U&a=NDvw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3ca0ec2dbcc1c87bb8a016b382197ef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9d25a1486755003226701fede149d8a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>128</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-02-11 10:07:45</wp:comment_date>
    <wp:comment_date_gmt>2014-02-11 09:07:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt;You asked for the flamewar

I know ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>125</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392109665]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392109666.0364010334014892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21684681881]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1392109666]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-11 09:07:45]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>127</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-02-10 15:58:14</wp:comment_date>
    <wp:comment_date_gmt>2014-02-10 14:58:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[1. If there is no old version of the library, then you should not use any deprecated method when you start to use the current version. If there "was" an old version of the library but currently it does not exist any more then your release management is not professional. "Having to search elsewhere" in this case means to search exactly at the place where the documentation should be.

2. You need not analyze the code. Just read it. No documentation can be more precise than that. You want to understand what the code does in order to maintain that. How would you achieve that without understanding the code itself?

3. You want it or not this is actually what happens when you use libraries and programming languages. You can access private variables via reflection, but this is made inconvenient. You can fluent methods but only in a specific order. You can convert in Java a `long` to `Double` but only through `double`. They are all inconvenienced.

To get rid of a deprecated method is always an option. It is a matter of cost. If the library is not usable without the deprecated method, then the library is not well designed. Consider getting rid of the library.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392044294]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392044294.3841419219970703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21651393418]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1392044294]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-10 14:58:14]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>124</wp:comment_id>
    <wp:comment_author><![CDATA[Hubertus Bigend]]></wp:comment_author>
    <wp:comment_author_email>h.bigend@iemp.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>109.84.0.227</wp:comment_author_IP>
    <wp:comment_date>2014-02-10 10:50:44</wp:comment_date>
    <wp:comment_date_gmt>2014-02-10 09:50:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As to rule #2: Sounds correct, in theory, but in real life, one day a reason for updating a library comes up, and shortly thereafter a different reason comes up for looking into a different piece of code, and then there's that call to a now-deprecated method that doesn't even say what it's doing anymore. Just because a method has been deprecated you shouldn't impose unnecessary difficulties on people who still use it for whatever reason. A reason that might even be sensible ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392025844.7931830883026123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"hbigend";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21641886711]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1392033786]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392033786]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392033787.2566978931427001953125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1392025844]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-10 09:50:44]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>125</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-02-10 14:42:29</wp:comment_date>
    <wp:comment_date_gmt>2014-02-10 13:42:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If there is difference between theory and real life, then probably there is some problem with the theory. Or, for that matter, with the real life.

First of all: the documentation is still there in the old version of the library. Have a look at that.

Second: there is a working code that should fairly explain the usage of the method. If it does not, then this is not the lack of JavaDoc of the deprecated method the difficulty but rather the non clean code.

Finally: if I, as a developer of a library encourage the users (my customers) to use a deprecated method providing the outdated information I do harm to them. Never harm the customer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>124</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392039749.9287168979644775390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392039749]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21647181622]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1392039750]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-10 13:42:29]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>126</wp:comment_id>
    <wp:comment_author><![CDATA[Hubertus Bigend]]></wp:comment_author>
    <wp:comment_author_email>h.bigend@iemp.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>109.84.0.227</wp:comment_author_IP>
    <wp:comment_date>2014-02-10 15:37:32</wp:comment_date>
    <wp:comment_date_gmt>2014-02-10 14:37:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You asked for the flamewar ;-)
1. In my example, which is a real-world example, there is no old version of the library in the project. Having to search elsewhere makes the job more time-consuming and thereby more costly.
2. Having to analyze the code that uses the method in order to determine what it does is, even in a best-case scenario, more time-consuming and thereby more costly.
3. I, being a developer and, as such, customer when it comes to libraries, do not need nor want library developers to discourage me of something by inconveniencing me, which is decidedly paternalizing, too. To mark a method as deprecated by annotation and/or JavaDoc is absolutely sufficient to make the point. And as a matter of fact, I have never been harmed by existing documentation for deprecated methods, and I've encountered some in my life. I have, though, been more than once inconvenienced, i.e. harmed, by absent documentation for a deprecated method in a library I had to use the latest version of, while, at the same time, refactoring the code to get rid of the deprecated method was not an option...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>125</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1392043054]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1392043054.9620189666748046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"hbigend";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21650357512]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1392043055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-10 14:37:32]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>516</wp:comment_id>
    <wp:comment_author><![CDATA[Unit test deprecated methods | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/05/28/unit-test-deprecated-methods/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.187</wp:comment_author_IP>
    <wp:comment_date>2014-05-28 10:01:16</wp:comment_date>
    <wp:comment_date_gmt>2014-05-28 09:01:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] methods have to be treated different. At least in my opinion. The question I did not discuss in that article is if we have to unit test [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1401275920]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401275920.2172749042510986328125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401267677.20769500732421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-05-28 09:01:16]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1132</wp:comment_id>
    <wp:comment_author><![CDATA[Bo]]></wp:comment_author>
    <wp:comment_author_email>sittingatthebay@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.109.73.167</wp:comment_author_IP>
    <wp:comment_date>2014-07-29 14:56:42</wp:comment_date>
    <wp:comment_date_gmt>2014-07-29 13:56:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[although a couple of months late, nevertheless ... ;)
@1: "there is no old version in the <em>project</em>". As I understand it, and experience it in engineering projects, there is reluctance to maintain several third party libraries. Its a difference if you have 10 libraries only, or 3 versions of each library. This does not mean that "the truth is not out there ;) ",  just its not policy to keep it <em>alongside</em> the project for good reasons. So, if an old method is still there, it should be documented. Deprecation tells you its not recommended for use anymore, and eventually to be replaced or removed. This does not automatically make it true in client code.

@2 Not a sensible counter argumentation IMO. It might apply if source code is available, well written and is easy code or boiler-plate stuff. Parsing through modified versions of optimized DCT code is not fun, and why one set of parameters was replaced with another. Thats what documentation is for. By extension, if documentation cannot keep up, there is no reason to do it in the first place, as the argument "everyone can just read the source code" still applies.

@3 Probably a question of severity. For example, while applicable for security relevant code, a lot of deprecation is along with enhancements, that are at all not relevant to the client at that point. Therefore, this influences the importance, and further, the inconvenience the user will go through to push those changes.

That being said, in our development cycles deprecation is usually considered a middle step we try to minimize in time, and often not worth doing at all. In development version, we just remove the method, forcing user to comply. Its rude but it works (anyone can patch it back in). For stable versions, adapting the documentation is as weak or strong as using an annotation.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>127</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406642203.491035938262939453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25726812350]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1406650744]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-29 13:56:47]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1406650744]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406650745.258472919464111328125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1133</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-07-29 17:46:08</wp:comment_date>
    <wp:comment_date_gmt>2014-07-29 16:46:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I read from your comment that, perhaps your interpretation of deprecation is a bit different. I feel that when you say a method is deprecated it is a kind ask of the users (library using developers) not to use it. In my reading it is a harsh command: you should not use it. It is only there for the old code so that some code which is not modified at the moment may still be "linked" with the new version of the library.

It is not a problem that we see the world different. It would otherwise be boring. Setting the topic to something that people think different just seeds the discussion that is the real value of a blog article. I appreciate your comments and thank you for adding value to the article for the commoon good of the community.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1132</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25727388508]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1406652368]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-29 16:46:09]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1406652368]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406652368.4715290069580078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Logging or debugging]]></title>
  <link>https://javax0.wordpress.com/2014/03/05/logging-or-debugging/</link>
  <pubDate>Wed, 05 Mar 2014 08:42:01 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=327</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>Debugging is lame. You should debug log.</blockquote>

<blockquote>If your code is structured you do not need debug logging.</blockquote>

These are two opinions from the two ends of the line. I am, as usually, standing in the middle, and I will tell you why.

First of all, there is no principal difference between debugging versus logging. They are just two different implementations of the same thing: observation of your execution engine state in time dimension.

<h3>Issue with debugging</h3>

When you debug you step your program forward in time and at any point the execution stops you can examine the value of any variable. The shortage is that you can not step back in time. At some points you realize that you would just like to see what the value of a certain variable was just before some method was called, some object was created or whatsoever happened in the system. What you actually do in such a situation is to restart the code and hoping it behaves deterministic try to catch the execution at the earlier stage that you are interested in. And this is another shortage of debugging. You can not effectively debug a code that does not behave deterministic. And trust me: most bugs behave non deterministic.
<a href="http://javax0.files.wordpress.com/2014/02/debug-vs-log1.png"><img src="http://javax0.files.wordpress.com/2014/02/debug-vs-log1.png?w=277" alt="Debug versus Logging" width="277" height="300" class="alignleft size-medium wp-image-352" /></a>


<h3>Issue with logging</h3>

With logs the major issue is different. It is not the time but rather the breadth of states, variables that you can look at is the problem. You insert log statements into your code dumping the values of variables into a log file at a certain point of execution. When you examine the log file you can scroll back and forth. However if you did not print out the value of a certain variable at a certain execution point, there is no way to get it from the log file. The solution is the same as with debugging: execute the code again, this time extended with the new log statements. If, however, you have enough information in your log files, then you will just get enough information to track down a bug even if that is not deterministic. Only 'if you have' ...

<h3>Solution: logging all the states all the times?</h3>

The ideal solution would be to dump all variables into a possibly binary log file at each state of the execution and examine the content of the file afterwards. The examination would essentially look like a debugger, except that the change of the variables comes from the recorded log file instead of from on the fly calculation. It would be like a playback of a recorded execution and as such you could replay it several times. I do not know if there is any tool like that for the JVM.

You just can not define what is "each state" effectively in a multi thread execution environment like the JVM is. This is one of the issues. The other thing is that if you'd start dumping the JVM memory after each command (forgetting the issues of multi-thread) it would require enormous amount of bandwidth and disk space.

Dreaming about the ideal solution not deliverable is sort of no use. What is the solution that can practically be executed?

<h3>Practical approach</h3>

You can debug when it is appropriate. Full stop. You just did that so far, keep doing that. I tend to use log statements even when I debug some code and if the environment allows it I do it on the fly. When I find the root cause of the issue I am hunting I review the log statements and I delete them. They did the job while debugging, they are not needed anymore. At least that was my practice unit I found myself writing log statements that I have already created before. Why? Because fixing one bug does not mean that I have fixed all of them. There is nothing like all bugs fixed. But the log items littered the log file and that just increased the work to find the needed information hunting the next bug. In other words the log file is full of noise and that is why I deleted these items the first place. But for the same reason I could also delete the unit tests that already pass. It would save a lot of time during compilation, wouldn't it? We do not do that.

Summary in one sentence? Log and debug the way it fits you and the issue you are hunting.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>327</wp:post_id>
  <wp:post_date>2014-03-05 09:42:01</wp:post_date>
  <wp:post_date_gmt>2014-03-05 08:42:01</wp:post_date_gmt>
  <wp:post_modified>2014-02-26 09:42:41</wp:post_modified>
  <wp:post_modified_gmt>2014-02-26 08:42:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>logging-or-debugging</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202438106726713]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/Vi4KX1vAga]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5846897402547961856&type=U&a=xi2n]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd5443619a24e5746ece528d25b75c35</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d7d3271100890b7d72943adefa96370a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bcd249b694afb06166a3f8f06e6f58be</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5298f25e10452861187c8fc2806a4bb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9ef9594e3573390f1c4fd202ea65849b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bc008519473fc7507f1b599c1e92f5ef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84d08ed0960534d26a823c9bfd69856a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_304d0711ee2398a755ae436ab5088073</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6a5eb9fba0d6aa4afa0a5254d0fb4732</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_00c9adb4bc939eeffdda77ee27a8e865</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e59c2d27fcf013f6f3c279d8c077495</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d82ae021ad9a66fa98de3c1706bd6b43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee010dffacaf2c8dd971014451f2803d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fe87aeab02a95b4df142d666a5f3917e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19134a7a2e4b230af05a309c43f1aa39</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_086a2c82d4f565a1fb76eb6ad39ba966</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e5e0f457480116861393cdc5237fdc6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9a9e4b7a70d9463ae4ccded97de56320</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb98b8a825d8bee6bc0439f9d596d294</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4461d1f1fb30087f5dfbbdbeaa4a07a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8a845cf1db00e881d6ebdb6ce649c7a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7cb7947ab59729e9dcd5c8f85e9f0a31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_083c26ad969934fc0f5cdae8ac5a18b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0fd4335f580bc2b8618342ec1a74b3d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db096cb3970d82ccfd1fa1ee7f22fb79</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3fc99e817c6c05d3f204309244c0de00</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e46a923fe55313605c17167f3de5d99c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d48c6e1dc4ec69ee49bedd4c5e51768f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_080d66a3e8b04143d69b743b53630659</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e4a4edada3fe6648a3c6d8cbab02baf1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb990be1793fa34cfc810fac39d7ea79</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5009cfc9b27f90736a29a6100bf2ea2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d971c7358d790237494db962b1745e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cccf6151b5e7752a4564e1bdabef3dd6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ab91a586d754eccb28474222ef67ad0d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0af1e896d2c47b5ee04ae9b2d2b384a2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d80febda9718d7170837eec576bdcec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ca8107ce09549d52704d5ec47fab007</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_769c30a97adfa4322a17a46d0aed9bee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b52de4453386cd157bcf470c0e87bf8f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1929cfc2f1e94732b5228616c7ea6675</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62d8d77f788f5987b847d57d837b0bc8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_af6f4020408165df5fe712011f2c0889</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ba6bf36993e4c1f5de57be106e89c794</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3bcbd8f985832ee368031da75be91aea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_694c563cab1078c3f5fd04ce971c4463</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4d4f143893927b34d6c94f556cf4df2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_074c301ffe83e1ec1a2fe7b437f926cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c57a66e4e8d5c7e3c38c8057714ffd26</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f9ae5ff00626d332e4234a2a12033fc5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_227b70a52f2c65db7b9bbe101fe97952</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de6f1c6e5d2235dca98982501f9a70d6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_37c7ddcccef90ea715883b60e3078cdf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_09a136862bd2523927049484b098297b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff71dc0fe3bc113a5e0db2701c9b5fdf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f17a44a77a74bf45262e29e3ba5b5e65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40ff5566963fbcb78c69d9af74570254</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad47c82c9693dd4d1e1b335705cb38d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_70a4303cfa89130671eb153d6e09d260</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7979b9b341cab14cbf795cd10fd7a595</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b23e5f9a0794c9328d9c131fccb39211</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad1f394f831c8dd826e72c17047e95ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b45bf7461212ee909aad85c30a4935b0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0baaf99e24958ae73dba798ea60e1c4a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee74f6a0a0d767bac1ea8e86bc5b5de3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4aff6ea3878b74c0afead0c7e6403b78</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5cf75f48714aa26961a6d3e75b2c561</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d5ce416c60c8763c7f40e007f8db502</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6682afb0e1cf322a2fa2802e2f74d067</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e8f63a6ab0412b944aed2855985d763</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e960bdd24f2eb31f15fd6cd69d1f3583</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_78ba5f512b25a1c4cdfe0c7d00796e30</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e897219560f8ef9835e5194ce5d64ac2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ce84b03807c0104d1d9f352b7302fb2e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bcaf7c10cd21bc60b54a0d860d9a58f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6654a256061c2e7c446d852acb9a04cf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ab8f1b9734986b0b8d681d13b0f8147</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_80b703ca7248f22611617e13ad55afd4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_879f323a34be75c560e96d85f8694293</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04d4f48e06c5b09d5f7265623fdb6bfb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_118ff15058e41e36537824b5ef1c19b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_742c79d9836a41d523672a1d98f13cd2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_67c7d6af816c60f216a360a63ea166a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0cbb93deb1652db0db1b86ab396b172c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f57a8d158f4c4fb5f1e111ab7c8d0573</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8ee6cd2787bdf4c8a74433b82b5f592</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5d5e8730e635d6d36e964631ddbf7e49</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17236a8924ceb241ff954a6942de58d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59632af1998ba564c657206918db176c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2ae52bed35e39ff6b952dbb564521781</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b16b23b5573402a0dacb5fcc22319eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ba815fd6842dca2d5350c77707dbc648</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_09359f9f3d732f6742f065eace11aaac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1fdf1c4f55f36a1590e022e90b7356e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5a89907c07a75eb14f4e7854177a2e42</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_20d092969374cad148c1210509960cc2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b815321434034ce9392fc60f9eabe87</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f36bd7a1862fee7cb55616158c369e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0620f3e57fb4d7a35d1197a0d21adfb0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6df2ace9a475a77658b3281fb2b43948</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fa7e27957fc51b8e0093f751982cae0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_824f899c4cbb97783b53a476d889907d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a18351710f1e9f59af9543eb21324489</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a52e7174575ef573a3cbb58863ca2ed9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a18ed6edf34641f4dc823111a156916c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5908deab93e5e5f90be11d9709790bbc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8fb2eab8a00308c2a2091a1046ec35ef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2cd18c3b9af6a0ab2227156b67a48c59</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_517d0131dfcd428ab2605a23f4cf492e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62e881a18e260c315ecf9cb0596ceff9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_266ec7ae5e2214090e522d017a75e2cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a13f023de6ba2211cb44e90e7c723ef4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ac677c74fbbc7d7c5dd577fc329092da</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_da36ab2ec3dbb85428c9bf4ef6c0114e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_522e2b26638c845ebfc08f5050b12a93</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6efc3a45c92abb53c0dd2147241deb4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_144632b121055bb94a5ed00d33bceae2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cf2e30b940226f9b3493a7317f38e11c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_20d3dba9f09e72bad2a21d32746db3ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5d2c2ea5616dfb3097a2a75b06c7737e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1e36c9801fb990b98f982688a61c123</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8fc1f8866df6d268b6c028d3a49e9539</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1fa4c70d644b884f0ffe6348b06ce6e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25deb5e1303054d269c142b5c9ce4df6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e178e0969be528fa9c1744f231a3799c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dd797de05624ce9b210e8acc01a75d2f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_61252d455427fb091276f882dbd80209</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_337fdc524a08699fbcea79389b9cb067</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f0b9c447ceadde16a410d73900515b31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8738f79de917b3b5b061fd0ef77ccf94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0bb226a9e5cd9cd202c1cf9c649844a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3d2ffff7487c39a73713ec6390e3d33</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c10ec5644a00b1ccbdaf2f346d9154f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1036ffc254f6fe1dfa536f9020c128c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cfa53ab67278db81435bac6060e49545</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_16cf34a059afdd81ec3f146fad858159</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b92797312bcf0b72588f79923b366ae9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_08b155573f1a0ca006ddbed70af53f9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_233255931ddb6588de1b31e8da85ca4a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ab01ee2ee9eeda615558fd30a0248d4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fe2807b0f996cd47e412a643e91a355d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_97bff8a766968f24010e69ee062bc7ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33b8773f29eca5cf127dfb1983d14c11</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8490d97d0889012ae2acbce05c94853e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9212828abbf323be29023c5fc7cc924</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f09cbd977c1cb78b65501816d76f8c01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3a284ef3a9d16457b813ddd6cdc7fc0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d512da8cc96d12bd695a49186c6741f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_930c19c7a3084c415c17585db58f9344</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_149306075ede381751ec1ef96e243a52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_06731304809f2b5d7dcb526d41355764</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f99a0e8f8f2e3f48e6b723fe021e289</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_907802d90727a1ff6542dc40702fa89c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fac39276419cc000aa580823e1c92ede</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ce379bc89030b7d273cf569a935ffc4a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f3b633bf28b25dfad4bbf0090cea1448</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abb2a47c1c794973f29bb116587bf492</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7254684e6fef3bb50ba9637d5ca808f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_24942eed43e0ff1ce71bcb8314e5e764</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53e09edbac0b747c0aacef2a372d34d4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad32786b0d2380bb43b74ee6de0bec70</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>148</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-05 10:40:08</wp:comment_date>
    <wp:comment_date_gmt>2014-03-05 09:40:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for pointing that out. In some exceptional cases you may be able to debug production but that is and should not the general practice.

[I am not stupidly replying to my own article and thanking myself. It is response to a reply that was deleted, probably by the author, which he/she has right to do. However it left me look stupid with this comment. The response pointed out that you can not debug on production environment.]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>147</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1394012408]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394012408.3338420391082763671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1394012408]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-05 09:40:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>808</wp:comment_id>
    <wp:comment_author><![CDATA[Logging or Commenting ? | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/06/25/logging-or-commenting/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.8.52</wp:comment_author_IP>
    <wp:comment_date>2014-06-25 11:59:58</wp:comment_date>
    <wp:comment_date_gmt>2014-06-25 10:59:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my recent article was republished on dzone Jonathan Fisher added a valuable comment [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403693999.600244045257568359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-06-25 11:00:00]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1403694036]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403694036.8388729095458984375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8288</wp:comment_id>
    <wp:comment_author><![CDATA[Richard Fearn]]></wp:comment_author>
    <wp:comment_author_email>richardfearn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/101940171245165542430</wp:comment_author_url>
    <wp:comment_author_IP>94.234.170.31</wp:comment_author_IP>
    <wp:comment_date>2015-06-22 01:33:01</wp:comment_date>
    <wp:comment_date_gmt>2015-06-22 00:33:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  The shortage is that you can not step back in time.
</blockquote>

The "Drop To Frame" feature in the Eclipse debugger goes some of the way to letting you do that:

http://www.vogella.com/tutorials/EclipseDebugging/article.html#advanced_droptoframe

http://stackoverflow.com/questions/4331336/step-back-in-eclipse-debugger

...though it doesn't reset variables back to their previous values. Still, it does let you re-run code if you realise you've stepped too far.

<blockquote>
  The ideal solution would be to dump all variables into a possibly binary log file at each state of the execution and examine the content of the file afterwards. The examination would essentially look like a debugger, except that the change of the variables comes from the recorded log file instead of from on the fly calculation. It would be like a playback of a recorded execution and as such you could replay it several times. I do not know if there is any tool like that for the JVM.
</blockquote>

That sounds like Chronon to me:

http://chrononsystems.com/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1434933182.2627379894256591796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-00Wjk5Bkg5I/AAAAAAAAAAI/AAAAAAAACYQ/ihgLL33_DOs/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[101940171245165542430]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1434951635]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1434951635]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1434937767.7143380641937255859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1434951635.7040650844573974609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Debug versus Logging]]></title>
  <link>https://javax0.wordpress.com/2014/03/05/logging-or-debugging/debug-vs-log/</link>
  <pubDate>Sun, 16 Feb 2014 12:34:32 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/02/debug-vs-log1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>352</wp:post_id>
  <wp:post_date>2014-02-16 13:34:32</wp:post_date>
  <wp:post_date_gmt>2014-02-16 12:34:32</wp:post_date_gmt>
  <wp:post_modified>2014-02-16 13:34:32</wp:post_modified>
  <wp:post_modified_gmt>2014-02-16 12:34:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>debug-vs-log</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>327</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/02/debug-vs-log1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/02/debug-vs-log1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1051;s:6:"height";i:1135;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/02/debug-vs-log1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Synthetic and bridge methods]]></title>
  <link>https://javax0.wordpress.com/2014/02/26/syntethic-and-bridge-methods/</link>
  <pubDate>Wed, 26 Feb 2014 08:37:42 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=355</guid>
  <description/>
  <content:encoded><![CDATA[If you have ever played with reflection and executed <tt>getDeclaredMethods()</tt> you may have been surprised. You may get methods that are not present in the source code. Or, perhaps, you had a look at the modifiers of some of the methods and saw that some of these special methods are volatile. Btw: this is nasty question for Java interviews "What does it mean, when a method is volatile?" The proper answer is that a method can not be volatile. At the same time there can be some method among those returned by <tt>getDeclaredMethods()</tt> or even<tt>getMethods()</tt> for which <tt>Modifier.isVolatile(method.getModifiers())</tt> is true.
<p>
This has happened to one of the <a href="https://github.com/verhas/immutator/issues/2">users of the project immutator</a>. He realized that immutator (which itself digs quite deep into the dark details of Java) generated Java source that was not compilable using the keyword <tt>volatile</tt> as modifier for a method. As a consequence it did not work either.
<p>
What has happened there? What are the bridge and syntethic methods?

<h3>Visibility</h3>

When you create a nested or embedded class the private variables and methods of the nested class are reachable from the top level class. This used by the <a href="http://javax0.wordpress.com/2013/12/18/design-pattern-immutable-embedded-builder/">immutable embedded builder pattern</a>. This is a well defined behavior of Java, defined in the language specification.

<blockquote>
<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6.1">JLS7, 6.6.1 Determining Accessibility</a>
<p>
<em>... if the member or constructor is declared private, then access is
permitted if and only if it occurs within the body of the top level class (Â§7.6)
that encloses the declaration of the member or constructor...</em>
</blockquote>

[sourcecode language="java"]
package synthetic;

public class SyntheticMethodTest1 {
    private A aObj = new A();

    public class A {
        private int i;
    }

    private class B {
        private int i = aObj.i;
    }

    public static void main(String[] args) {
        SyntheticMethodTest1 me = new SyntheticMethodTest1();
        me.aObj.i = 1;
        B bObj = me.new B();
        System.out.println(bObj.i);
    }
}
[/sourcecode]

How is it handled by the JVM? The JVM does not know inner or nested classes. For the JVM all classes are top level outer classes. All classes are compiled to be a top level class, and this is the way how those nice <tt>...$. .class</tt> files are created.

[sourcecode language="text"]
 $ ls -Fart
../                         SyntheticMethodTest2$A.class  MyClass.java  SyntheticMethodTest4.java  SyntheticMethodTest2.java
SyntheticMethodTest2.class  SyntheticMethodTest3.java     ./            MyClassSon.java            SyntheticMethodTest1.java
[/sourcecode]
<p>

If you create an nested or inner class it will be compiled to be a full blown top level class.
<p>
How will the private fields be available from the outer class? If those get into a top level class and are private, as they really are, then how will they be reachable from the outer class?
<p>
The way javac solves this issue that for any field, method or constructor being private but used from the top level class it generates a synthetic method. These synthetic methods are used to reach the original private filed/method/constructor. The generation of these methods are done in a clever way: only those are generated that are really needed and used from outside.

[sourcecode language="java"]
package synthetic;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

public class SyntheticMethodTest2 {

    public static class A {
        private A(){}
        private int x;
        private void x(){};
    }

    public static void main(String[] args) {
        A a = new A();
        a.x = 2;
        a.x();
        System.out.println(a.x);
        for (Method m : A.class.getDeclaredMethods()) {
            System.out.println(String.format(&quot;%08X&quot;, m.getModifiers()) + &quot; &quot; + m.getName());
        }
        System.out.println(&quot;--------------------------&quot;);
        for (Method m : A.class.getMethods()) {
            System.out.println(String.format(&quot;%08X&quot;, m.getModifiers()) + &quot; &quot; + m.getReturnType().getSimpleName() + &quot; &quot; + m.getName());
        }
        System.out.println(&quot;--------------------------&quot;);
        for( Constructor&lt;?&gt; c : A.class.getDeclaredConstructors() ){
            System.out.println(String.format(&quot;%08X&quot;, c.getModifiers()) + &quot; &quot; + c.getName());
        }
    }
}
[/sourcecode]

Since the name of the generated methods depend on the implementation and is not guaranteed the most I can say for the output of the above program is that on the specific platform where I executed it produced the following output:

[sourcecode]
2
00001008 access$1
00001008 access$2
00001008 access$3
00000002 x
--------------------------
00000111 void wait
00000011 void wait
00000011 void wait
00000001 boolean equals
00000001 String toString
00000101 int hashCode
00000111 Class getClass
00000111 void notify
00000111 void notifyAll
--------------------------
00000002 synthetic.SyntheticMethodTest2$A
00001000 synthetic.SyntheticMethodTest2$A
[/sourcecode]

In the program above we assign value to the field <tt>x</tt> and we also call the method of the same name. These are needed to trigger the compiler to generate the synthetic methods. You can see that it generated three methods, presumably the setter and the getter for the field<tt>x</tt> and a synthetic method to the method <tt>x()</tt>. These synthetic methods, however, are not listed in the next list returned by <tt>getMethods()</tt> since these are synthetic methods and as such are not available for generic invocation. They are, in this sense, as private methods.

The hexa numbers can be interpreter looking at the constants defined in the class <tt>java.lang.reflect.Modifier</tt>:

[sourcecode]
00001008 SYNTHETIC|STATIC
00000002 PRIVATE
00000111 NATIVE|FINAL|PUBLIC
00000011 FINAL|PUBLIC
00000001 PUBLIC
00001000 SYNTHETIC
[/sourcecode]

There are two constructors in the list. There is a private one and a synthetic one. The private exists, since we defined it. The synthetic on the other hand exists because we invoked the private one from outside. Bridge methods, however, do not had any so far.

<h3>Generics and inheritance</h3>

So good, so far, but we still did not see any "volatile" methods.

Looking at the source code of <tt>java.lang.reflec.Modifier</tt> you can see that the constant <tt>0x00000040</tt> is defined twice. Once as <tt>VOLATILE</tt> and once as <tt>BRIDGE</tt> (this latter is package private and is not for general use).

To have such a method a very simple program will do:

[sourcecode language="java"]
package synthetic;

import java.lang.reflect.Method;
import java.util.LinkedList;

public class SyntheticMethodTest3 {

    public static class MyLink extends LinkedList&lt;String&gt; {
        @Override
        public String get(int i) {
            return &quot;&quot;;
        }
    }

    public static void main(String[] args) {

        for (Method m : MyLink.class.getDeclaredMethods()) {
            System.out.println(String.format(&quot;%08X&quot;, m.getModifiers()) + &quot; &quot; + m.getReturnType().getSimpleName() + &quot; &quot; + m.getName());
        }
    }
}
[/sourcecode]

We have a linked list that has a method <tt>get(int)</tt> returning <tt>String</tt>. Let's not discuss the clean code issues. This is a sample code to demonstrate the topic. The same issues come up in clean code as well, though more complex and harder to get to the point when it causes a problem.

The output says

[sourcecode]
00000001 String get
00001041 Object get
[/sourcecode]

we have two <tt>get()</tt> methods. One that appears in the source code and another one, which is synthetic and bridge. The decompiler <tt>javap</tt> says that the generated code is:

[sourcecode]
public java.lang.String get(int);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:   ldc     #2; //String
   2:   areturn
  LineNumberTable:
   line 12: 0


public java.lang.Object get(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:   aload_0
   1:   iload_1
   2:   invokevirtual   #3; //Method get:(I)Ljava/lang/String;
   5:   areturn
[/sourcecode]

The interesting this is that the signature of the two methods is the same and only the return types are different. This is allowed in the JVM even though this is not possible in the Java language. The bridge method does not do anything else, but calls the original one. 

Why do we need this synthetic method? Who will use it. For example the code that wants to invoke the method <tt>get(int)</tt> using a variable that is no of the type <tt>MyLink</tt>:

[sourcecode language="java"]
        List&lt;?&gt; a = new MyLink();
        Object z = a.get(0);
[/sourcecode]

It can not call the method returning <tt>String</tt> because there is no such in <tt>List</tt>. To make it more demonstrative lets override the method <tt>add()</tt> instead of <tt>get()</tt>:

[sourcecode language="java"]
package synthetic;

import java.util.LinkedList;
import java.util.List;

public class SyntheticMethodTest4 {

    public static class MyLink extends LinkedList&lt;String&gt; {
        @Override
        public boolean add(String s) {
            return true;
        }
    }

    public static void main(String[] args) {
        List a = new MyLink();
        a.add(&quot;&quot;);
        a.add(13);
    }
}
[/sourcecode]

We can see that the bridge method

[sourcecode]
public boolean add(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:   aload_0
   1:   aload_1
   2:   checkcast       #2; //class java/lang/String
   5:   invokevirtual   #3; //Method add:(Ljava/lang/String;)Z
   8:   ireturn
[/sourcecode]

not only calls the original one. It also checks that the type conversion is OK. This is done during run-time not done by the JVM itself. As you expect it does throw up in the line 18:

[sourcecode]
Exception in thread &quot;main&quot; java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
	at synthetic.SyntheticMethodTest4$MyLink.add(SyntheticMethodTest4.java:1)
	at synthetic.SyntheticMethodTest4.main(SyntheticMethodTest4.java:18)
[/sourcecode]

When you get the question about volatile methods at an interview next time, you may know even more than the interviewer.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>355</wp:post_id>
  <wp:post_date>2014-02-26 09:37:42</wp:post_date>
  <wp:post_date_gmt>2014-02-26 08:37:42</wp:post_date_gmt>
  <wp:post_modified>2014-02-28 18:16:11</wp:post_modified>
  <wp:post_modified_gmt>2014-02-28 17:16:11</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>syntethic-and-bridge-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5844359421786218496&type=U&a=ing4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202393666055724]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/WLqr9LDm5A]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4d47e671ee854ddd1677c88a5241dee4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f5ab5f5584cb40e5176da8e544f8bd6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_162a9e63c7244e37d2982e8cd60d5844</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a7a79e4a301e94d7878ee16ef9303a41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a96a96bee4aa4448efc7c5a69f4c4e52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de4db91e2e3a2a457849876da1a5b0ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_485d91facb342f35ec9f49f7a7e38051</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c29757e89417e05691fae488462574a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d3954bee02f38d6d508d13730e1b4d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6316444081623f63103e072d71d7dfd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f10f98954464854c2f2279b506f7970b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d68d9bd977fb1d6f52890d6522f9a28</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e5c551c9ddc73c690ae405c1494ba38c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_beb20f257c8183c8033b5793de74d321</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c0f235b31a7c981872694107ea80a64</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d75479b47f64e904c493df941cbbd7f3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_896b9ad290361a134e20f5cdc71e8c7c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_22f93a759a35c963c9066dd5ca262b18</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9817ca8c917e201ffbdb344e6eeaa27b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d33d31eaee5e04b05c611f0eb03b4f75</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43c08346e60880e7c7fdaefac833b790</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dced87fd3ccc8f38a0612e3b8ec24f94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8aa09306ed616fbc2f62f67105902eba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c798fae6a8225877caa7919a9ad1800b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cb97921697ae6d2428d2bb0b0dd835ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0860368fdfc1ba219d722474761114a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7df600369eddc457ff91c983044fed5e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04bb45257301312a3aea39aa880d1026</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b2eef25956b5d4296fe5ae8cb3281c4d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c615ede5ba1ee43364869efb30451c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84f71bcf030b4dd9f02225bcd458a58e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c7295806a2ac4c049fce8da4d1f4720</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f956e382413af9229a42411bbd6762dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db1ff5b1ee682319e16bdbf25e8f5fad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_06c143d282ff18b9ff217e0dcf92f27e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d6491aae6d69afd5edb6feea6bbb2b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6dcbab1ca2aac7556b14dddc1d9a477d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05f85271b41ffa099df5c03585f62e4d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0cea81fe6efd0be496cd891157155cf1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e416f96f147947fe50b010850f22541</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4abd399fa1204b855f53ba75a2bdc57</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_057a619a9512b7724508050f18fc1c0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46e257aed5f01021450c6521f729f007</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_02c455e08d850761d56b959c858c5c84</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b00ad9b41c4b9972357119e4bf6a6f5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f934fa9a8c01b14877bd86aef8ac5a58</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_48190119528705a148120919d8a84f9e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d22626f8ea88f9e260c1c7c5db339a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f48b2ee6ca999458195696726070e1b5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c46b2bfd1c193d6b0a665f7fd818f60</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40485f981d46079986a212b6fda56209</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_314ab1615ed152988db195f66455ca81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b439a1f057376e55f1495d31c853ff0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c7fa1ea2920e2361b76d9bc70e2109e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89694dc3e28bd9def2408ba6f456dd39</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6ea2d41e350fe9adc85f9c1686761481</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_768919ef31755d3e104a70f8e70aa44f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e6cccbe2f13e94d8c51fd74a704bbdc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5fc3856246840d27a6d05c6b2851224</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_952f37a84e65ce77f6a5fc48d0396283</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c38fde7571335aaa70a68d02476d5778</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4fa95d6d9e63c9bbbf9fbbcbd2abcee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_642e3d2989bd4d195593420787647dd5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee1c3ecb1e6581678bc5df8a851610c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62503b731f90572cfb8a97e0fcf724ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f75697a8c5b92b49594085d29959ce0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aae5853fc75e0c495b62eb373b99d615</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83a9ad4402829ccb99cb381b2fd59daf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5abde5ed25309fde4c15bea9bfc7f2db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_630d3170b713db0190065df8b8c6d34f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc5cf43cff3a15fa048012568b208cc5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa113a00813e41c7ef59a6f02d005973</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3713e102853cdf9592ec95ce1f055c37</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ace95b1aeb664d69be8027045aa7a7ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3307869cb10eb7ac40242004fa060902</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e2163509bbe14dc334f624839ea70cd9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_114b7e5fd2365ac8822e60aa141b424e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5e8edd3afd2a7643e2b6e90895b57d5f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1f2c151f731cdf1a381aea4f321e3dc6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0937a0548e70108e35b26f1c7e522548</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f9151e2b5fb4d7287564de0e6ab62928</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1b47dc0dbcf90f64bddd9478e05b396</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_893274d3504104d6497943843bf3c45e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c459c0420f13033db4af8eeb5c5186eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e305be89c33f4d56f1cf8d2301ca5405</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b438d5dbc59b674c91086da7809766f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e995306a516f5e4cf59f49372907b280</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1444321e022a2bd358b7a54b08c6cf6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_625cf9385b916f36b2b528ba1470bf04</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33d67863abf95639bac15388d550d8c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_668b6495d639d59a6af6cb6cd06959ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5124937142d6a9d258709905a6c1e56</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_73d4a7b07252cf7860f7f54d050cb88f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_696f98e32883f5ecb8b5ecdf7e66ee2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e1e8d60d6dffefaf5e2e30b4d3a62e17</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5918b5f0b2112a25fe1ab31677cbc4b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1c93fe4bdd78f95cbf03bb6bd4f1b076</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b80989202e9e11e21ba7f7ce2ef79569</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_80879cf80046c806c9b39381e38e637d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a58b56160b103ee3cba656ee6017d3b2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_14c7d1c912edea30fb9089e63b729eb5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_148eb6660da319f510f9cde7bb7ceb28</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e1b2aabee2c23532cda55de9e68325ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_827abc36a41fc8fc6ff7da1eb7d34d3e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be2e747b1682319cffd84a10e6961e5c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b65b6e436e2d8ebb8cbc273f20e0f36e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0735b3a0ef5cc410ec24c144cfd68b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_df5bb7522dc7ea4d9f3ea44769ae35fa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_71a6feff7739d686ebae2c11ac518874</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ff62a28fb98edc96432798249cfde32</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6bc20c3be5ecfe197b270bb295b8e6d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddfba7cf5dfcb981932485085ea188b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86970f76d98c6f9a0a5b6f7e18c88e0b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6ecb50e8315f63fa553d19f2ba0a204f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d72ac1e0ba0a31907fdc8e8722044bb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_36644ff792f8dd6233320de3894f65ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_29357c453f2b05d6fda06c12dbb89724</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d28f3c076fc8e69485b9b4ccbc209b6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e9dabe8392372eee85018c6c42a6fd98</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_369f9c6074a885d545446d3bfeed632f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c5ae5a094a9e5a1837c157e88a95635</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0a38bf78e67e39dd187686623787279</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7e7bd52e642164fc664cc8afb592054</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be872f0a2c89c6f95070335fb714d0db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b9e769d3407e198ba1098cb7794a8995</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5965c7540354c83f62220e592787591</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59b00776cd3cf7220f66c3cdc026bad7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8667ddeeda8aa05c8fb7aafab5f01e0d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_533a75e0eee07784cf5ffbd270382023</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1c7fcb1f08eee67a9f6f53396a54781a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad59400b7c315d3615c8c83d83e54b12</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_459d4ef5aac69ff1f24207f05e7f7492</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_97567a37f8819a7f9156cdaf4530a1ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_074b91a7786e0f0d64c5c1bf6636fbb6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f3406454f11aa29c4636a41c52ea0023</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_beffcce78c4ca5da40079e659a0392ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f182a3d055d6a878682ea271c6341f0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c04df496027be583e75e6898f59d70c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9690f9b418a2c90ccdc7d086abdcbbdc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c650ec85fda7ae9d5f66cbb73214ef3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3308ef667183257ece7179834eae7056</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51b28f3c1e8123cf1d5ec099778ed0a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_16189a536fc30d9c068d302b16bc3a05</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2c7f54cd425c2253e431b9dbec1f6bd6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84a3921b5775ed7418d3864dc04f93ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1a439b344177fa98e0991b62341d0dee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68484a4cf121bea445109dc6d2363b9e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b25926ab9ddd9e7ff7f7b54ddcf268d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_234383ac5b1970dd9ebcc92a223a1bc3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f75dd61eaf4b2e784e5d09bd2c0401a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f53a7b75a9f73aa363231b5bd8944c8d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>145</wp:comment_id>
    <wp:comment_author><![CDATA[Paul Holser]]></wp:comment_author>
    <wp:comment_author_email>pholser@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/115476319615994822506</wp:comment_author_url>
    <wp:comment_author_IP>63.145.111.9</wp:comment_author_IP>
    <wp:comment_date>2014-03-03 21:18:53</wp:comment_date>
    <wp:comment_date_gmt>2014-03-03 20:18:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice set of command-line switches for "ls" there. 8^)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393877933.372558116912841796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-7h6pM7NcyD4/AAAAAAAAAAI/AAAAAAAAAP4/gUbvgQITtS8/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[115476319615994822506]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393879198]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393879198]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393879199.5619161128997802734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-03 20:18:53]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>143</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-02-28 18:17:00</wp:comment_date>
    <wp:comment_date_gmt>2014-02-28 17:17:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Fixed. Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>142</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393607822]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393607822.5398609638214111328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393607823]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-28 17:17:00]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>142</wp:comment_id>
    <wp:comment_author><![CDATA[Jacob Zimmerman]]></wp:comment_author>
    <wp:comment_author_email>sad2project@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://zimvasion.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>71.13.119.2</wp:comment_author_IP>
    <wp:comment_date>2014-02-28 14:53:21</wp:comment_date>
    <wp:comment_date_gmt>2014-02-28 13:53:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You spelled 'Synthetic' wrong in the title]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17955486</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393595602.1440970897674560546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"zimvasion";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393607795]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393607795]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393607796.241508007049560546875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-28 13:53:21]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8689</wp:comment_id>
    <wp:comment_author><![CDATA[Narasimha Sumanth Y]]></wp:comment_author>
    <wp:comment_author_email>x.sumanth@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104369354262276820980</wp:comment_author_url>
    <wp:comment_author_IP>172.101.127.51</wp:comment_author_IP>
    <wp:comment_date>2015-09-04 04:42:57</wp:comment_date>
    <wp:comment_date_gmt>2015-09-04 03:42:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, you have explained in detail about the jvm using bridge method but not the volatile method. I don't think that, the very fact volatile and bridge have same modifier codes of 0x00000040 in the java.lang.reflec.modifier means that they both have the same functionality. Couldn't be there a functional difference which is expected to be showed during run-time but still binding to the same modifier code in compile time/ de-compile? Or am i so wrong? Please clarify...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441338178.87998104095458984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441341017]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441341017]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441341017.96875095367431640625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9391</wp:comment_id>
    <wp:comment_author><![CDATA[Ben Keller]]></wp:comment_author>
    <wp:comment_author_email>bjkeller@uw.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>73.53.12.88</wp:comment_author_IP>
    <wp:comment_date>2015-12-22 23:56:29</wp:comment_date>
    <wp:comment_date_gmt>2015-12-22 22:56:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My understanding is that you are expected to mask the result of getModifiers() with the method modifiers to ensure you are seeing the modifiers as intended.
So, do 
[sourcecode language="java"]
m.getModifiers() &amp; Modifier.methodModifiers()
[/sourcecode]
to ensure that you don't see the bridge bit as volatile]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8689</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1450824990.18893909454345703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450856654.4224479198455810546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1450856653]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1450856653]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1450829206.4637119770050048828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9752</wp:comment_id>
    <wp:comment_author><![CDATA[Piotr JoÅski]]></wp:comment_author>
    <wp:comment_author_email>yoyo@wp.eu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>81.18.219.26</wp:comment_author_IP>
    <wp:comment_date>2016-04-08 06:46:29</wp:comment_date>
    <wp:comment_date_gmt>2016-04-08 05:46:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Could you tell me why java does not have a package modifier, that could be specified in java.lang.reflect.Modifier class?
Why package fields have modifiers '0' ?

How can you determine if the field or method is package? There is no Modifier.isPackage(...) method.

And how is the most elegant solution to do this? Introduce your own PACKAGE constant?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1460141385]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460141385.9543850421905517578125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460094390.62269496917724609375;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"pojo1cinkciarz";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1460094391]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460099130.6771318912506103515625;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"pojo1cinkciarz";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21592443756]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1460141385]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9395</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.107.179.146</wp:comment_author_IP>
    <wp:comment_date>2015-12-23 08:49:30</wp:comment_date>
    <wp:comment_date_gmt>2015-12-23 07:49:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you apply

[sourcecode language="java"]
m.getModifiers() &amp; Modifier.methodModifiers()
[/sourcecode]

you will not see the method as "volatile". But the same time you will not see it being synthetic either.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9391</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1450856972]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450856972.0193059444427490234375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1450856971]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8693</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.205</wp:comment_author_IP>
    <wp:comment_date>2015-09-04 10:02:57</wp:comment_date>
    <wp:comment_date_gmt>2015-09-04 09:02:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is nothing like a volatile method. That is the reason why the java run-time can use the same numerical value to signal a volatile field as it uses to signal a synthetic method. Similarly there is no synthetic field.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8689</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441357377]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441357377.5281589031219482421875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441357377]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9757</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.155.23</wp:comment_author_IP>
    <wp:comment_date>2016-04-08 22:24:20</wp:comment_date>
    <wp:comment_date_gmt>2016-04-08 21:24:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That is because package protected is the default. When there is no modifier then the access to a method or field is package level. (in case of class. In case of interface the default and only possibility is public.) I recommend to use the isXXX() methods to check the modifiers and if all are false then there is no modifier: access is package level.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9752</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1460150660]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460150660.491529941558837890625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21596322475]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1460150660]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10029</wp:comment_id>
    <wp:comment_author><![CDATA[EventBusæºç è§£æ æºç éè¯»è®°å½ &#8211; å£éªå£«wind &#8211; | é¿æµææ¯]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.techsite.cn/?p=3181</wp:comment_author_url>
    <wp:comment_author_IP>120.25.159.211</wp:comment_author_IP>
    <wp:comment_date>2016-06-24 10:31:19</wp:comment_date>
    <wp:comment_date_gmt>2016-06-24 09:31:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] æ¯ç¼è¯å¨çæçæ¹æ³, è§åèé¾æ¥: Synthetic and bridge&nbsp;methods https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1466760680.8503170013427734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1466760969]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1466760969.8959128856658935546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Blog Service Message about syndication with DZONE and JCG]]></title>
  <link>https://javax0.wordpress.com/2014/02/22/blog-service-message-about-syndication-with-dzone-and-jcg/</link>
  <pubDate>Sat, 22 Feb 2014 00:12:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=362</guid>
  <description/>
  <content:encoded><![CDATA[I have contracted <a href="http://www.dzone.com/">DZONE</a> and equally <a href="http://www.javacodegeeks.com/">Java Code Geeks</a> as syndication partners. They started to select my articles for republishing on their sites.

The cooperation between me and the syndication partners is non-profit and I truly believe that this is mutually benefiting all parties including the syndication partners as well as you, the reader. Cooperation with syndication partners will hopefully increase the number of people using the blog and belonging to a larger technical community is an advantage.

Feel free to visit these sites and use the services, read articles, express your point of view in forms of comments, whatever you feel appropriate.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>362</wp:post_id>
  <wp:post_date>2014-02-22 01:12:37</wp:post_date>
  <wp:post_date_gmt>2014-02-22 00:12:37</wp:post_date_gmt>
  <wp:post_modified>2014-02-24 13:11:32</wp:post_modified>
  <wp:post_modified_gmt>2014-02-24 12:11:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>blog-service-message-about-syndication-with-dzone-and-jcg</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202381087381265]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/stVJiRSsCO]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5843688460564992000&type=U&a=X6tA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>135</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.38.202.234</wp:comment_author_IP>
    <wp:comment_date>2014-02-24 13:33:33</wp:comment_date>
    <wp:comment_date_gmt>2014-02-24 12:33:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've made a great experience with both syndication partners myself, so thumbs up to this step forward for your blog!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1393245213]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393245213.2084140777587890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1393245213]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-24 12:33:33]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[default method multiple inheritance]]></title>
  <link>https://javax0.wordpress.com/2014/03/26/the-true-nature-of-java-8-default-methods/multiple-inheritance/</link>
  <pubDate>Thu, 20 Mar 2014 20:34:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/03/multiple-inheritance.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>421</wp:post_id>
  <wp:post_date>2014-03-20 21:34:23</wp:post_date>
  <wp:post_date_gmt>2014-03-20 20:34:23</wp:post_date_gmt>
  <wp:post_modified>2014-03-20 21:34:23</wp:post_modified>
  <wp:post_modified_gmt>2014-03-20 20:34:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>multiple-inheritance</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>411</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/03/multiple-inheritance.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:708;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[invalid multiple inharitance of default methods]]></title>
  <link>https://javax0.wordpress.com/2014/03/26/the-true-nature-of-java-8-default-methods/multiple-inheritance2/</link>
  <pubDate>Thu, 20 Mar 2014 20:41:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/03/multiple-inheritance2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>423</wp:post_id>
  <wp:post_date>2014-03-20 21:41:37</wp:post_date>
  <wp:post_date_gmt>2014-03-20 20:41:37</wp:post_date_gmt>
  <wp:post_modified>2014-03-20 21:41:37</wp:post_modified>
  <wp:post_modified_gmt>2014-03-20 20:41:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>multiple-inheritance2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>411</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/03/multiple-inheritance2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance2.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1051;s:6:"height";i:690;s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[directory structure of test]]></title>
  <link>https://javax0.wordpress.com/2014/03/26/the-true-nature-of-java-8-default-methods/multiple-inheritance-directory/</link>
  <pubDate>Thu, 20 Mar 2014 20:48:47 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/03/multiple-inheritance-directory.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>426</wp:post_id>
  <wp:post_date>2014-03-20 21:48:47</wp:post_date>
  <wp:post_date_gmt>2014-03-20 20:48:47</wp:post_date_gmt>
  <wp:post_modified>2014-03-20 21:48:47</wp:post_modified>
  <wp:post_modified_gmt>2014-03-20 20:48:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>multiple-inheritance-directory</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>411</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/03/multiple-inheritance-directory.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance-directory.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:104;s:6:"height";i:159;s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/03/multiple-inheritance-directory.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[bug-classification]]></title>
  <link>https://javax0.wordpress.com/2014/04/30/you-can-program-bug-free/bug-classification/</link>
  <pubDate>Thu, 24 Apr 2014 11:41:13 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/04/bug-classification.png</guid>
  <description/>
  <content:encoded><![CDATA[The quadrant describes the four different type of bugs.]]></content:encoded>
  <excerpt:encoded><![CDATA[Bug Classification Quadrandt]]></excerpt:encoded>
  <wp:post_id>481</wp:post_id>
  <wp:post_date>2014-04-24 12:41:13</wp:post_date>
  <wp:post_date_gmt>2014-04-24 11:41:13</wp:post_date_gmt>
  <wp:post_modified>2014-04-24 12:41:13</wp:post_modified>
  <wp:post_modified_gmt>2014-04-24 11:41:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bug-classification</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>479</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/04/bug-classification.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/04/bug-classification.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1228;s:6:"height";i:1004;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/04/bug-classification.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Bug Classification Quadrandt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[qamoneyspentwise]]></title>
  <link>https://javax0.wordpress.com/2014/04/30/you-can-program-bug-free/qamoneyspentwise/</link>
  <pubDate>Thu, 24 Apr 2014 12:34:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/04/qamoneyspentwise.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Money Spent Wise on QA]]></excerpt:encoded>
  <wp:post_id>488</wp:post_id>
  <wp:post_date>2014-04-24 13:34:10</wp:post_date>
  <wp:post_date_gmt>2014-04-24 12:34:10</wp:post_date_gmt>
  <wp:post_modified>2014-04-24 13:34:10</wp:post_modified>
  <wp:post_modified_gmt>2014-04-24 12:34:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>qamoneyspentwise</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>479</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/04/qamoneyspentwise.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/04/qamoneyspentwise.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1307;s:6:"height";i:1280;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/04/qamoneyspentwise.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Money Spent Wise on QA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/2014/08/13/havin-npe-is-not-that-bad-is-it/no-npe-ever/</link>
  <pubDate>Mon, 11 Aug 2014 20:48:48 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/08/no-npe-ever.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>548</wp:post_id>
  <wp:post_date>2014-08-11 21:48:48</wp:post_date>
  <wp:post_date_gmt>2014-08-11 20:48:48</wp:post_date_gmt>
  <wp:post_modified>2014-08-11 21:49:01</wp:post_modified>
  <wp:post_modified_gmt>2014-08-11 20:49:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>no-npe-ever</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>537</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/08/no-npe-ever.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/08/no-npe-ever.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:1024;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/08/no-npe-ever.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Hint 1]]></title>
  <link>https://javax0.wordpress.com/2014/11/05/nonnullstringisnull/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog/</link>
  <pubDate>Thu, 30 Oct 2014 19:22:39 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[This is what I see in Eclipse]]></excerpt:encoded>
  <wp:post_id>622</wp:post_id>
  <wp:post_date>2014-10-30 20:22:39</wp:post_date>
  <wp:post_date_gmt>2014-10-30 19:22:39</wp:post_date_gmt>
  <wp:post_modified>2014-10-30 20:23:17</wp:post_modified>
  <wp:post_modified_gmt>2014-10-30 19:23:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>613</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:724;s:6:"height";i:190;s:4:"file";s:204:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[4 levels of protection]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/four-levels-of-protection/</link>
  <pubDate>Sat, 22 Nov 2014 08:59:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/four-levels-of-protection.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[There are four levels of protection in Java.]]></excerpt:encoded>
  <wp:post_id>670</wp:post_id>
  <wp:post_date>2014-11-22 09:59:10</wp:post_date>
  <wp:post_date_gmt>2014-11-22 08:59:10</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:00:32</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:00:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>four-levels-of-protection</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/four-levels-of-protection.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/four-levels-of-protection.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:264;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/four-levels-of-protection.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[4 levels]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Private is the new public]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/private-is-the-new-public/</link>
  <pubDate>Sat, 22 Nov 2014 08:59:13 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/private-is-the-new-public.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Private is the new public]]></excerpt:encoded>
  <wp:post_id>671</wp:post_id>
  <wp:post_date>2014-11-22 09:59:13</wp:post_date>
  <wp:post_date_gmt>2014-11-22 08:59:13</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:04:33</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:04:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>private-is-the-new-public</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/private-is-the-new-public.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/private-is-the-new-public.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:285;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/private-is-the-new-public.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[protection-is-class-feature]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/protection-is-class-feature/</link>
  <pubDate>Sat, 22 Nov 2014 08:59:15 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/protection-is-class-feature.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Protection is not object level. It is class level.]]></excerpt:encoded>
  <wp:post_id>672</wp:post_id>
  <wp:post_date>2014-11-22 09:59:15</wp:post_date>
  <wp:post_date_gmt>2014-11-22 08:59:15</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:05:51</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:05:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>protection-is-class-feature</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/protection-is-class-feature.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/protection-is-class-feature.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:326;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/protection-is-class-feature.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Protection is Transitive]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/protection-is-transitive/</link>
  <pubDate>Sat, 22 Nov 2014 08:59:18 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/protection-is-transitive.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Protection is Transitive]]></excerpt:encoded>
  <wp:post_id>673</wp:post_id>
  <wp:post_date>2014-11-22 09:59:18</wp:post_date>
  <wp:post_date_gmt>2014-11-22 08:59:18</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:01:52</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:01:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>protection-is-transitive</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/protection-is-transitive.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/protection-is-transitive.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:300;s:6:"height";i:365;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/protection-is-transitive.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Protection is Transitive]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Effective Final]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/effective-final/</link>
  <pubDate>Sat, 22 Nov 2014 09:10:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/effective-final.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Variable has to be effective final]]></excerpt:encoded>
  <wp:post_id>680</wp:post_id>
  <wp:post_date>2014-11-22 10:10:54</wp:post_date>
  <wp:post_date_gmt>2014-11-22 09:10:54</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:11:16</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:11:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>effective-final</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/effective-final.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/effective-final.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:356;s:6:"height";i:140;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/effective-final.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[java 8 does not require final]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog/</link>
  <pubDate>Sat, 22 Nov 2014 09:14:07 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/11/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Java 8 does not require final, only effective final]]></excerpt:encoded>
  <wp:post_id>683</wp:post_id>
  <wp:post_date>2014-11-22 10:14:07</wp:post_date>
  <wp:post_date_gmt>2014-11-22 09:14:07</wp:post_date_gmt>
  <wp:post_modified>2014-11-22 10:14:37</wp:post_modified>
  <wp:post_modified_gmt>2014-11-22 09:14:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>640</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/11/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:294;s:6:"height";i:119;s:4:"file";s:184:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/11/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fullscreen_2014__12__27__19_00]]></title>
  <link>https://javax0.wordpress.com/2015/01/08/some-more-sentences-on-java-private-variables/fullscreen_2014__12__27__19_00/</link>
  <pubDate>Sat, 27 Dec 2014 18:00:53 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2014/12/fullscreen_2014__12__27__19_00.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>771</wp:post_id>
  <wp:post_date>2014-12-27 19:00:53</wp:post_date>
  <wp:post_date_gmt>2014-12-27 18:00:53</wp:post_date_gmt>
  <wp:post_modified>2014-12-27 19:00:53</wp:post_modified>
  <wp:post_modified_gmt>2014-12-27 18:00:53</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fullscreen_2014__12__27__19_00</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>712</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2014/12/fullscreen_2014__12__27__19_00.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/12/fullscreen_2014__12__27__19_00.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:598;s:6:"height";i:121;s:4:"file";s:106:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2014/12/fullscreen_2014__12__27__19_00.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Java_EE_-_JavaBeanTester_src_test_java_PrimeDecider_java_-_Eclipse_-__Users_verhasp_github_javax_blog]]></title>
  <link>https://javax0.wordpress.com/2015/02/04/do-not-unit-test-bugs/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog/</link>
  <pubDate>Wed, 14 Jan 2015 18:02:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>784</wp:post_id>
  <wp:post_date>2015-01-14 19:02:17</wp:post_date>
  <wp:post_date_gmt>2015-01-14 18:02:17</wp:post_date_gmt>
  <wp:post_modified>2015-01-14 19:02:17</wp:post_modified>
  <wp:post_modified_gmt>2015-01-14 18:02:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>782</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:393;s:6:"height";i:257;s:4:"file";s:177:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Quick Cheap Fast]]></title>
  <link>https://javax0.wordpress.com/2015/02/25/quick-cheep-quality-choose-two/quick-cheap-fast/</link>
  <pubDate>Sun, 22 Feb 2015 11:24:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2015/02/quick-cheap-fast2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[You can select two]]></excerpt:encoded>
  <wp:post_id>845</wp:post_id>
  <wp:post_date>2015-02-22 12:24:59</wp:post_date>
  <wp:post_date_gmt>2015-02-22 11:24:59</wp:post_date_gmt>
  <wp:post_modified>2015-02-22 12:28:23</wp:post_modified>
  <wp:post_modified_gmt>2015-02-22 11:28:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-cheap-fast</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>837</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2015/02/quick-cheap-fast2-e1424604360219.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";i:406;s:6:"height";i:383;s:4:"file";s:21:"quick-cheap-fast2.png";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Quick Cheap Fast]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/02/quick-cheap-fast2-e1424604360219.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:203;s:6:"height";i:192;s:4:"file";s:108:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/02/quick-cheap-fast2-e1424604360219.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[main_swift_â_Edited]]></title>
  <link>https://javax0.wordpress.com/2015/12/30/constructors-superconstructors-and-swift/main_swift_-_edited/</link>
  <pubDate>Fri, 25 Dec 2015 06:05:05 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2015/12/main_swift_e28094_edited.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1129</wp:post_id>
  <wp:post_date>2015-12-25 07:05:05</wp:post_date>
  <wp:post_date_gmt>2015-12-25 06:05:05</wp:post_date_gmt>
  <wp:post_modified>2015-12-25 07:05:05</wp:post_modified>
  <wp:post_modified_gmt>2015-12-25 06:05:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>main_swift_-_edited</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1123</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2015/12/main_swift_e28094_edited.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/12/main_swift_e28094_edited.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:1056;s:6:"height";i:320;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/12/main_swift_e28094_edited.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[ChildClass_java_-_javax_blog_-____github_javax_blog_]]></title>
  <link>https://javax0.wordpress.com/2015/12/30/constructors-superconstructors-and-swift/childclass_java_-_javax_blog_-____github_javax_blog_/</link>
  <pubDate>Fri, 25 Dec 2015 06:11:11 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2015/12/childclass_java_-_javax_blog_-____github_javax_blog_.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1131</wp:post_id>
  <wp:post_date>2015-12-25 07:11:11</wp:post_date>
  <wp:post_date_gmt>2015-12-25 06:11:11</wp:post_date_gmt>
  <wp:post_modified>2015-12-25 07:11:11</wp:post_modified>
  <wp:post_modified_gmt>2015-12-25 06:11:11</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>childclass_java_-_javax_blog_-____github_javax_blog_</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1123</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2015/12/childclass_java_-_javax_blog_-____github_javax_blog_.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/12/childclass_java_-_javax_blog_-____github_javax_blog_.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:805;s:6:"height";i:252;s:4:"file";s:128:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2015/12/childclass_java_-_javax_blog_-____github_javax_blog_.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Disclaimer]]></title>
  <link>https://javax0.wordpress.com/disclaimer/</link>
  <pubDate>Mon, 08 Feb 2016 19:17:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?page_id=1223</guid>
  <description/>
  <content:encoded><![CDATA[All stories on this blog are made up. They have never really happened. They are to make the articles more live and more interesting. Similar stories may have happened or happen in the past, present or future to me, to you or to anyone dead, alive or not yet born. If you find any similarity between some story and real-life it is most probably an error in real-life. But that is the basic nature of real-life: it is full of coincidences and errors. Nobody is to be blamed.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1223</wp:post_id>
  <wp:post_date>2016-02-08 20:17:12</wp:post_date>
  <wp:post_date_gmt>2016-02-08 19:17:12</wp:post_date_gmt>
  <wp:post_modified>2019-09-03 16:14:48</wp:post_modified>
  <wp:post_modified_gmt>2019-09-03 15:14:48</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>disclaimer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[webcodegeeks-badge]]></title>
  <link>https://javax0.wordpress.com/webcodegeeks-badge/</link>
  <pubDate>Sun, 18 Sep 2016 16:58:03 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2016/09/webcodegeeks-badge.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1459</wp:post_id>
  <wp:post_date>2016-09-18 17:58:03</wp:post_date>
  <wp:post_date_gmt>2016-09-18 16:58:03</wp:post_date_gmt>
  <wp:post_modified>2016-09-18 17:58:03</wp:post_modified>
  <wp:post_modified_gmt>2016-09-18 16:58:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>webcodegeeks-badge</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2016/09/webcodegeeks-badge.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2016/09/webcodegeeks-badge.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:120;s:6:"height";i:120;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2016/09/webcodegeeks-badge.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:10188;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Logging in Java 9]]></title>
  <link>https://javax0.wordpress.com/?p=1494</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1494</guid>
  <description/>
  <content:encoded><![CDATA[Java 9 has a new logging facade that will ease a bit the burden that many developers feel on the skin when they use different frameworks supporting different logging solutions. In this article, I will talk a bit about this burden, where it comes from, how the community tried to solve the issue and what Java 9 delivers to this field in July. At the end of the article, I also give a little bonus. The bonus is a class that combines the new logging capabilities with the Java 9 stack walker framework.

<h1>Logging burden</h1>

Java has a logging solution built in since Java 1.4 At the time there were already some existing logging frameworks and everybody was expecting that use of the different logging frameworks will end when there is one supported by Java built into the JDK. The expectation was wrong. You can not command people what to use for their programming needs. They will use the solution that fits their needs best. If you provide a solution that they love, they will use it. Part of it is marketing, part of it is the product: price, features, performance. Logging frameworks developed and Java built-in logged. You certainly have heard of log4j, Apache Commons Logging, logback, slf4j.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1494</wp:post_id>
  <wp:post_date>2018-01-26 15:49:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2018-01-26 15:49:32</wp:post_modified>
  <wp:post_modified_gmt>2018-01-26 14:49:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[process handling based on pid]]></title>
  <link>https://javax0.wordpress.com/2017/07/19/process-handling-in-java-9/processapi/</link>
  <pubDate>Fri, 14 Jul 2017 18:29:42 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/07/processapi.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[process handling based on pid]]></excerpt:encoded>
  <wp:post_id>1529</wp:post_id>
  <wp:post_date>2017-07-14 19:29:42</wp:post_date>
  <wp:post_date_gmt>2017-07-14 18:29:42</wp:post_date_gmt>
  <wp:post_modified>2017-07-14 19:31:07</wp:post_modified>
  <wp:post_modified_gmt>2017-07-14 18:31:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>processapi</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1523</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/07/processapi.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/processapi.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:1228;s:6:"height";i:683;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/processapi.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:41427;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[java_modifiers_private_scope]]></title>
  <link>https://javax0.wordpress.com/2017/08/09/what-is-private-in-java-9/java_modifiers_private_scope/</link>
  <pubDate>Sat, 29 Jul 2017 15:24:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/07/java_modifiers_private_scope.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1545</wp:post_id>
  <wp:post_date>2017-07-29 16:24:37</wp:post_date>
  <wp:post_date_gmt>2017-07-29 15:24:37</wp:post_date_gmt>
  <wp:post_modified>2017-07-29 16:24:56</wp:post_modified>
  <wp:post_modified_gmt>2017-07-29 15:24:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>java_modifiers_private_scope</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/07/java_modifiers_private_scope.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/java_modifiers_private_scope.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:442;s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/java_modifiers_private_scope.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:19986;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[topLevelClassDisassembly]]></title>
  <link>https://javax0.wordpress.com/2017/08/09/what-is-private-in-java-9/toplevelclassdisassembly/</link>
  <pubDate>Sat, 29 Jul 2017 15:41:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/07/toplevelclassdisassembly.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1549</wp:post_id>
  <wp:post_date>2017-07-29 16:41:08</wp:post_date>
  <wp:post_date_gmt>2017-07-29 15:41:08</wp:post_date_gmt>
  <wp:post_modified>2017-07-29 16:42:17</wp:post_modified>
  <wp:post_modified_gmt>2017-07-29 15:42:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>toplevelclassdisassembly</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/07/toplevelclassdisassembly.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/toplevelclassdisassembly.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:885;s:6:"height";i:240;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/toplevelclassdisassembly.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:30429;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[bridges]]></title>
  <link>https://javax0.wordpress.com/2017/08/09/what-is-private-in-java-9/bridges/</link>
  <pubDate>Sat, 29 Jul 2017 15:45:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/07/bridges.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1551</wp:post_id>
  <wp:post_date>2017-07-29 16:45:41</wp:post_date>
  <wp:post_date_gmt>2017-07-29 15:45:41</wp:post_date_gmt>
  <wp:post_modified>2017-07-29 16:46:00</wp:post_modified>
  <wp:post_modified_gmt>2017-07-29 15:46:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bridges</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/07/bridges.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/bridges.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:967;s:6:"height";i:499;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/bridges.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71766;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[equals]]></title>
  <link>https://javax0.wordpress.com/2017/08/09/what-is-private-in-java-9/equals/</link>
  <pubDate>Sat, 29 Jul 2017 17:09:07 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/07/equals.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1557</wp:post_id>
  <wp:post_date>2017-07-29 18:09:07</wp:post_date>
  <wp:post_date_gmt>2017-07-29 17:09:07</wp:post_date_gmt>
  <wp:post_modified>2017-07-29 18:09:24</wp:post_modified>
  <wp:post_modified_gmt>2017-07-29 17:09:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>equals</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1536</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/07/equals.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/equals.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:367;s:6:"height";i:475;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/07/equals.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:16678;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[replaceAllLambda]]></title>
  <link>https://javax0.wordpress.com/2017/08/16/new-regex-features-in-java-9/replacealllambda/</link>
  <pubDate>Sun, 13 Aug 2017 15:26:36 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/08/replacealllambda.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1593</wp:post_id>
  <wp:post_date>2017-08-13 16:26:36</wp:post_date>
  <wp:post_date_gmt>2017-08-13 15:26:36</wp:post_date_gmt>
  <wp:post_modified>2017-08-13 16:26:36</wp:post_modified>
  <wp:post_modified_gmt>2017-08-13 15:26:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>replacealllambda</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1574</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/08/replacealllambda.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/08/replacealllambda.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:521;s:6:"height";i:275;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/08/replacealllambda.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:10335;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[uat-pic1]]></title>
  <link>https://javax0.wordpress.com/2017/12/20/do-we-need-user-acceptance-test/uat-pic1/</link>
  <pubDate>Fri, 15 Dec 2017 12:17:35 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/12/uat-pic1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1668</wp:post_id>
  <wp:post_date>2017-12-15 13:17:35</wp:post_date>
  <wp:post_date_gmt>2017-12-15 12:17:35</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 13:17:35</wp:post_modified>
  <wp:post_modified_gmt>2017-12-15 12:17:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>uat-pic1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1652</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/12/uat-pic1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/uat-pic1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:707;s:6:"height";i:33;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/uat-pic1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:6756;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[uat-pic2]]></title>
  <link>https://javax0.wordpress.com/2017/12/20/do-we-need-user-acceptance-test/uat-pic2-3/</link>
  <pubDate>Fri, 15 Dec 2017 13:56:24 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/12/uat-pic22.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1676</wp:post_id>
  <wp:post_date>2017-12-15 14:56:24</wp:post_date>
  <wp:post_date_gmt>2017-12-15 13:56:24</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 14:56:24</wp:post_modified>
  <wp:post_modified_gmt>2017-12-15 13:56:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>uat-pic2-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1652</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/12/uat-pic22.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/uat-pic22.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:561;s:6:"height";i:403;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/uat-pic22.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:19845;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Home]]></title>
  <link>https://javax0.wordpress.com/?p=1684</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1684</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1684</wp:post_id>
  <wp:post_date>2017-12-15 15:05:49</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:05:49</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346749]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://javax0.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1684]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?p=1685</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1685</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1685</wp:post_id>
  <wp:post_date>2017-12-15 15:05:49</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:05:49</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346749]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?p=1686</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1686</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1686</wp:post_id>
  <wp:post_date>2017-12-15 15:05:49</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:05:49</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1223]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346749]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Home]]></title>
  <link>https://javax0.wordpress.com/?p=1687</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1687</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1687</wp:post_id>
  <wp:post_date>2017-12-15 15:06:31</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:06:31</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1687]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://javax0.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346791]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?p=1688</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1688</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1688</wp:post_id>
  <wp:post_date>2017-12-15 15:06:31</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:06:31</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346791]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?p=1689</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1689</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1689</wp:post_id>
  <wp:post_date>2017-12-15 15:06:31</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:06:31</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1223]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1513346791]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[modules-in-ide]]></title>
  <link>https://javax0.wordpress.com/2018/01/10/java-9-module-services/modules-in-ide/</link>
  <pubDate>Sun, 31 Dec 2017 11:51:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2017/12/modules-in-ide.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1697</wp:post_id>
  <wp:post_date>2017-12-31 12:51:54</wp:post_date>
  <wp:post_date_gmt>2017-12-31 11:51:54</wp:post_date_gmt>
  <wp:post_modified>2017-12-31 12:51:54</wp:post_modified>
  <wp:post_modified_gmt>2017-12-31 11:51:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>modules-in-ide</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1690</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2017/12/modules-in-ide.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/modules-in-ide.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:974;s:6:"height";i:1158;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2017/12/modules-in-ide.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:227520;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[serviceloader]]></title>
  <link>https://javax0.wordpress.com/2018/01/10/java-9-module-services/serviceloader-2/</link>
  <pubDate>Tue, 02 Jan 2018 10:21:40 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/serviceloader1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1709</wp:post_id>
  <wp:post_date>2018-01-02 11:21:40</wp:post_date>
  <wp:post_date_gmt>2018-01-02 10:21:40</wp:post_date_gmt>
  <wp:post_modified>2018-01-02 11:21:40</wp:post_modified>
  <wp:post_modified_gmt>2018-01-02 10:21:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>serviceloader-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1690</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/serviceloader1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/serviceloader1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:608;s:6:"height";i:285;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/serviceloader1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:21393;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[iocanddi]]></title>
  <link>https://javax0.wordpress.com/2018/01/10/java-9-module-services/iocanddi/</link>
  <pubDate>Tue, 02 Jan 2018 10:52:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/iocanddi.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1713</wp:post_id>
  <wp:post_date>2018-01-02 11:52:23</wp:post_date>
  <wp:post_date_gmt>2018-01-02 10:52:23</wp:post_date_gmt>
  <wp:post_modified>2018-01-02 11:52:23</wp:post_modified>
  <wp:post_modified_gmt>2018-01-02 10:52:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>iocanddi</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1690</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/iocanddi.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/iocanddi.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:781;s:6:"height";i:609;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/iocanddi.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:21635;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[modules-sample]]></title>
  <link>https://javax0.wordpress.com/2018/01/10/java-9-module-services/modules-sample-2/</link>
  <pubDate>Tue, 02 Jan 2018 12:06:14 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/modules-sample.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1735</wp:post_id>
  <wp:post_date>2018-01-02 13:06:14</wp:post_date>
  <wp:post_date_gmt>2018-01-02 12:06:14</wp:post_date_gmt>
  <wp:post_modified>2018-01-02 13:07:10</wp:post_modified>
  <wp:post_modified_gmt>2018-01-02 12:07:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>modules-sample-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1690</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/modules-sample.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/modules-sample.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:587;s:6:"height";i:284;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/modules-sample.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:21396;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[raid]]></title>
  <link>https://javax0.wordpress.com/2018/01/18/raid-backup-and-archive/raid/</link>
  <pubDate>Fri, 12 Jan 2018 16:51:03 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/raid.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1754</wp:post_id>
  <wp:post_date>2018-01-12 17:51:03</wp:post_date>
  <wp:post_date_gmt>2018-01-12 16:51:03</wp:post_date_gmt>
  <wp:post_modified>2018-01-12 17:51:03</wp:post_modified>
  <wp:post_modified_gmt>2018-01-12 16:51:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>raid</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1744</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/raid.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/raid.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:40;s:6:"height";i:32;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/raid.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:680;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[backup]]></title>
  <link>https://javax0.wordpress.com/2018/01/18/raid-backup-and-archive/backup/</link>
  <pubDate>Fri, 12 Jan 2018 16:53:25 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/backup.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1758</wp:post_id>
  <wp:post_date>2018-01-12 17:53:25</wp:post_date>
  <wp:post_date_gmt>2018-01-12 16:53:25</wp:post_date_gmt>
  <wp:post_modified>2018-01-12 17:53:25</wp:post_modified>
  <wp:post_modified_gmt>2018-01-12 16:53:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>backup</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1744</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/backup.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/backup.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:42;s:6:"height";i:36;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/backup.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1286;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[archive]]></title>
  <link>https://javax0.wordpress.com/2018/01/18/raid-backup-and-archive/archive/</link>
  <pubDate>Fri, 12 Jan 2018 16:53:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/archive.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1759</wp:post_id>
  <wp:post_date>2018-01-12 17:53:59</wp:post_date>
  <wp:post_date_gmt>2018-01-12 16:53:59</wp:post_date_gmt>
  <wp:post_modified>2018-01-12 17:53:59</wp:post_modified>
  <wp:post_modified_gmt>2018-01-12 16:53:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>archive</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1744</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/archive.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/archive.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:36;s:6:"height";i:36;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/archive.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:862;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[raid-backup-archive]]></title>
  <link>https://javax0.wordpress.com/2018/01/18/raid-backup-and-archive/raid-backup-archive/</link>
  <pubDate>Fri, 12 Jan 2018 17:01:29 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/01/raid-backup-archive1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1761</wp:post_id>
  <wp:post_date>2018-01-12 18:01:29</wp:post_date>
  <wp:post_date_gmt>2018-01-12 17:01:29</wp:post_date_gmt>
  <wp:post_modified>2018-01-12 18:01:29</wp:post_modified>
  <wp:post_modified_gmt>2018-01-12 17:01:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>raid-backup-archive</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1744</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/01/raid-backup-archive1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/raid-backup-archive1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:819;s:6:"height";i:881;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/01/raid-backup-archive1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:53291;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[string-int-coercion]]></title>
  <link>https://javax0.wordpress.com/string-int-coercion/</link>
  <pubDate>Mon, 29 Oct 2018 11:58:30 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/10/string-int-coercion.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1972</wp:post_id>
  <wp:post_date>2018-10-29 12:58:30</wp:post_date>
  <wp:post_date_gmt>2018-10-29 11:58:30</wp:post_date_gmt>
  <wp:post_modified>2018-10-29 12:58:30</wp:post_modified>
  <wp:post_modified_gmt>2018-10-29 11:58:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>string-int-coercion</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/10/string-int-coercion.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/10/string-int-coercion.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:504;s:6:"height";i:74;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/10/string-int-coercion.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:4754;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[1]]></title>
  <link>https://javax0.wordpress.com/2018/11/29/implementing-basic-rest-apis-with-jax-rs/attachment/1/</link>
  <pubDate>Thu, 29 Nov 2018 09:33:21 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/11/1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1985</wp:post_id>
  <wp:post_date>2018-11-29 10:33:21</wp:post_date>
  <wp:post_date_gmt>2018-11-29 09:33:21</wp:post_date_gmt>
  <wp:post_modified>2018-11-29 10:33:21</wp:post_modified>
  <wp:post_modified_gmt>2018-11-29 09:33:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1984</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/11/1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:660;s:6:"height";i:182;s:4:"file";s:77:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:46633;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/1.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[2]]></title>
  <link>https://javax0.wordpress.com/2018/11/29/implementing-basic-rest-apis-with-jax-rs/attachment/2/</link>
  <pubDate>Thu, 29 Nov 2018 09:33:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/11/2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1986</wp:post_id>
  <wp:post_date>2018-11-29 10:33:23</wp:post_date>
  <wp:post_date_gmt>2018-11-29 09:33:23</wp:post_date_gmt>
  <wp:post_modified>2018-11-29 10:33:23</wp:post_modified>
  <wp:post_modified_gmt>2018-11-29 09:33:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1984</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/11/2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/2.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:399;s:6:"height";i:251;s:4:"file";s:77:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:62751;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[3]]></title>
  <link>https://javax0.wordpress.com/2018/11/29/implementing-basic-rest-apis-with-jax-rs/attachment/3/</link>
  <pubDate>Thu, 29 Nov 2018 09:33:25 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/11/3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1987</wp:post_id>
  <wp:post_date>2018-11-29 10:33:25</wp:post_date>
  <wp:post_date_gmt>2018-11-29 09:33:25</wp:post_date_gmt>
  <wp:post_modified>2018-11-29 10:33:25</wp:post_modified>
  <wp:post_modified_gmt>2018-11-29 09:33:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1984</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/11/3.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/3.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:568;s:6:"height";i:294;s:4:"file";s:77:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/3.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:80585;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[4]]></title>
  <link>https://javax0.wordpress.com/2018/11/29/implementing-basic-rest-apis-with-jax-rs/attachment/4/</link>
  <pubDate>Thu, 29 Nov 2018 09:33:27 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2018/11/4.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1988</wp:post_id>
  <wp:post_date>2018-11-29 10:33:27</wp:post_date>
  <wp:post_date_gmt>2018-11-29 09:33:27</wp:post_date_gmt>
  <wp:post_modified>2018-11-29 10:33:27</wp:post_modified>
  <wp:post_modified_gmt>2018-11-29 09:33:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1984</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2018/11/4.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/4.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:547;s:6:"height";i:287;s:4:"file";s:77:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2018/11/4.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:85470;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[sub-par]]></title>
  <link>https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/sub-par/</link>
  <pubDate>Tue, 23 Apr 2019 11:30:25 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/04/sub-par.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2044</wp:post_id>
  <wp:post_date>2019-04-23 12:30:25</wp:post_date>
  <wp:post_date_gmt>2019-04-23 11:30:25</wp:post_date_gmt>
  <wp:post_modified>2019-04-23 12:30:25</wp:post_modified>
  <wp:post_modified_gmt>2019-04-23 11:30:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sub-par</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2041</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/04/sub-par.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/sub-par.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:240;s:6:"height";i:181;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/sub-par.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:6675;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[phases]]></title>
  <link>https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/phases-2/</link>
  <pubDate>Tue, 23 Apr 2019 16:39:57 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/04/phases-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2054</wp:post_id>
  <wp:post_date>2019-04-23 17:39:57</wp:post_date>
  <wp:post_date_gmt>2019-04-23 16:39:57</wp:post_date_gmt>
  <wp:post_modified>2019-04-23 17:39:57</wp:post_modified>
  <wp:post_modified_gmt>2019-04-23 16:39:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>phases-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2041</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/04/phases-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/phases-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:4237;s:6:"height";i:818;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/phases-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:138382;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[lightbulb]]></title>
  <link>https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/lightbulb/</link>
  <pubDate>Tue, 23 Apr 2019 17:08:28 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/04/lightbulb.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2058</wp:post_id>
  <wp:post_date>2019-04-23 18:08:28</wp:post_date>
  <wp:post_date_gmt>2019-04-23 17:08:28</wp:post_date_gmt>
  <wp:post_modified>2019-04-23 18:08:28</wp:post_modified>
  <wp:post_modified_gmt>2019-04-23 17:08:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>lightbulb</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2041</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/04/lightbulb.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/lightbulb.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:361;s:6:"height";i:433;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/04/lightbulb.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:13617;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[IMG_3109]]></title>
  <link>https://javax0.wordpress.com/2019/07/03/java-hexadecimal-floating-point-literal/img_3109/</link>
  <pubDate>Tue, 25 Jun 2019 07:08:48 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/06/img_3109.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2169</wp:post_id>
  <wp:post_date>2019-06-25 08:08:48</wp:post_date>
  <wp:post_date_gmt>2019-06-25 07:08:48</wp:post_date_gmt>
  <wp:post_modified>2019-06-25 08:08:48</wp:post_modified>
  <wp:post_modified_gmt>2019-06-25 07:08:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_3109</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/06/img_3109.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/06/img_3109.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:875;s:6:"height";i:885;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/06/img_3109.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71730;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Joseph_Darcy on Twitter Floating Point]]></title>
  <link>https://javax0.wordpress.com/2019/07/03/java-hexadecimal-floating-point-literal/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_straightforwar/</link>
  <pubDate>Sun, 07 Jul 2019 06:39:56 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/07/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2199</wp:post_id>
  <wp:post_date>2019-07-07 07:39:56</wp:post_date>
  <wp:post_date_gmt>2019-07-07 06:39:56</wp:post_date_gmt>
  <wp:post_modified>2019-07-07 07:40:32</wp:post_modified>
  <wp:post_modified_gmt>2019-07-07 06:40:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_straightforwar</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/07/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:603;s:6:"height";i:437;s:4:"file";s:262:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/07/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:49015;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/07/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_.png]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[annotationStructure]]></title>
  <link>https://javax0.wordpress.com/2019/07/31/annotation-handling-and-jpms/annotationstructure/</link>
  <pubDate>Sun, 28 Jul 2019 15:33:39 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.files.wordpress.com/2019/07/annotationstructure.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2211</wp:post_id>
  <wp:post_date>2019-07-28 16:33:39</wp:post_date>
  <wp:post_date_gmt>2019-07-28 15:33:39</wp:post_date_gmt>
  <wp:post_modified>2019-07-28 16:33:39</wp:post_modified>
  <wp:post_modified_gmt>2019-07-28 15:33:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>annotationstructure</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>2203</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://javax0.files.wordpress.com/2019/07/annotationstructure.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/07/annotationstructure.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:638;s:6:"height";i:291;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/ced/46208405/files/2019/07/annotationstructure.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17264;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Apache Commons StringUtils Fluent Facade]]></title>
  <link>https://javax0.wordpress.com/?p=2221</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2221</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Fluent API to Apache Commons StringUtils</h1>

This library is simply a fluent wrapper around Apache StringUtils 
methods.

<h2>Introduction</h2>

Apache StringUtils has a lot of methods that come very handy when
dealing with strings. The main advantage of StringUtils is that the
implementation is there, tested, a lot of people are using them. These
little utilities make coding easier. There is one thing with this class.

<blockquote>
  StringUtils method names are not nice and they are not chain-able.
</blockquote>

They do not provide a fluent readable API. This library is a simple
fluent API wrapper around StringUtils that will make some code that
heavily use StringUtils even more readable.

<h2>How to use</h2>

Using StringUtils you can say, for example,
<code>StringUtils.substringBefore("abrakadabra","ab")</code>. Which means the part
of the string <code>abrakadabra</code> before the first occurrence of <code>ab</code> in it.
You know because you have read the documentation.

Using Javax0::string you write

[code lang=java]
str(&quot;abrakadabra&quot;).before(&quot;ab&quot;)
[/code]

A bit more readable. Or not. It still depends on your taste and what you
got used to.

It gets more interesting when you want to have the string before the
last occurrence of <code>ab</code>. Using StringUtils you write
<code>StringUtils.substringBeforeLast("abrakadabra","ab")</code>. A bit different
functionality and a new method. Using Javax0::string you write this as
the following:

[code lang=java]
str(&quot;abrakadabra&quot;).before.last(&quot;ab&quot;)
[/code]

or even (just to be grammatically correct)

[code lang=java]
str(&quot;abrakadabra&quot;).before.the.last(&quot;ab&quot;)
[/code]

What do you write when you want to achieve the same functionality but you do not care about the character casing? Something like
<code>StringUtils.substringBeforeIgnoreCase("abrakadabra","AB")</code> does not
exists. On the other hand you can write

[code lang=java]
str(&quot;abrakadabra&quot;).ignoreCase().before(&quot;AB&quot;)
[/code]

and similarly

[code lang=java]
 str(&quot;abrakadabra&quot;).ignoreCase().before.the.last(&quot;AB&quot;)
[/code]

Without remembering all the different method names you can use all the
combinations replacing <code>before</code> with <code>after</code>.

StringUtils also has <code>prependIfMissing()</code> and
<code>prependIfMissingIgnoreCase()</code>. Using Javax0::string you can simply
write

[code lang=java]
str(&quot;alma&quot;).prependIfMissing(&quot;A&quot;)
[/code]

or

[code lang=java]
str(&quot;alma&quot;).ignoreCase().prependIfMissing(&quot;A&quot;)
[/code]

without remembering a new method name.

<h2>Testing methods</h2>

StringUtils has some string testing methods, like <code>isEmpty()</code> and
<code>isBlank()</code>. With Javax0::string you can use these in a fluent way.
Instead of remembering the <code>isEmpty()</code> or other names you can write

[code lang=java]
str(&quot;&quot;).is.empty()
[/code]

As it is written here, it does not seem to be a big deal, after all: is this such a big difference between <code>isEmpty</code> and <code>is.empty</code>? The answer is yes when you do not remember the name of the possible method and you start to write <code>is.</code> the IDE will offer you all the possible test methods. Still, it is also true for the <code>is</code> prefix without the dot. The real difference is that the field <code>is</code> a reference to a special class that contains only the boolean methods you can select with the editors autocomplete only from the boolean methods. You can also write

[code lang=java]
str(&quot;&quot;).is.not.empty()
[/code]

instead of using the less readable <code>!str("").is.empty()</code>. Similarly you can
write

[code lang=java]
str(&quot;&quot;).is.blank()
[/code]

and last but not least

[code lang=java]
str(&quot;&quot;).is.not.blank()
[/code]

This is through using the field <code>not</code>, which is also part of the "<code>is.</code> object". But this goes on using more such fields.

<h2>Testing multiple strings</h2>

StringUtils has <code>StringUtils.isAnyBlank()</code> that works with an array of strings.
In Javax0::string you write

[code lang=java]
strs(&quot;a&quot;,&quot;b&quot;).is.any.blank()
[/code]

and similarly, you can negate the expression writing

[code lang=java]
strs(&quot;a&quot;,&quot;b&quot;).is.not.any.blank()
[/code]

or

[code lang=java]
strs(&quot;a&quot;,&quot;b&quot;).is.none.blank()
[/code]

which are essentially the same. You can also use <code>empty()</code> as well
exactly the same way.

<h2>Testing length</h2>

You also have extra functionality to check the length of strings. You
can write

[code lang=java]
str(null).is.shorter.than(1)
str(&quot;&quot;).is.shorter.than(1)
str(&quot;A&quot;).is.shorter.than(1)
str(&quot;A&quot;).is.shorter.than(&quot;AA&quot;)
str(&quot;A&quot;).is.shorter.than(string(&quot;AA&quot;).before.last(&quot;A&quot;).toStringBuilder().append(&quot;A&quot;))
str(&quot;AA&quot;).is.longer.than(&quot;A&quot;)
str(&quot;A&quot;).is.longer.than(1)
str(&quot;A&quot;).is.longer.than(0)
str(&quot;A&quot;).is.not.longer.than(1)
str(&quot;A&quot;).length() == 1
str(&quot;A&quot;).is.theSameLength.as(&quot;B&quot;)
[/code]

to compare the length of a string to a number or to the length of another string.

<h2>Padding</h2>

You can pad similarly as <code>StringUtils.leftPad()</code>,
<code>StringUtils.rightPad()</code> and <code>StringUtils.center()</code>. This you can write as

[code lang=java]
str(&quot;&quot;).pad(3)
str(&quot;A&quot;).pad(3)
str(&quot;A&quot;).left().pad(3)
str(&quot;A&quot;).right().pad(3)
 str(&quot;A&quot;).both().pad(4)
[/code]

<h2>Null handling</h2>

Having a <code>null</code> instead of a string when you start with <code>str(null)</code> it will cause no harm. On the output, you will get what was going in on the input unless you want something else. Because the API is fluent you can write for any call something like

[code lang=java]
str(&quot;abrakadabra&quot;).notNull().before(&quot;ab&quot;)
[/code]

to guarantee that the result will be empty string even if the input was
<code>null</code>. On the other hand, you can

[code lang=java]
str(&quot;abrakadabra&quot;).forceNull().before(&quot;ab&quot;)
[/code]

to force that the result is <code>null</code> instead of an empty string and even more
you can write

[code lang=java]
str(&quot;abrakadabra&quot;).fforceNull().before(&quot;ab&quot;)
[/code]

to get null not only for empty strings, but also for blank results.

[code lang=java]
str(&quot;abrakadabra&quot;).forceEmpty().before(&quot;ab&quot;)
[/code]

will get you empty string even if the result is <code>null</code> or blank.

<h2>Chaining</h2>

When you start the string expression with the static method <code>str()</code> then
the result after calling some of the string methods is a string and with
that, the call chain ends. Sometimes this is the best approach, but other
times you want to write longer call chains. In that case, you have to use
the longer named static method <code>string()</code> or <code>strings()</code> in the plural in
case the methods work on multiple strings.

Using <code>string()</code> or <code>strings()</code> you can write longer chains, like

[code lang=java]
string(&quot;A&quot;).left().pad(2).right().pad(3).both().pad(5, &#039;.&#039;).toString()
string(&quot;a&quot;), string(&quot;abrakadabra&quot;).before(&quot;ka&quot;).after(&quot;br&quot;).toString()
[/code]

Note that the result in this case is

[code lang=java]
string(&quot;abrakadabra&quot;).before(&quot;ab&quot;).is.not.empty()
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2221</wp:post_id>
  <wp:post_date>2019-10-23 07:34:14</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2019-10-23 07:34:14</wp:post_modified>
  <wp:post_modified_gmt>2019-10-23 06:34:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[[JAVA MAGAZIN] Code Generation 2]]></title>
  <link>https://javax0.wordpress.com/java-magazin-code-generation-2/</link>
  <pubDate>Fri, 06 Sep 2019 16:56:27 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?page_id=2315</guid>
  <description/>
  <content:encoded><![CDATA[In this article, I will talk about code generation, why we need code generation and how to do code generation. I will describe the general problem that makes code generation a necessity and a bit of theory (not too much). I will also discuss the different phases of software development where the source code can be generated programmatically and compare the different approaches. I will also describe the architecture and the ideas (the kind of eureka moment) of a specific tool that generates code at a specific phase.

<h1>Why we generate code</h1>

To generate code or not to generate code, that is the question. We can ask that with Shakespeare. Practice, just like in Hamlet, gives the answer. We do generate code. Many developers generate code. Even if we do not like that. Tool generated code gives us some bad feeling. It makes us feel that something is not professional or at least not optimal. But such is life. There are only a few things that are optimal and we still have to live with these. So is the case with automated code generation.

The main reason to automatically generate code is that we do not know better. The manual code generation can be cumbersome and error-prone and the language, the framework or simply our experience and knowledge does not allow a simpler solution. And the main take-away from this article is already here at the very start. Before deciding to use code generation we have to identify the reason, why we need it.

<blockquote>You should not generate code unless you really have to.</blockquote>

Weird statement, especially when I "promote" a FOSS tool that is exactly targeting Java code generation. I know, and still, the statement is that you have to write all the code you can manually. Unfortunately, or for the sake of the tool, there are enough occasions when manual code generation is not an option, or at least automated code generation seems to be a better option.

<h1>Why to generate at all</h1>

When the best option is to generate source code then there is something wrong or at least suboptimal in the system.

<img src="https://javax0.files.wordpress.com/2019/04/sub-par.png" alt="" width="240" height="181" class="alignleft size-full wp-image-2044" />

<ul>
<li>the developer creating the code is sub-par,</li>
<li>the programming language is sub-par, or</li>
<li>the environment, some framework is sub-par.</li>
</ul>

Do not feel offended. When I talk about the "sub-par developer" I do not mean You. You are well above the average developer last but not least because you are open and interested in new things proven by the fact that you are reading this article. However, when you write a code you should also consider the average developer Joe or Jane, who will maintain your program sometime in the future. And, there is a very specific feature of the average developers: they are not good. They are not bad either, but they, as the name suggests, are average.

<h2>Legend of the sub-par developer</h2>

It may happen to you what has happened to me a few years back. It went like the following.

Solving a problem I created a mini-framework. Not really a framework, like Spring or Hibernate because a single developer cannot develop anything like that. (It does not stop though some of them trying even in a professional environment, which is contradictory as it is not professional.) You need a team. What I created was a single class that was doing some reflection "magic" converting objects to maps and back. Before that, we had <code>toMap()</code> and <code>fromMap()</code> methods in all classes that needed this functionality. They were created and maintained manually.

Luckily I was not alone. I had a team. They told me to scrap the code I wrote, and keep creating the <code>toMap()</code> and <code>fromMap()</code> manually. The reason is that the code has to be maintained by the developers who come after us. And we do not know them as they are not even selected. They may still be studying at the university. They may not even be born. We know one thing: they will be average developers and the code I created needs a tad more than average skills. However, maintaining the handcrafted <code>toMap()</code> and <code>fromMap()</code> methods does not require more than the average skill, even if the maintenance is error-prone. But that is only a cost issue that needs a bit more investment into QA and is significantly less than hiring ace senior developers.

You can imagine my ambivalent feelings as my brilliant (feel the irony) code was refused with a cushion that praised my ego. I have to say, they were right.

<h2>Sub-par framework</h2>

Well, many frameworks are in this sense sub-par. Maybe the expression "sub-par" is not really the best. For example, you generate Java code from a WSDL file. Why does the framework generate source code instead of Java byte-code? There is a good reason.

Generating byte code is complex and need special knowledge. It has a cost associated with it. It needs some byte-code generation library like Byte Buddy. It is more difficult to debug for the programmer using the code and is a bit JVM version dependent. In case the code is generated as Java source code, even if it is for some later version of Java and the project is using some lagging version, the chances are better, that the project can some way downgrade the generated code in case this is Java source than if it is byte code.

<h2>Sub-par language</h2>

Obviously, we are not talking about Java in this case, because Java is the best in the world and there is nothing better. Or is it? If anyone claims about just any programming language that the language is perfect, ignore that person. Every language has strengths and weaknesses. Java is no different. If you think about the fact that the language was designed more than 20 years ago and according to the development philosophy it kept backward compatibility very strict, it simply implies that there should be some areas that are better in other languages.

Think about the <code>equals()</code> and <code>hashCode()</code> methods that are defined in the class <code>Object</code> and can be overridden in any class. There is no much invention overriding any of those. The overridden implementations are fairly standard. In fact, they are so standard that the integrated development environments each support generating code for them. Why should we generate code for them? Why are they not part of the language in some declarative way? Those are questions that should have very good answers because it would really not be a big deal to implement things like that into the language and still they are not. There has to be a good reason, that I am not the best person to write about.

There is another example: the lambda expression. It was introduced into the language recently, only five years ago. Before that programmers had to use something else, for example, anonymous classes. Let's put aside the fact that the performance and the byte-code implementation of an anonymous class are not the same as that of a lambda expression. The lambda expression could be introduced into the language prior to version 8 using a code generator that generated the anonymous classes from some shortened form. Some features, like lambda, multi-line strings, switch expressions were, or are not part of the language because of the language evolution. A feature which has not been proven to be really good cannot be implemented into such a language as Java. There should be experiments in other languages, the industry, the developers have to accept the feature in other languages. At that point, it can be implemented in Java and then it will stay there for decades, perhaps for centuries.

As a summary of this part: if you cannot rely on the manually generated code, you can be sure that something is sub-par. This is not a shame. This is just how our profession generally is. This is how nature goes. There is no ideal solution, we have to live with compromises.

And now we will look a bit at some theory, which explains why it is like that.

<h1>Redundant code</h1>

The root cause and the real reason why we have to generate code is redundancy. The sub-par developer, language or framework or anything is because of redundancy. The Wikipedia page https://en.wikipedia.org/wiki/Redundant_code defines redundant code as

<blockquote>In computer programming, redundant code is source code or compiled code in a computer program that is unnecessary, such as...</blockquote>

This is only part of the redundancy that I want to talk about. As a matter of fact, this is the last type of redundancy and in case this redundancy is answered by code generation that is the best example when NOT to generate code. In this article, I refer to redundancy more in the information theory meaning. Have a look at the Wikipedia page:

<blockquote>In Information theory, redundancy measures the fractional difference between the entropy H(X) of an ensemble X, and its maximum possible value log(|A_X|)</blockquote>

This is a very precise, but highly unusable definition for us. Luckily the page continues and says:

<blockquote>Informally, it is the amount of wasted âspaceâ used to transmit certain data. Data compression is a way to reduce or eliminate unwanted redundancy.</blockquote>

In other words, some information encoded in some form is redundant if it can be compressed. For example, downloading and zipping the text of the classical English novel Moby Dick  will shrink its size down to 40% of the original text. Doing the same with the source code of Apache Commons Lang we get 20%. It is definitely NOT because of this âcode in a computer program that is unnecessaryâ. This is some other ânecessaryâ redundancy. English and other languages are redundant, programming languages are redundant and this is the way it is.

<h1>Levels of Redundancy</h1>

Then the next question is if these are the only reasons for redundancy. The answer is that we can identify six different levels of redundancy including those already mentioned.

<h2>0 Natural</h2>

This is the redundancy of the English language or just any other natural language. This redundancy is natural and we got used to it. The redundancy evolved with the language and it was needed to help the understanding a noisy environment. We do not want to eliminate this redundancy, because if we do we may end up reading some binary code. For most of us, this is not really appealing. This is how human and programmer brain works.

<h2>1 Language</h2>

The programming language is also redundant. It is even more redundant than the natural language it is built on. The extra redundancy is because the number of keywords is very limited. That makes the compression ration from 60% percent up to 80% in the case of Java. Other languages, like Perl, are denser and alas they are less readable. However, this is also a redundancy that we do not want to fight. Decreasing the redundancy coming from the programming language redundancy certainly would decrease readability and thus maintainability.

<h2>2 Structural</h2>

There is another source of redundancy that is already independent of the language. This is the code structure redundancy. For example when we have a method that has one argument then the code fragments that call this method should also use one argument. If the method changes for more arguments then all the places that call the method also have to change. This is a redundancy that comes from the program structure and this is not only something that we do not want to avoid, but it is also not possible to avoid without losing information and that way code structure.

<h2>3 Domain induced</h2>

We talk about domain induced redundancy when the business domain can be described in a clear and concise manner but the programming language does not support such a description. A good example can be a compiler. This example is in a technical domain that most programmers are familiar with. A context-free syntax grammar can be written in a clear and nice form using BNF format. If we create the parser in Java it certainly will be longer. Since the BNF form and the Java code mean the same and the Java code is significantly longer we can be sure that the Java code is redundant from the information theory point of view. That is the reason why we have tools for this example domain, like ANTLR, Yacc and Lex and a few other tools.

Another example is the Fluent API. A fluent API can be programmed implementing several interfaces that guide the programmer through the possible sequences of chained method calls. It is a long and hard to maintain way to code a fluent API. The same time a fluent API grammar can be neatly described with a regular expression because fluent APIs are described by finite-state grammars. The regular expression listing the methods describing alternatives, sequences, optional calls, and repetitions is more readable and shorter and less redundant than the Java implementation of the same. That is the reason why we have tools like Java::Geci Fluent API generators that convert a regular expression of method calls to fluent API implementation.

This is an area where decreasing the redundancy can be desirable and may result in easier to maintain and more readable code.

<h2>4 Language evolution</h2>

Language evolution redundancy is similar to the domain induced redundancy but it is independent of the actual programming domain. The source of this redundancy is a weakness of the programming language. For example, Java does not automatically provide getters and setters for fields. If you look at C# or Swift, they do. If we need them in Java, we have to write the code for it. It is boilerplate code and it is a weakness in the language. Also, in Java, there is no declarative way to define <code>equals()</code> and <code>hashCode()</code> methods. There may be a later version of Java that will provide something for that issue. Looking at past versions of Java it was certainly more redundant to create an anonymous class than writing a lambda expression. Java evolved and this was introduced into the language.

The major difference between domain induced redundancy and language evolution caused redundancy is that while it is impossible to address all programming domains in a general-purpose programming language, the language evolution will certainly eliminate the redundancy enforced by language shortages. While the language evolves we have code generators in the IDEs and in programs like Lombok that address these issues.

<h2>5 Programmer induced</h2>

This kind of redundancy correlates with the classical meaning of code redundancy. This is when the programmer cannot generate good enough code and there are unnecessary and excessive code structures or even copy-paste code in the program. The typical example is the before mentioned "Legend of the sub-par developer". In this case, code generation can be a compromise but it is usually a bad choice. On a high level, from the project manager point of view, it may be okay. They care about the cost of the developers and they may decide to hire only cheaper developers. On the programmer level, on the other hand, this is not acceptable. If you have the choice to generate code or write better code you have to choose the latter. You must learn and develop yourself so that you can develop better code.

<h1>When to generate code?</h1>

After we have discussed the different levels or causes of code redundancy the next question is how to generate the code. In the case of language evolution, the answer is easy. There are tools, which we use. Let's use them and they will generate the code whenever. To eliminate or lessen domain induced redundancy we created the Java::Geci framework that lets the programmers write their own code generators specific to the programming domain. The structure and the decision where to insert the code generation phase was driven by the desire to provide an easy and lovable API where it is extremely simple to create a code generator. So here we will look at the different development lifecycle phases when the code generation may happen and then we describe why Java::Geci uses the one it does.

Code generation principally can happen:
<img src="https://javax0.files.wordpress.com/2019/04/phases-1.png" alt="" width="625" height="121" class="alignleft size-full wp-image-2054" />

<ul>
<li>(BC) before compilation</li>
<li>(DC) during compilation</li>
<li>(DT) during the test phase</li>
<li>(DCL) during class loading</li>
<li>(DRT) during run-time</li>
</ul>

In the following, we will discuss these different cases.

<h1>(BC) Before compilation</h1>

The conventional phase is before compilation. In that case, the code generator reads some configuration or maybe the source code and generates Java code usually into a specific directory separated from the manual source code.

In this case, the generated source code is not part of the code that gets into the version control system. Code maintenance has to deal with the code generation and it is hardly an option to omit the code generator from the process and go on maintaining the code manually.

The code generator does not have easy access to the Java code structure. If the generated code has to use, extend or supplement in any way the already existing manual code then it has to analyze the Java source. It can be done line by line or using some parser. In either way, this is a task that will be done again by the Java compiler later and also there is a slight chance that the Java compiler and the tool used to parse the code for the code generator may not be 100% compatible.

<h2>(DC) during compilation</h2>

Java makes it possible to create so-called Annotation Processors that are invoked by the compiler. These can generate code during the compilation phase and the compiler will compile the generated classes. That way the code generation is part of the compilation phase.

The code generators running in this phase cannot access the compiled code, but they can access the compiled structure through an API that the Java compiler provides for the annotation processors.

It is possible to generate new classes, but it is not possible to modify the existing source code.

<h2>(DT) during the test phase</h2>

First, it seems to be a bit off. Why would anyone want to execute code generation during the test phase? However, the FOSS I try to "sell" here does exactly that, and I will detail the possibility, the advantages and honestly the disadvantages of code generation in this phase.

<h2>(DCL) during class loading</h2>

It is also possible to modify the code during the class loading. The programs that do this are called Java Agents. They are not real code generators. They work on the byte code level and modify the already compiled code.

<h2>(DRT) during run-time</h2>

Some code generators work during run-time. Many of these applications generate java bytecode directly and load the code into the running application. It is also possible to generate Java source code, compile the code and load the resulting bytes into the JVM.

<h1>Generating Code in Test Phase</h1>

This is the phase when and where Java::Geci (Java GEnerate Code Inline) generates the code. To help you understand how one comes to the weird idea to execute code generation during unit test (when it is already too late: the code is already compiled) let me tell you another story. The story is made up, it never happened, but it does not dwarf the explaining power.

We had a code with several data classes each with several fields. We had to create the <code>equals()</code> and <code>hashCode()</code> methods for each of these classes. This, eventually, meant code redundancy. When the class changed, a field was added or deleted then the methods had to be changed as well. Deleting a field was not a problem: the compiler does not compile an <code>equal()</code> or <code>hashCode()</code> method that refers to a non-existent field. On the other hand, the compiler does not mind such a method that does NOT refer to a new existing field.

From time to time we forgot to update these methods and we tried to invent more and more complex and better ways to counteract the error-prone human coding. The weirdest idea was to create an MD5 value of the field names and have this inserted as a comment into the <code>equals()</code> and <code>hashCode()</code> methods. In case there was a change in the fields then a test could check that the value in the source code is different from the one calculated from the names of the fields and then signal an error: unit test fails. We never implemented it.

The even weirder idea, that turned out not that weird and finally led to Java::Geci is actually to create the expected <code>equals()</code> and <code>hashCode()</code> method test during the test from the fields available via reflection and compare it to the one that was already in the code. If they do not match then they have to be regenerated. However, the code at this point is already regenerated. The only issue is that it is in the memory of the JVM and not in the file that contains the source code. Why just signal an error and tell the programmer to regenerate the code? Why does not the test write back the change? After all, we, humans should tell the computer what to do and not the other way around!

<img src="https://javax0.files.wordpress.com/2019/04/lightbulb.png" alt="" width="36" height="43" class="align-left wp-image-2058" />

And this was the epiphany that led to Java::Geci.

<h1>Java::Geci Architecture</h1>

Java::Geci generates code in the middle of the compilation, deployment, execution life cycle. Java::Geci is started when the unit tests are running during the build phase. As a matter of fact, you have to write one or more unit tests to configure and ignite the code generation.

This means that the manual and previously generated code is already compiled and is available for the code generator via reflection.

Executing code generation during the test phase has another advantage. Any code generation that runs later should generate only code, which is orthogonal to the manual code functionality. What does it mean? It has to be orthogonal in the sense that the generated code should not modify or interference in any way with the existing manually created code that could be discovered by the unit tests. The reason for this is that a code generation happening any later phase is already after the unit test execution and thus there is no possibility to test if the generated code effects in any undesired way the behavior of the code.

Generating code during the test has the possibility to test the code as a whole taking the manual as well as the generated code into consideration. The generated code itself should not be tested, per se, (that is the task of the test of the code generator project) but the behavior of the manual code that the programmers wrote may depend on the generated code and thus the execution of the tests may depend on the generated code.

To ensure that all the tests are OK with the generated code, the compilation and the tests should be executed again in case there was any new code generated. To ensure this the code generation is invoked from a test and the test fails in case new code was generated.

To get this correct the code generation in Java::Geci is usually invoked from a three-line unit test that has the structure:

[code lang="java"]
Assertions.assertFalse(...generate(...),&quot;code has changed, recompile!&quot;);
[/code]

The call to <code>...generate(...)</code> is a chain of method calls configuring the framework and the generators and when executed the framework decides if the generated code is different or not from the already existing code. It writes Java code back to the source code if the code changed but leaves the code intact in case the generated code has not changed.

The method <code>generate()</code> which is the final call in the chain to the code generation returns <code>true</code> if any code was changed and written back to the source code. This will fail the test, but if we run the test again with the already modified sources then the test should run fine.

This structure has some constraints on the generators:

<ul>
<li>Generators should generate exactly the same code if they are executed on the same source and classes. This is usually not a strong requirement, code generators do not tend to generate random source. Some code generators may want to insert timestamps as a comment in the code. Code formatting and comment changes are ignored by default. (Configurable.)</li>
<li>The generated code becomes part of the source and they are not compile-time artifacts. This is usually the case for all code generators that generate code into already existing class sources. Java::Geci can generate separate files but it was designed mainly for inline code generation (hence the name).</li>
<li>The generated code has to be saved to the repository and the manual source along with the generated code has to be in a state that does not need further code generation. This ensures that the CI server in the development can work with the original workflow: fetch - compile - test - commit artifacts to the repo. The code generation was already done on the developer machine and the code generator on the CI only ensures that it was really done (or else the test fails).</li>
</ul>

<p>Note that the fact that the code is generated on a developer machine does not violate the rule that the build should be machine-independent. In case there is any machine dependency then the code generation would result in different code on the CI server and thus the build will break. It did happen with some early versions of some of the sample generators. It is an error of the generator itself.

<h1>Code Generation API</h1>

The code generator applications should be simple. The framework has to do all the tasks that are the same for most of the code generators, and should provide support or else what is the duty of the framework?

Java::Geci does many things for the code generators:

<ul>
<li>it handles the configuration of the file sets to find the source files</li>
<li>scans the source directories and finds the source code files</li>
<li>reads the files and if the files are Java sources then it helps to find the class that corresponds to the source code</li>
<li>supports reflection calling to help deterministic code generation</li>
<li>unified configuration handling</li>
<li>Java source code generation in different ways</li>
<li>modifies the source files only when changed and write back changes</li>
<li>provide fully functional sample code generators. One of those is a full-fledged Fluent API generator that alone could be a whole project.</li>
<li>supports Jamal templating and code generation.</li>
</ul>

<h1>Summary</h1>

Reading this article you got a picture why, how and when we generate code in professional Java development. I also briefly described Java::Geci, which is a framework to create domain specicific generators. You can actually start using it visiting the <a href="https://github.com/verhas/javageci">GitHub Home Page of Java::Geci</a>.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2315</wp:post_id>
  <wp:post_date>2019-09-06 17:56:27</wp:post_date>
  <wp:post_date_gmt>2019-09-06 16:56:27</wp:post_date_gmt>
  <wp:post_modified>2019-09-11 09:33:50</wp:post_modified>
  <wp:post_modified_gmt>2019-09-11 08:33:50</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>java-magazin-code-generation-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password>JavaMagazine2019</wp:post_password>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?page_id=2349</link>
  <pubDate/>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?page_id=2349</guid>
  <description/>
  <content:encoded><![CDATA[Dear Vadzim,

Letâs discuss these issues a bit so that it may give some better understanding and benefit for all the experts as well as committee organizations.

<blockquote>
  <ol>
  <li>We communicate only via email. Itâs pretty slow.</li>
  </ol>
</blockquote>

eMail is as slow as the response. We can use eMail inside EPAM very effectively for purposes like that. Earlier I tried other methodologies and this worked the best.

<blockquote>
  <ol>
  <li>You donât check our availability before you schedule date. As I see you had to reschedule one session. </li>
  </ol>
</blockquote>

There are many factors when considering time. Many people working on customer site do not update their EPAM calendar. On the other hand many times it is possible to reschedule a meeting in favor of other events, e.g.: ASMT. Trying to find a spot that fits all experts in the calendar is not possible. I schedule the session that seems to be the best for most of the experts. You, as an expert, are free to deny participation. It is accepted.

<blockquote>
  Iâve participated in 19 sessions with 6 heads and itâs first rescheduling that I see.
</blockquote>

What is the importance of this fact? What are the implications? If rescheduling was not an option then there would not be a functionality for it in the assessment portal. If you have not experienced that it may just mean that you have not participated in enough sessions.

<blockquote>
  <ol>
  <li>You suggested to send you our questions via email. Maybe itâs convenient for you but it isnât convenient for me. I donât have easy way to check other expertâs questions. Usually we work with skype chat for communication and share online document for questions</li>
  </ol>
</blockquote>

You do not need to cross-check with other experts. The committee needs your own questions that are based on the information from Grow. I collect the questions and I also curate the questions. I review the content, correlations with other experts questions and also the language.

<blockquote>
  <ol>
  <li>You donât allow us to manage time and questions during session. Actually we only read questions.</li>
  </ol>
</blockquote>

Time management of a meeting has to be in one hand. Perhaps you had a different experience in the past with ASMT sessions which can be the very reason why you think 60 minutes are not enough.

I also manage the order of the questions based on the order of the questions the experts follow when they compose the questions. When I tell you during the session to ask a certain question by the question number it is usually because that is the next question. I do not know if you noticed, but when I ask it differently, for example skipping a question then I always ask for the expertâs consent. In that case, it is only a suggestion to, for example, skip a question because there was already something like that asked.

And importantly: it can only happen when an expert asks a question and then feels the need (and I do not ever stop an expert) to ask immediately a follow-up question that was not written down. In that case, such a question can interfere with a further question. Otherwise not, because of the curation, I do. Similar questions are kind of âeliminatedâ.

<blockquote>
  <ol>
  <li>I wrote you about some of this points in S4B and understood that you wasnât going to change your methodology.
  So itâs your right because you are head. You can manage sessions as you want.</li>
  </ol>
</blockquote>

Although this is true that as the head it is my right to select these minor points of the methodology how we conduct the sessions but this also comes with the responsibility that it has to be conducted in a correct and proficient way. It is not that I manage the sessions according to my liking. Rather I manage sessions that I think is the best way. We had a discussion about these questions where I wrote to you about the reasons in details. Your answers were:

âOk. As I mentioned it isnât so important for me. And actually you are right about the reasonâ
âok. Letâs try.â

At the end I asked âdo you have any other questions or suggestions ?â  and you answered âNo. Thatâs allâ

(We have all the session archived in case anyone wants to review.)

From these answers, I came to the conclusion that you can live with the methodology I described. Maybe I was wrong. You did not give any reasoning on why any other way of working would be better.

<blockquote>
  <ol>
  <li>And itâs extra reason. Your yesterdayâs answer was pretty rude and ultimate.
  It didnât look like approach that we use for communications in EPAM.</li>
  </ol>
</blockquote>

I did not intend to form it rude and I still do not see why you think it is rude. The verbiage, if not appropriate, still may be my fault. On the other hand, offering a discussion of the topic on the next on-line meeting we will have tomorrow morning is nothing but ultimate. Reviewing the schedule now I see that you will not be able to attend and that is the very reason why we had the chat last Thursday. It was to discuss your concerns.

I acknowledge that you have a strong personality and well established opinion about how things have to be. I also know from experience that I am also prone to such feelings though less and less by the years. I have learned the hard way that I may in certain situations be wrong.  Such a personality is usually not a problem except when it prevents reaching a common ground with coworkers to reach the goals of the task we work on together.

I totally agree with you that our cooperation in an assessment session would not be good for the candidate.

Regards,
Peter]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2349</wp:post_id>
  <wp:post_date>2019-09-16 13:52:41</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2019-09-16 13:52:41</wp:post_modified>
  <wp:post_modified_gmt>2019-09-16 12:52:41</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[OpenSource License Manager]]></title>
  <link>https://javax0.wordpress.com/2014/04/09/opensource-license-manager/</link>
  <pubDate>Wed, 09 Apr 2014 07:00:40 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=250</guid>
  <description/>
  <content:encoded><![CDATA[<h3>What is a License Manager?</h3>
License managers are used to enforce license rights, or at least to support the enforcement. When you develop an open source program, there is no much you need to or can do to enforce license rights. The code is there and if anyone just wants to abuse the program there is nothing technical that could stop them. Closed source programs are different. (Are they?) In that case the source code is not available for the client. It is not possible to alter the program so that it circumvents the license enforcement code, and thus there is a real role for license rights enforcement.

But this is not true.

The truth is that there is no fundamental difference between closed and open source code in this respect. Closed source codes can also be altered. The ultimate "source" for the execution is there after all: the machine code. There are tools that help to analyze and decode the binary to more or less human readable format and thus it is possible to circumvent the license management. It is possible and there is a great source of examples for it. On some sites hosted in some countries you can simply download the cracked version of practically any software. I do not recommend to do that and not only for ethical reasons though. You just never know which of the sites are funded by secret services or criminals (if there is any difference) and you never know if you install spy software on your machine using the cracked version.

Once I worked for a company where one of the success measurements of their software was the number of the days after release till the cracked versions appeared on the different sites compared to the same value of the competitor. The smaller the number was for their software the happier they were. Were they crazy? Why were they happy to know that their software was cracked? When the number of the days was only one single they, why did not they consider applying stronger license enforcement measure, like morphing code, hardware key and so on?

The answer is the following. This company knows very well that license management is not to prevent the unauthorized use. It can be used that way but it will have two major effects which will ruin your business:
<ul>
	<li>Writing license management code you spend your time on non-productive code.</li>
	<li>License management (this way) works against your customer.</li>
</ul>

<blockquote>Never implement license management against your customer.</blockquote>

When your license management solution is too restrictive you may restrict the software use of your customer. When you deliver your code using hardware key you impose inconvenience to your customer. When you bind your license to Ethernet MAC address of the machine the application is running on, again: you work against your customer.

<h3><tt>Set&lt;User&gt; != Set&lt;Customer&gt;</tt></h3>

Face the said truth: there will always be people, who use your software without paying for it. They are not your customers. Do they steal from you? Not necessarily. If there is someone who is not buying your software, he is not your customer.

If you know that there is no way they would pay for the software and the decision was in your hands whether you want them to use the software or use that of your competitor what would you choose? I guess you would like your software to be used to get more feedback and more knowledge even in the area of non-customers. People using your software may become your customer more likely than people not using it. This is why big companies sell out educational licenses to universities and other academic institutions.

Should we use license management at all in that case? Is license management bad down to ground in all aspects? My answer is that it is not. There is a correct use case for license management, even when the software is open source (but not free, like Atlassian products). To find and understand this use case there is one major thing to understand:

<blockquote>
The software is for the customer, and any line in the code has to support the customers to reach their business goals.
</blockquote>

Paying the fee for the software is for the customers. If nobody finances a software the software will die. There is nothing like free lunch. Somebody has to pay for it. To become a customer and pay for the software used is the most straightforward business model and provides the strongest feedback and control for the customer over the vendor to get the features needed.

At the same time paying for the software use is not the core business of the customer. Paying for the resources used supports them to reach their business goals is indirect. This is where license management comes into picture. It helps the customer to due their duties. It helps them remember their long term needs. This also means that license management should not prevent functionality. No functionality should stop if a license expires. Not to mention functionality that may prevent access to data that actually belongs to the customer.

If you approach license management with this mindset you can see that even open source (but not free) software may need it.

<h3>License Management Tool: license3j</h3>

Many years ago I was looking for some license management library and I found that there was none open source. I wanted to create an open source (but not free) application and it required that the license management is also open source. What I found was also overpriced taking into account our budget that was just zero for a part time start-up software (which actually failed business wise miserably, but that is another story). For this reason I created <a href="https://github.com/verhas/License3j">License3j</a> which surprisingly became one of the most used library of my OS projects.

License3j is very simple in terms of business objects. It uses a simple property file and lets the application check the content of the individual fields. The added value is handling electronic signature and checking the authenticity of the license file. Essentially it is hardly more than a single class file.

[sourcecode language="text"]
&lt;dependency&gt;
	&lt;groupId&gt;com.verhas&lt;/groupId&gt;
	&lt;artifactId&gt;license3j&lt;/artifactId&gt;
	&lt;version&gt;1.0.4&lt;/version&gt;
&lt;/dependency&gt;
[/sourcecode]

Feel free to use it if you like.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>250</wp:post_id>
  <wp:post_date>2014-04-09 08:00:40</wp:post_date>
  <wp:post_date_gmt>2014-04-09 07:00:40</wp:post_date_gmt>
  <wp:post_modified>2014-03-24 17:37:59</wp:post_modified>
  <wp:post_modified_gmt>2014-03-24 16:37:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>opensource-license-manager</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202660448405116]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/K7WfO9JZUz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5859555376059424768&type=U&a=nLcU]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32efe89ef2c7ead22aecc4bca75fff01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a62ba7a214a48fc3493f268a74db0c0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0fb98567f465754d9b6e13c879e21bda</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e75a857ee0e9d974bd5ccc1815e624a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c4cac7c707c9287da8c70258e516fc1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8eab53fb03f1edbaa826c575b58253cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4a22d2d6467f7f490fec89520460620</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7a3e3763cad0d2f2d2505e6ad248ad2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_162b1edac657a2b913151bd9eb4fbe88</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f0e23b330c886668c4062021668194c8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40d726fda489a1c234a0b534ecacfe97</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04226848c1f6676d5d12828527bbe760</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5095914d3cbb025a0d6aac568b55f21d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c3edf63746e510536e2209c4f74790b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68fada4b85eeeb4576ae4314a1f6c69d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7a339405a85eb0f5464fd4893fab5f38</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1954776611eb1c86124582314bf427b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aef32afad504b1071396a42013c6b17b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2993d643da7df604a81b78154f773532</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_434a01a1eaa9f8ea0f12fa38cc86c453</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0588b076fac871eb8e2a4c5d9cdbc553</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_12b73d1481c07da7865df0d065b450e6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0e7a43e996e80d453194330a8ed3f11</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f25e0fa6e94747a74fb65c2e71d8ac31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d7431b2c94cb5445e3e066d279054dee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bfa2589c564291038be68df577521fb5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8a233770be1ea02517aea1d491a29d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f0bc227efee7d62fc8bc61db3e5471e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb39c5c3e33e736497e724af3cccc4d4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3bc19b9884199fdc710cdee51c9a0c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bde725dec5049e051c40dcfa7a6b3e10</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_90d0e7bfa4de50246780198a0c858da5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e05fe1896a4b0ce5f526c6006518d178</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1a4c2fa04828ac730893f45a93ef3698</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19de10e61a5bd53ff5d4913aff040739</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_803509c06ca5aaaa90d9a8e2c5d222d8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d72688a5c7678405b765166bea50b1d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cada6632cae8a52e214a837e3267d0e2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b3e97a7e66c143d0251ccbe7cde9bf0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b258a3f1ed985569b14cc292d4f062a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_44890285ae972840acb7fc03af95f8a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9a8b683edfa9b3bb2067c4d957d6b15</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9b15259f8cf9c567bbf66a238cd4de2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7531dc1546b742034adfe6e6b0559dc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7949903a4ffda6c61f9bd94b417466a5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a190a4b7123778f984a9175409b465a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_561aafc05fb13321d6660e3e5555b986</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1421c0a47e3dbe8dd44d56c548f2667</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2fefbcfa18f7e08d9da1828066f18dff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d33629b1a43be4d4fc97fe1ed145920f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bde01c5aca51347c8865a0c509407d8b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8d1f858267672adbc9dc5366bd53d27</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3282a3934c744e272e3cf0b3269686c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_576a9965e700f5d41a374d9a28187a96</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eefbacc76931170a4ea17c2022ec5757</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_390e9dcfe214193481a10b9af1083ce4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3241ce7778482d1032af10add28c4a2c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17dbe5476fe79392899abcaae5cf9117</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_929ca49da902df81082614c71e6d25fa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b721e413260345943f070253883ba7d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_814736d241dbb628af2e09389656bead</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_995eecfde91f55e7db81020dafdc6484</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_421337515f97d9ecaf7895db876d2d92</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eebdc93f886c739a339805be5f8e4774</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f4b2c881057df82a62583269aed05987</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_daade3082a558d4e595a45abf8629c89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72b9c924ec274c7c886a4ed98f8a8301</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ca4a3323b2b598a4f2cfe0e093907a6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_760acfb77cdb848dc4fb1a35b2d50fac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d86c54db08f0aef13562f65ae976b5a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_91112a629bcba1179c05b03d07eb7cd0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bdac463198812b253df7def978d8df68</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7a1a8366fd6b78586a4de8e508299a03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc1b9b240bf46dd1e0c9fdd6080ed8d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c3443b4609860ba4a6635f507561497b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3d3e92fe5112cdef6c3026f146eb77a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39888ca3350f5d865940b893479f3fd6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d852647f1ed7c3d4c4460e05f03fe9df</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5ff34416fdf3ce894280e626bf32965b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2779ab2c084a6c9300b452e0870cc468</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25138bf74d511d93bb87178035abec9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_54b60a4cb6fb8642ee9dcd8e97b3d7e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bdf87d18bd60d247bf37f07ab8385323</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b590ede3d7ad6d45d345ebe724a6ac5d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9190c28aa9ba22acf6a469e7cfff3e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6edf95a0da67732daa9824f30bd2a223</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_118bd4b27338f43f5c5b9d74068dbd15</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_88c3296ee7fb124c64d681d82fcd1aac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eaf1d52896588dbfeb8ffb50a14e26dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5807979d39f22e1ad53b5bc8a0cebc52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53a5ea8629a0310ab1edab2f43a46d0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_16f684cda1f2dda9efc7f292e480aae1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93279fed7f4bc91c2e2c97e1091b50ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_44578f62d4b48754dd25ecc86c2098cf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a87d3cb27b2b551586cefdb73f048f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_151c5e537dbf7820271f0c72987fab56</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7a6113edb7c6b3c4e66d41e05085e2c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b04540e727218b48c8e4beb079e6fa3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63d96a7e7debd80c5af9fa8e1cbf994e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e9a5ee2ba193acc84cbb83922e06c594</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_87d1ca9a023a74ecc13d3db61f425be6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff68351be07c297d8088d1c8a70097c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5e9f7fa23b457dafe6f4e60811020a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_756b90a5a35da931f18f772c71f2eeea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_142625faf10be313b18ac3964b2891bc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_097c7823169ca412b4a759bc1b854587</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd9c29b735ebecb6d384f4956faca483</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c3f2ea96be087e752d3d3a140c8d44d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f8829ad1cdc293a1d287cb7ab01ad8a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f4d441952365a39b37e2f6bc3d3aac48</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e6afe0b30a390326c39d36c376c792e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b96d3f65fba02bcb61ea95dd16cec7b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f0b1e63e572d2eac17ed4d590c9d9da0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4968add71ea3a826a82447aa171aa219</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_96a558de467eb2587ee0518ea8a6d759</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7567871b10dfcf050393da6ad8a41762</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c714fcdf880709533910c12d4df6cfbc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5357360f31ebee4fa5849724bb381bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a194a389a5769c0e52fa3a081c31ebad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5583e1068f8296e4906025866ef3efaf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1bb96b79e9d378d280dad6340de0633</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_093ecf264d5207dcdc9ec3eb4a8cbb4d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3fb91a51cca898c581f56daec547febc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d0254085a67c9fece0cd2e51e48f1730</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c15ed5ef7895cb413182f47e0f2619cf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b378a194c9b650b6d5aaf20367d5faf4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad672598a0c5801bd3e8faef36df3baf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c0b1205f06443e8005075130e3d04922</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ee6ee34e3844dad2297764524b3da13</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3f4ccc736ad4f50368f72eb1ea67ac9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5d435ae45983aa932170779eb4e9b795</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f5de6e318469091b7d346fbd82e8dda</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0404b312ca036db731f1b25426c86ca1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_093f0c6cbe587f9b86f5252e9be9e01b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4acf82efbc6e6287dd4ea5b9fcddbfe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2ef1f414b78d083e3dcd1684b26c860</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_181675d49aafa86bdc556ac057733800</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b99f6a5f72cb259ac2eec18e479c856d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bdeb7f521fc5bb151d571bbfd6563245</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_530b853de2b5026b20ce37a8edd8e761</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b94bda2d2cf7b0c1606f1a7d5cf252ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4b2edd1a4b09c1e001c31a2fa1744a61</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a72358ce1f0578df171d7074a708b9c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1fcc2b6c8298ed99c3c562c3f4aa757a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_08494983516ea4b2dbafd6d641b71d65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a797970786b4e3fade09d1051baa8597</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9474109eecca8dd0ae0ee1b6c843fc3d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_808a8cc251d07dccb2bf89e56c47743d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e17789eaf770f781c6a2dae57e82193f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9995d0d7bb90c7d696f706409a6b55a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ba3e2c07a69a9a436c91a602a041645</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f1547ef0b6596e0380e0e85a24a880e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39465d133893ad3e98c74fdffc439826</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_532d0eea2252880eff8a1aea64e6987f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4d25dc4cea944b63a2f5ef072c0944d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4918f7f0e1872d1295f121fb65dd7767</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_55ccc25b70a5eb359541cf9a210586a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98e83f382d0d59e14a387dcc6ef0a549</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0bcedc7d67515eaddccb46cf6e5c0ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd38222e75a3164362f942142b74af98</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9e9aa45ad6e5f695d7979f7476bfe68d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_70df4da8f2eca9b5ab0c4e07bd4e5d4c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8db0dfc6c2657b8b5962073b9d35c337</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5af3193129dd234b1e15555c1727d562</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_79b5d4ddac1cf8370891eb117f8340a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5bde601105743d6b1df4ae480a5863dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a28166ff2ac73cce35fdea5f5d29833a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0045974f44665af1f0dbe018666f60e7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9b5c4f84bf443f6906a5e2dec4b5b851</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1f16d8791df8d9d141c11e17ee9b21f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9099e704b4fbade109a530698980329b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a9c4be34fe93a8a9b023aa6f355c477</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89b9aaa950f3f61367dbcd012831ecc1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84538a210a9673786e02bd28cbc35e9a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be3bd0cd9fdc677a4813b750663be03b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83a4a037c6d7a095e7664b722ea34c92</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_613ac1347a3c724e26414f30df071229</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7eccbe8a5ad3ce83134e6c589799283b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c503e39ca8b5215eb860f0241d55c3cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1a93a001266dd7259ee638281254b050</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d53b7a0d5700a750a7d4b79f7d398439</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9dd84d0c97f3afb73def0eea37f9de9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6590754045f3dfd9c26a3d3d9d72ce85</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8d3aff117e685e411f3be3fef4d8520</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51d53f2245a8d6f7ac559d9db62cc03f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ca7c6d87d9c4411944228c895f71f190</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ab4e9065f3bb618059967e4016a61e91</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_346d2ee11f96253f5912e822bda98dd1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_20ad8bd4d44f021dcd573a07f77c1e31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b15fdb0e12f5cbd4137463d4abb0dade</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d50db61c5c7f10a3251008dda838aa04</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c79bdce2008f062bba1bd3c1625d50d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_723ef5c092da5bb44028f9d17f27839c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e6d26bae7c03081edb1f3894e72fd6e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b6df1a51773e0df1d8bf5a576cc2088</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4c629eb2807c0cb887fa01ca27a6f63b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a260be39911dc01d6f1d1742e07b010</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb29999de137c23c86c016f76206bcbc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a619cd6b085afda11cf255be70fad4a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7289ff1c93b7358e515f0e7425133c53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4b67ff277c160643984da29fa7dacd49</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db2a53d44060611569c295af9447b672</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0284544fb3702b28d87b30e6b57b212d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c57eddb086715660d08856b9d8926613</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fe8048fb426408917d4ec4e025cb53bc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1b9929764949861a2f72ec2d48f2105b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a06eebd18037690062c3dd74b75b3ab0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9194e7fd3c042dcd07aaad7eba9c23b2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f62cde25618c85cef6cc435f439d13e7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f4c217e07e26ca04e1024b69c2e53a43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72a1b09da47d653474f3e7649f21d7c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5537cdb32778fc4bbba8937ce6123fef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bbe92e6ffec6a342f7cd01329ea528ca</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2f2d2fc35726f0e72e32c3c927335c6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_af9fd0814b37521a016be6e6dfd0294b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_adfda7652db29064b9fd5374dc77dbfa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f508915ada96807fae7fbeca7ed78447</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f89a1d1d63dc2614b5f18f8fa9f540b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4664eb1b7e249130e040bc7b98e9e2b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75d9ef6ec38ecb8368746307e0f4bd83</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f0307c90a1d7b3f10d80feb32656c53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6e39cad74c475830c8fc13a95f464ef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d94452e8742a31b484c3c2abf9bb86c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3686d828ba35efc8f53e5229bc50f759</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3a3b250c82433b037d9ba271bb5eb81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa09ea4905816d662179b59a6844375b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_57d11c87812003463bc851cb2425f558</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_042a779f6f1229579dea058d6f0e8a4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c149b178af805dafff2e5dbcc00487f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9703e80f7490f1a2f53a1571f3e6a5d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_043e910842ae920e11dccf77d8354636</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa26fedad71ba51889337618b9a43760</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5ae5334860f451e9602cfff98451cae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ee580ed877dc1db6df2526c158a6688</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_48574cb73cf4fc02c45cb091b1f2d9a6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f6b7e387ac47978869a2fe98ebe000af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_77bacece8a2d0dc72426f5afbdba16db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_07608d84a9ce3a082b3afc54be92d82d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27fce3ee44261b5337f06edd4aac8f01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ac231253ef6e06d8430bcc344d779044</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c7e72274e0900adabd98302589392f0a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6555e503857326c3c933e2faacc9f108</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f34b28c0557c2c9b99ee5d3f56289187</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93e4b0c25ce58f2ea3f08cf9c5d7c858</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9ef3eb2c22dce5ce7aeb5dcf2cd5c604</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c850b894e23681042c9542ea1aaa83c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4e3a7fc4e6060ff832ad32c60e10c6ec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c5bfb89b3a9b56ea246092e4ad588246</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c426cf479d8cfdc5ffdd5a7db013ed9f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c91a18bfb9851e36477001288b9b502c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9fa5a8d732179a3ec0c894a369789e94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c1847fa97ae6045ebef78b9cd3324ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_092f80c1218c9555da91bd538e826751</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_99dbbd103e9d50cfd537801546f2e4c7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ec843ce86ca2e60ed184dc7c52a95ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d343a7f29a160575da4fd4f0747f88b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4c1369b3667f8a67dd7c2eb4ecec4ea1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8a4526371b9a240d82b6d6e0734779d8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ea3fcd5f8686bee026fe9d950aeb9e1e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c8135d05babe4131442e9cd1efc2fbf6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1f634418c996de597edf6a52a31d04c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_515a6b38b328d7689c5eba703ac75c9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_14ded801c4e7449d87b997f8ea0824ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_154eb6e45d6bb75b4eda2afe54111a23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a8463ade2a3a0daab90007baa88a0566</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d3eb77cb709c978f35c4e58be38e2c9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5d66d6f20ea4a5536b46d5fbfb5cbdf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b490823dd019071ffe37fcf1144122e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1ec15c078a00d9e5fdda2387765b1c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c76df5c434ca997dc77458e4236516db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4315620600361dbaff6826b16437fbba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f35e8bde180f7e141a28cdc107155365</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_486d8edad21a78fae0351e0faeb4b1be</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f2ac8000d4a31bde66b3fac51620668</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c63d40793bad02765aacb1c9649e0d01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_37cae6a4ab2f252074914360aa30761c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d8e8e3552c3eda279341261f1120ee5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6d8c852e5befe987d67c7b0de6c7bf79</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c6cdb5765fd7ff52757528a10f2b360e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5edd177b358747a3bff85bd3c84c75b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a41528e3e145faf62a4a57ce10745db9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eb1356143d49ed01714591c2f9eaa8cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_62b6e555fd982aa0a86e02a8735bf168</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8a54c94e03a3a08f93403ec4c57871d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9cb3570f347ab5d4003b6aa0e233300d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b69ced104e05f34d4dabbe68c67508b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ca1968c21a75ed962e08dc05e1cf70e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_404af98fc1cac7adb48933a41be2b6bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15ead6e65127c3a5c804a43cb1633392</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c76335a705d0e6479be3fcfc84899a31</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5704c1177e1f2c41df148d32e3e3982</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b5f62c37865dcd12776b4d6611cc01d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fe8af06ef239ce60cf9ebdf999c3c4b2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23edb339861da3096b3de6c87b6eb830</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b00131c2273c2f97932b3ce003b9a211</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e2794fb4bfdeec65c156e16e61e3b1c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e1004fca01132e53fa677612086aded6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e0201f442c75ab1c57b5db35fc62cad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd7847a37a8251988ad1c1bf1435f894</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_901350712dbb66e6f6b4abb12d618abe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee96880b244a5e014a8d1a7957f0d15c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f835101a788c0aef39c15cfedb6b292f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_546e294289b8c20f1f1f63ee767b21b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c30bfd00e16d822daf1e3062ec52509a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f87e70a804832591b99a051ddd351047</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40f49daa9f903cac65c5458cfdda201b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de2b0f554b1c5d21221e63e75567c439</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a5cdabca74c7c517afa45437eddae23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7e5776115d15bd8f78808d2b3d43405f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e47d0bb68262c34a517fbbb516fb93a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9f29a34083e2d9b303ab8b31a257f65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_12e9301c9f23dc2ee994ba2ba63ebe93</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4420</wp:comment_id>
    <wp:comment_author><![CDATA[Ali Erturk]]></wp:comment_author>
    <wp:comment_author_email>alierturk12@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.40.150.32</wp:comment_author_IP>
    <wp:comment_date>2014-11-13 21:03:19</wp:comment_date>
    <wp:comment_date_gmt>2014-11-13 20:03:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I recommend License4J (license4j.com), it is feature rich api and application.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[3254965929]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1415950755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1415950755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415950755.32590198516845703125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415912724.7562220096588134765625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1415908999]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415908999.5023860931396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Object Interning]]></title>
  <link>https://javax0.wordpress.com/2014/03/11/object-interning/</link>
  <pubDate>Tue, 11 Mar 2014 09:00:04 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=368</guid>
  <description/>
  <content:encoded><![CDATA[Java stores the string constants appearing in the source code in a pool. In other words when you have a code like

[sourcecode language="java"]
String a = &quot;I am a string&quot;;
String b = &quot;I am a string&quot;;
[/sourcecode]

the variables <tt>a</tt> and <tt>b</tt> will hold the same value. Not simply two strings that are equal but rather the very same string. In Java words <tt>a == b</tt> will be true. However this works only for Strings and small integer and long values. Other objects are not interned thus if you create two objects that hold exactly the same values they are usually not the same. They may and probably be equal but not the same objects. This may be a nuisance some time. Probably when you fetch some object from some persistence store. If you happen to fetch the same object more than one time you probably would like to get the same object instead of two copies. In other words I may also say that you only want to have one single copy in memory of a single object in the persistence. Some persistence layers do this for you. For example JPA implementations follow this pattern. In other cases you may need to perform caching yourself.

In this example I will describe a simple intern pool implementation that can also be viewed on the <a href="http://stackoverflow.com/questions/3323807/generic-internpoolt-in-java/22044014#22044014">stackoverflow topics</a>. In this article I also explain the details and the considerations that led to the solution depicted there (and here as well). This article contains more detailed tutorial information than the original discussion.

<h3>Object pool</h3>

Interning needs an object pool. When you have an object and you want to intern that object you essentially look in the object pool to see if there is already an object equal to the one in hand. In case there is one we will use the one already there. If there is no object equal to the actual one then we put the actual object into the pool and then use this one.

There are two major issues we have to face during implementation:
<ul>
	<li>Garbage Collection</li>
	<li>Multi-thread environment</li>
</ul>

When an object is not needed anymore it has to be removed from the pool. The removal can be done by the application but that would be a totally outdated and old approach. One of the main advantage of Java over C++ is the garbage collection. We can let GC collect these objects. To do that we should not have strong references in the object pool to the pooled objects.

<h3>Reference</h3>

If you know what soft, weak and phantom references, just jump to the next section.

You may noticed that I did not simply say "references" but I said "strong references". If you have learned that GC collects objects when there are no references to the object then it was not absolutely correct. The fact is that it is a strong reference that is needed for the GC to treat an object untouchable. To be even more precise the strong reference should be reachable travelling along other strong references from local variables, static fields and similar ubiquitous locations. In other word: the (strong) references that point point from one dead object to another does not count, they together will be removed and collected.

So if these are strong references, then presumably there are not so strong references you may think. You are right. There is a class named <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/Reference.html"><tt>java.lang.ref.Reference</tt></a> and there are three other classes that extend it. The classes are

<ol>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/PhantomReference.html"><tt>PhantomReference</tt></a></li>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html"><tt>WeakReference</tt></a> and</li>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/ref/SoftReference.html"><tt>SoftReference</tt></a></li>
</ol>

in the same package. If you read the documentation you may suspect that what we need is the weak one. Phantom is out of question for use to use in the pool, because phantom references can not be used to get access to the object. Soft reference is an overkill. If there are no strong references to the object then there is no point to keep it in the pool. If it comes again from some source, we will intern it again. It will certainly be a different instance but nobody will notice it since there is no reference to the previous one.

Weak references are the ones that can be use to get access to the object but does not alter the behavior of the GC.

<h3>WeakHashMap</h3>

Weak reference is not the class we have to use directly. There is a class named <a href="http://docs.oracle.com/javase/7/docs/api/java/util/WeakHashMap.html"><tt>WeakHashMap</tt></a> that refers to the key objects using soft references. This is actually what we need. When we intern an object and want to see if it is already in the pool we search all the objects to see if there is any equal to the actual one. A map is just the thing that implements this search capability. Holding the keys in weak references will just let the GC collect the key object when nobody needs it.

We can search so far, which is good. Using a map we also have to get some value. In this case we just want to get the same object, so we have to put the object into the map when it is not there. However putting there the object itself would ruin what we gained keeping only weak references for the same object as a key. We have to create and put a weak reference to the object as a key.

<h3>WeakPool</h3>

After that explanation here is the code. It just says if there is an object equal to the actual one then <tt>get(actualObject)</tt> should return it. If there is none, <tt>get(actualObject)</tt> will return null. The method <tt>put(newObject)</tt> will put a new object into the pool and if there was any equal to the new one, it will overwrite the place of the old one with the new.

[sourcecode language="java"]
public class WeakPool&lt;T&gt; {
  private final WeakHashMap&lt;T, WeakReference&lt;T&gt;&gt; pool = new WeakHashMap&lt;T, WeakReference&lt;T&gt;&gt;();
  public T get(T object){
      final T res;
      WeakReference&lt;T&gt; ref = pool.get(object);
      if (ref != null) {
          res = ref.get();
      }else{
          res = null;
      }
      return res;
  }
  public void put(T object){
      pool.put(object, new WeakReference&lt;T&gt;(object));
  }
}
[/sourcecode]

<h3>InternPool</h3>

The final solution to the problem is an intern pool, that is very easy to implement using the already available <tt>WeakPool</tt>. The <tt>InternPool</tt> has a weak pool inside, and there is one single synchronized method in it <tt>intern(T object)</tt>.

[sourcecode language="java"]
public class InternPool&lt;T&gt; {
  private final WeakPool&lt;T&gt; pool = new WeakPool&lt;T&gt;();
  public synchronized T intern(T object) {
    T res = pool.get(object);
    if (res == null) {
        pool.put(object);
        res = object;
    }
    return res;
  }
}
[/sourcecode]

The method tries to get the object from the pool and if it is not there then puts it there and then returns it. If there is a matching object already there then it returns the one already in the pool.

<h3>Multi-thread</h3>

The method has to be synchronized to ensure that the checking and the insertion of the new object is atomic. Without the synchronization it may happen that two threads check two equal instances in the pool, both of them find that there is no matching object in it and then they insert their version into the pool. One of them, the one putting its object later will be the winner overwriting the already there object but the looser also thinks that it owns the genuine single object. Synchronization solves this problem.

<h3>Racing with the Garbage Collector</h3>

Even though the different threads of the java application using the pool can not get into trouble using the pool at the same time we still should look at it if there is any interference with the garbage collector thread.

It may happen that the reference gets back null when the weak reference <tt>get</tt> method is called. This happens when the key object is reclaimed by the garbage collector but the weak hash map in the weak poll implementation still did not delete the entry. Even if the weak map implementation checks the existence of the key whenever the map is queried it may happen. The garbage collector can kick in between the call of <tt>get()</tt> to the weak hash map and to the call of <tt>get()</tt> to the weak reference returned. The hash map returned a reference to an object that existed by the time it returned but, since the reference is weak it was deleted until the execution of our java application got to the next statement.

In this situation the <tt>WeakPool</tt> implementation returns null. No problem. <tt>InternPool</tt> does not suffer from this also.

If you look at the other codes in the before mentioned <a href="http://stackoverflow.com/questions/3323807/generic-internpoolt-in-java/22044014#22044014">stackoverflow topics</a>, you can see a code:

[sourcecode language="java"]
public class InternPool&lt;T&gt; {

    private WeakHashMap&lt;T, WeakReference&lt;T&gt;&gt; pool = 
        new WeakHashMap&lt;T, WeakReference&lt;T&gt;&gt;();

    public synchronized T intern(T object) {
        T res = null;
        // (The loop is needed to deal with race
        // conditions where the GC runs while we are
        // accessing the 'pool' map or the 'ref' object.)
        do {
            WeakReference&lt;T&gt; ref = pool.get(object);
            if (ref == null) {
                ref = new WeakReference&lt;T&gt;(object);
                pool.put(object, ref);
                res = object;
            } else {
                res = ref.get();
            }
        } while (res == null);
        return res;
    }
}
[/sourcecode]

In this code the author created an infinite loop to handle this situation. Not too appealing, but it works. It is not likely that the loop will be executed infinite amount of time. Likely not more than twice. The construct is hard to understand, complicated. The morale: single responsibility principle. Focus on simple things, decompose your application to simple components.

<h3>Conclusion</h3>

Even though Java does interning only for String and some of the objects that primitive types are boxed to it is possible and sometimes desirable to do interning. In that case the interning is not automatic, the application has to explicitly perform it. The two simple classes listed here can be used to do that using copy paste into your code base or you can

[sourcecode language="xml"]
        &lt;dependency&gt;
          &lt;groupId&gt;com.javax0&lt;/groupId&gt;
          &lt;artifactId&gt;intern&lt;/artifactId&gt;
          &lt;version&gt;1.0.0&lt;/version&gt;
        &lt;/dependency&gt;
[/sourcecode]

import the library as dependency from the maven central plugin. The library is minimal containing only these two classes and is available under the Apache license. The source code for the library is on <a href="https://github.com/verhas/intern">GitHub</a>.

<h3>Poll</h3>

After we managed to have a pool, now lets to have a poll! Please answer the following questions, honestly:

[polldaddy poll=7857636]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>368</wp:post_id>
  <wp:post_date>2014-03-11 10:00:04</wp:post_date>
  <wp:post_date_gmt>2014-03-11 09:00:04</wp:post_date_gmt>
  <wp:post_modified>2014-03-21 11:29:04</wp:post_modified>
  <wp:post_modified_gmt>2014-03-21 10:29:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>object-interning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202481663055594]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/O1y5JfALHQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5849079724294692864&type=U&a=_LTh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1c0b3207d3d6daf1029277f4d8cf0214</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-polldaddy"><script type="text/javascript" charset="utf-8" src="https://secure.polldaddy.com/p/7857636.js"></script><noscript><a href="https://polldaddy.com/poll/7857636/">InternPool Usage</a></noscript></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_1c0b3207d3d6daf1029277f4d8cf0214</wp:meta_key>
    <wp:meta_value><![CDATA[1520959917]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>176</wp:comment_id>
    <wp:comment_author><![CDATA[Objektum InternÃ¡lÃ¡s | tifyty]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://tifyty.wordpress.com/2014/04/02/objektum-internalas/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.38.52</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 07:17:50</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 06:17:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a cikk az eredeti angol nyelvÅ± cikk alapjÃ¡n [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396419470.7588880062103271484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396419758]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396419758.631946086883544921875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 06:17:50]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9099</wp:comment_id>
    <wp:comment_author><![CDATA[Java &#8211; String Object | String Literal | String intern() | Codinko]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://codinko.com/2015/11/01/java-string-object-string-literal-string-intern/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.13</wp:comment_author_IP>
    <wp:comment_date>2015-11-01 04:10:07</wp:comment_date>
    <wp:comment_date_gmt>2015-11-01 03:10:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] https://javax0.wordpress.com/2014/03/11/object-interning/ [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1446367720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1446367720.3560979366302490234375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446351796.7798349857330322265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446347408.45514392852783203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10025</wp:comment_id>
    <wp:comment_author><![CDATA[Chris Hennick]]></wp:comment_author>
    <wp:comment_author_email>polymorpheus@google.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>208.54.5.222</wp:comment_author_IP>
    <wp:comment_date>2016-06-22 13:28:50</wp:comment_date>
    <wp:comment_date_gmt>2016-06-22 12:28:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Why not use Collections.newSetFromMap(new WeakHashMap&lt;T, Boolean&gt;)? And not use a ClassToInstanceMap to make InternPool a singleton for each T?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1466598531.9364340305328369140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1466606374]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1466603741.4729421138763427734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1466606374.7059690952301025390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1466606374]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12227</wp:comment_id>
    <wp:comment_author><![CDATA[Thomas Wolkenstein]]></wp:comment_author>
    <wp:comment_author_email>thomas@wolkenstein.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.164.197.62</wp:comment_author_IP>
    <wp:comment_date>2018-03-07 14:31:07</wp:comment_date>
    <wp:comment_date_gmt>2018-03-07 13:31:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[With Collections.newSetFromMap there is no way to access the interned shared object. You can not exchange a new Object with the shared one.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10025</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1520429468.7124559879302978515625;s:5:"event";s:9:"check-ham";s:4:"user";s:17:"thomaswolkenstein";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1520430670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1520430670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1520430671.0566489696502685546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31476</wp:comment_id>
    <wp:comment_author><![CDATA[Robert]]></wp:comment_author>
    <wp:comment_author_email>integrity256@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>184.22.215.176</wp:comment_author_IP>
    <wp:comment_date>2021-11-28 13:02:25</wp:comment_date>
    <wp:comment_date_gmt>2021-11-28 12:02:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article! I am pretty much the same solution in my implementation of an Interner.

However, I am worried that there is still a potential race condition with GC. Consider the following sequence of events while executing the following code from WeakPool.get:

<pre><code>  WeakReference&lt;T&gt; ref = pool.get(object);
  if (ref != null) {
      res = ref.get();
  }else...
</code></pre>

Just after executing ref = pool.get(object)  you have a weak reference ('ref') to the potential "canonical instance" ('res'), but you do not yet have a strong reference to it...

What <em>might</em> the GC do in that nano second of time?

Is it possible that the GC could decide "res isn't strongly reachable, therefore i can reclaim it", and delete the weak hash map entry <em>before</em> finalizing and reclaiming the weak reference in 'ref'?
i.e. could your "res = ref.get()" give you a strong ref to res just after GC has deleted the weak hash map entry? If so you will now be using an object that is no longer interned in the pool...

I am hoping the above scenario is not actually possible. Ideally GC should guarantee that if, for example, a call to WeakRef.get() gives you a strong reference, then <em>no</em> actions have been taken to start nullifying/reclaiming <em>any</em> weak references to that object. Maybe the "finalizable, finalized, and then reclaimed" sequence of GC ensures this? But I am not an expert on GC, so not sure whether that is a contractual guarantee of GC?

If the race condition is possible, there might be a simple solution: If you do get a non null 'res', then maybe you could immediately execute a 'put' to ensure it is in the pool even if GC just removed it?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1638697794]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1638697794]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1638697794.577957;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638105615.750489;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638100946.833354;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Logging or Commenting ?]]></title>
  <link>https://javax0.wordpress.com/2014/06/25/logging-or-commenting/</link>
  <pubDate>Wed, 25 Jun 2014 10:58:29 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=385</guid>
  <description/>
  <content:encoded><![CDATA[When my recent <a href="http://javax0.wordpress.com/2014/03/05/logging-or-debugging/">article</a> was republished on <a href="http://java.dzone.com/articles/logging-or-debugging">dzone</a> Jonathan Fisher added a valuable comment stating:

<blockquote>
...
I think I have something else you should write an article on: "Logging or Commenting?" I see debug statements as "living comments", one that explain the execution of the program to the next guy, but also provides valuable intel in production.
</blockquote>

I have seen that practice only once. There was a coding environment with strict coding rules that forbid commenting. They said you should comment Javadoc on the interfaces but nothing else. If your code is not readable reading the code and the unit tests then your code has to be changed.

In this environment programmers, who wanted to comment, soon started using logs. But before getting to that let's see why.

<h3>Is Commenting Bad?</h3>

Generally commenting is bad. It was not bad when assembly and FORTRAN were the programming languages. Those languages were to generate executable code and not to express ideas. Languages today focus more on expressiveness, ease of coding and the translation from ideas to executable is done by compiler more than this was possible in the era of FORTRAN. Now we have the CPU and memory to compile languages like Java, Groovy, Scala. When these language are at hand and you feel like needing comments you have to think about two things:

<ol>
	<li>Is your code really readable? Could not it just been rewritten to express the ideas carved into the comment?</li>
	<li>Is the information you want to type as a comment really a comment? Or it should be part of the documentation, and should not be put into the code?</li>
</ol>

If you think you can not write the code more expressive because the business domain is just complex and does not fit the code, please visit the article <a href="http://blog.jooq.org/2013/02/26/the-golden-rules-of-code-documentation/">The Golden Rules of Code Documentation</a> and the <a href="http://javax0.wordpress.com/2013/04/07/to-comment-or-not-to-comment-that-is-the-question/">rant</a> to the challenge.

Comments are to be read by programmers, who maintain your code. If the words would rather fit the documentation in a Wiki, do not distract the programmers following you.

<h3>Are logs bad?</h3>

Generally logging is good. However if logging is to overcome the commenting restrictions then a good weapon is used for the bad. Don't. It is a more general concept than logging. As a matter of fact even broader than programming. Don't use a tool it was not designed for.

There is a fear that logging decreases performance. Using modern logging libraries and solutions this should not be a factor to seriously consider except edge cases. Even if it is, first measure and then tune. Do not prejudice or have a-priory assumptions about performance.

<h3>Conclusion</h3>

Logging should add to readability. Since it is a separate aspect, different from the original business aspect the code was developed for, there is a danger that inserting the logging statements will decrease readability. When you develop code you should pay attention to this. For example I recommend that you never externalize or use fields/variables to store the logging strings. Logging texts should make sense where the statements are.

Insert logging statements bravely, never hesitate. When you code review take into account that there are two sequences of logging statements. One sequence is linear as you read the code. The other sequence is how the printouts get into the log file following the program execution. Perhaps making a log review involving production, support people can be a good practice. It can be similar to code review: a fresh eye looks at the generated logs and gives feedback on readability. I have experienced this ad-hoc but never as a planned activity. If anyone tried, give feedback.

And generally: do logging for logging. Use commenting for commenting. If you have to dig a grave, use a shovel. If you have a nail: use a hammer. Use the appropriate tool and do not mix usage.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>385</wp:post_id>
  <wp:post_date>2014-06-25 11:58:29</wp:post_date>
  <wp:post_date_gmt>2014-06-25 10:58:29</wp:post_date_gmt>
  <wp:post_modified>2014-06-28 22:01:03</wp:post_modified>
  <wp:post_modified_gmt>2014-06-28 21:01:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>logging-or-commenting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203191681605614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/Duyubqh63iA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/HW4aTxVkF8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5887519018306281472&type=U&a=Lf3s]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f2154a963019335b3842259f2b18ca6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_91038f5c0c09adde2f7c1936f93a0ff0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_141975448f15ec0a170c54aca72eaf6e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32582ca8c55de368df6164af2e8c7fec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c6dcba70f4487c9188d0f8e437410ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e40812ff1a1c2efe7697fcea23cd7909</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e571f91ad58676cbc3b59c8b33bf6a18</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8dfff4da8214ebe5264e36f510c06c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e13c88fce4a6f64d0685cee9ec7450c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_681216a6a0bfa34ede6cff87049a7f0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3a24e4ff7e78904d00f9012fe984e662</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_094d80b5b7aec688b35e601797ea16c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93ec53ad43c47f2bf7ff2f20dc12afc4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_939c8e805ce9d296c316b4cf41fa92c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed1aac56fa8e68b7aa8b2e7734a2abd7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd309646e7d92f509e06306c9229200d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ef7cf58c3b7a2bcca1427b9894b22fc1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_039594e48914ec8a4029de6fb315e73c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1f6f0d564987304dafae5b28b3a62be</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0aa94f377e754b682bc47bedf0514ffa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_48c6bd6dfd9e0efb305c26d8b2c424c6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c5dd673188a71ee35b22faf4010bb621</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5bf62d2aa88f0eead42e70fc2dcdfc8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_57602b1f3efbdef41231d165b452e49c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_82dd7b92224b03bd1674d58e3ad24182</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0eed74b1d13d1cefd944b2de013198ba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f89970a6d6ae02faf9c852bb4aa29722</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a7a7656fc8cc810819fba1a3a2c3c23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_115f7c18cba37a632a4fc07f8bb5cbcc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_87a1103af1f879e0806d99345ba44aad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a74c0122a9b61db1a3132ca5fdebb13e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68126eee716ddcc67a85dc2d31b003b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc65f8d4699c5440792e5ed799b59d69</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e953b776bb89928761a41ebd45e755ad</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dbd7be77d751c89c8bf8108ef405d618</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5b445c011314705da6d9ab26ccbc9f6b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7dc16bfa2e898fb99a2bd4d05ea20514</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33d0c69e4eb6c0f5eac0f9207369e490</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2251b2b0ff89a51d70f2f15f1ad4a608</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4779686ceb57fd44c5fc97a1e6a75b7e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bbf6c46ec11b3150c3c9807076d091da</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_334d4b2e42dfa962ec975786a3928137</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e328c1d7b6f10602be20fd5cc18c36b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd08e59468ef749969f6eda15e7ec7c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_385479aceb8b1204fee7ef78396c8850</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7843ad826463adbf4c89d478ba671070</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_26a9d741f4868fed46575c6f85ea9285</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_78aad1046a837ed0ac912a88a0d1aa34</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8b888067a8221f31c1f8eb3ac00f506</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1073aa70c743d1bca13225a81f776fc2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75b3386610ecc2767407d2dcb3caf462</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_deb79dafab9f137320933b6dff64f44f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9fdff21b40431cc296b6df165f556678</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0f8609e9de1180247fc64993e41bb06f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_acfe01b2aadd97f05b82c18a9ff99347</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f3c19761493dd8ebf2e0cc00578c2d54</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a945213df90618cec5200ba9cacd626</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bc8c55d67f5b038b4626b33a16a3af1f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c972373c160264170e72c0885b1aaac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75cd4e46b16a939d41c177f353753a9d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Documenting API using Concordion]]></title>
  <link>https://javax0.wordpress.com/2014/03/19/documenting-api-using-concordion/</link>
  <pubDate>Wed, 19 Mar 2014 09:00:43 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=397</guid>
  <description/>
  <content:encoded><![CDATA["<a href="http://www.concordion.org/">Concordion</a> is an open source tool for writing automated acceptance tests in Java." It is a handy little tool, simple to use and even the source code of the tool is good style. You describe the tests using HTML with special markups and when you run your special unit tests using the ConcordionRunner it processes the HTML and replaces the special tags with the actual values fetched from the tests. In the end you get an HTML colored with red and green spots where some tests failed or succeeded respectively. This is a result good for the eyes, BAs and easy to spot any error. This way it is similar to <a href="http://www.fitnesse.org/">fitnesse</a> and <a href="http://www.greenpeppersoftware.com/">GreenPepper</a>.

Even though the tool was designed for automated acceptance test &mdash; which one could argue is a non-sense term &mdash; I wanted to use it to document API.

The usual way to document API is JavaDoc. JavaDoc includes the signature of the methods, and comments. The comments are supposed to depict the way the method should be used. This is fairly good approach but has some shortages:

<ul>
	<li>The comments become outdated. Developers change the way the method is to be used, but forget to update the JavaDoc.</li>
	<li>A method many times should be used in different ways together with other objects and methods.</li>
</ul>

For this reason many developers believe that unit tests are the real documentation of an API. Two approaches with good and bad aspects. How could we leverage the best of the both world?

I decided to write a small library that can be included into Concordion fixtures using delegation and which can read the source code of the fixture or just any other source code, cut off some lines from the code and return them as string. Referencing the method Concordion output can include (presumably preformatted) Java code. This way the resulting HTML will contain living documentation including actual code without manual copy pasting that decreases the danger of the documentation getting outdated.

The <a href="https://github.com/verhas/concordionsnippet">project</a> is available from GitHub and also from Sonatype repo. The <a href="http://verhas.github.io/concordionsnippet/">documentation</a> of the project was also created this way.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>397</wp:post_id>
  <wp:post_date>2014-03-19 10:00:43</wp:post_date>
  <wp:post_date_gmt>2014-03-19 09:00:43</wp:post_date_gmt>
  <wp:post_modified>2014-03-14 14:01:49</wp:post_modified>
  <wp:post_modified_gmt>2014-03-14 13:01:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>documenting-api-using-concordion</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5851976013076381696&type=U&a=JRgs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202529924302095]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/YsMS3TweCL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>158</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.132</wp:comment_author_IP>
    <wp:comment_date>2014-03-19 10:16:04</wp:comment_date>
    <wp:comment_date_gmt>2014-03-19 09:16:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That comes from the locale setting on my mac. It is just funny. I did not recog that but it does not hurt :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>157</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395220565]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395220565.715054035186767578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22601568839]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395220566]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-19 09:16:04]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>157</wp:comment_id>
    <wp:comment_author><![CDATA[kirunews]]></wp:comment_author>
    <wp:comment_author_email>kirunews@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://europeana.eu</wp:comment_author_url>
    <wp:comment_author_IP>194.171.184.14</wp:comment_author_IP>
    <wp:comment_date>2014-03-19 10:12:29</wp:comment_date>
    <wp:comment_date_gmt>2014-03-19 09:12:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the tip. I did not hear about Concordion so far, but I'll give it a try.
A small note. The http://verhas.github.io/concordionsnippet/ page says: "Results generated by Concordion in 409 ms on 13-mÃ¡rc.-2014 at 20:00:54 CET". "on 13-mÃ¡rc.", seriously?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395220349.370810031890869140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"kirunews";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1395220349]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22601521030]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395220412]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395220413]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395220413.580586910247802734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-19 09:12:29]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java 8 default methods: what can and can not do?]]></title>
  <link>https://javax0.wordpress.com/2014/03/26/the-true-nature-of-java-8-default-methods/</link>
  <pubDate>Wed, 26 Mar 2014 07:00:11 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=411</guid>
  <description/>
  <content:encoded><![CDATA[<h3>What default method is</h3>

With the release of Java 8 you can modify interfaces adding new methods so that the interface remains compatible with the classes that implement the interface. This is very important in case you develop a library that is going to be used by several programmers from Kiev to New York. Until the dawn of Java 8 if you published an interface in a library you could not add a new method without risking that some application implementing the interface will break with the new version of the interface. 

With Java 8 is this fear gone? No.

<blockquote>
<b>Adding a default method to an interface may render some class unusable.</b>
</blockquote>

Let's see first the fine points of the default method.

In Java 8 a method can be implemented in an interface. (Static methods can also be implemented in an interface as of Java8, but that is another story.) The method implemented in an interface is called default method and is denoted by the keyword <tt>default</tt> as a modifier. When a class implements an interface it may, but does not need to implement a method implemented already in the interface. The class inherits the default implementation. This is why you may not need touch a class when an interface it implements changes.

<h3>Multiple inheritance?</h3>

The things start to get complicated when a concrete class implements more than one (say two) interfaces and the interfaces implement the same default method. Which default method will the class inherit? The answer is none. In such a case the class has to implement the method itself (directly or by inheritance from a higher class).

This is also true when only one of the interfaces implement the default method and the other one only declares it as abstract. Java 8 tries to be disciplined and avoid "implicit" things. If the methods are declared in more than one interfaces then no default implementation is inherited, you get a compile time error.

However you can not get a compile time error if you have your class already compiled. This way Java 8 is not consistent. It has its reason, which I do not want to detail here or get into debate for various reasons (e.g.: the release is out, debate time is long over and was never on this platform).

<ul>
	<li>Say you have two interfaces, and a class implementing the two interfaces. </li>
	<li>One of the interfaces implement a default method <tt>m()</tt>.</li>
	<li>You compile all the interfaces and the class.</li>
	<li>You change the interface not containing the method <tt>m()</tt> to declare it as an abstract method.</li>
	<li>Compile the modified interface only.</li>
	<li>Run the class.</li>
</ul>
<a href="http://javax0.files.wordpress.com/2014/03/multiple-inheritance.png"><img src="http://javax0.files.wordpress.com/2014/03/multiple-inheritance.png?w=300" alt="default method multiple inheritance" width="300" height="207" class="alignleft size-medium wp-image-421" /></a>
In this case the class runs. You can not compile it again with the modified interfaces, but if it was compiled with the older version: it still runs. Now

<ul>
	<li>modify the interface having the abstract method <tt>m()</tt> and create a default implementation.</li>
	<li>Compile the modified interface.</li>
	<li>Run the class: failure.</li>
</ul>

When there are two interfaces providing default implementation for the same method the method can not be invoked in the implementing class unless implemented by the class (again: either directly or inherited from another class).
<a href="http://javax0.files.wordpress.com/2014/03/multiple-inheritance2.png"><img src="http://javax0.files.wordpress.com/2014/03/multiple-inheritance2.png?w=300" alt="invalid multiple inharitance of default methods" width="300" height="196" class="alignright size-medium wp-image-423" /></a>
The class is compatible. It can be loaded with the new interface. It can even start execution so long as long there is no invocation to the method having default implementation in both interfaces.

<h3>Sample code</h3>
<a href="http://javax0.files.wordpress.com/2014/03/multiple-inheritance-directory.png"><img src="http://javax0.files.wordpress.com/2014/03/multiple-inheritance-directory.png" alt="directory structure of test" width="104" height="159" class="alignleft size-full wp-image-426" /></a>

To demonstrate the above I created a test directory for the class <tt>C.java</tt> and three subdirectories for the interfaces in files <tt>I1.java</tt> and <tt>I2.java</tt>. The root directory of the test contains the source code for the class <tt>C</tt> in file <tt>C.java</tt>. The directory <tt>base</tt> contains the interface version that is good for execution and compilation. <tt>I1</tt> contains the method <tt>m()</tt> with default implementation. The interface <tt>I2</tt> does not contain any method for now.

The class contains a main method so we can execute it in our test. It tests if there is any command line argument so we can easily execute it with and without invoking the method <tt>m()</tt>.

[sourcecode]
~/github/test$ cat C.java 
public class C implements I1, I2 {
  public static void main(String[] args) {
    C c = new C();
    if( args.length == 0 ){
      c.m();
    }
  }
}
~/github/test$ cat base/I1.java 
public interface I1 {
  default void m(){
    System.out.println(&amp;amp;quot;hello interface 1&amp;amp;quot;);
  }	
}
~/github/test$ cat base/I2.java 
public interface I2 {
}
[/sourcecode]

We can compile and run the class using the command lines:

[sourcecode]
~/github/test$ javac -cp .:base C.java
~/github/test$ java -cp .:base C
hello interface 1
[/sourcecode]

The directory <tt>compatible</tt> contains a version of the interface <tt>I2</tt> that declares the method <tt>m()</tt> abstract, and for technical reasons it contains <tt>I1.java</tt> unaltered.

[sourcecode]
~/github/test$ cat compatible/I2.java 

public interface I2 {
  void m();
}
[/sourcecode]

This can not be used to compile the class <tt>C</tt>:

[sourcecode]
~/github/test$ javac -cp .:compatible C.java 
C.java:1: error: C is not abstract and does not override abstract method m() in I2
public class C implements I1, I2 {
       ^
1 error
[/sourcecode]

The error message is very precise. Even though we have the <tt>C.class</tt> from the previous compilation and if we compile the interfaces in the directory <tt>compatible</tt> we will have two interfaces that can still be used to run the class:

[sourcecode]
~/github/test$ javac compatible/I*.java
~/github/test$ java -cp .:compatible C
hello interface 1
[/sourcecode]

The third directory, <tt>wrong</tt> contains a version of <tt>I2</tt> that also defines the method <tt>m()</tt>:

[sourcecode]
~/github/test$ cat wrong/I2.java 
public interface I2 {
  default void m(){
    System.out.println(&amp;amp;quot;hello interface 2&amp;amp;quot;);
  }
}
[/sourcecode]

We should not even bother to compile it. Even though the method is double defined the class still can be executed so long as long it does not invoke the method, but it fails as soon as we try to invoke the method <tt>m()</tt>. This is what we use the command line argument for:

[sourcecode]
~/github/test$ javac wrong/*.java
~/github/test$ java -cp .:wrong C
Exception in thread &amp;amp;quot;main&amp;amp;quot; java.lang.IncompatibleClassChangeError: Conflicting default methods: I1.m I2.m
	at C.m(C.java)
	at C.main(C.java:5)
~/github/test$ java -cp .:wrong C x
~/github/test$
[/sourcecode]

<h3>Conclusion</h3>

When you start to move your library to Java 8 and you modify your interfaces adding default implementations, you probably will not have problems. At least that is what Java 8 library developers hope adding functional methods to collections. Applications using your library are still relying on Java 7 libraries that do not have default methods. When different libraries are used and modified, there is a slight chance of conflict. What to do to avoid it?

Design your library APIs as before. Do not go easy relying on the possibility of default methods. They are last resort. Choose names wisely to avoid collision with other interfaces. We will learn how Java programming will develop using this feature.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>411</wp:post_id>
  <wp:post_date>2014-03-26 08:00:11</wp:post_date>
  <wp:post_date_gmt>2014-03-26 07:00:11</wp:post_date_gmt>
  <wp:post_modified>2015-02-09 09:41:22</wp:post_modified>
  <wp:post_modified_gmt>2015-02-09 08:41:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-true-nature-of-java-8-default-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:4:{s:17:"willy.lai@ubs.com";a:3:{s:3:"key";s:13:"532ff236b38c5";s:4:"time";s:10:"1395651126";s:7:"user_id";s:8:"31131067";}s:27:"alexander.khovansky@ubs.com";a:3:{s:3:"key";s:13:"532ffce061415";s:4:"time";s:10:"1395653856";s:7:"user_id";s:8:"31131067";}s:15:"robert@mikes.hu";a:3:{s:3:"key";s:13:"532fff6e64bab";s:4:"time";s:10:"1395654510";s:7:"user_id";s:8:"31131067";}s:17:"h143570@gmail.com";a:3:{s:3:"key";s:13:"53302833be64f";s:4:"time";s:10:"1395664947";s:7:"user_id";s:8:"31131067";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:27:"alexander.khovansky@ubs.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1395664890";s:7:"content";s:165:"Hi Peter, found a typo:
Even though the method is double defined the class still can be executed so long as long it does not invoke the method
("so long as long")


";}}s:17:"h143570@gmail.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1395735765";s:7:"content";s:762:"Eloszor is bocsi a magyar helyesirasom miat.

Nem tudom, hogy volt-e szerencsed a kovetkezo PDFekhez, de linkelt hatter informacionak jo lehet.

 http://cr.openjdk.java.net/~briangoetz/lambda/Defender%20Methods%20v4.pdf
http://cr.openjdk.java.net/~briangoetz/lambda/featherweight-defenders.pdf

A tobbszoros oroklodes temakornel, azt meg erdemes lehetne megemliteni, hogy a Gyemant oroklodesi problema foleg az osztaly szintu valtozoknal szokot baj lennei es nem a metodusoknal. (Este megprobalom eloasni a doksit amiben ezt fejtegete Brian Goetz)

Az rendkivul szempatikus volt, visszont, hogy bemutatod azokat az eseteket amikor ez az egyszerusites megsem mukodik megfeleloen.

A masik ciket este neznem at, remelhetoleg az meg belefer a publikalasi terveidbe.";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5854482309788499968&type=U&a=zunx]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/9RcGdlfCzF]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:37928184;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204429947481487]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/LzFn4NwR35w]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8831a946a5fe31cd2cad4f8eaea8084</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04e4506d15f9cb6de4e237daf62aeea7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3242daa57915a9d7f1f59aee700891e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8353</wp:comment_id>
    <wp:comment_author><![CDATA[Sophia]]></wp:comment_author>
    <wp:comment_author_email>kzvikzvi1@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.fromdev.com</wp:comment_author_url>
    <wp:comment_author_IP>50.152.193.10</wp:comment_author_IP>
    <wp:comment_date>2015-07-18 05:32:07</wp:comment_date>
    <wp:comment_date_gmt>2015-07-18 04:32:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This surely makes our life easier to keep compatibility at the same time introduce new changes. Thanks for bringing these awesome changes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437193927.732614040374755859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1437205250]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1437205250]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1437199282.6106739044189453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1437205250.59391689300537109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6762</wp:comment_id>
    <wp:comment_author><![CDATA[Default methods and multiple inheritance | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2015/02/11/default-methods-and-multiple-inheritance/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.115</wp:comment_author_IP>
    <wp:comment_date>2015-02-11 16:06:28</wp:comment_date>
    <wp:comment_date_gmt>2015-02-11 15:06:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] probably know. If not google it, or read my articles Java 8 default methods: what can and can not do? and How not to use Java 8 default [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423667188.4963080883026123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423667241]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423667242.108521938323974609375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9689</wp:comment_id>
    <wp:comment_author><![CDATA[Igor Ganapolsky]]></wp:comment_author>
    <wp:comment_author_email>eazyigz@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+igorganapolsky</wp:comment_author_url>
    <wp:comment_author_IP>52.0.250.91</wp:comment_author_IP>
    <wp:comment_date>2016-03-16 19:39:12</wp:comment_date>
    <wp:comment_date_gmt>2016-03-16 18:39:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting.  So do you advocate using same default methods in multiple interfaces, or stay away from this practice altogether?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458154247.1502950191497802734375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[20822702866]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1458154247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458154247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[109698161291669426448]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1458153554]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-ej84lDTe0V8/AAAAAAAAAAI/AAAAAAAAB-g/8wNcULqhX7c/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458153553.7173309326171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10313</wp:comment_id>
    <wp:comment_author><![CDATA[Java 8 ì¸í°íì´ì¤ vs ì¶ìí´ëì¤ &#8211; CCL FREE]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cclfree.cf/java-8-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4-vs-%ec%b6%94%ec%83%81%ed%81%b4%eb%9e%98%ec%8a%a4/</wp:comment_author_url>
    <wp:comment_author_IP>198.27.70.45</wp:comment_author_IP>
    <wp:comment_date>2016-11-08 19:31:09</wp:comment_date>
    <wp:comment_date_gmt>2016-11-08 18:31:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] í¼í° ë²íì¤ë ì¢ ë ìì¸í ê¸ì ìì± íëë° ë¤ì ë§í¬ë¥¼ ì°¸ê³ í´ë´ (Â ìë° 8 ëí´í¸ ë©ìë : ë¬´ìì í  ì ìê³  ë¬´ìì ëª»íë?Â ) ëì¼í ìê·¸ëì²ë¥¼ ê°ì§ ëí´í¸ ë©ìëë¡ êµ¬íëÂ ì¬ë¬ ê°ì [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478633555.0191419124603271484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478629870.56000995635986328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1482842159]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482842159.59482097625732421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How not to use Java 8 default methods]]></title>
  <link>https://javax0.wordpress.com/2014/04/02/how-not-to-use-java-8-default-methods/</link>
  <pubDate>Wed, 02 Apr 2014 07:00:05 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=441</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Warning: you can not make this unseen once you have read</h1>

I was talking about the multiple inheritances of default methods in the last blog article and how they behave during compilation and run time. This week I look at how to use default methods to do real inheritance, which actually, default methods were not designed for. For this very reason, please read these lines at your own risk, and do not imply that this is a pattern to be followed, just as well do not imply the opposite. What I write here are some coding technics that can be made using Java 8 but their usability is questionable at least for me. I am also a bit afraid to let some <a href="http://en.wikipedia.org/wiki/Ifrit">ifrit</a> out of the bottle, but on the other hands, those ifrits just do not stay there anyway. Some day somebody would let it out. At least I attach the warning sign.

<h3>Sample problem</h3>

A few years ago I worked on an application that used a lot of different types of objects that each had a name. After many classes started to contain

[sourcecode language="java"]
public String getName(){...}
public void setName(String name){...}
[/sourcecode]

methods that were just setters and getters the copy-paste code smell just filled the room unbearable. Therefore we created a class

[sourcecode language="java"]
class HasName {
  public String getName(){...}
  public void setName(String name){...}
}
[/sourcecode]

and each of the classes that had a name, were just extending this class. Actually, it was not working for a long time. There were classes that extended already other classes. In that case, we just tried to move the <tt>HasName</tt> upward in the inheritance line, but in some cases, it just did not work. As we went up the line reaching for the top we realized that those classes and their some other descendants do not have a name, why to force them? To be honest, in real life it was a bit more complex than just having a name. If it were only names, we could live with it having other classes having names. It was something more complex that would just make the topic even more complicated and believe me: it is going to be complex enough.

Summary: we could not implement having the name for some of the objects implemented in some spare classes. But now we could do that using default methods.

<h3>HasName interface with default implementation</h3>

Default methods just deliver default functionality. A default method can access the <tt>this</tt> variable, which is always the object that is implementing the interface and on which behalf the method was invoked. If there is an interface <tt>I</tt> and class C implements the interface, when a method on a <tt>C c</tt> object is invoked the variable <tt>this</tt> is actually the object <tt>c</tt>. How would you implement <tt>getName()</tt> and <tt>setName()</tt>?

These are setters and getters that accessing a String variable that is in the object. You can not access that from the interface. But it is not absolutely necessary that the value is stored IN the object. The only requirement is that whatever is set for an object the same is get. We can store the value somewhere else, one for each object instance. So we need some value that can be paired to an object and the lifetime of the value has to be the same as the lifetime of the object. Does it ring the bell?

It is a weak hash map! Yes, it is. And using that you can easily implement the <tt>HasName</tt> interface.

[sourcecode language="java"]
public interface HasName {
    class Extensions {
        private static final WeakHashMap&lt;HasName, String&gt; map = new WeakHashMap&lt;&gt;();
    }
    default void setName(String name) {
        Extensions.map.put(this, name);
    }
    default String getName() {
        return Extensions.map.get(this);
    }
}
[/sourcecode]

All you have to do is write at the end of the list of interfaces the class implements <tt>HasName</tt> and it magically has.

In this example the only value stored is a <tt>String</tt>. However, you can have instead of <tt>String</tt> any class and you can implement not only setters and getters but any methods that do something with that class. Presumably, these implementations will be implemented in the class and the default methods will only delegate. You can have the class somewhere else, or as an inner class inside the interface. Matter of taste and style.

<h3>Conclusion</h3>

Interfaces can not have instance fields. Why? Because in that case, they were not interfaces but classes. Java does not have multiple implementation inheritance. Perhaps it has but "please don't use it" kind of. The default method is a technological mistake. You can call it a compromise. Something that was needed to retain backward compatibility of JDK libraries when extended with functional methods. Still, you can mimic the fields in interfaces using weak hash maps to get access to the inherited class "vtable" of fields and methods to delegate to. With this, you can do real multiple inheritances. The type that your mother always warned you about. I told you!

<b>Another warning:</b> the above implementation is NOT thread-safe. If you try to use it in multithread environment you may get <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ConcurrentModificationException.html">ConcurrentModificationException</a> or it may even happen that calling <tt>get()</tt> on a weak hash map gets into infinite loop and never returns. I do not tell how to fix the usage of weak hash maps in this scenario. Or, well, I changed my mind, and I do: use default methods only the way they were designed for.

If you want to know more about the Java 8 features there is a comprehensive and short tutorial on Java Code Geeks at <a href="https://www.javacodegeeks.com/java-8-features-tutorial.html">Java 8 Features Tutorial </a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>441</wp:post_id>
  <wp:post_date>2014-04-02 08:00:05</wp:post_date>
  <wp:post_date_gmt>2014-04-02 07:00:05</wp:post_date_gmt>
  <wp:post_modified>2019-09-27 12:30:34</wp:post_modified>
  <wp:post_modified_gmt>2019-09-27 11:30:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-not-to-use-java-8-default-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:4:{s:17:"willy.lai@ubs.com";a:3:{s:3:"key";s:13:"532ff2489b2c2";s:4:"time";s:10:"1395651144";s:7:"user_id";s:8:"31131067";}s:27:"alexander.khovansky@ubs.com";a:3:{s:3:"key";s:13:"532ffcf76ad91";s:4:"time";s:10:"1395653879";s:7:"user_id";s:8:"31131067";}s:15:"robert@mikes.hu";a:3:{s:3:"key";s:13:"532fff80cafe6";s:4:"time";s:10:"1395654528";s:7:"user_id";s:8:"31131067";}s:17:"h143570@gmail.com";a:3:{s:3:"key";s:13:"533028457bba6";s:4:"time";s:10:"1395664965";s:7:"user_id";s:8:"31131067";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>draft_feedback</wp:meta_key>
    <wp:meta_value><![CDATA[a:3:{s:27:"alexander.khovansky@ubs.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1395665812";s:7:"content";s:586:" Hi Peter,

- typo:
"So we need some value that can be paired to an object and the lifetime of the value has to be same as the lifetime as the object" - should probably be "as the lifetime of the object", also I think "the same"

I would also mention the following problems in the beginning of the article:
- The implementation will fail in a multithreaded environment: 'setName()'/'getName()' can't be called by different threads even if they are called on different objects
- The implementation can incur run time penalty for looking at the hash map
- Less convenient in the debugger
";}}s:17:"h143570@gmail.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1395791024";s:7:"content";s:805:"Szep, hogyan lojuk magunkat labon leiras.

Bevalom az interfacben deklaralt inner class ujdonsag volt. Eszembe nem jutott volna, hogy ezt megengedi a fordito.

Egy bizots a Lambdakkal es Default metodusokkal a kevesbe kompetens fejlesztoknek sokkal konyebb lesz sajat maguk es projektjuk alatt kivagni a fat.

Ha jol ertelmeztem Brian Goetz iromanyait akkor a Default Metodusok a Java publikus APIjat kiterjeszto 3rd Partyikkal valo kompatbilitashoz kelletek, bar ezt ugyis tudtad. 

Tenylegesen csak a "Another warning" bekezdeshez tudok hozza tenni.

A WeekHashMap tobb szalu hozaferese nem csak CME-t okozhat, hanem vegtelen ciklust is. Emlekeim szerint a sima HashMapnek is megvan ugyan ez a "jo" tulajdonsaga. 
http://www.adam-bien.com/roller/abien/entry/endless_loops_in_unsychronized_weakhashmap


";}}s:17:"willy.lai@ubs.com";a:1:{i:0;a:2:{s:4:"time";s:10:"1395822955";s:7:"content";s:66:" Interesting but terrible idea, to create a `HasName` interface :P";}}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202617376368342]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/bgjlS0VSxQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5857018543555518464&type=U&a=8LET]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/bxxmoJ9mKAU]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[33755877370]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>198</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-04-07 18:01:13</wp:comment_date>
    <wp:comment_date_gmt>2014-04-07 17:01:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can solve some problems using Groovy traits, but you have to use Groovy. There is a big difference between the philosophy Groovy and Java. Some may say that Groovy is Java on steroids. I rather would say that Groovy is Java feral. And actually both are carnivore.

The "this problem" I detailed in this article is NOT that interfaces are limited to default methods and can not have state. That is a limitation but that is not a problem. Like it is a limitation that you should not drive faster than speed limit (say 50km/h in Europe) using your scooter in cities, but that is not a problem.

The problem is that someone may think that the limitation is there because the scooter does not run faster. When they can access some real bike or a car they start to speed and kill someone. Most of us drive these more powerful programming languages for many years and we know that the limitation is not because of the engine but because of the safety. The engine is limited on the other hand, because there is no point to go faster.

Your comment points out very well that the problem I pointed out exists and is real.

And the answer is no. You can not solve this problem using Groovy traits.

P.S.: I suspect that the groovy version in your comment is wrong, it could be 2.3.1-beta.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>197</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396890073]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396890073.4117610454559326171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23143422422]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396890073]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-07 17:01:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>191</wp:comment_id>
    <wp:comment_author><![CDATA[Saurabh J]]></wp:comment_author>
    <wp:comment_author_email>saurav2035@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/111203430472973680144</wp:comment_author_url>
    <wp:comment_author_IP>72.74.143.30</wp:comment_author_IP>
    <wp:comment_date>2014-04-05 04:36:16</wp:comment_date>
    <wp:comment_date_gmt>2014-04-05 03:36:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If i understood correctly , in your example you are trying to solve a wrong problem here , default methods are not meant for that and more specifically interfaces are not meant to solve this.Java spec very clearly says that "A particular state of any object should be bind to that class or to its same parent class in the hierarchy." Interface in plain terms basically controls the role a particular class can play , it is not supposed to be meant for dealing with the state of an object.

feel free to correct me if my understanding is not correct.

Cheers]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396668977.1575429439544677734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[111203430472973680144]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23087457410]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396711764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396711764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-05 03:36:16]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>177</wp:comment_id>
    <wp:comment_author><![CDATA[Ivan Sopov (@moradan228)]]></wp:comment_author>
    <wp:comment_author_email>moradan228@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/moradan228</wp:comment_author_url>
    <wp:comment_author_IP>83.143.201.154</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 10:41:22</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 09:41:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Use IdentityHashMap or Collections.synchronizedMap(new IdentityHashMap())...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396431682.3500111103057861328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://pbs.twimg.com/profile_images/478613761/a_c46b8401_normal.jpeg]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[83461598]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1396431755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396431755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396431756.0548279285430908203125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 09:41:22]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>178</wp:comment_id>
    <wp:comment_author><![CDATA[Josh Hyde]]></wp:comment_author>
    <wp:comment_author_email>jrh3k5@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/110694536384347452794</wp:comment_author_url>
    <wp:comment_author_IP>99.20.247.12</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 11:48:26</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 10:48:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And now you have a memory leak since you're retaining references to every single object that implements this interface.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>177</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396435706.437674999237060546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-vOJv1J59P0k/AAAAAAAAAAI/AAAAAAAARoY/7FNw9XppL34/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[110694536384347452794]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1396437286]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396437286]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396437286.4139330387115478515625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 10:48:26]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>179</wp:comment_id>
    <wp:comment_author><![CDATA[John Finalizer]]></wp:comment_author>
    <wp:comment_author_email>john@flavor8.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>173.73.184.106</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 13:32:10</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 12:32:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can interfaces now implement finalize?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>178</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396441930.8901729583740234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1396441930]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22998901311]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396442505]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396442505]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396442505.7538220882415771484375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 12:32:10]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>181</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 17:47:47</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 16:47:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually not. The <a href="http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf" rel="nofollow">Java Language Specification version 8</a> says:

<blockquote>
It is a compile-time error if a default method is override-equivalent with a nonprivate method of the class <tt>Object</tt>, because any class implementing the interface will inherit its own implementation of the method.
</blockquote>

Since the method <tt>finalize()</tt> is implemented in the class <tt>Object</tt> and it is <tt>protected</tt> it can not be implemented as a default method.

While playing around with Java 8 version 1.8.0-b132 on my osx I could have an interface defining the method <tt>finalize()</tt> as a default method. The class implementing the interface had to implement the method and could not inherit that from the interface. The compiler actually did not care the rule cited above, but it was concerned by the fact that the implementation is inherited from Object (inheritance from a class extended is stronger than the inheritance from an interface) and the method <tt>finalize()</tt> in Object is protected, which is less visibility than public as it is defined in the interface. Perhaps this is a bug in the ORACLE java implementation.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>179</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396457267]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396457267.5285251140594482421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23004602122]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396457267]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 16:47:47]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>182</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-04-02 17:48:48</wp:comment_date>
    <wp:comment_date_gmt>2014-04-02 16:48:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You actually did only ask if you can implement and I answered that in my previous reply, however I take the liberty to say that you should not even if you could.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>179</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396457328]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396457328.709598064422607421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23004627284]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396457328]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-02 16:48:48]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>196</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.140.159.50</wp:comment_author_IP>
    <wp:comment_date>2014-04-07 10:28:10</wp:comment_date>
    <wp:comment_date_gmt>2014-04-07 09:28:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Your understanding my intentions are absolutely correct. I wanted to show a bad example detailing why it is bad. The comments underlined and emphasized the "why" part. I am hoping that showing a bad example with explanation is better than letting a "junior" discover the possibility without noticing that it is bad practice.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>191</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396862890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396862890.5524880886077880859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23134043017]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396862890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-07 09:28:10]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>197</wp:comment_id>
    <wp:comment_author><![CDATA[Joe Wolf]]></wp:comment_author>
    <wp:comment_author_email>joewolf@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>151.207.250.51</wp:comment_author_IP>
    <wp:comment_date>2014-04-07 16:40:23</wp:comment_date>
    <wp:comment_date_gmt>2014-04-07 15:40:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can use Groovy traits to solve this problem, which are now available as of Groovy 2.1.3-beta.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396888992]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396888994.0445420742034912109375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396885223.3892920017242431640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23143036090]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396888991]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-07 15:40:23]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>283</wp:comment_id>
    <wp:comment_author><![CDATA[JackZ]]></wp:comment_author>
    <wp:comment_author_email>fredqu22@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>199.91.42.30</wp:comment_author_IP>
    <wp:comment_date>2014-04-29 23:30:55</wp:comment_date>
    <wp:comment_date_gmt>2014-04-29 22:30:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had hoped for a more flexible solution similar to C#'s extension methods or Gosu's enhancements.  With Java's default methods only the owner of the interface can add new methods and, worse, they are not optional.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398810655.8413860797882080078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23627740415]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1398845862]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1398845823]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-29 22:30:55]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>654</wp:comment_id>
    <wp:comment_author><![CDATA[javinpaul (@javinpaul)]]></wp:comment_author>
    <wp:comment_author_email>javinpaul@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/javinpaul</wp:comment_author_url>
    <wp:comment_author_IP>220.255.1.157</wp:comment_author_IP>
    <wp:comment_date>2014-06-07 04:47:40</wp:comment_date>
    <wp:comment_date_gmt>2014-06-07 03:47:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice tutorial. By the way, I have also shared  few examples on <a href="http://javarevisited.blogspot.sg/2014/02/10-example-of-lambda-expressions-in-java8.html" rel="nofollow">Java 8 lambda expressions</a>. Your reader may find that useful.

Regards
Javin]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1402128812.0180900096893310546875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[24482335473]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1402128812]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-06-07 03:48:02]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1402112860.5545179843902587890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1402128812]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6689</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-01-21 09:02:03</wp:comment_date>
    <wp:comment_date_gmt>2015-01-21 08:02:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If it were just the setter and the getter, then lombok could be a solution for the issue. The setter and the getter was a simplified example of the more general problem.

As for lombok I am a bit reluctant. Lombok is not a 'clean' or standard extension of Java. It uses compiler API that is not guaranteed by any standard and may change incompatible even between bug fix releases. If your project works with one version of Java, it may not work with the next. I know that project lombok mitigates this risk to some level, but the mitigation is technical. Not legal and not architectural.

The legal mitigation would be to get a standard that defines the interface lombok uses so that it can not change. But, as far as I can predict, it will not happen.

It will not happen because for architectural reasons. If such an interface gets opened and made available for easy use of wide audience then we would see the proliferation of extensions. Most of them would not be so well mannered and carefully designed as lombok and there would be a lot of extensions that would just extend the language in weird ways. This would ruin the language Java whose major advantage is stability (as a language), compatibility and maturity.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6684</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421827324]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421827324.5080950260162353515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5884251635]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421827324]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6684</wp:comment_id>
    <wp:comment_author><![CDATA[myborobudur]]></wp:comment_author>
    <wp:comment_author_email>borobudur@gmx.ch</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/myborobudur</wp:comment_author_url>
    <wp:comment_author_IP>144.85.228.145</wp:comment_author_IP>
    <wp:comment_date>2015-01-20 22:37:09</wp:comment_date>
    <wp:comment_date_gmt>2015-01-20 21:37:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[try lombok http://projectlombok.org/ for your getter/setter problem]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421789829.9221680164337158203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"myborobudur";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5883960673]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421826649]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421794864.4502599239349365234375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"myborobudur";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421826649]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421826649.604940891265869140625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8700</wp:comment_id>
    <wp:comment_author><![CDATA[Johnes Watson (@JohnesWatson)]]></wp:comment_author>
    <wp:comment_author_email>JohnesWatson@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/JohnesWatson</wp:comment_author_url>
    <wp:comment_author_IP>212.178.4.200</wp:comment_author_IP>
    <wp:comment_date>2015-09-05 09:49:33</wp:comment_date>
    <wp:comment_date_gmt>2015-09-05 08:49:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think I have to end discussions

If I need to have fields of another class in new one should I use inheritance
Answer is NO

If I have one entity is subset of another one should I use inheritance 
Answer is YES
Do I need multiple inheritance 
Answer is YES
because set theory allows for set to be subset of 2 or more other sets
Do I need ability to inherit fields in such case
Answer is YES
Can I use composition for that purpose
Answer is NO
because that means that I would need duplicate code contains fields of every parent in child class body
of course I can create class for fields only
but it will bring back to question how to get fields of parent in children classes  (just for specialized fields class)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://abs.twimg.com/sticky/default_profile_images/default_profile_2_normal.png]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[2227171536]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14455987160]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441442973.3837490081787109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441443125]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441443125]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441443126.459640979766845703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6763</wp:comment_id>
    <wp:comment_author><![CDATA[Default methods and multiple inheritance | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2015/02/11/default-methods-and-multiple-inheritance/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.115</wp:comment_author_IP>
    <wp:comment_date>2015-02-11 16:06:30</wp:comment_date>
    <wp:comment_date_gmt>2015-02-11 15:06:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] You probably know. If not google it, or read my articles Java 8 default methods: what can and can not do? and How not to use Java 8 default methods. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423667190.618441104888916015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423667243]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423667243.3395020961761474609375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9691</wp:comment_id>
    <wp:comment_author><![CDATA[Igor Ganapolsky]]></wp:comment_author>
    <wp:comment_author_email>iganapolsky@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://profiles.google.com/iganapolsky</wp:comment_author_url>
    <wp:comment_author_IP>52.0.250.91</wp:comment_author_IP>
    <wp:comment_date>2016-03-16 20:54:34</wp:comment_date>
    <wp:comment_date_gmt>2016-03-16 19:54:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Why did you make the Extensions class be an inner class of this interface?  Wouldn't it be better to decouple it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458158146.9630339145660400390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[100995843456642718866]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[20824446796]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1458158146]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458158146]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458158075.90816497802734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9692</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.157.131</wp:comment_author_IP>
    <wp:comment_date>2016-03-16 21:02:03</wp:comment_date>
    <wp:comment_date_gmt>2016-03-16 20:02:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Since the whole construct is a possible but better avoided antipattern there is no point to discuss which would be better. It is like discussing a weird way of suicide going against a concrete wall in a car 100mph and then asking if it is better to fasten the seatbelt.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9691</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458158523]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458158523.17560291290283203125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[20824613247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1458158523]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12821</wp:comment_id>
    <wp:comment_author><![CDATA[Generate less bytecode with default methods | Software n&#039; stuff]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://roscopeco.com/2018/08/11/generate-less-bytecode-with-default-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.118</wp:comment_author_IP>
    <wp:comment_date>2018-08-11 22:03:12</wp:comment_date>
    <wp:comment_date_gmt>2018-08-11 21:03:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] when used in a general-purpose kind of way. Indeed, they&#8217;ve been the subject of a ton of posts and the way they (fail to) work still surprises people. They&#8217;ve been around for a while now, [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1534021392.8473;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1534045399]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1534025818.432272;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1534045399.795607;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28666</wp:comment_id>
    <wp:comment_author><![CDATA[Javaä¸­çå¤éç»§æ¿ &#8211; Javaèµè±å®å¸]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://how2codex.com/oops/1912.html</wp:comment_author_url>
    <wp:comment_author_IP>47.90.34.144</wp:comment_author_IP>
    <wp:comment_date>2020-01-11 10:44:38</wp:comment_date>
    <wp:comment_date_gmt>2020-01-11 09:44:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Peter Verhaså±ç¤ºäºæ¨å¯ä»¥ä½¿ç¨é»è®¤æ¹æ³æ¥è¯±åå±æ§ï¼httpsÂ ://javax0.wordpress.com/2014/04/02/how-not-to-use-java-8-default-methods [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1578735879.029226;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1578739846.416253;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1578751321]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1578751321.808453;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12280</wp:comment_id>
    <wp:comment_author><![CDATA[Davi Bicudo]]></wp:comment_author>
    <wp:comment_author_email>davibicudo@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.193.79.142</wp:comment_author_IP>
    <wp:comment_date>2018-03-23 09:37:50</wp:comment_date>
    <wp:comment_date_gmt>2018-03-23 08:37:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,
Thanks for posting this. It helped me with a particular situation in which it seems to be safe.
I fall into the case of the junior programmer, so please illuminate me if I'm wrong.
I'm using an Interface to implement some interoperable Enums. Since they are always static final, it seems that here at least the ifrit can't go out. Working out the compilation took a while until I could figure it out but now it's running fine. 
The case was that there was a long list of constants of different types to be defined and applicable to different situations so the idea was to separate them accordingly, having one long Enum for all default values and smaller ones for regular usage. Since Enums can't extend, the only way was to use an Interface to make them interoperable, but then the multiple fields, getters and setters had to be copied and pasted around, turning what should be a rather simple list of constants into long boring classes (and a lot of boring work back and forth when something had to be changed). So now, thanks to your trick, the Enums look nice and everything is much easier to maintain :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16045713403]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1521847670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1521847670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1521847670.924304962158203125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1521794271.5047900676727294921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1521799120.52013111114501953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Knowing the bits]]></title>
  <link>https://javax0.wordpress.com/2014/04/24/knowing-the-bits/</link>
  <pubDate>Thu, 24 Apr 2014 09:47:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=467</guid>
  <description/>
  <content:encoded><![CDATA[We use complex systems. My mother once said that there could be little leprechauns behind the TV screen redrawing the screen 50 times a second she could not care. (At least she new that the TV in Europe had 50 (half) screens every second.) Most of the people do not care about the electronics and the softwar around us. The trend is that this technology penetration is going to be even more dense. Electronics gets cheaper, programming becomes easier and soon toilet papers will have one-time-use embedded computers on it. (Come up with a good application!) Face recognition is not the privilege of NSA, CIA, KG or Mosad and the technology spread does not stop at the level of big corporations like FB, or Google. Shops start to install cameras and software that recognizes and identifies frequent buyers helping the work of the sales. People get used to it and IT personnel are not different, are we?

Kind of yes. The difference is that we are interested in the details of those leprechauns how they do their job. We know that these days there are liquid crystals in the screen, they are controlled by low voltage signals (at least compared to the voltages of the former CRT solutions) and that there is a processor in the TV/toaster/toilet paper and it is programmed in a language called e.g. Java.

We, Java programmers, program these applications and we not only use the language (including RT) but also layered software, frameworks. How do these layered software work? Should we understand or should we just use it and hope that it works?

<blockquote>The more you know a framework the better you can use it.</blockquote>

Better means faster, more reliable, creating code that is more likely to be compatible with future versions. On the other hand there should be a reasonable stop when you have to halt learning and start using. There is no point to know all the details of a framework, if you never start using it. You should aim for the value you generate.

On the other end of the line however, if you do not have enough knowledge of the framework you may end up using a hammer digging a hole instead of a shovel. I usually feel confident when my knowledge reaches the level of understanding that I know how they (the developers of the framework) did it. When I can bravely say:

<blockquote>If I had time (sometimes perhaps more than lifetime of a single person) I could develop that framework myself.</blockquote>

Of course, I will not, because I do not have the time and also, more importantly because there is no point developing something that is already developed with appropriate quality. Or is there?

<blockquote>I could do it better.</blockquote>

I have heard that many times from junior programmers and from programmers, who considered themselves not that junior. The correct attitude would have been:

<blockquote>I could do it better, but I won't because it is done and is good enough.</blockquote>

You do not need the best. You just need a solution that is good enough. There is no point to invest more if there is no extra leverage. There is no point to invest more even if there is leverage but it is lower than the investment in other areas would be higher.

Generally that is it when you are professional. Face it!


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>467</wp:post_id>
  <wp:post_date>2014-04-24 10:47:08</wp:post_date>
  <wp:post_date_gmt>2014-04-24 09:47:08</wp:post_date_gmt>
  <wp:post_modified>2014-04-24 23:25:15</wp:post_modified>
  <wp:post_modified_gmt>2014-04-24 22:25:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>knowing-the-bits</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202759607444030]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/VRp5Z26cBoq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/UaCWDqsU0y]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5865033002484006912&type=U&a=YwZ0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed27aa4482b9850db98e66acfaedf0ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d5ddd59b37c0101ec6bf76a8e3c5064</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45ca3a42fe395b354a6d3dd8a4377374</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11664</wp:comment_id>
    <wp:comment_author><![CDATA[ä¸ä½ç åçå ç¹æè &#8211; Frameworkåºç¨æ¡æ¶]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://framework.psmeimei.com/?p=165</wp:comment_author_url>
    <wp:comment_author_IP>202.58.105.142</wp:comment_author_IP>
    <wp:comment_date>2017-11-03 11:25:09</wp:comment_date>
    <wp:comment_date_gmt>2017-11-03 10:25:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] è±æåæé¾æ¥ [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1509714755]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1509709181.570413112640380859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1509714755.932918071746826171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1509704709.9371318817138671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[We hate/love lambda]]></title>
  <link>https://javax0.wordpress.com/2014/04/16/we-hatelove-lambda/</link>
  <pubDate>Wed, 16 Apr 2014 07:00:39 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=471</guid>
  <description/>
  <content:encoded><![CDATA[We have the long waited lambda feature in Java 8. And we love it. We love to use it at places where we used anonymous class. We love to use it where we used some looping construct. Now we use functional interfaces instead and thus we get faster performance using parallel streams and we get more readable code. The time is a short period of euphoria to be replaced by the several, low orbiting WTFs reviewing out others code. I write nice and readable code but I continually experience that others write ugly, unreadable and wrong code. (Please feel the delicate odour of irony.) And I expect lambda will make it worse.

There are two main values in a programming language feature:

<ol>
	<li>How well can you express your ideas utilizing the feature.</li>
	<li>How badly one can use (or abuse) the feature.</li>
</ol>

Good language features aid a lot in expressing yourself and can not be abused. They just shine bright readable in all their glory no matter how hard a bad guy may use them the wrong way. They end up with properly working and readable code. The only problem with these ideal language features is that they do not exist.

On the other hand bad language features are hard to use to express your ideas and are easy to misuse. And contrary to the previous one: they exist.

The reality is that most languages have language features that provide great ways to express your ideas but at the same time they can also be misused. Usually the easier to express yourself the easier to misuse a feature. Java language does not shine with brilliant syntax to briefly express your ideas but the same time you can not abuse it really. You can abuse it a bit, but there is no Java counterpart of the obfuscated C contest. Java is verbose, dull, boring. It is so dull that the language that wanted to overcome this dullness is named groovy. Groovy is many steps ahead of Java implementing shiny features. They have the tools and they are not afraid to use it. Groovy developers are and should not be afraid of unreadable code written by the bad guys or else they are going to have bad time. If you are to maintain Groovy code, prepare for the worst. No matter how good and beautiful Groovy code could be it will be just bad, because it was written by average programmer.

The Groovy language implements a feature if the feature can be used well and brilliant but how bad the feature can be abused is not considered really. The designers of the Groovy language assume that the programmers are all brilliant, and experienced artists. We all are, aren't we?

Implementing lambda Java made a step towards the Groovy direction. It is a great feature that can replace the ugly anonymous class use, aid functional style and so on. But at the same time ...

[polldaddy poll=7966894]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>471</wp:post_id>
  <wp:post_date>2014-04-16 08:00:39</wp:post_date>
  <wp:post_date_gmt>2014-04-16 07:00:39</wp:post_date_gmt>
  <wp:post_modified>2014-04-14 10:56:16</wp:post_modified>
  <wp:post_modified_gmt>2014-04-14 09:56:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>we-hatelove-lambda</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202704162297936]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/UzfcMzcS3R]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5862093022082146304&type=U&a=7WlM]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d65e82e01b05ccc7b6142421a15d647</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-polldaddy"><script type="text/javascript" charset="utf-8" src="https://secure.polldaddy.com/p/7966894.js"></script><noscript><a href="https://polldaddy.com/poll/7966894/">Your lamb datitude?</a></noscript></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_8d65e82e01b05ccc7b6142421a15d647</wp:meta_key>
    <wp:meta_value><![CDATA[1521106657]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>541</wp:comment_id>
    <wp:comment_author><![CDATA[C, C, glorious C | cartesian product]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://cartesianproduct.wordpress.com/2014/05/30/c-c-glorious-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.159</wp:comment_author_IP>
    <wp:comment_date>2014-05-30 17:50:08</wp:comment_date>
    <wp:comment_date_gmt>2014-05-30 16:50:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] We hate/love lambda [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401468608.7301590442657470703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1401619112]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401619113.03314495086669921875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-05-30 16:50:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[You can program bug free]]></title>
  <link>https://javax0.wordpress.com/2014/04/30/you-can-program-bug-free/</link>
  <pubDate>Wed, 30 Apr 2014 18:11:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=479</guid>
  <description/>
  <content:encoded><![CDATA[[caption id="attachment_488" align="alignright" width="300"]<a href="http://javax0.files.wordpress.com/2014/04/qamoneyspentwise.png"><img src="http://javax0.files.wordpress.com/2014/04/qamoneyspentwise.png?w=300" alt="Money Spent Wise on QA" width="300" height="293" class="size-medium wp-image-488" /></a> Money Spent Wise on QA[/caption]

You can not. This is a lie, just like the cake. You can lower the number of bugs. The more you spend wisely on QA the less bugs you will have. The magic word is "wisely". You can spend unlimited amount without increasing the quality. Old truth in just any area: you can waste money if you are not wise.

On the other side of the line there is no free lunch. If you do not spend enough on QA you can only dream about properly working software. You won't have less bugs if you do not spend on QA. And you will never be bug free.

Bug free software is contradiction. We have bugs, and we do not like them. We have to zap them.

<h1>Ad-hoc bug zap</h1>

Most of the bugs are zapped in an ad-hoc manner. The developer writes some test, develops some code. The code does not work, has bugs and the developer fixes the code until it runs fine with the unit tests crafted beforehand. Integration tests and end-to-end tests may also discover some bugs. These are usually reported in a bug tracking system and the developers fix them and they are eliminated in the next release.

Sometimes, however bugs are not that easy to handle.

<h1>Classified bugs</h1>

Sometimes bugs are not that simple to handle. Sometimes it takes a lot of time to fix a bug. It may need analysis how and when the bug manifests. Sometimes bugs magically disappear like if computers were non deterministic. Other times fixing a bug requires significant code modification. This is, by the way, a clear sign of design shortage on the technical or business level (or both).

If a bug is difficult developers may be reluctant to hunt for it and fix it. If it needs alteration of lot of code they may tend to declare the behavior to be a feature rather than a bug. Fortunately we know who has the last word in such a debate: money. Feature is what business uses to make value. Everything else is just behavior. And here comes the other aspect of bug classification: does business care about a certain behavior? If yes, the behavior is a bug and is a target for fix. If not then this is just a behavior.

[caption id="attachment_481" align="alignleft" width="300"]<a href="http://javax0.files.wordpress.com/2014/04/bug-classification.png"><img src="http://javax0.files.wordpress.com/2014/04/bug-classification.png?w=300" alt="Bug Classification Quadrandt" width="300" height="245" class="size-medium wp-image-481" /></a> Bug Classification Quadrandt[/caption]

Looking at that in a quadrant we have four different types of bugs.
<ol>
	<li>There are bugs that are easy to fix and have high impact on the business. They are the easy picks. Developers are usually eager to fix those bugs and become the hero of the project.</li>
	<li>Bugs hard to fix and having no business impact will never be fixed. There is no point.</li>
	<li>Bugs easy to fix and low impact on business are fixed many times when a developer has some time (minutes) to do the fix. This is the hobby area.</li>
	<li>There are bugs that are hard to fix and have high impact on the business. These are the critical bugs that get most of the attention. These bugs will not be fixed from one day to the other and therefore they have to be assessed, budgeted, scheduled and eventually fixed.</li>
</ol>

<h2>Cost of bug fix</h2>

Business needs these bugs fixed and many times the cost to fix them does not represent any extra value. Usually business feels that these bugs just have to be fixed but not on their costs. They have already paid for the feature, which eventually fails. If the development organization is separate company then the vendor should have the budget to do the fix. It had to be included in the contractual price. If the development is in-house the cost may not be discussed or may be T&amp;M based. In that latter case the developers "charge" only the hours they spent developing the feature instead of project fixed price but when there is some bug the hours to fix are also charged. This is something not clarified well enough among the players and is a source of interdepartmental stress in many times.

"Easy picks" are fixed without budgeting and business people press the developers to fix the bugs "in their free time" without separate budget. The driver for this may be to lessen the burden of costs that business people are usually measured on and also many times to hide the errors that were in the specification, communication on the business side. On the other hand developers want even easier to fix bugs to be assessed since they are usually measured on billable time. They are also reluctant to burn their so called "free time". This time is not really "free time". This time is covered by work hours and is usually used for self education. And developers (at least those that deserve the title) love to educate themselves (for example reading blogs like this).

For this reason there is no clear and precise border between the "Easy Pick" and the "Assess, Budget, Schedule, Fix" areas. Business people want to pull the border to east leaving more and more bugs in the easy pick area, while developers want the border more to the west, and the fight area is in between. And the real problem is when the project members spend significant amount and effort in that area.

<h2>Conclusion</h2>

When you find yourself in a debate about bugs and features with the business people, try to bring up this quadrant in your mind. Many times the cost/value coordinates of the bugs are not discovered. Think about it even qualitatively. 


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>479</wp:post_id>
  <wp:post_date>2014-04-30 19:11:17</wp:post_date>
  <wp:post_date_gmt>2014-04-30 18:11:17</wp:post_date_gmt>
  <wp:post_modified>2014-04-30 19:11:18</wp:post_modified>
  <wp:post_modified_gmt>2014-04-30 18:11:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>you-can-program-bug-free</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202803676105719]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/9hRcsEU5iQi]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/bBcYzYYQ4Q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5867334217704181760&type=U&a=uOev]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_755ff52f48e0a83372a3c4056a07aed1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3548485badd0866205c83ee3d179a602</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43d9c1d992420264bbe58e83037d72cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d0ce37c6de41678629db829765b72d30</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3b14c1b7a380d829d14fa65949ca179b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ff62fb65be1ead50c9d01ac706fd7ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_26a54ba63730e1dfcf47d7f10d5b2617</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5070f7dd88796ddcce406810c5ade7c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51094a2ae2561db87d20cc077e311a25</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13ea9d2634a7fc3deba874319cc4dec9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0655582637ad842395cbcaa12776c725</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_198c131a00c9194258cfbea753a64b2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e5c1effd7993b5f38ef0adc61c090076</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ff0512b870425e38db23bbaf3b7965e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edbecbc3ed89fd956c75d9682f21c766</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f77105fe5ff41a3b913c7c889e1131f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c65419bf8b150b98fb0c888b055c9c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0eb25abc8a6871b83bfa984ab92c5455</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_55c653c2da2a5f83655edf3b3eded04a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_92e5f0719aa4f21094ab2df5dd02acdc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f55b3da7b7f30ed0edcff4a70ce80adf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f62ddc1b1d92d8a8df8df57c59956531</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0906fbb7b72677d0707ac0421041e5f4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dfb2d627a77c331589b913b2057f54ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fa0e2ca248d0890d194b7a418ce6d2fc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eeb7fc953246e7ce0d23abd48975490e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39971f461e4ad360a9d6ca4b01fde520</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1dbd42937a9970b3ab69d82ddefef25</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_38132711307b21c4178d137d38f0c3fb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f00c5a0f92f7ad4db1b287254569051b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4478667973ac563dd4698d0001b32f3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_94bc7298aaff4e5e1e479b89fc481034</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b072dce321c9d8fa6b155820161603e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46fdd0d090ea1168410aa56049cdfd62</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_341801eafa6795828b2cb4fd804ef632</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aab8819bc33d7e167c7cda090c17d5e5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_037ab3de384578629b9978aa1067b275</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_271204f741d656c71352c998a98435fc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e57b3f80af22ada4dfb3fa79ad776912</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7cd470159b458483011bdbd9452cb3b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59461a05eb24d54cbb091b317037407b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1107b867a433129baef6fefb1334c3d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_80ace01b301ad564d6301e91aba750ef</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e30488d04a2250786c76169b39cac235</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46b4550c0fe1a7dd6a701136f82cb72b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f6d68ea8faae046f834e64f987adf25</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_16284534bd16d2d84cf96603950a08b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc56fc907361ea9c24816b655f6e79eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e90fb156100888c91803b28a626369d8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db28160da86d47e20c7386e4577791ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c47272a48bdc06edd967427ff37d000e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2ba2339c67b07f5d5783b7641f75ee5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8fc3bc204ddb5ef6f49021bf30848ee0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_887db0d1d36ac8798834d337d536ad7b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d6a59974ca984e402fc206143fc0ee8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32ef21e1a860c6634ac232938ab5dc51</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_99840322196cb930eae1887610580956</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_00c5da0e3ab1cc5179071a2aef8733d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d52fed5eb40acf46fe7b5914bb361dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3ba12f7fd3034e95ea9c1dd9d2fdb65b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15af77dbbf2fb1123a39136cd80299de</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0c69a05f81552c72362bf02c259ccdc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05b5ae8ce44d0a7c8692062a87af5e04</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3dab8c34eb2c91ac904f8f464ffb12fe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5925de0d15d590c16d83d6a925f29132</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9054813764f1e3750f5a70e54be901e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4c33eb37d030ece1cc209d8532c2c5eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0712ba1e319bc8a4948cc78ebc450664</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e639430f6d4c3053095616b26dcbb0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ecc346ae9a15b04866d16a21cee46662</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f4968caddc849b4ada5d5caf6ff70f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aea8fc79b885258e43daa9535ebcf981</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4abf74f185679371a8fb232f8ba8b7b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d42f40c1a7defa1f01a0ec3f3a6cebcf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d70ba3dd02d641d6966096410a8cf38</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19dea9aea378ee5a4aa7e13c26691514</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_145ae9ee017f7e348af6e16d9783d591</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e1c40a98c25f1ef7ad9a09fa6cf2225f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd68560f7be291d52ba0f6d7585ddd38</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ae912c6b453103a2a9a9f017d4fc3aee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_35e765a4d518ab8b19811764c893f97c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_587f30fe25d8733db8e8378cb8520f69</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c4a5ae60b1f51d1d001f8746e1723829</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ba8fb5e8b7421c1a1a15cc04ae5739d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc908382b03db9f0b040b01ae2d26abb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_418ac4d78ba86120dfcb4e5dd11d67af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8254f6599a584e475c8ef01f41daf1d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bebcf2b9169c6612ca416f6a621c5682</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4977d252bd343355bf438616b29a05f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4d09e633851d1c7e4b5ada7e8087ec7e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_297bdc91044254983fcf5486af045d3d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3875c180d1838fe9629ae0a1f366ff43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d168bbc7a4f965016fddc153c3913f42</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f88b0940cdad3a61e327097661244dfc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4cee6e6b037dbf99dbb1841f6f8f7d95</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_871bb438fcf9a8c1144ee75daf048d4d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_781663236167d5b29a01fa8b8c11c9d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c7226eeb7ffcef46558a5d3c1e93e05</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc33ced644c22391d936a65386fe7b5b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45932fd530a4ff4665f7a79b439117cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ae95082cca1137f0836aec4454a80596</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_661f15b0e2c572a14191db663215deeb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f3de2938ee152638159a410519b8986</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7f20f1251ef41d01e78b7a82f3d50a86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32cb00b6b103db6b69fc853c2ced5ef0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_68bad022535decb4e4556abdc3119a8e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_260842d30e3a38a4bd96b239529904b4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aaea58cfc0bc047150be7a69933a951f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8c3e5a2ff12a629ab003efee55b5e55</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4b25a7c5d704c25c0f6efc2f751890f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eeda8add95b9bae6d030948bad8925a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_88fe652f29845a269140405735f3dcaa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_310b9eeb3b05c0954cbb022e44da108e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dfc194fb71603368c1856e061acc2c52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95e548a4e25b42d6695f01707d6c1b0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d3ee7f6dc6cd9a6a5d72b3e13e406f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b179541c48a4d80802b0725e3bdc93e2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_69641b5eff44f033b653b717528e734a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_760097b49f6e6edb1ff4adc40833564f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_18db077653d45b383544148706450b81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2d363ad8eb7517a46aabfc2c74712af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_35b4fd9017aa0fa7578cef62af40e028</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8151951721971bfa79336f1a6f3c5983</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27589486702fd40e120f3fd52fb6bea7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1cb0791920d4121fb92e9d02d326b84</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4bb3fafe7903d74ba06c9b0841926912</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2c9c5dbfe424ee37b50bd920a46ac7d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95e3a7f3fc8871c36d72a0f9ff0a3bc2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c447214b39bc719011949abedb27fa94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_00d6b2f3d751e9866ac8cf5ada80037b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a85a0805e5c0a6c17ed37653a2cd8fae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d174c2ee976b28247ed0a4b18e362ca3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13653f5d579e6b94dcc1f6b7d00ff694</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_051b9a42356a9ff9a926e9a18007491c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_551032673c30450287f2831224842d23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc17129f0f0d367d3ad601c0d8e60795</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c11c6b9b0296dd7ed0f56aed9d08f50</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_48a290f1e2372b0096745b9d5bffbeb9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_78dcd5058ee7c60df95d2a5a6fdf4159</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7b649969d67d87f12f3831399bf5207</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4944c548522a2090a6d1141f37f1e8eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c1fddb8ebb0ac89fcee892159c31d23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b9b66e4ad2fda139cfb039de53d83022</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cfa4149e7582bfd6a0f7514420820220</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2eb83024419c4839412bbe32ff3b93bd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2dcb1a1ab090e32fe2a190a813cbc92e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e2f37afdf6ee243e7ab15bed630ed499</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a233cb98a7ba26dc916c09a022022dde</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e595b39d62307a7273d512d3a2ba104</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4fa699bc180824b826b0a4a46cf27960</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a47445a2ee963fe9749a2e6eb15ca407</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c347636f35ff0c20c901df5a7ac6e76c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_10a43e796ef933695cc03f79bee938c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b953769a7044f9db92f12fca1d741127</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd611185b844f156e079ea69e52f8c37</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_104940511de7265bfdc5d01588e3519b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5005b0a92c5268821270be4a375f1e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2baa06986c414626e04eb83090ad9536</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edf6809a8dee58d40955118ab9015456</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_52d39396591255e81a95a428db4aaa52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a880e13c94b6956b3b0067e0eb796514</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39764b1d4a6a23e0284ea15fff3f1860</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_182417bfe42731583a8221af2ee84c46</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4920c355d84ab8b48340d2a0eb10541e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_66d68651c9aa65a304b0735d7209aa0b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edc06abaab2708647fd7253409cd7368</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2ec0e7da08b1becf3e4e5404e00d4cd3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bc90947ffcd48224d1047f08bfe5849f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1f3b8d7209d73122d93804dd64817470</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc939dab904f15be6cc53c113b59bc9c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bda91dfe65bf7bfcc857455633a0fcaa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_934c24ce2d036947f74118e317ab0af2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_af6a5b60f2e6dd14a15282d14b6443f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a84947f9f1ff9a4c9af7bfe8ee82857e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0746dcb54975eadd3ffd27bc87d47fe5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_367a04b7c00c7af303617e483777afe2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e1a8b4c616f189ef2f6e72bd04faa5f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_58a90cc6db3bf328986c80a8d673b76e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_612d465b3adf9b896e69953371f97cb6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_109c004a011d363557eda1b08b348f95</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_08bf86bd0457ddf7c77d37a6e2691f61</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c9aaf102ee082db3c70aa7612e8dd24a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5955cd24b34190021c61c78cc77a48c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ebe26d6b911f39a58f412723ff83d202</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db05657797c5c570b55153016332873e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f9c9c41cf34a25c60789a9249bb257c5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e242d26c6fb756927bc4565d0eaa82ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d08a546e71b253f43063d32e4e451021</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25e6e33a83a6a71f938e69b6fad6ca3a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c39efa8f441a0d46f9a35598cc144005</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5d094204a4f316ddd64ba317d608856</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8e601188ba1c9cba98273c0d116d7ca9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_068ff44a4fbab39c1a5bd1c18fd7b1dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d0ccac9003cee8f42976b175df17a1c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e273786aa724bd73f7b8b4e5989cfc1b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b712fda07c4596853bc18f673563c271</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ef4fb975a08d8a0dfca3656a02da935e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f87c9d78ba4493436817dc7888f8c1a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_18b36c15357d53c05ffb5573aa0a42e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eefb21a5006a872d59b08ea38945f0b0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7a1c9182d3ff6fc77a7b239901036ad6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_90d817a86111b7c7cc30aee2478c309c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b55b9148b87c90bd697c77fef6bfcc80</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5a02f130babed63b6128f35ed8ac075f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e396b06a7291eafc12b6318f44793d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05c320fe22019499dd7a26d26db8e08a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c37c24eccd73710bfe6169343c547e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e3bb7900724cdff0c2be460bf6bf641d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db2adc2aa5dad569ae1e4780f3e65024</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0b4a4d2a5c91f930714f75dfd02ae23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b3ae3082cef63f481c056e8475a1822d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ada00bb9adb7ab4821a904934259d764</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c91b57688402be2e0a9ccc366af581fa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_90739ff4ac103fc1cbfdf2f3c15ebc60</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a6f18214166979c16201783a1e6fbbce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_50623b9d07727957995f0637dbe64d9c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89597c329ce6bbfd12b539fe5acfc114</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_87cd58ef9beb143fc590f91b2f7714c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b1eb856e7e2181461546ed83b01909bc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4196456c60b2263d0ba55f0b3733f908</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ef9b1304652ef5a7f84fd104b1233da9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5080c46b96dd52e2e67d5dc13cc9e637</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bc1a5cb398911addbb4fa583e366024e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c27ddb132a6ac779d6f4ffcce2a029b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a26c7a32235feb65c764b4f1d14fcbd9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_88fcf0171b60035797476937e01bb902</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d84ba96215ff2c9f49d3a0cbead99027</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f608c9cbddeb24c7b8af76e8816fe3a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2967ff60fbfa6d9f46753f0d44dd56b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0fe15fa767ff0a79d2f89f9e6e6938a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95f49756ee48e3cd8fd9389e0796848d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_28ea39fbbbfbda32a9fd72354059aec6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a31c897fdc5495783873489ac32c6d5b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ffd4dd9a4367659fae9ef4e39d142123</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db90d3118cc001bf049be6c0c07442ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17f9ade292a21ac3a6a083249fa38204</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0b77a134e9304c2390e2a78b493b6c7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f91b5fee072592b0f08d430faac028b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_38d12f09e9bcabc142faa60d7d286e7d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eadc4591bae141a3d0e5b822e31ba9a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fbb39314d814b99e278c8e1f89b30ca1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_582fb4a8566ea8023ed85e76d9eb4c56</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f6c2660eae7fab8d2ecf62ecadf2c8d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3715bb53cc695eaf5a828d0c8b6891e2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d226452a28fbeccd3da3d8e0f7b152f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_99ea9f06312574bf03f4bec65c49f9ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3cf86560ebc9fc4b4c133bdf8a4787b0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1cc60c05f6f2596733cf6de865ca2dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_732c536d25e9020a7c47caad4da87259</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ce72cdc0b44324ba0a9df7caa461b7d3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dfc74e465fbb6f3954063760375c0037</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ddf6e57c317a4c3c02ff52260073335</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cae83a6da1dc0b5e8491d510adb73c63</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_171dd10cf382d5753c26705b2ef67a5e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8ab0e6688e177d33cbe9021ad0b898a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_28b008dc98000410ef5238ad7e78c1f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7da183b14950d67633e6cd5c538336d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7adfd97e9ae7b074b5534de720f4130</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7fda020dfab3e87fc3f056af7298e2b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e6e8c8f42ec5a51d12ef9b7ad1f2f004</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_07bccb07bf0b178898ea2f3fb5f99360</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98cb5d75d22c6d30290a3eff9d75c426</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c294268d1919b9d659c3dda90857f4e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_752b92de390939d885af274ae5967914</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3c8e8fb34bd25af5cf2eb9e4ba617be5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b60449e3bdc77624fc10d9a0a8f651e5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1f6e8ccda9e254c3bf3c4771dd13c6a7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_971601111f90e133c2d1e0759ca9cf32</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f318105befefccce41110885b358b8d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a1f41b192a933922edd9b9a5d2747abe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_07e65662a2dd6594c553f25952b0faed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_985687e9d4ea38e2aa76b92c3d5c7f07</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abb16448b6757deb319ddb3909ba08d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0b30fbb320db3bf4929f2d4d9a017650</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5e4fc0650d75270429e97f8612b50050</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5111769ffd46ccbba9030d860a9160a5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8bd0645ef51053f0ad7ff5dff3fe60f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_577e3273816403f1f684a20b079c519c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f5820f98b713214dd40faaa2bea2125</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17799f649faaa176b7e5aa4ed8bef0f2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b97a00fe9f39e6ac9b77d7ab322a7aa7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d645a68f1c18a3bf3ea5048d59a0f634</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_364cea8519ba12351aaae45549d0e937</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_50d0262ec4256493d122485a5a5292d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_645cd15f1984b232a682e3e7e71baa40</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9585ebc518b513e2bc3bdcac30308cf4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0290cab38d47f92de9aa5f080de4fe6b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_77b4bfcdb30a3a015f2ab49b8688a800</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc396c47fe6292eb575ed25f942f7b6d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d81cdcbcbef3879f447802f45e693e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a916cdcece26a5a7e5f5343c9746ba52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9ba3e2a1fb7e6f424387ce96fa0b263f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a7b26b71e72115d722b5f6384125cbb2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a220c6d1c2e4c8623e2b8ae1f29ee6a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8997976baef31665e674d57812b4372</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7789b156554cc5e2f6b6b575bb0e0969</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edd4a337e832c359bff8d7f066dd1f0d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed4859f2e0e55b2c1a59941210cce6a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d87a86367ef8f0068a43f66edcf35dfa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43cc0394053652d78a57138bb6a815a5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_612489c27388ab3175532654a791d8f5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f9163053f572a74df43e5cf2e229123e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15053a70561684f5f3ba291a8d8f25b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d55b5ecfe783ebda2ac2c13b5bdc9df8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a55916a1163752354ea5e396090c5a7b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d5d2f6685039480929689bd45bd92cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eaf128a17326f482e56d75bb158129aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_19eadd333932efde01b61d3eb08bd0ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f092b06d6a015fda7b7e703d8e2f3a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c19050adbd7f00437be1f56709748cf3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad15d7d97778a17b8251e7621e195255</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d0c4ab12e97c9f2edec17def4b57f8fe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2bb554e5f839e5dbbed3fcccccbc8601</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_73a198bbdc44ecde061cebb044b2618c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b1beea56575f0cb41d0045187178b894</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_297dfb59babf9a7ed9883f7a00af14ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d821775b2d8a3651bf09394704978c10</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2a0aef6d8ccf7f71f5bc955dc7d8df4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abb3d40129e390c7a0be3dd7a64ee176</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_166f0f425faf2229fb58c873fdc7e700</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_246f3a97af42ed4b4589cc8049b9ce5a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d48665a2fe0d133baa72c71a766a02a3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7568c5a349c074cd7d8b82410d32dd3d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05afe1cb5e22e5f42a5441f7179b584c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_854b8b2d9e01c4d2ab5463a532a2e14e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aebdb6bc11cf915e1bb9916cd714e4d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b3f4bb6aa470442a30e4f6502e88af69</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04a3c7afd97dc8c7bf4be3473b457649</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c34678b3b631f5d358d6af678543a1b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a0f60f1fbb29cc31613cecf74bc85a37</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46bdc04724b6579bd5b3621a2b011e98</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e9175bab737d35f676624477476d2957</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2ba206419f0b5c865e910db492597c07</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a34278fb0b7af90a69963f7ad49264bc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f855fbfadc20facc1df981c3baee143e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8bb2275709b8cf92a6b22e3d681eca7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8ee6a1d4ef833e21c22ad43457b0d3c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8522a1fa07222be1bfc5d65ace25843</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95056f784218f4d27519c3390f13a986</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c2a1050ee4e95f04da3d6b42b04ed5d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1a3f7f1e90faead4791f7a9bd0590fa9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e4f864cf15193bbbbcab2c2eeb1d22ee</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0340d8ca5867e021eda6383ad03ce33a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59076211ee461687037a0c05f430f05d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1fe9bf5534738a893ab406251907e53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e9b66b9427dd662252204221526864c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_958256828e1479fd7504ace75f87663a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ba77e654f325026620fd46180d2837ca</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b03ba0d1f4e3a4de8dc08432474b68fb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6efe8825a9581eb9e431cf88f77f157d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b58890daa26fcd3a63f7fc3bd56f43e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_815cca28aeae86a1b519bed102820b1e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_579b40fd724f9fd8dce54a63f4eec714</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6051e3482c37f0a42d6f4fe40c79b7cf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04d869e36ff4c6ce407f9f77bd4c0444</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd0da0e4b53bb020b3fd8446e26d8ff7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ae0359f6b03685de881ccef8cee2f44</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_96a0d1bc3297e41c1523d353efb0bdb0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72b246d90c3f6e0cc575c585a00f754e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8d78ed6b90660c1354188396a7f0612</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d74af963efd26543e0507a57b6033089</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93391497f077c5c89a64e01b8d0986d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_24e2cbe794cf7105b064e9865bf18324</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e22e06dece4e7be1859c36d2e2a85c46</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2b4f76a503944542f09b881ba6de3d94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b92b27399a364adfb063df4ed5bdf4e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c45e2433826ae803bdc44be3209ed9b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3f07be9581c7052c454a4ef284e8ce1b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_30191c71b9db6a64a824f217ebfa2f9a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dbae3dc2dc0f901adfb341f0a09e4763</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6438e7726ea409576cc45c2d97c0f680</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc31061eab2cb802c2587ad052471c8c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98cbb5383851fbc198fedf135926c458</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d3954bee02f38d6d508d13730e1b4d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e29d9aad162825b0e489155eb0259c5f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_560c64e79c690a8559783f1c5bbde241</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_615bd965b291a12d026c7f0b6e5f1424</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3e83e31e39e3f016c08c91cdd1039752</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_088abb3ed9b9348e248030437d2d0d4d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ef6289f5ea9597a5fd8a530299737a8e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Unit test deprecated methods]]></title>
  <link>https://javax0.wordpress.com/2014/05/28/unit-test-deprecated-methods/</link>
  <pubDate>Wed, 28 May 2014 09:00:45 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=507</guid>
  <description/>
  <content:encoded><![CDATA[Deprecated methods have to be <a href="http://javax0.wordpress.com/2014/02/05/use-java-annotation-deprecated-the-right-way/">treated different</a>. At least in my opinion. The question I did not discuss in that article is if we have to unit test deprecated methods or not. For the impatient here is my statement:

<blockquote>
Deprecated methods have to be unit tested the same way as other methods.
</blockquote>

Probably this is not a question when there is already a unit test for the method. In that case you just leave it there and keep it running each time the CI server fires. The question may come up in your mind when you inherit some legacy code and you, yourself deprecate some methods or just find it deprecated with no appropriate unit test. Why bother to invest time writing unit tests when the method will no longer be in use?

The answer to this why lays where the difference is between a deprecated and a deleted method. The deprecated method is still in use. It may happen that no one uses the method but that is not guaranteed. If it were you could just delete the method. Deprecated method is still in the published API with a slight comment: you better do not use it. Clear?

What if there is no time to write the unit tests?

If there is no time (treat this precondition as a hypothetic and not questionable: that is another topic for what to have time) then there is no question. 

<blockquote>Unit test are not writing themselves during the night, while you sleep. </blockquote>

What if you have some time but kind of short. In that case, if nothing else prevails, you can linger the tests for the deprecated methods to the end of the task list. If nothing else prevails. Being deprecated does not necessarily mean: not important. Many may still use it. It means: deprecated.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>507</wp:post_id>
  <wp:post_date>2014-05-28 10:00:45</wp:post_date>
  <wp:post_date_gmt>2014-05-28 09:00:45</wp:post_date_gmt>
  <wp:post_modified>2014-05-25 15:25:40</wp:post_modified>
  <wp:post_modified_gmt>2014-05-25 14:25:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>unit-test-deprecated-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10202986630799472]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/JMiSYHePmuc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/mkfTwF1UH0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5877342640541835264&type=U&a=KGAd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25280e0bc1f1f825e7b6b1be31b2fa9e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b70f59dfc2bbffe2d271879bb4cfe812</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_28e21efa15fd06db38365f4af351080f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e74473af83d07a5efaba7b808de518f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e3cc90a44a8dcdc84ddec40a654014c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5cf9776f9974289518f15728e61190df</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9dffd9c9e48292ed681393e45e46ccfa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2591e679eefeca25f101c28f7f67d529</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1804663cb5ac35fad4a296a94a13160c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5571f5c79244dd203a7be8035cebf75c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bf53b510307695ebec943648fa4ca84f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b606e6d985ab2fe3438d4ba98d02cb86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a451c03cfbf593d8002a6270b1543f4b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e360167a4571302d8bc4668ebb5ea86e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8c69d1a754d8ae3b26e21d43b129121a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa550b8ae26183fb688f98fb324ccc57</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4d8820a227b2fb2ddd8b6e4f6523d01e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddc66a73036f5dcf6f81efeeaf9fb420</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_76d7d3d43616af64c5f0acb4c3af2585</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_50445fffb10b7430aa2f71b8c5b1e809</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05ad8546f8023c14297632d2d95cd06d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5624155c91b1e8c3706f6dbac3787d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_310b9598711927f5335853051e7ab504</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a51ca0a63b0e868072d5bbc7e1530c0c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f38991aae01519a56acbe82614b91863</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b7cf687aa1cb53fa51388e043cc4eedc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bf4654a0c6d5e70d10dc3dd0585e4f3e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7473b61b9fde1f363d003e6fb671559</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_159a71fde32dfcc4b18be8a2001398c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6ef290e1ae1a4aec83b7cbaf4eb5e3bc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e61a61c3e48e8477b4cd364744ac1f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9fbdf465c69be4c1e8b30bdd8e700633</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6a292abfaa37709b2ecdc5335a0aaf17</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc2c7ad32cb27c482d5097c18db8ca54</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d0be2c96e35ad8560c7de5b9509b0f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_97bcac6ef89c348f47765835749037d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e42dfee1cc32276aad22da2a9ad4cc0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_061e30b337566b9228e1b9a1264760b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e147a1135f62619c459eca4eb418bd65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f05453ff6e03ab5e923433cbfc445769</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_796e41547f58407d1451d63407d1893f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e76fb7e55a1ab8f3a66265704e6c4440</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b1eb3ce0f54e037d3ca8cf61c1920454</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd561abf655eb939245ef0e142e5b6f5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_61ad3f21a770045b03a497cfa1fdc14a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3587f729e7e91939e5339ff645575973</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a6f6c43d5edb5ea86029d69038921a36</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27286db3652296756fde7cb2e78f9f8d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5ee22d2f450fc8792d9786af5756026b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2aa0064c0e1d78bbb1bdb5ae982755d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c1a7cfe20eb43c4d320866f0cbe418a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8e6abe97c7e5f5f14c442a7e888ae164</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d555c0fa4cc7321f62b70c76581bd725</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83450ab5963b31d27fd83486421e5b7d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_55b22c247f9967debdbe248449c90a40</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_364b6005b1ab1d06b037eb8af8421025</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7b16ea5144e925f522fddd3a46c7490</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8b535b186a4fe704c61c4119305b5ba6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d65b54487f028000528f340efa5c769</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63d2b5f0fb0dcbc6c11c1112f06de725</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1526b28b94bf1ca844fc915e87dd1f2b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_10f58439f25e36a3ae74f47bdcd11353</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0753cdf7a30f653d8175be2531dabb99</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7e5cd583d52099ba1955fad78f0583a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0d8a3cac194a020c0a2960128737b4bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9d4ab1d50b0d224b123fef2b1b080531</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21ceb43999183eb31db5396d17764dc0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0a633fbf21a1c692cdff6da2893a1bf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b20e2377e20b4d03cbe657f1c300bcff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e79740a931d3dda876f2c807c356833d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c5b85ef6b908a054f9dd07ff2d613e74</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cfda9bf36c929cf46ced8a929efe1065</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_495675d7703558603e022a597f5f88cf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3cc4eafa4deb8c9a5b8e1ff6fd5cc48c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_94f048c06b7c299a01bc35c9a5dbd893</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1bd86b01968af3def9c511cf180eb5ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ce3ee635260e7471653d5e2dd607646b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_800160003b44bc9ed707ae1a3dc0a28e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f28ae89076aed6d6d3746d281a02a926</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7107cdf19f48be94a4a3bc47789442d6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_faa3335aabe4a3fe5653f5a6247fe7fe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[How We Chose Framework]]></title>
  <link>https://javax0.wordpress.com/2014/07/02/how-we-chose-framework/</link>
  <pubDate>Wed, 02 Jul 2014 09:00:31 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=511</guid>
  <description/>
  <content:encoded><![CDATA[When you develop your application most of the time you are writing code that deals with some of the resources. Code lines that open database connection, allocate memory and alikes. The lower level you code the more code is dealing with the computational environment. This is cumbersome and though may be enjoyable for some of the programmers the less such code is needed the better. The real effort delivering business value is when you write code lines that implement business function. It is obvious that you just can not make a simple decision to write only business function implementing code. The other types of code lines are also needed to execute the code and it is also true that the border between infrastructure code and business code is sometimes blurry. You just can not tell sometime whether the code you type is infrastructure or business.

What you really can do is to select a framework that fits the business problem the best. Something that is easy to configure, does not need boiler plate code and easy to learn. That way you can focus more on the business code. Well, easy to say, hard to do. How could you tell which framework will be the best on the long run when the project has so many uncertainties? You can not tell precisely. But you can try and strive for more precision. And a model does to follow does not hurt. So what is the model in this case?

During the lifetime of a project there will be a constant effort to develop the business logic. If the business logic is fixed the number of the code lines to develop that can not change much. There may be some difference because some programming language is more verbose than the other, but this is not significant. The major difference is framework supporting code. There is also an effort to learn the framework, however that may be negligible for a longer project. This effort is needed at the start of the project, say sprint 1 and 2 and after that this fixed cost diminishes compared to the total cost of development. For the model I setup I will neglect this effort not at least because I can not measure a-priori how much effort an average programmer needs to learn a specific framework.

So the final, very simplified model is to compare the amount of code delivering business value compared to the amount of code configuring and supporting the selected framework. How to measure this?

I usually... Well, not usually. Selecting a framework is not an everyday practice. What we did in our team last time to perform a selection was the following:

We pre selected five possible frameworks. We ruled out one of them in the first run as not being widely known and used. We did not want to be on the bleeding edge. Another was filtered out as closer examination showed that the framework is a total misfit for our purpose. There remained three. After that we looked up projects on GitHub that utilized one of the framework, at least two for each framework (and not more than three). We looked at 8 projects total and we counted the lines categorizing each as business versus framework code lines. And then we realized that this just can not be done during the lifetime of a human, therefore we made it simpler. We started to categorize the classes based on their names. There were business classes related to some business data and also classes named after some business functions. The rest was treated as framework supporting, configuration class.

The final outcome was to sculptured into a good old ppt presentation and we added the two slides to the other slides that qualitatively analyzed the three frameworks listing pros and the cons. The final outcome, no surprise, was coherent: the calculation showed that the framework requiring the less configuration and supporting code was the one we favored anyway.

What was the added value then?

Making the measurement we had to review projects and we learnt a lot about the frameworks. Not as much as one coding in it, but more than just staring at marketing materials. We touched real code that programmers created while facing the real problems and the real features of the frameworks. This also helps the evaluator to gain more knowledge, gives a rail to grab on and lead us where to look, what to try when piloting the framework.

It is also an extremely important result that the decision process left less doubt in us. If the outcome were just opposite then we would have been in trouble and it would have made us thinking hard: why did we favor a framework that needs more business irrelevant code. But it did not. The result was concise with common sense.

Would I recommend this calculation to be the sole source for framework selection? Definitely no. But it can be a good addition that you can perform burning two or three days of your scrum team and it also helps your team to get the tip of their fingers into new technologies.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>511</wp:post_id>
  <wp:post_date>2014-07-02 10:00:31</wp:post_date>
  <wp:post_date_gmt>2014-07-02 09:00:31</wp:post_date_gmt>
  <wp:post_modified>2014-06-25 12:02:55</wp:post_modified>
  <wp:post_modified_gmt>2014-06-25 11:02:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-we-chose-framework</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203239092790864]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/MZHQyMuGhdu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/ICjJlhNaFx]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5890026265812955136&type=U&a=uSIR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>878</wp:comment_id>
    <wp:comment_author><![CDATA[Zsolt JÃ¡nos]]></wp:comment_author>
    <wp:comment_author_email>zsoca8711@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/zsolt.janos</wp:comment_author_url>
    <wp:comment_author_IP>84.2.9.132</wp:comment_author_IP>
    <wp:comment_date>2014-07-03 22:05:10</wp:comment_date>
    <wp:comment_date_gmt>2014-07-03 21:05:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi!

Just out of interest... Which 5 frameworks were discussed? :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1404473271]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404473271.6255190372467041015625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404421510.851715087890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1404473270]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-03 21:05:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[What DSLs are not for]]></title>
  <link>https://javax0.wordpress.com/2014/08/06/what-dsls-are-not-for/</link>
  <pubDate>Wed, 06 Aug 2014 09:00:05 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=519</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://en.wikipedia.org/wiki/Domain-specific_language">Domain specific languages</a> are special programming languages. Each fits some special "domain" and makes the business code simpler. Using a DSL the business level problem can be implemented higher level and therefore the resulting code is simpler, it is created faster, presumably contains less errors. Some DSLs in some areas make it even possible to develop business functionality by the domain experts who have limited programming experience. There are many great books on DSLs <a href="http://martinfowler.com/dsl.html">Martin Fowler's one</a>  being at least one of, if not the best of the topic.
<p>
Many times the decision to use DSL is to shorten release cycles. A mature software in a rapidly changing business domain may change frequently but many times the change is small. If it requires the change of the code then the whole release cycle is to be repeated. Code is modified, unit tested, release candidate is created, QA tests the new version and finally the release is ready after weeks the new business need arose. The obvious approach is to embed some DSL into the application and develop some business function that is likely to be changed in the future in this DSL. The "script" written in DSL may not be part of the real release and therefore the change can go through the system faster. Developers have less obvious coding, which developers usually do not like, business is happy getting the modified functions faster. Right?
<p>
WRONG!
<p>
But not so obviously at the first time, perhaps. The DSL functions fine, the new behavior is delivered faster and there is no problem. Some time later, however, there come a new feature that can not be implemented in the DSL and needs the change of the code application code. Why not extend the DSL and implement the new functionality in the new version of the DSL? This approach is very lucrative but it is very dangerous.
<p>
DSL are like alcohol. They can have a purpose and can serve good. A cup of quality wine after a nice summer evening supper should not harm. Too much of it regularly will ruin your life. A DSL that has too many features may be dangerous. Some may use it for the good, but there is a possibility for abuse. The release process was examined and engineered when the DSL was introduced but may not be reviewed as the DSL became more and more powerful and suddenly you may face a situation when new features are developed into the software out of the release cycle. At some point the release process and the most crucial part of it, quality assurance may be ruined.
<p>
DSL should be simple. Modification of the application scripting should also follow some release management. There may not be release management at all. I have heard of software projects where the software was released to public without any significant testing. If there was an error, the users complained about it and a new release came out an hour later. Fixing one bug, creating a new one. No problem if the business can stand that. The actual software was a facebook like application where new feature was more important for the users than uninterrupted use. Other applications in telecom, banking should be tested a bit more rigorous. Regulation may even demand all releases to be archived. In that case scripting out of the release cycle is out of question.
<p>
And there may be something in the middle. Some part, some features of the application may need strict release management, while other may not demand that. Some part can be scripted using some DSL, other core functions need strong QA and release management. Some features may mix the both: scripted and still part of the cycle.
<p>
The important message is:

<blockquote>Application scripting in DSL does not ease release management and/or QA. If the release management cycle can be releases for some part of the application feature, DSL may be a tool to aid that, but DSL is never the reason.</blockquote>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>519</wp:post_id>
  <wp:post_date>2014-08-06 10:00:05</wp:post_date>
  <wp:post_date_gmt>2014-08-06 09:00:05</wp:post_date_gmt>
  <wp:post_modified>2014-08-04 13:30:03</wp:post_modified>
  <wp:post_modified_gmt>2014-08-04 12:30:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-dsls-are-not-for</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_2c1d7ecf53cebd2b47f4aa7c2f0fb270</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1508792170257e45e60011865a8b1f89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5902711597691863040&type=U&a=m1OG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203465151882200]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/QVMPjKEbhzB]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/J4rzqnuHxA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b2a7af2ee513beb054d03ebbd3584360</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_26c0da70ecd1749f373137a6b6a5ea12</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3055b22014691891e4aa56358e077b81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_192f1ac423f1729f58d0e62748fc6de4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc020d92ea2f2050ba1efd4fa1181838</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a5417e05a0b59b6abdda1bbb01872b3f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5b7d92c6ab03e46d818042d9d985914</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_85f6e30501e2b8107c731ba4bb4f9803</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fcb2fe5d0c7595b625178f4b59b1010c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bedaceacf2e796010dc2de18883c8c44</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_22f5e0680c3f940f9e70664262d1704f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7d57d8aac2f80cf1b4508d0681c49d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ba4e9cdd62f466014fe2cea59b0e96a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_815f4399fb6a301c85db85bd45da10ca</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_631aad3c048988f32c1abb888bafcb52</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5eed1e0364c8f6754ecb809a8d7cecc3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4290df32f52c3cfe707860b048127757</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7f4d190f902421a73f9850e966d9d732</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d4ac8b67a14ba8c28f1b10791932257</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8a3a4a60393edae6b7a8805b487f733</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd765a81aea03f81fe232085518b2427</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_184ab92db0ec816c07388ac7b94eced3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_893edd63112415bf7d48816e3dca1b4b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_07ce2a819d5f190cd8f2e50f36ccbd51</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cb9c98e42a1bba6cdcd12b54acce30ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45ddd1735447e62e9ffde268e1ab7c63</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fefb2c00d5455d353feb64e3aa1613a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e343d47d17a716841e9bd89ac387c7ce</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_39db3a3cd7ab597f9bffc4618388c4db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_489f1567859d90a6ab59bc0111266057</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_156627452581d27c9f3e7f44b67fc0a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a0dc2d61eeab2f404235054845af1c84</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ce38a171e1df3b46a432ab37ad1cfb7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_be4ab306fb0eab50782f6133c6696cb5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fad1bbcccceaff8d42ea5e2de3a5d25b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59145131f19ea5330e01944cae45a992</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e465afe872165bbf86c288b6905923de</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_00372c954cc220c37f3393a4cb2b9d86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2ab26064e902b1216cc81598c75e5c5d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f901e6da33dd9a2cc4d45b49566d694</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_20d9d7cd55795a9e94adad8ac662d6dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_17edffdb8cd6da590b906493f1c38bc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8f72026cdd2b9b008a861621c893291</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3be4862aef82d6269892ff6d91511e1b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_78154bb004e32d8b5eea312bc91e0a71</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d7bbda2a0da0b5f8e1e5c583773853c9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e2d22e641f6eeba5cb03bce6972a8c54</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5dfd24aaa2f76aea1363ed47bf6e5014</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45865c18b3e3d94419766cf6866316f9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d04e6b94e297bcdab836cacdd9cd772d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_617d31cc01fa2fa494652df7114d8c3c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d9f15c54a0e083ed19e17258bfad11f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b083cfea62aba67c18a1856caee00ddd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_47ded03e00707184f1f56bc194d22704</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8361674848b9707229c2a97a2927e89a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8e8107cee661c4c8ce375be22d69b7e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0cf5fac55130ac4349a1b3d3d3b6236d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7835ab752d68605f1e663b9c61fd0ea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cf376cbea60672a594b18a0b61110ea4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e41839270a4c2d7090f17e77f3c8b08d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ed4b05d57169bc9930b00f5e3e2f8ea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_073f51420934723e64687adb74f093be</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f1dd65c136d1439a3d24ebda785fe2af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1b8d472849b3fb448119f09390da1c64</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_998b0fc1101df7eb8fd75dae9cd51491</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63b473848e29f8d7d0394a1edfe93d2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0208c4eeec88d06adc9518f6b98fbcfd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1033a9a06d99a79e76b5f042e4e204a1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a6ad3f24640426e2ebfc7203d6e1cd0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cb103394f86c56d1b35ee6f388dfad61</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8af477e88ae56c50afe7719c2eb127d0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6d8483a9b68a87af1ebf626f02f327e3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a843a1b05b2de0c7ba2011247afdbd63</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75fec8815dd1fa61a20cc58b1f715395</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_32149a3137ef53f75919b0a91e40e490</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1aff46f9733291bf5ea8cb5558833e42</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7fcfa9a5477501816569550fc791358</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d023f6de2adf6f952412245012805fe0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5c9aaa9a11d406b6f730d9bdaee31bf9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b75959dead37b68640f4a643b8f2275b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_612f762472718b0c57c3e49f26bc239f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_03911452e83d0515470d6aa68e188816</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db5a076227401dbb880e0966d447e3e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_81d4e7561d96db88f7ddfd1a5ba79b81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4a588caec7db77287e53ad92f70632a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_79525f5bc9acbb2e4b84276caa188af1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1904c7551235f6940a3c0a1fe6a8ff46</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b9b94b33a9c98b6eff2bfbb04bcc3041</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d73c87f571888ed2229446906c3a538</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed6d8d2b7ec87d655566d682f46f8aa2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_729d2b8b0f0baccd7e0f38bf899fcdde</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6874fe00bf276742f1b295f69e2f7e57</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ee0cc1f3a3777ca144acdee11cbab37</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c41a573c8c0ac9cb7817014bf541aece</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e2bea7881599a9034cb8662b162feadc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_729ab026574ad68b9307ef8b7fff22ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_79e2cfdfbbfcf1e58fe31a0041010e23</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_524e691d355391555394ab2fb7df09c8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7e30a584707c94e99b8026804509d17</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_59bf97377c18ad4462454825291ea2bb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_efa1bf2a62bb8f3d0dc4e26f01b5e334</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dccd33c9360ba6c1e83be0951c5b1a14</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_23bdedda0a44d43d4616fa9d0a79aebd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c184d001afbb78f7f41493cccb881e14</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33e6874a0cd8e94f8cd667b98e01d69f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83a86d4b80960974eeafdbc22ce74d2b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63b834f3531c6edfa453a6171e05321a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b326f291b5cf02ee90b6b26ad11cc35c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15f5a68f5c4a97eee1d81454499591ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7693039162d8d52f614c0752fdb58b5d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a22fa3040693a10877904df6eb19e3ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1ef45c8d2c93aa323bd69100b7b1b46</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a10560e7481cbd1df7201c1112c61339</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_98ce46ef30297bb62aa7b708873627fe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7951519e20e2337550142207b61fcb2c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c55b5f27b7169db0f3bfa98fa782ddb3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3b402910fd333422e000b961b660485a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_37f684dd4d8c6386367f3e8416a25317</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95879df5c2e3f54e4f4c8dd55afdab94</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_055b229e18938c7a2eb1ef4a648fe3db</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f735cf7877c9775a77433417cece92b6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e2dd14e2119a5b468041acbac4723ee6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b4394b860d0cdd479b94564cb3fb0a77</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4d2f3b5918feebecec4d03b2c450916</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_10f85177b6197ee81e70df849b9569c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e50ac915255ada48f3a013597bb21d17</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eac1676dd8646663803eddd87c0048f5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cfe994f73d57004d6e2309a31abdf002</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f8428d7693008955f8e70b4b7a97e9cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_543e11fad6d80e31c8887cf3d904b786</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a63a08c9f8288a5115c4a418a81d390b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_feb4924728e0f76420fef04cfeca82f8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8dc9976775f53fa8a72c5d0e3e16281</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_66f8bd443344767caf6191dc2303c12d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9e5c510d25cdb37beda6665b88272ae4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3808ae93fa58b70b12053cd3ced55f76</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43c5d1ef3a531c7605dd796678ef5653</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de87b8eafb870329d6e9087c365c5469</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abb5a32e4f1bdbbf6cf1d863c46f39f2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_14414d91fd1502c5e070d2f5a454b3ba</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d3d8b7dd0612dbdba017ca345e5f23f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7f544e14199fdbda83abd1b9a3cf479d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53caaaffaccc8547ace35ad0b443d6dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_18d75a7077baa080eccd6b07bb9b40ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2f8124c73739527c92ff746fc6f9f31c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ad601aff2acfd96b5d54b5891239ada7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a26b75cf9488dff484f76858b5aaccd8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84c93d3d5ddb4e85e942aca8187592ed</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e74891ff485c9145fa673ca4ee228f62</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3880165e3ef63a155b9aa77915b3f6a5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21ab00435fcdd660c0c6b53fb81fcabf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cdb4479a655d75aac442f2a57f187944</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_58fdcdf040e060eec014727306ac04ea</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a4a083d5b4e981f8cfc4b8649a5958e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_54f89a0bf10f960c0a9305949ca3f0d2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0834649586ab1cfec8913c1b225e3a4b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3558fc3db65691af0a45f37c2b967772</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1cb70b2f1415264d9f2fa60b85ced758</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ee59dfb80724452541db8c81f5f2791</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_37602001aec02455412f2600b03793cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_913864c7240e2d3b1991abc248a900b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f7c7b0afd0bec8443f0a378fc1339fb7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e33f1a9684ec2f2c872803543b9e74f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63316c65d916b3e67e4b763a84fac27d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_66f366d9834f906946d3251ecb6662f6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c7e127682ad49d1f1a2471dc998f26dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8388aee21696f767d106772cec07a7c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5f4593c55fa35e076a749358c07f2914</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d5d3300adf46831c5e89bd711c7de54</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f94b2dee4ca2dd96662feb7dc68d914</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3babfcafb7e9c13059c6c237d695209a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_80f4eb84a6f3f2874c23da1580c8f7f0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1830e9b65611e458b28dfc4f00267dc8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_06a79fd641d51a528dbfdd8158fdb4e9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5ca09fa38687d630422825fa8d20146</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6790739d2815bf3b7cd493246847cdf5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d27a1713a19eac9985b06f4a90823b53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c3a978ec203ab4422eb6df306e386754</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7be7c8db8678b97a732bece66f0e9ead</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7fc4998599c8110abac8860925788f2e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7327316ccb44dc3caf5adc3b91f99f53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e06e4811720a59dff7007deb2b1de549</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c6580b5a20a9613c0fd4f165569457c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_840a4f124a3e850ee291a36a9097534f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5bd13f89141234db66211ccebb325be9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5f860c6738186dd2f1e44c9150038079</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2dc39fa1ccda3d19a17e723179d94c80</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-slideshare"><iframe src="https://www.slideshare.net/slideshow/embed_code/21313644" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mkowalski1/developing-a-practical-html5-magazine-workflow" title="Developing a practical HTML5 magazine workflow" target="_blank">Developing a practical HTML5 magazine workflow</a> </strong> from <strong><a href="http://www.slideshare.net/mkowalski1" target="_blank">Michael Kowalski</a></strong> </div></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_2dc39fa1ccda3d19a17e723179d94c80</wp:meta_key>
    <wp:meta_value><![CDATA[1418657256]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e33127ad2d399117b81c7af13decc3d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_18d1d6af0ff1d5aca3a0dbf5cc839784</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8897d286c039abbbed0ec5c87b4a423</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cf27bd0e8fb9c53a6e994f65bf5dd038</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5a84af6f066d2c8d8370e7b4faae827</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8f6ead94e11281ccfe15fb109ba398f4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c35de9fa214a74a735670662f6656596</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d4746c43ac6a83e8c2eb56a272a1f38</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5cb9d76de31c2a42055e5486051c9cb4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a5e1d62ea8cb73dfd9f5d4da79886b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5cbf86f433942869a16fac5e909d3044</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f5c76cd48933de6f91b0a3d8e32f1571</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8adbf6fe8e4cff287de3694cdc7baf51</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c2340298655d18f1c1776a78df0ed39f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_77240a192385703a5d8fb7a2ac027948</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b80438d5e686714f5727d921ac07785b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_db810bcd954b698f961fadaa3f754743</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8cf3cb80c7ed3267903d0e3a9325d645</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_166a7939222690d5a123cb417ce7cd03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89f029b3a234710d6a6cdd0a46003c51</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a487087bc043ea976b7ff69ef739b818</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4092c8eef314fdf4787fb4002696a77c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9545e63a84d84605cd9e61949e5cecc9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f812a5f181974228aaa2e13387a766e4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9ec25fd730ecc3bbf5ab5c5ff2c3c74</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8dc9c89a54137e16937f89bd7ce4e986</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6268c221f8c19eda407705d9d0026194</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_93bf091876c1070991a65b1423961ce4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ed9b70ca7d8c5ee6922221c37b0cc49</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4e1d2c065c1011b7aad78e029ecd7ea7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2f09e7ddb9496411623c3743813088a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9802297f665c21b56feb20e15be80b43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2a79dbfb372abee0071bda131b967ade</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_60616b3c5ff5626bca4a4c2d9d2d3cfb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21184e3f34a8334995d76c845a1c57d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1ab098652f2b106b81b7c648e0eb6894</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9f68c297ae64b165c5b67681782e68a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_56721323ef524e7f558dd7a4fa750e83</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c36e94c52cf2a6d60f57aaeb6821bc0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7dc9f11ac385119ee088181f15059a7f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1c493ef7e8506a5d5bb06287af5bbe3e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0c06a25a0ec5feec91ab34565152e002</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5f841495078195e66df6a2c2ec730cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b905da78f4d761248059c5d45bdceda0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c2666a71a535ddeb69c30b95b587b6b7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7e30e72da9728a52f2d3a05ceb16ae8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2105</wp:comment_id>
    <wp:comment_author><![CDATA[Valery]]></wp:comment_author>
    <wp:comment_author_email>vsilaev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>178.172.141.51</wp:comment_author_IP>
    <wp:comment_date>2014-09-23 22:26:56</wp:comment_date>
    <wp:comment_date_gmt>2014-09-23 21:26:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Peter,

Fully agree with you. To convince your readers - try to count how many keywords (and even worse - valid combinations of keywords) exist in SAP ABAP? See here - http://help.sap.com/abapdocu_731/en/abenabap_index.htm. It should not be surprising why SAP consultants have such fabulous rates :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1411535670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411535670.2781469821929931640625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1411535670]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-23 21:26:59]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411507616.941935062408447265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java private, protected, public and default]]></title>
  <link>https://javax0.wordpress.com/2014/07/30/java-private-protected-public-and-default/</link>
  <pubDate>Wed, 30 Jul 2014 19:47:25 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=526</guid>
  <description/>
  <content:encoded><![CDATA[You are a Java programmer, so you know what I am talking about. <tt>public</tt> modifiers make a method or field accessible from anywhere in the application. That is the simple part. But can you tell me the difference between <tt>protected</tt> and package private? (Hint: package private is the protection of a method or a field when you do not write any access modifier in front of it. Be aware! I lie!) My interview experience is that many do not know. Do I consider that as a no go for a Java developer? Not really. You may still be a good Java developer even if you do not know that. Perhaps now you will look it up somewhere. Perhaps the Java spec is a good document to start.
<p>
I tell you something more interesting.

<blockquote>Literally, none of the candidates know what <tt>private</tt> is. And you, reading this article, also do not know.</blockquote>

Ok, this is very provocative. You may be one of the few who happen to fill his brain with such a useless information and you may even have read the Java specification.
<p>
Most Java programmers think that private methods and fields are accessible only from within the class. Some even think that only from within the object instance. They believe that

[sourcecode language="java"]
public class PrivateAccessOtherObject {
    public PrivateAccessOtherObject(int i) {
        this.i = i;
    }
    private int i;
    void copyiTo(PrivateAccessOtherObject other){
        other.i = i;
    }
}
[/sourcecode]

is not possible. (It is.)
<p>
So what is private?

<blockquote>The recent <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#d5e9845">JLS</a> says that <i>A private class member or constructor is accessible only within the body of the top level class (Â§7.6) that encloses the declaration of the member or constructor.</i></blockquote>

The example in the Java specification is not the best describing the rule. Perhaps that is just a simple example. Something like this may be better explaining the concept:

[sourcecode language="java"]
public class PrivateFieldsContainingClass {
    private static class NestedClass {
        private int i;
    }
    private NestedClass nestedClassInstance = new NestedClass();
    void set(int i) {
        nestedClassInstance.i = i;
    }
    int get() {
        return nestedClassInstance.i;
    }
}
[/sourcecode]

The field <tt>i</tt> is accessible from the enclosing class as well as from inside the <tt>NestedClass</tt>. This example is also simple but more to the point that the specification example misses. Is there any real use of this possibility? <a href="http://javax0.wordpress.com/2013/12/18/design-pattern-immutable-embedded-builder/">Not really.</a>
<p>
Bonus question: why did I say I was lying?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>526</wp:post_id>
  <wp:post_date>2014-07-30 20:47:25</wp:post_date>
  <wp:post_date_gmt>2014-07-30 19:47:25</wp:post_date_gmt>
  <wp:post_modified>2014-07-30 20:47:25</wp:post_modified>
  <wp:post_modified_gmt>2014-07-30 19:47:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-private-protected-public-and-default</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203420562727499]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/BsQf3Hkd9Z4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/mOmUDRHx2g]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5900335717162184704&type=U&a=PCq1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1145</wp:comment_id>
    <wp:comment_author><![CDATA[szjanihu]]></wp:comment_author>
    <wp:comment_author_email>szjani@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/szjanihu</wp:comment_author_url>
    <wp:comment_author_IP>84.3.236.122</wp:comment_author_IP>
    <wp:comment_date>2014-07-30 22:24:06</wp:comment_date>
    <wp:comment_date_gmt>2014-07-30 21:24:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Accessing private fields from another instance is a common thing in overridden equals() methods.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406755450.6939361095428466796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"szjanihu";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1406755450]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-30 21:24:12]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25759182706]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1406755495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1406755495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406755495.156548023223876953125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1147</wp:comment_id>
    <wp:comment_author><![CDATA[Domo]]></wp:comment_author>
    <wp:comment_author_email>dominic.tolle@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.110.94.121</wp:comment_author_IP>
    <wp:comment_date>2014-07-31 09:16:19</wp:comment_date>
    <wp:comment_date_gmt>2014-07-31 08:16:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You lie because interface methods lacking an access modifier are implicitly public.  Love your blog, btw.  Keep up the good work.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406794580.7930390834808349609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25770220930]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1406794653]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-07-31 08:16:23]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1406794653]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406794653.205852985382080078125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1236</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2014-08-07 09:31:53</wp:comment_date>
    <wp:comment_date_gmt>2014-08-07 08:31:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the comment. That is really a good example, it just slipped my mind. Seems I do not write <code>equals</code> methods frequent enough.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1145</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1407400313]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407400313.6970450878143310546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[44938182]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1407400313]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-07 08:31:54]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1175</wp:comment_id>
    <wp:comment_author><![CDATA[Yurij Bondarenko]]></wp:comment_author>
    <wp:comment_author_email>bondarenkoyura@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.221.64.7</wp:comment_author_IP>
    <wp:comment_date>2014-08-03 19:55:33</wp:comment_date>
    <wp:comment_date_gmt>2014-08-03 18:55:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good question for the job interview. Thank you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407092133.7580320835113525390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[25873138900]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1407131055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-03 18:55:34]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1407131055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407131055.9064629077911376953125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Don not hit sysadmins with NPE!]]></title>
  <link>https://javax0.wordpress.com/2014/08/13/havin-npe-is-not-that-bad-is-it/</link>
  <pubDate>Wed, 13 Aug 2014 06:57:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=537</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://javax0.files.wordpress.com/2014/08/no-npe-ever.png"><img src="http://javax0.files.wordpress.com/2014/08/no-npe-ever.png?w=300" alt="" width="300" height="300" class="alignright size-medium wp-image-548" /></a>My opinion is that having a null pointer exception and getting it into the log without catching, handling and re-throwing it in another exception is not inherently bad. If we can do nothing better then it should not be a problem. The thing is that in practice almost always there is a better way to handle the situation.

Recently I was pair programming and we debugged some web code. We could not get through the authentication filter on the development environment and the authentication was not really in scope for the debugging so we decided to switch that totally off for the time. The next thing was an NPE. We looked at the code and we saw at the line something like

[sourcecode language="java"]
principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
[/sourcecode]


It was obvious: since the authentication was switched off the result of <tt>getAuthentication()</tt> was null, and therefore calling <tt>getPrincipal()</tt> on null caused the NPE. Should we modify the code to check if there is authentication information and throw a different exception? What would be the benefit to do that? The code runs slower, gets bigger (and bigger code is harder to maintain). And the NPE and the code source together are obvious. There is no need to change.

On second thought the NPE may not be that obvious for a support guy operating the code somewhere at the other side of this rotating ball. He may not have handy access to the source code and may not understand easily that the root cause for the NPE was the misconfiguration of the authentication layer. He/she has to start the server, it does not work and calls the support, raises a ticket. You as a responsible developer being at the farthest end of the support line may woke up during your finest sleep just to tell him/her that the authentication layer was misconfigured. Than you regret that you could have told it in the logs and in the exception.

[sourcecode language="java"]
Authentication auth = SecurityContextHolder.getContext().getAuthentication();
if( auth == null ){
  throw new BadConfigurationException(&quot;The authentication layer is not properly configured SecurityContextHolder.getContext().getAuthentication() returned null.&quot;
}
principal = auth.getPrincipal();
[/sourcecode]

Not that big deal and pays back on the long run.

Moral: What seems to be obvious for the developer during development may not be that easy for the system administrator. Admins are not familiar with the code, may not have access to source code, have less experience in programming. On the other hand they have great experience setting up and running systems. It is a hard work, they deserve proper log messages and talkative exceptions.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>537</wp:post_id>
  <wp:post_date>2014-08-13 07:57:23</wp:post_date>
  <wp:post_date_gmt>2014-08-13 06:57:23</wp:post_date_gmt>
  <wp:post_modified>2014-08-15 18:17:16</wp:post_modified>
  <wp:post_modified_gmt>2014-08-15 17:17:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>havin-npe-is-not-that-bad-is-it</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203512515026249]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/QbMiwv657PM]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/HDoQ9R2UJK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5905215571586228224&type=U&a=KYHk]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1303</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2014-08-15 00:09:56</wp:comment_date>
    <wp:comment_date_gmt>2014-08-14 23:09:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'd say that throwing an NPE is perfectly fine, assuming it gets a message:

Authentication auth = SecurityContextHolder.getContext().getAuthentication();
Preconditions.checkNotNull(auth, "The authentication layer is not properly configured SecurityContextHolder.getContext().getAuthentication() returned null.");
principal = auth.getPrincipal();]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1408057800]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408058121.271893978118896484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1408058121]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-14 23:09:56]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1307</wp:comment_id>
    <wp:comment_author><![CDATA[Bo]]></wp:comment_author>
    <wp:comment_author_email>sittingatthebay@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.109.73.167</wp:comment_author_IP>
    <wp:comment_date>2014-08-15 04:22:05</wp:comment_date>
    <wp:comment_date_gmt>2014-08-15 03:22:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[A developer that ignores valid returns (which null is on getAuthentication()), deserves to be woken at night :D]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1408072925]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408072925.789804935455322265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[270530847]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1408072925]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-15 03:22:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1316</wp:comment_id>
    <wp:comment_author><![CDATA[JackFr]]></wp:comment_author>
    <wp:comment_author_email>fij1mf@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>159.53.174.144</wp:comment_author_IP>
    <wp:comment_date>2014-08-15 17:34:44</wp:comment_date>
    <wp:comment_date_gmt>2014-08-15 16:34:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[moral != morale 
caching != catching]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408120485.1894180774688720703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[285656037]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1408123046]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-15 16:34:45]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1408123046]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408123046.0848929882049560546875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1317</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.126.53.182</wp:comment_author_IP>
    <wp:comment_date>2014-08-15 18:22:23</wp:comment_date>
    <wp:comment_date_gmt>2014-08-15 17:22:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks. I corrected and I learnt one new English word. The other one was typo that the spellchecker did not cache :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1316</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1408123343]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-15 17:22:24]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[285751076]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1408123343]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408123343.575314044952392578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8808</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Jacob]]></wp:comment_author>
    <wp:comment_author_email>jacob@j-e-b.net</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+MichaelJacob</wp:comment_author_url>
    <wp:comment_author_IP>109.193.251.112</wp:comment_author_IP>
    <wp:comment_date>2015-09-23 00:41:44</wp:comment_date>
    <wp:comment_date_gmt>2015-09-22 23:41:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sometimes those null checks really get into your way. Either because they'll add 18 indentation levels to your code, or because they'll make it hard to read, or you might be in a performance critical path (yes, even with Java that can happen).

In that case you can wrap your code in a try block, catch that NPE and then check what was null to produce a nice error message. But make sure your half-finished work doesn't have any unwanted outside effect!

BTW: I also have one of those checkNotNull() helper methods, but mine is, generics by thanked, inlinable. Very helpful every time Eclipse decides to force me to check enum.values() for null elements and such nonsense. Or thinks that a library's "public static final Foo foo = new Foo();" needs to be null-checked...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1442995939]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442995939.7671680450439453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1442995939]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442969357.8552520275115966796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[117273292432791213925]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15078498490]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-LaQFTW84P4U/AAAAAAAAAAI/AAAAAAAAAjQ/dp6zR-pcezI/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442965305.2837579250335693359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Logical thinking...]]></title>
  <link>https://javax0.wordpress.com/2014/08/20/logical-thinking/</link>
  <pubDate>Wed, 20 Aug 2014 09:00:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=550</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>"The fact that logical thinking is part of the job description of a programmer does not imply that others should not practice that."</blockquote>

This was a very witty comment on a Hungarian newsletter focusing on Java. The actual issue was about how to handle a SOAP message that is 1.8GB and has to be handled once a day. The issue was around checking the correctness of the message against some predefined XSD and then parsing the content and do some functionality controlled by the content.

This is a nice task and though I had no practical experience with a SOAP message of that huge size I recommended to do some benchmark on a machine which fits more or less the size of the memory and CPU of the production machine no matter what software stack is selected. These days a machine with 16GB or more memory is not so rare and one may be able to handle the 1.8GB SOAP in memory even if the overhead of JVM and Java were huge. (Which I do not say is, but it could be. If you are interested: you can measure and publish an article about that, different story.)

Some of the commenters followed a different pattern. They, the cleverer ones, suggested that perhaps the developer has to ask the business analyst (BA) about the details. It may not necessarily be the best solution from the business point of view to transfer such huge beasts over SOAP. What was the business reason to use SOAP? What was the business reason to use XML? What is the business benefit? What are the business goals? Business goals are rarely related to SOAP or XML. They are tools one (several) level lower in the solution chain.

When the business analyst gets the requirements from the business people, she should not just blindly pass it on. We, developers expect them to think a bit of technology. They are the bridge between the business people and the developers. Some of the BAs are very experienced technically and are eager to learn. Probably they are the ones that are also eager to learn on the other side: how the business work. Some BAs are less technical but still do their job. A SOAP message of 1.8GB should ring the warning bell even for a BA? Or not?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>550</wp:post_id>
  <wp:post_date>2014-08-20 10:00:08</wp:post_date>
  <wp:post_date_gmt>2014-08-20 09:00:08</wp:post_date_gmt>
  <wp:post_modified>2014-08-15 18:29:33</wp:post_modified>
  <wp:post_modified_gmt>2014-08-15 17:29:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>logical-thinking</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203557656434756]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/VM2yfiLfqeX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/j8QaQx4vuF]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5907783616544415744&type=U&a=VxNm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_50ca93618ecf03963d9bd9315ad1a12d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bc14860ad8376571f0aaa916b57e2096</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_71fd34a350201be0ea13ad2fbfc82e41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_450aafab5edc7cbf9e5c36b70216ae4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ca8a9d71e3c7f78bf42b29d3931bc46</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_83648629379147e5865d33f90fa39b8a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b91e19a4b89ac8a340dbfce54f033800</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d867dcafe8c9811beeb00aaa2b292885</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb214e87e7ec021d1b77ed511b694c10</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c1e4fcea3d2f2037f14242c89b092363</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fa24b3d85b9436e02e158a0ab75dcba5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7cba3dd6670952aff7ccedc057d22766</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f90b52a367e37b8f664018e13d19962f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_01ec23591136cbf5bdc43952fa77138a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ecbe787c667c5aa800347622b6754c4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_34adffa173a9d7ff3c46325b1f606c9b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Named parameters in Java (updated)]]></title>
  <link>https://javax0.wordpress.com/2014/08/27/named-parameters-in-java/</link>
  <pubDate>Wed, 27 Aug 2014 09:00:18 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=560</guid>
  <description/>
  <content:encoded><![CDATA[Creating a method that has many parameters is a major sin. Whenever there is a need to create such a method, sniff in the air: it is a code smell. Harden your unit tests and then refactor. No excuse, no buts. Refactor! Use builder pattern or even better use Fluent API. For the latter the annotation processor <del datetime="2019-06-11T11:39:34+00:00"><a href="https://github.com/verhas/fluflu">fluflu</a> may be of great help.</del> (Update: as of 2019. fluflu is deprecated. Use a more modern and handier solution: <a href="https://github.com/verhas/javageci">Java::Geci</a>.)

Having all that said we may come to a point in our life when we face real life and not the idealistic pattern that we can follow in our hobby projects. There comes the legacy enterprise library monster that has the method of thousands of parameters and you do not have the authority, time, courage or interest (bad for you) to modify ... ops... refactor it. You could create a builder as a facade that hides the ugly API behind it if you had the time. Creating a builder is still code that you have to unit test even before you write (you know: TDD) and you just may not have the time. The code that calls the monstrous method is also there already, you just maintain it.

You can still do some little trick. It may not be perfect, but still something.

Assume that there is a method

[sourcecode language="java"]
public void monster(String contactName, String contactId, String street, String district,
                    ...
                    Long pT){
...
}
[/sourcecode]

The first thing is to select your local variables at the location of the caller wisely. Pity the names are already chosen and you may not want to change it. There can be some reason for that, for example, there is an application-wide naming convention followed that may make sense even if not your style. So the call

[sourcecode language="java"]
monster(nm, &quot;05300&quot; + dI, getStrt(), d, ... , z+g % 3L );
[/sourcecode]

is not exactly what I was talking about. That is what you have and you can live with it, or just insert new variables into the code:

[sourcecode language="java"]
String contactName = nm;
String contactId = &quot;05300&quot; + dI;
String street = getStrt();
Street district = d;
...
Long pT = z+g % 3L;
monster(contactName, contactId, street, district, ... ,pT );
[/sourcecode]

or you can even write it in a way that is not usual in Java, though perfectly legal:

[sourcecode language="java"]
String contactName, contactId, street, district;
...
Long pT;
monster(contactName = nm, contactId = &quot;05300&quot; + dI, street = getStrt(), district = d, ... ,pT = z+g % 3L );
[/sourcecode]

Tasty is it? Depends. I would not argue on taste. If you do not like that, there is an alternative way. You can define auxiliary and very simple static methods:

[sourcecode language="java"]
static &lt;T&gt; T contactName(T t){ return T;}
static &lt;T&gt; T contactId(T t){ return T;}
static &lt;T&gt; T street(T t){ return T;}
static &lt;T&gt; T district(T t){ return T;}
...
static &lt;T&gt; T pT(T t){ return T;}

monster(contactName(nm), contactId(&quot;05300&quot; + dI), street(getStrt()(, district(d), ... ,pT(z+g % 3L) );
[/sourcecode]

The code is still ugly but a bit more readable at the place of the caller. You can even collect static methods into a utility class, or to an interface in case of Java 8 named like <tt>with</tt>, <tt>using</tt>, <tt>to</tt> and so on. You can statically import them to your code and have some method call as nice as

[sourcecode language="java"]
doSomething(using(someParameter), with(someOtherParameter), to(resultStore));
[/sourcecode]

When all that is there, you can feel honky dory if you answer the final question: what the blessed whatever<sup>*</sup> is parameter <tt>pT</tt>.

(<sup>*</sup> "whatever" you can replace with some other words, whichever you like)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>560</wp:post_id>
  <wp:post_date>2014-08-27 10:00:18</wp:post_date>
  <wp:post_date_gmt>2014-08-27 09:00:18</wp:post_date_gmt>
  <wp:post_modified>2019-06-11 12:41:58</wp:post_modified>
  <wp:post_modified_gmt>2019-06-11 11:41:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>named-parameters-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5910321286390784000&type=U&a=R7Yh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203615330516572]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/8GSjtQar7xB]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/HZXvFjaXsT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31713494335]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1645</wp:comment_id>
    <wp:comment_author><![CDATA[Mircea]]></wp:comment_author>
    <wp:comment_author_email>m_chirac@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>94.18.243.144</wp:comment_author_IP>
    <wp:comment_date>2014-09-01 07:52:23</wp:comment_date>
    <wp:comment_date_gmt>2014-09-01 06:52:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool. I didn't know that neither. :) Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409554343.2574799060821533203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409556492]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-01 06:52:24]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409556492]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409556493.1311089992523193359375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1543</wp:comment_id>
    <wp:comment_author><![CDATA[Laszlo Gazsi]]></wp:comment_author>
    <wp:comment_author_email>laszlo@gazsi.net</wp:comment_author_email>
    <wp:comment_author_url>http://laszlo.gazsi.net</wp:comment_author_url>
    <wp:comment_author_IP>217.13.183.252</wp:comment_author_IP>
    <wp:comment_date>2014-08-27 11:25:56</wp:comment_date>
    <wp:comment_date_gmt>2014-08-27 10:25:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow, I didn't know it was possible to pass the parameters as: monster(contactName = nm, contactId = "05300" + dI, street = getStrt()... This will come very handy in the project I currently work on, since it contains dozens of methods with too much parameters. And it becomes even more frustrating when you see a method call like someMethod(someArg, null, null, null, someArg2, null, "", null, null).

Thank you for sharing!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409135156.4208428859710693359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"lacyg88";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409160622]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-27 10:26:18]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409160622.745893955230712890625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409160622]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2940</wp:comment_id>
    <wp:comment_author><![CDATA[Adam]]></wp:comment_author>
    <wp:comment_author_email>apribek@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>84.1.149.4</wp:comment_author_IP>
    <wp:comment_date>2014-10-22 12:14:47</wp:comment_date>
    <wp:comment_date_gmt>2014-10-22 11:14:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's just assignments to those dummy variables in the same line, not some special parameter passing, of course. But good idea nevertheless.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1543</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413996233.22276401519775390625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1413996233]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413980199.6178700923919677734375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413976488.0415470600128173828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1413996233]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12476</wp:comment_id>
    <wp:comment_author><![CDATA[Generating Source Code, a Compromise | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2018/05/23/generating-source-code-a-compromise/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.169</wp:comment_author_IP>
    <wp:comment_date>2018-05-23 15:01:08</wp:comment_date>
    <wp:comment_date_gmt>2018-05-23 14:01:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] with edit time source code generation. I created tools like Fluflu mentioned in my article &#8220;Named parameters in Java&#8220;, or Scriapt Java annotation processing tool described in the article &#8220;Donât write [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527084069.949794;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1527104358]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1527104358.53369;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1527088111.34906;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Name of the class]]></title>
  <link>https://javax0.wordpress.com/2014/09/03/name-of-the-class/</link>
  <pubDate>Wed, 03 Sep 2014 09:00:50 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=564</guid>
  <description/>
  <content:encoded><![CDATA[In Java every class has a name. Classes are in packages and this lets us programmers work together avoiding name collision. I can name my class <tt>A</tt> and you can also name your class <tt>A</tt> so long as long they are in different packages, they work together fine.

If you looked at the API of the class <tt>Class</tt> you certainly noticed that there are three different methods that give you the name of a class:

<ul>
	<li><tt>getSimpleName()</tt> gives you the name of the class without the package.</li>
	<li><tt>getName()</tt> gives you the name of the class with the full package name in front.</li>
	<li><tt>getCanonicalName()</tt> gives you the canonical name of the class.</li>
</ul>

Simple is it? Well, the first is simple and the second is also meaningful unless there is that disturbing canonical name. That is not evident what that is. And if you do not know what canonical name is, you may feel some disturbance in the force of your Java skills for the second also. What is the difference between the two?

If you want a precise explanation, visit the <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.7">chapter 6.7 of Java Language Specification</a>. Here we go with something simpler, aimed simpler to understand though not so thorough.

Let's see some examples:

[sourcecode language="java"]
package pakage.subpackage.evensubberpackage;
import org.junit.Assert;
import org.junit.Test;

public class WhatIsMyName {
	@Test
	public void classHasName() {
		final Class&lt;?&gt; klass = WhatIsMyName.class;
		final String simpleNameExpected = &quot;WhatIsMyName&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		Assert.assertEquals(nameExpected, klass.getCanonicalName());		
	}
...
[/sourcecode]

This "unit test" just runs fine. But as you can see there is no difference between name and canonical name in this case. (Note that the name of the package is <tt>pakage</tt> and not <tt>package</tt>. To test your java lexical skills answer the question why?)

Let's have a look at the next example from the same junit test file:

[sourcecode language="java"]
	@Test
	public void arrayHasName() {
		final Class&lt;?&gt; klass = WhatIsMyName[].class;
		final String simpleNameExpected = &quot;WhatIsMyName[]&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;[Lpakage.subpackage.evensubberpackage.WhatIsMyName;&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		final String canonicalNameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName[]&quot;;
		Assert.assertEquals(canonicalNameExpected, klass.getCanonicalName());		
	}
[/sourcecode]

Now there are differences. When we talk about arrays the simple name signals it appending the opening and closing brackets, just like we would do in Java source code. The "normal" name looks a bit weird. It starts with an <tt>L</tt> and semicolon is appended. This reflects the internal representation of the class names in the JVM. The canonical name changed similar to the simple name: it is the same as before for the class having all the package names as prefix with the brackets appended. Seems that <tt>getName()</tt> is more the JVM name of the class and <tt>getCanonicalName()</tt> is more like the fully qualified name on Java source level.

Let's go on with still some other example (we are still in the same file):

[sourcecode language="java"]
	class NestedClass{}
	
	@Test
	public void nestedClassHasName() {
		final Class&lt;?&gt; klass = NestedClass.class;
		final String simpleNameExpected = &quot;NestedClass&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName$NestedClass&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		final String canonicalNameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName.NestedClass&quot;;
		Assert.assertEquals(canonicalNameExpected, klass.getCanonicalName());		
	}
[/sourcecode]

The difference is the dollar sign in the name of the class. Again the "name" is more what is used by the JVM and canonical name is what is Java source code like. If you compile this code, the Java compiler will generate the files:

<ul>
	<li><tt>WhatIsMyName.class</tt> and</li>
	<li><tt>WhatIsMyName$NestedClass.class</tt></li>
</ul>

Even though the class is named nested class it actually is an inner class. However in the naming there is no difference: a static or non-static class inside another class is just named the same. Now let's see something even more interesting:

[sourcecode language="java"]
	@Test
	public void methodClassHasName() {
		class MethodClass{};
		final Class&lt;?&gt; klass = MethodClass.class;
		final String simpleNameExpected = &quot;MethodClass&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName$1MethodClass&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		final String canonicalNameExpected = null;
		Assert.assertEquals(canonicalNameExpected, klass.getCanonicalName());
	}
[/sourcecode]

This time we have a class inside a method. Not a usual scenario, but valid from the Java language point of view. The simple name of the class is just that: the simple name of the class. No much surprise.

The "normal" name however is interesting. The Java compiler generates a JVM name for the class and this name contains a number in it. Why? Because nothing would stop me having a class with the same name in another method in our test class and inserting a number is the way to prevent name collisions for the JVM. The JVM does not know or care anything about inner and nested classes or classes defined inside a method. A class is just a class. If you compile the code you will probably see the file <tt>WhatIsMyName$1MethodClass.class</tt> generated by javac. I had to add "probably" not because I count the possibility of you being blind, but rather because this name is actually the internal matter of the Java compiler. It may choose different name collision avoiding strategy, though I know no compiler that differs from the above.

The canonical name is the most interesting. It does not exist! It is null. Why? Because you can not access this class from outside the method defining it. It does not have a canonical name. Let's go on.

What about anonymous classes. They should not have name. After all, that is why they are called anonymous.

[sourcecode language="java"]
	@Test
	public void anonymousClassHasName() {
		final Class&lt;?&gt; klass = new Object(){}.getClass();
		final String simpleNameExpected = &quot;&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;pakage.subpackage.evensubberpackage.WhatIsMyName$1&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		final String canonicalNameExpected = null;
		Assert.assertEquals(canonicalNameExpected, klass.getCanonicalName());
	}
[/sourcecode]

Actually they do not have simple name. The simple name is empty string. They do, however have name, made up by the compiler. Poor javac does not have other choice. It has to make up some name even for the unnamed classes. It has to generate the code for the JVM and it has to save it to some file. Canonical name is again null.

Are we ready with the examples? No. We have something simple (a.k.a. primitive) at the end. Java primitives.

[sourcecode language="java"]
	@Test
	public void intClassHasName() {
		final Class&lt;?&gt; klass = int.class;
		final String intNameExpected = &quot;int&quot;;
		Assert.assertEquals(intNameExpected, klass.getSimpleName());
		Assert.assertEquals(intNameExpected, klass.getName());
		Assert.assertEquals(intNameExpected, klass.getCanonicalName());
	}
[/sourcecode]

If the class represents a primitive, like <tt>int</tt> (what can be simpler than an int?) then the simple name, "the" name and the canonical names are all <tt>int</tt> the name of the primitive.

Just as well an array of a primitive is very simple is it?

[sourcecode language="java"]
	@Test
	public void intArrayClassHasName() {
		final Class&lt;?&gt; klass = int[].class;
		final String simpleNameExpected = &quot;int[]&quot;;
		Assert.assertEquals(simpleNameExpected, klass.getSimpleName());
		final String nameExpected = &quot;[I&quot;;
		Assert.assertEquals(nameExpected, klass.getName());
		final String canonicalNameExpected = &quot;int[]&quot;;
		Assert.assertEquals(canonicalNameExpected, klass.getCanonicalName());
	}
[/sourcecode]

Well, it is not simple. The name is <tt>[I</tt>, which is a bit mysterious unless you read the <a href="http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3">respective chapter</a> of the JVM specification. Perhaps I talk about that another time.

<h1>Conclusion</h1>

The simple name of the class is simple. The "name" returned by <tt>getName()</tt> is the one interesting for JVM level things. The <tt>getCanonicalName()</tt> is the one that looks most like Java source.

You can get the full source code of the example above from the gist <a href="https://gist.github.com/verhas/e789d700d3c9abc6afa0">e789d700d3c9abc6afa0</a> from GitHub.


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>564</wp:post_id>
  <wp:post_date>2014-09-03 10:00:50</wp:post_date>
  <wp:post_date_gmt>2014-09-03 09:00:50</wp:post_date_gmt>
  <wp:post_modified>2014-08-26 12:48:17</wp:post_modified>
  <wp:post_modified_gmt>2014-08-26 11:48:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>name-of-the-class</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203686906505927]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/17bcU1nnGGF]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/eeoI7nQ3kS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5912857129508708352&type=U&a=vNDs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1600c61c4070824da0ae95d65f1f7a87</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b54e5734fd3850856f9318b81ae54102</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1cff23dd8ef45bd0a1a38f7cfecd6c1d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40eca20cb7d6050f6a806fff9315c4a7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e9a0c49ec8b67ec71472404770f5c2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ba6d22c0b722773b147e33de72491912</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95c0c51b170c2ddb393aca0d8cfac1d5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bbbc5fa3b22f25615832fc775f3f477d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c9082f19b27d896dcdf3ebcc334bc00</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13e60680ea241713ac75570a09e8de24</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4461d1f1fb30087f5dfbbdbeaa4a07a9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_89b4bfc76456fad77747503929889f86</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e4a4edada3fe6648a3c6d8cbab02baf1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd9c3bfaa857280ce9d3ba35db3d1f73</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6845eb76b11a94bf34418c2fe7dc49fe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1603ca5e70489c77ff0a05b9c33ba010</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_28de251129e2c300424e999f762ac1e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_916f67f1073142f90662f618dac26db3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c51a63937fd34848b6daaced905cf1c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bea99f55de65523bcef9efe11d4e5c96</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c34f71ba4b9872c8a5906539c22b3303</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6ebf7b4483c86330256194ef7630a034</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dcbbfe4d07e2c9f33fdf1b3c5a5ac949</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0c5dafa1eff30148007d101a0c7fa58</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c0a5caad6c8f2db991d70a9934937745</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a05066aa5e82e023dcf3b857820f00d7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0cfb265250e5fdeffb51ded89558efa0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4a353e90901335a8c00a7a0ffa6f3e7f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc1a3d3708d596cb527308e1fc6aacc2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_126906a2490444f95ff587ffce825003</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3a6f5d02a413e721d0baaa541f50f05d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05ed1456dd76505727374a94fd6b4021</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_da3bfa9408263f62d31e0180687802ca</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6aa7ad50e2b74a37b4ca671f243803bb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a52e7174575ef573a3cbb58863ca2ed9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4edccf253593000fed5ff03e1c55706</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d7dec4e974902dbc328332dcd091f81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46caf54b45bb55d6f71e351b8df75041</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a597af08290b0360f79ffc6e1a4959b1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f3b5e76a7ca1f0a4e19ca821c3cd6c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_577293604d024314c46d71cae0cf9589</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_84d08ed0960534d26a823c9bfd69856a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_79e6a900e60956e514c582bfd29c8a89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86d5a51ca92d28b4f5915620a68e315f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_379e665ca5cdbb2b095eca9f03fa3df2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c725b0174b09a29d919670f20a88053</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_af66b8cabc22fc4ab6f9e91d891f3631</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8ab01dc4ec943c8a61869579f92ce576</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e822d86be6ccf634cedc37d407b9de2f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04304ca8acc84a2d251c9b3cc23522b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3cf241c1d43ea2697fb15f4ce0ae8131</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_537835afc6f4bd5f36935ed2f5ee6c5c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dd26dd228f4b7f92e3ef2763c559198e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ffc6bc204958119648a55aaa156bb0a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c8723b5d32791b7b684a7822722842f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ecb0c9ccca068326619648f72e393efc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e8a9a399d2ee9745484d0e1372900b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9a7e6e43786334b77fdd92c6a530ced9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e7917aca8ee0f69e6f0ea6681e9a0f64</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e4f1493e335c35d78cf4eb0df13915ec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40f229fa18df334e5a0c1498f1086d41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9c27890aec215595169155e11c3ad994</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d3417babc374f0129819c0095d114f47</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d852b8e9bd97c5412a7880c87978eb4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8052bf5d5ded746fb4e281614ebd33cd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_609fae8d26e51b54f86a7ed445ea519f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8da413b336b691de5e9d6e32517e8b81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_350a2d4a09aa4ca62c8a5f929c3a9687</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cdd78a521f479ff05900f3ac1e45da89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4aff107f1489e636c87640235f9d703c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15f7454680ba4781df446058abba957a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_650cd3c34213f2badbf47ed4621f8e05</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e418b2dff8ec09ef19d2305eeefe086b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b6effe61fd83be6f0fd2a4d881679cc3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_36307b52e74ce5443600b86f352d5e6d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6490e182926ca613b5b25cdb313cbb87</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86e0cb02794890c68501c466948c4c67</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c43fa74808e7ecd645cfeb3aa4a906d9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c3a0f7bfbec4318cd28c33001ef1fc0f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a493075e7c1281d09cd873497051d854</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4fdc15981d20227b5fcbc22d38ed9196</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13cde2c61f3097c7411f6803fecd8f08</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63ff9b1bf5dffeb35b00c9c8d65f8bbe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1df6673c150e25cffb4562046a37e329</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b71bc416c818a0a78c2dba3a1e7f2d5f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9334fb011112e51a860f73636764bdf7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13637b7e765c2e960bacee4167d5a7b5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15ead267f2731b65997e0be43a13cda0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8290453cb4862b21946f4fc84b4c16d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_04be3cef13d3d89ab9b94541adddf05f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_15fa9ef50ebfadb9d2227fb2934b4e2b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eda16282ace82c77ae1135f9c295207f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b0f5405b45009444b3c7c2c8e17112d4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_21032058000fbe9850ac0e5615ad3bb9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43771251f7b3e3b8cc66b4924d4982ab</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e43ebfbfdbecc20218faf2bd5c80eca9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1711</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.3.188.140</wp:comment_author_IP>
    <wp:comment_date>2014-09-04 09:02:42</wp:comment_date>
    <wp:comment_date_gmt>2014-09-04 08:02:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes. That is exactly what the sample code shows.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1701</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-04 08:02:44]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409817763]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409817763]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409817763.2899949550628662109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1701</wp:comment_id>
    <wp:comment_author><![CDATA[ArrrA]]></wp:comment_author>
    <wp:comment_author_email>arrr@arrr.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.165.141.253</wp:comment_author_IP>
    <wp:comment_date>2014-09-03 23:14:00</wp:comment_date>
    <wp:comment_date_gmt>2014-09-03 22:14:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting entry. I don't recall well, but when i used anonymous classes, i believe simpleName returned empty]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1409817635]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409817635.818933010101318359375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1409817635]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-03 22:14:01]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1409782440.8256909847259521484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3896</wp:comment_id>
    <wp:comment_author><![CDATA[When null checking miserably fails | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://javax0.wordpress.com/2014/11/05/nonnullstringisnull/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.185</wp:comment_author_IP>
    <wp:comment_date>2014-11-05 10:00:59</wp:comment_date>
    <wp:comment_date_gmt>2014-11-05 09:00:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] method toString() in class Object has a return type java.lang.String. You may want to read my article about the difference between the name, simple name and canonical name of a class. It may shed some [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1415178342]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415178342.8995749950408935546875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415178059.609767913818359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[A classloading mystery solved]]></title>
  <link>https://javax0.wordpress.com/2014/09/10/a-classloading-mystery-solved/</link>
  <pubDate>Wed, 10 Sep 2014 09:00:22 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=577</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Facing a good old problem</h1>

I was struggling with some class loading issue on an application server. The libraries were defined as maven dependencies and therefore packaged into the WAR and EAR file. Some of these were also installed into the application server, unfortunately of different version. When we started the application we faced the various exceptions that were related to these types of problems. There is a good <a href="http://publib.boulder.ibm.com/infocenter/wsdoc400/v6r0/index.jsp?topic=/com.ibm.websphere.iseries.doc/info/ae/ae/rtrb_classload_viewer.html">IBM article</a> about these exceptions if you want to dig deeper.

Even though we knew that the error was caused by some double defined libraries on the classpath it took more than two hours to investigate which version we really needed, and what JAR to remove.

<h1>Same topic by accident on JUG the same week</h1>

A few days later we participated the <a href="http://www.jug.ch/html/events/2014/classloader.html">Do you really get Classloaders?</a> session of Java Users' Society in ZÃ¼rich. <a href="http://devangelist.blogspot.hu/">Simon Maple</a> delivered an extremely good intro about class loaders and went into very deep details from the very start. It was an eye opening session for many. I also have to note that Simon works Zero turnaround and he evangelizes for JRebel. In such a situation a tutorial session is usually biased towards the actual product that is the bread for the tutor. In this case my opinion is that Simon was absolutely gentleman and ethic keeping an appropriate balance.

<h1>Creating a tool, to solve mystery</h1>
<h2>just to create another one</h2>

A week later I had some time to hobby program that I did not have time for a couple weeks by now and I decided to create a little tool that lists all the classes and JAR files that are on the classpath so investigation can be easier to find duplicates. I tried to rely on the fact that the classloaders are usually instances of <tt>URLClassLoader</tt> and thus the method <tt>getURLs()</tt> can be invoked to get all the directory names and JAR files.

Unit testing in such a situation can be very tricky, since the functionality is strongly tied to the class loader behavior. To be pragmatic I decided to just do some manual testing started from JUnit so long as long the code is experimental. First of all I wanted to see if the concept is worth developing it further. I was planning to execute the test and look at the log statements reporting that there were no duplicate classes and then executing the same run but second time adding some redundant dependencies to the classpath. I was using JUnit 4.10 The version is important in this case.

I executed the unit test from the command line and I saw that there were no duplicate classes, and I was happy. After that I was executing the same test from Eclipse and surprise: I got 21 classes redundantly defined!

[sourcecode language="text"]
12:41:51.670 DEBUG c.j.c.ClassCollector - There are 21 redundantly defined classes.
12:41:51.670 DEBUG c.j.c.ClassCollector - Class org/hamcrest/internal/SelfDescribingValue.class is defined 2 times:
12:41:51.671 DEBUG c.j.c.ClassCollector -   sun.misc.Launcher$AppClassLoader@7ea987ac:file:/Users/verhasp/.m2/repository/junit/junit/4.10/junit-4.10.jar
12:41:51.671 DEBUG c.j.c.ClassCollector -   sun.misc.Launcher$AppClassLoader@7ea987ac:file:/Users/verhasp/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar
...
[/sourcecode]

Googling a bit I could discover easily that JUnit 4.10 has an extra dependency as shown by maven

[sourcecode language="text"]
$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building clalotils 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ clalotils ---
[INFO] com.verhas:clalotils:jar:1.0.0-SNAPSHOT
[INFO] +- junit:junit:jar:4.10:test
[INFO] |  \- org.hamcrest:hamcrest-core:jar:1.1:test
[INFO] +- org.slf4j:slf4j-api:jar:1.7.7:compile
[INFO] \- ch.qos.logback:logback-classic:jar:1.1.2:compile
[INFO]    \- ch.qos.logback:logback-core:jar:1.1.2:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.642s
[INFO] Finished at: Wed Sep 03 12:44:18 CEST 2014
[INFO] Final Memory: 13M/220M
[INFO] ------------------------------------------------------------------------
[/sourcecode]

This is actually fixed in 4.11 so if I change the dependency to JUnit 4.11 I do not face the issue. Ok. Half of the mystery solved. But why maven command line execution does not report the classes double defined?

Extending the logging, logging more and more I could spot out a line:

[sourcecode language="text"]
12:46:19.433 DEBUG c.j.c.ClassCollector - Loading from the jar file /Users/verhasp/github/clalotils/target/surefire/surefirebooter235846110768631567.jar
[/sourcecode]

What is in this file? Let's unzip it:

[sourcecode language="text"]
$ ls -l /Users/verhasp/github/clalotils/target/surefire/surefirebooter235846110768631567.jar
ls: /Users/verhasp/github/clalotils/target/surefire/surefirebooter235846110768631567.jar: No such file or directory
[/sourcecode]

The file does not exist! Seemingly maven creates this JAR file and then deletes it when the execution of the test is finished. Googling again I found the solution.

Java loads the classes from the classpath. The classpath can be defined on the command line but there are other sources for the application class loaders to fetch files from. One such a source is the manifest file of a JAR. The manifest file of a JAR file can define what other JAR files are needed to execute the classes in the JAR file. Maven creates a JAR file that contains nothing else but the manifest file defining the JARs and directories to list the classpath. These JARs and directories are NOT returned by the method <tt>getURLs()</tt>, therefore the (first version) of my little tool did not find the duplicates.

For demonstration purposes I was quick enough to make a copy of the file while the <tt>mvn test</tt> command was running, and got the following output:

[sourcecode language="text"]
$ unzip /Users/verhasp/github/clalotils/target/surefire/surefirebooter5550254534465369201\ copy.jar 
Archive:  /Users/verhasp/github/clalotils/target/surefire/surefirebooter5550254534465369201 copy.jar
  inflating: META-INF/MANIFEST.MF    
$ cat META-INF/MANIFEST.MF 
Manifest-Version: 1.0
Class-Path: file:/Users/verhasp/.m2/repository/org/apache/maven/surefi
 re/surefire-booter/2.8/surefire-booter-2.8.jar file:/Users/verhasp/.m
 2/repository/org/apache/maven/surefire/surefire-api/2.8/surefire-api-
 2.8.jar file:/Users/verhasp/github/clalotils/target/test-classes/ fil
 e:/Users/verhasp/github/clalotils/target/classes/ file:/Users/verhasp
 /.m2/repository/junit/junit/4.10/junit-4.10.jar file:/Users/verhasp/.
 m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar fi
 le:/Users/verhasp/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-
 1.7.7.jar file:/Users/verhasp/.m2/repository/ch/qos/logback/logback-c
 lassic/1.1.2/logback-classic-1.1.2.jar file:/Users/verhasp/.m2/reposi
 tory/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar
Main-Class: org.apache.maven.surefire.booter.ForkedBooter

$ 
[/sourcecode]

It really is nothing else than the manifest file defining the classpath. But why does maven do it? Sonatype people, some of whom I also know personally are clever people. They don't do such a thing just for nothing. The reason to create a temporary JAR file to start the tests is that the length of the command line is <a href="http://support.microsoft.com/kb/830473">limited on some of the operating systems</a> that the length of the classpath may exceed. Even though Java (since Java 6) itself <a href="http://docs.oracle.com/javase/6/docs/technotes/tools/windows/classpath.html">resolves wildcard</a> characters in the classpath it is not an option to maven. The JAR files are in different directories in the maven repo each having long name. Wildcard resolution is not recursive, there is a good reason for it, and even if it were you just would not like to have all your local repo  on the classpath.

<h1>Conclusion</h1>

<ul>
	<li>Do not use JUnit 4.10! Use something older or newer, or be prepared for surprises.</li>

	<li>Understand what a classloader is and how it works, what is does.</li>

	<li>Use an operating system that has huge limit for the maximum size of a command line length.
            Or just live with the limitation.</li>
</ul>

Something else? Your ideas?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>577</wp:post_id>
  <wp:post_date>2014-09-10 10:00:22</wp:post_date>
  <wp:post_date_gmt>2014-09-10 09:00:22</wp:post_date_gmt>
  <wp:post_modified>2016-05-20 14:17:08</wp:post_modified>
  <wp:post_modified_gmt>2016-05-20 13:17:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-classloading-mystery-solved</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/eXt3KPd4sQq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203742049164459]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/ipB5R4tHVP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5915393166978088960&type=U&a=zFDw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23004505887]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2179</wp:comment_id>
    <wp:comment_author><![CDATA[javabealzy]]></wp:comment_author>
    <wp:comment_author_email>belazy1987@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://javabelazy.blogspot.in/</wp:comment_author_url>
    <wp:comment_author_IP>117.204.80.185</wp:comment_author_IP>
    <wp:comment_date>2014-09-27 16:26:11</wp:comment_date>
    <wp:comment_date_gmt>2014-09-27 15:26:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[really surprised !]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1411990092]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411990092.08644390106201171875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411831571.866168975830078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1411990092]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-09-27 15:26:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Autoboxing]]></title>
  <link>https://javax0.wordpress.com/2014/09/17/autoboxing/</link>
  <pubDate>Wed, 17 Sep 2014 09:00:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=588</guid>
  <description/>
  <content:encoded><![CDATA[Autoboxing is clear for all Java developers since Java 1.5 Well, I may be too optimistic. At least all developers are supposed to be ok with autoboxing. After all there is a good tutorial about it on the page of <a href="http://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">ORACLE</a>.

Autoboxing is the phenomena when the Java compiler automatically generates code creating an object from a primitive type when it is needed. For example you can write:

[sourcecode language="java"]
Integer a = 42;
[/sourcecode]

and it will automatically generate JVM code that puts the value <tt>int</tt> 42 into an <tt>Integer</tt> object. This is so nice of the compiler to do it for us that after a while we, programmers just tend to forget about the complexity behind it and from time to time we run against the wall.

For example we have <tt>double.class</tt> and <tt>Double.class</tt>. Both of them are objects (as being a class and each class itself is an object in permgen or just on the heap in post-permgen version of JVM). Both of these objects are of type  <tt>Class</tt>. What is more: since Java 1.5 both of them are of type <tt>Class&lt;Double&gt;</tt>.

If two objects have the same type, they also have to be assignment compatible aren't they. Seems to be an obvious statement. If you have object <tt>O a</tt> and object <tt>O b</tt> then you can assign <tt>a = b</tt>.

Looking at the code, however we may realize being oblivious instead of obvious:

[sourcecode language="java"]
public class TypeFun {
    public static void main(String[] args) {
        // public static final Class&lt;Double&gt;   TYPE = (Class&lt;Double&gt;)Class.getPrimitiveClass(&quot;double&quot;);
        System.out.println(&quot;Double.TYPE == double.class: &quot; + (Double.TYPE == double.class));
        System.out.println(&quot;Double.TYPE == Double.class: &quot; + (Double.TYPE == Double.class));
        System.out.println(&quot;double.class.isAssignableFrom(Double.class): &quot; + (double.class.isAssignableFrom(Double.class)));
        System.out.println(&quot;Double.class.isAssignableFrom(double.class): &quot; + (Double.class.isAssignableFrom(double.class)));
    }
}
[/sourcecode]

resulting

[sourcecode]
Double.TYPE == double.class: true
Double.TYPE == Double.class: false
double.class.isAssignableFrom(Double.class): false
Double.class.isAssignableFrom(double.class): false
[/sourcecode]

This means that the primitive pair of <tt>Double</tt> is <tt>double.class</tt> (not surprising). Even though one can not be assigned from the other. We can look at the source at least of the one of the them. The source of the class <tt>Double</tt> is in the RT.jar and it is open source. There you can see that:

[sourcecode language="java"]
public static final Class&lt;Double&gt;	TYPE = (Class&lt;Double&gt;) Class.getPrimitiveClass(&quot;double&quot;);
[/sourcecode]

Why does it use that weird <tt>Class.getPrimitiveClass("double")</tt> instead of <tt>double.class</tt>? That is the primitive pair of the type <tt>Double</tt>.

The answer is not trivial and you can dig deep into the details of Java and JVM. Since <tt>double</tt> is not a class, there is nothing like <tt>double.class</tt> in reality. You can still use this literal in the Java source code though and this is where the Java language, compiler and the run-time has some strong bondage. The compiler knows that the class <tt>Double</tt> defines a field named <tt>TYPE</tt> denoting the primitive type of it. Whenever the compiler sees <tt>double.class</tt> in the source code it generates JVM code <tt>Double.TYPE</tt>. (Give it a try and then use javap to decode the generated code!) For this very reason the developer of the RT could not write 

[sourcecode language="java"]
public static final Class&lt;Double&gt;	TYPE = double.class;
[/sourcecode]

into the source of the class <tt>Double</tt>. It would compile to the code equivalent:

[sourcecode language="java"]
public static final Class&lt;Double&gt;	TYPE = TYPE;
[/sourcecode]

How is autoboxing going on then? The source

[sourcecode language="java"]
Double b = (double)1.0;
[/sourcecode]

results

[sourcecode]
         0: dconst_1      
         1: invokestatic  #2                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
         4: astore_1 
[/sourcecode]

however if we replace the two 'd' letters:

[sourcecode language="java"]
double b = (Double)1.0;
[/sourcecode]

then we get

[sourcecode]
         0: dconst_1      
         1: invokestatic  #2                  // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
         4: invokevirtual #3                  // Method java/lang/Double.doubleValue:()D
         7: dstore_1    
[/sourcecode]

, which ineed explains a lot of things. The instances of the class <tt>double.class</tt> the class <tt>Double.class</tt> are not assign compatible. Autoboxing solves this. Java 4 was a long time ago and we, luckily forgot it.

Your homework: reread what happens related to autoboxing when you have overloaded methods that have arguments of the "class" type and the corresponding primitive type.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>588</wp:post_id>
  <wp:post_date>2014-09-17 10:00:59</wp:post_date>
  <wp:post_date_gmt>2014-09-17 09:00:59</wp:post_date_gmt>
  <wp:post_modified>2014-09-13 09:53:39</wp:post_modified>
  <wp:post_modified_gmt>2014-09-13 08:53:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>autoboxing</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/CyQunNeCNdN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10203784386142857]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/qe8qdlEOlw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5917931843490971648&type=U&a=YKmy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Why to use String]]></title>
  <link>https://javax0.wordpress.com/2014/10/22/why-to-use-string/</link>
  <pubDate>Wed, 22 Oct 2014 09:00:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=592</guid>
  <description/>
  <content:encoded><![CDATA[Recently I was tutoring juniors during a training session. One of the task was to write a class that can dwarwle maps based on some string key. The result one of the juniors created contained the following method:

[sourcecode language="java"]
	void dwarwle(HashMap&lt;String,Dwarwable&gt; mapToDwarwle, String dwarwleKey){
		for( final Entry&lt;String, Dwarwable&gt; entry : mapToDwarwle.entrySet()){
			dwarwle(entry.getKey(),entry.getValue(),dwarwleKey);
		}
	}
[/sourcecode]

The code was generally ok. The method to dwarwle an individual dwarwable entry using the actual key it is assigned to in the hash map and the dwarwle key is factored to a separate method. It is so simple that I do not list here. The variable names are also meaningful so long as long you know what actually dwarwling is. The method is short and readable, but the argument list expects a <tt>HashMap</tt> instead of a <tt>Map</tt>. Why do we want to restrict the caller to use a <tt>HashMap</tt>? What if the caller has a <tt>TreeMap</tt> and for good reason. Do we want to have separate method that can dwarwle <tt>TreeMap</tt>? Certainly not.

<blockquote>Expect the interface, pass the implementation.</blockquote>

The junior changed the code replacing <tt>HashMap</tt> to </tt>Map</tt> but after five minutes or so this clever lady raised her hand and had the following question:

"If we changed HashMap to Map, why did not we change String to CharSequence?"

It is not so easy to answer a question like that when it comes out of the blue. The first thing that came up in my mind is that the reason is that we usually do it that way and that is why. But that is not a real argument, at least I would not accept anything like that and I also expect my students not to accept such answer. It would be very dictator style anyway.

The real answer is that the parameter is used as a key in a map and the key of a map should be immutable (at least mutation should be resilient to equals and hashcode calculation). <tt>CharSequence</tt> is an interface and an interface in Java (unfortunately) can not guarantee immutability. Only implementation can. <tt>String</tt> is a good, widely known and well tested implementation of this interface and therefore can be a good choice. There is a good discussion about it on <a href="http://stackoverflow.com/questions/13234584/when-to-use-charsequence">stackoverflow</a>.

In this special case we expect the implementation because we need something immutable and we "can not" trust the caller to pass a character sequence implementation that is immutable. Or: we can, but it has a price. If a <tt>StringBuilder</tt> is passed and modified afterwards our dwarwling library may not work and a blame war may start. When we design an API and a library we should also think about not only the possible but also about the actual, average use.


<blockquote>A library is as good as it is used and not as it could be used.</blockquote>

This can also be applied to other products, not only libraries but this may lead too far (physics and weapon).

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>592</wp:post_id>
  <wp:post_date>2014-10-22 10:00:23</wp:post_date>
  <wp:post_date_gmt>2014-10-22 09:00:23</wp:post_date_gmt>
  <wp:post_modified>2015-03-25 11:21:56</wp:post_modified>
  <wp:post_modified_gmt>2015-03-25 10:21:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-to-use-string</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204044159637032]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/hVXJtBmnJjK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/ItCXWkU3ij]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5930613524572176384&type=U&a=olI_]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cafdaebb27249f3d3c658b753a225c65</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c608c50e1d02113179062a22bdca38a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd1b232cf43fc7cb2bd4b8af1a1eddaa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_70465b37671c2fcda6b207b9c33412e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_64be80ed85a02653857ffc97df94d9c9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_540459c01e2649b78f6bf4246ad7f686</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ba322ed0e1b53bf0dcb66da41fe1da6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_81b2896b3a3798a0666af42bd35c00f4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a8be891e2b391c0627747d1bbd3d2aae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_479e5c62e674611a609cb1edec9ca2cb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6435d445b07fdfb276edd40b2ff1d40d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_02011a1989568aa928fddb8b8b6951ae</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9bcf015634fe37b246df053bddf59c2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8a307a10b21e69fab7360de4068f1d89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd5cce52fba980e3f48d3f66aa636981</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f227720aa8a18a2fff1bcabe5897beb1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f95bc63c5c55c03de015bcbd2a56222</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1abb1369f30069c81ac59bc0cbb78aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3f4ccdd4751d1a08c74741071ede568f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_63d0919cb1baaceddfe84645f6235628</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_74c653cf242b0d54d06218e0da9f69b9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_174c2b5cb9568ce6bf0cf5fe0b9888eb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_de7585dcfe9d14d148105ed9c788df33</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5fe94e793146a7d2971fc0489a830301</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a4c3930fef9dc21d4f5a62f514dac761</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3723</wp:comment_id>
    <wp:comment_author><![CDATA[Bence Sarosi]]></wp:comment_author>
    <wp:comment_author_email>Bence_Sarosi@epam.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.linkedin.com</wp:comment_author_url>
    <wp:comment_author_IP>80.98.201.199</wp:comment_author_IP>
    <wp:comment_date>2014-11-02 21:05:07</wp:comment_date>
    <wp:comment_date_gmt>2014-11-02 20:05:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes and no.
http://javax0.wordpress.com/2014/10/29/do-not-use-immutable-in-your-api/

The real reason behind this all I think is String being so much low-level and widely used (of course it is) that if modules that depend on immutability had to deal with the issue themselves it could potentially render systems that use text unmaintainable.

What do you think?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414958707]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414958707.985024929046630859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2795825694]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414958708]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3072</wp:comment_id>
    <wp:comment_author><![CDATA[Basil Bourque]]></wp:comment_author>
    <wp:comment_author_email>basil.bourque@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>184.78.240.187</wp:comment_author_IP>
    <wp:comment_date>2014-10-24 09:41:18</wp:comment_date>
    <wp:comment_date_gmt>2014-10-24 08:41:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This challenge is known formally as known as the Liskov Substitution Principle, defining the need for strong behavioral subtyping.

https://en.wikipedia.org/wiki/Liskov_substitution_principle]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414140078.927278041839599609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414154392]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414144806.950622081756591796875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414154392]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414154392.3305370807647705078125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3082</wp:comment_id>
    <wp:comment_author><![CDATA[Tom]]></wp:comment_author>
    <wp:comment_author_email>tarjohnson1979@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/tarjohnson1979</wp:comment_author_url>
    <wp:comment_author_IP>91.215.166.4</wp:comment_author_IP>
    <wp:comment_date>2014-10-24 15:35:48</wp:comment_date>
    <wp:comment_date_gmt>2014-10-24 14:35:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The reason to use the Map interface is that it's a role: there are multiple ways of filling that role, and we don't mind what sort of Map it is. Abstracting over that type means abstracting over its behaviour, and that means its interface.

In this example, the String is data. It's apparent that we're using it as data, because we're using it as a key: we're not calling any methods on it. We don't want to abstract over data.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414165750.492683887481689453125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:14:"tarjohnson1979";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414161348.51167392730712890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:14:"tarjohnson1979";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414171580]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414171580]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414171580.2900450229644775390625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3136</wp:comment_id>
    <wp:comment_author><![CDATA[Edward Beckett (@edwardjbeckett)]]></wp:comment_author>
    <wp:comment_author_email>edwardjbeckett@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/edwardjbeckett</wp:comment_author_url>
    <wp:comment_author_IP>108.240.0.111</wp:comment_author_IP>
    <wp:comment_date>2014-10-25 08:00:23</wp:comment_date>
    <wp:comment_date_gmt>2014-10-25 07:00:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Pardon my ignorance but what exactly does "dwarwle" mean?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://pbs.twimg.com/profile_images/3562252063/45a6e215a95ebb3e0215e45a2988dba0_normal.png]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[14064417]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414238740]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414220423.4637959003448486328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414225326.0922219753265380859375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414238740]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414238740.6927471160888671875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3219</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>78.139.46.197</wp:comment_author_IP>
    <wp:comment_date>2014-10-26 13:31:25</wp:comment_date>
    <wp:comment_date_gmt>2014-10-26 12:31:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My guess about dwarwle:
A fictional word that fits well into example code. Luckily, it has a noun and a verb form so it can be a method too :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>3136</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414326685]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414326685.674581050872802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414326685]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3415</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.25</wp:comment_author_IP>
    <wp:comment_date>2014-10-29 09:48:23</wp:comment_date>
    <wp:comment_date_gmt>2014-10-29 08:48:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I can neither confirm nor deny.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>3219</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414572504]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414572504.1681220531463623046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2624889279]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414572504]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3489</wp:comment_id>
    <wp:comment_author><![CDATA[ipsi]]></wp:comment_author>
    <wp:comment_author_email>nzipsi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>203.97.252.45</wp:comment_author_IP>
    <wp:comment_date>2014-10-30 11:49:03</wp:comment_date>
    <wp:comment_date_gmt>2014-10-30 10:49:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ehhhh... Strictly speaking, Strings <em>are not</em> immutable.

Given the following code:

[sourcecode language="java"]
String a = &quot;ABC&quot;, b = &quot;ABC&quot;, c = new String(new char[]{'A', 'B', 'C'});
a.intern();
b.intern();
char[] naughty;
Class clazz = String.class;
Field f = clazz.getDeclaredField(&quot;value&quot;);
f.setAccessible(true);
naughty = (char[]) f.get(a);
naughty[0] = 'Z';
System.out.println(a);
System.out.println(b);
System.out.println(c);
[/sourcecode]
You will get the following output:

ZBC
ZBC
ABC

You should clearly <em>never ever</em> do this, but it's perfectly possible, assuming you haven't set up a SecurityManager which will deny setAccessible on fields in the String class. I've also never seen it in the wild, and I personally wouldn't worry about it unless you've otherwise got good reason to suspect incredible stupidity.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414666143.3172719478607177734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"nzipsi";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2668020092]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414666204]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414666204]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414666204.95501995086669921875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3491</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.25</wp:comment_author_IP>
    <wp:comment_date>2014-10-30 12:02:25</wp:comment_date>
    <wp:comment_date_gmt>2014-10-30 11:02:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Taking that into consideration will lead to far away. How secure can our application can be and how much should we trust the libraries we use and also the other parts of the code. After all nothing is immutable except, perhaps bytes in the ROM (unless you use a hammer). A JNI call can just overcome any limitations of the JVM and just may change anything. Why to stop at reflection, lets use the big bomb to do nasty things.

Side note: The lines

[sourcecode language="java"]
a.intern();
b.intern();
[/sourcecode]

have no effect. The string "ABC" is already interned by the code generated by the compiler and calling <tt>intern()</tt> does not alter the string. It only returns a new string that is interned. Thus the lines above would make more sense in the form:

[sourcecode language="java"]
a = a.intern();
b = b.intern();
[/sourcecode]

except that the variables point to an already interned string. They are pointing to the very same string object actually, thus

[sourcecode language="java"]
a == b
[/sourcecode]

is also true. This does not, however, lessen the value of your comment. Strings are special beasts in Java.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>3489</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414666945]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414666946.1223208904266357421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2668391876]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414666946]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do not use immutable in your API]]></title>
  <link>https://javax0.wordpress.com/2014/10/29/do-not-use-immutable-in-your-api/</link>
  <pubDate>Wed, 29 Oct 2014 09:00:04 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=596</guid>
  <description/>
  <content:encoded><![CDATA[Why should an API define methods that accept Guava Immutable collection types? It should not. The intent of the author of such an API is clear: she wants to declare and be safe that the method does not modify the collection that the caller passes. The problem is that it forces the caller to use Guava immutable collections and the caller can not just pass a hash or tree map, a hash set or whatever is a matching type for the actual collection. I know that this is not a big deal to convert a map or set to the immutable counterpart, but let me, as a user of a library have the freedom to decide if I want to do that.

It does not mean that I do not need guarantee. When an API documents that a collection that the caller passes will not be altered, I expect the implementation (a.k.a. library) not to do that. I expect it working just like any other feature, which is documented. However, the implementation is the internal responsibility of the library and has to be well coded during development time. It simply should not call any of the mutating methods. To assess that the development time tools have to be used. Unit tests. Code analysis.

If the library wants to be on the safe side, it can use the Guava library to "copy" the value passed as argument to the API from a collection interface to the appropriate immutable implementation. Or it can use the JDK built in <tt>Collections.unmodifiableXXX</tt> methods. Whether it does it or not is implementation detail. The API, the declaration of the classes, methods, arguments are the "interface". The API user should only face the interface and not the implementation details.

Therefore I say: do not use immutable implementations in the method parameter list. Use them in the implementation only.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>596</wp:post_id>
  <wp:post_date>2014-10-29 10:00:04</wp:post_date>
  <wp:post_date_gmt>2014-10-29 09:00:04</wp:post_date_gmt>
  <wp:post_modified>2014-10-23 15:49:13</wp:post_modified>
  <wp:post_modified_gmt>2014-10-23 14:49:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-use-immutable-in-your-api</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204095942491571]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/KxJBDNbEVmJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/0QAqcbaBc9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5933150535665356800&type=U&a=vP0R]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3653</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>84.176.178.239</wp:comment_author_IP>
    <wp:comment_date>2014-11-01 18:52:49</wp:comment_date>
    <wp:comment_date_gmt>2014-11-01 17:52:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Your article is titled "Do not use immutable in your API", but you concentrated on the easier side only, namely formal parameters. What about declaring a method to return an immutable collection?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414864370]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414864370.23980808258056640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[104379794518123041179]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414864370]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3718</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>84.176.166.180</wp:comment_author_IP>
    <wp:comment_date>2014-11-02 20:02:39</wp:comment_date>
    <wp:comment_date_gmt>2014-11-02 19:02:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The problem with interfaces is that there's no such interface. If my API returns <code>List</code> while I need to pass it around, I can easily wrap it using <code>ImmutableList.copyOf</code>. If I'm happy and the list is already immutable, then it's essentially free... in terms of speed. The boilerplate code is to be written and read (and unlike with the arguments, it's to be written outside of the API).

But yes, it's a detail. If the API already has an <code>ImmutableList</code>, then it can return it. If the implementation changes, so that it has no more <code>ImmutableList</code> to return, then it'll be forced to wrap whatever it has; possibly wasting time, but this is IMHO no big deal as the probability of this happening is very low.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>3714</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414954959]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414954959.615415096282958984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2794051301]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414954959]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3714</wp:comment_id>
    <wp:comment_author><![CDATA[Bence Sarosi]]></wp:comment_author>
    <wp:comment_author_email>Bence_Sarosi@epam.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.98.201.199</wp:comment_author_IP>
    <wp:comment_date>2014-11-02 19:13:03</wp:comment_date>
    <wp:comment_date_gmt>2014-11-02 18:13:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, that's implementation detail as well. The best, I think, would be trying to only accept and return interfaces and standard built-in objects as much as possible. There are, of course, cases when this is not feasible. Those are hard times. On the other hand, however, the majority of scenarios (we're talking about developing fresh code for an API) grant you this opportunity, for which the good practice of developing for testability (or TDD straight away) provides an excellent aid.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>3653</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[2792665098]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1414952031]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414952031]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414952031.43914890289306640625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414951984.026935100555419921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3570</wp:comment_id>
    <wp:comment_author><![CDATA[Black]]></wp:comment_author>
    <wp:comment_author_email>b.sheep@seznam.cz</wp:comment_author_email>
    <wp:comment_author_url>http://Sheep</wp:comment_author_url>
    <wp:comment_author_IP>91.213.143.248</wp:comment_author_IP>
    <wp:comment_date>2014-10-31 14:24:21</wp:comment_date>
    <wp:comment_date_gmt>2014-10-31 13:24:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You are insane.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414761861.720326900482177734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1414768888]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414766036.0804760456085205078125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1414768888]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414768889.0102550983428955078125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do all business logic on the client using JavaScript?]]></title>
  <link>https://javax0.wordpress.com/2014/11/19/do-all-business-login-on-the-client-using-javascript/</link>
  <pubDate>Wed, 19 Nov 2014 09:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=611</guid>
  <description/>
  <content:encoded><![CDATA[<h1>History look</h1>
The first applications were running on "the" computer. There was nothing like "client" and "server". There was the computer and the punch card input, printer output. Later the mainframe came and the clients were terminals. Looking back, we can say that this was a two tier architecture with lightweight clients. This was practically the same with the mini computers (PDP, VAX and their clones) until the PC was introduced.

The PC architecture introduced the two tier paradigm that contained a fat client and file server or database server. Three tier architecture was supposed to replace the two tier architecture to have a no-so-fat client, server supporting business logic and storage on the third tier. Then came the web and the browser and the client was replaced by web page. Thin client was invented. At least the terminology was born that time. And during the last 20 years the web technology evolved and with HTML5 we have something on the client side that is very powerful and in functionality and in capability comparable to the thick client of the early PC era. If we consider the memory and CPU power we currently have an HTML5 capable browser fairly overcomes any early PC fat client.

Time to think about what is implemented in what tier. As we see the functionality, storage and code were dangling back and forth between the client and various server components. The optimal distribution of functionality was determined by the distribution and availability of CPU power in the different tiers, storage capabilities and network latency as well as bandwidth. Technology evolving changing the ratio between these changed where we put parts of the functionality.

<h1>Today</h1>

Today clients are so powerful that we are tempted to put everything on the client. It is not only the available top-notch client, which is so powerful. We can also expect good cpu power, memory and bandwidth on the average client. Why not to put all functions on the client? Could we do all business logic on the client? Almost. There are some features, not mentioned above, that a client does not implement and is not likely to implement in the near future with the current architectures. Some of these are features like:

<ul>
	<li>persistence</li>
	<li>search</li>
	<li>transactions</li>
	<li>trust</li>
</ul>

Let us look at these features.

<h2>Persistence</h2>

You can not store data reliably on the client. Backup, archive, audit logging are functions that are naturally live on a server. If ever any of these are implemented on a client machine that machine is operated as a server some way. If not impossible then probably expensive to do it on a client. Individual clients can not simply backed up and they have to communicate with each other to see the same state of the data that reflects the actual state of the modeled world.

<h2>Search</h2>

Search is also something not likely to be implemented on the client. Search needs the data to search in. In some cases the data set can be copied to the client and thus the search can be implemented on the client, but in most of the cases the client will work only with a subset of the data, therefore search is implemented on the server.

<h2>Transaction</h2>

Transactions are tied to data. If you sell airplane tickets you may not want to have a system that asks all other client terminals if the seat A in row 13 is still free on a certain line. That would be a total noise like a room full of people. Perhaps something like the old stock trading rooms may resemble to that.

<h2>Trust</h2>

Clients are owned by the person having physical access to the machine. <a href="http://en.wikipedia.org/wiki/Talking_Moose">Steve Halls'</a> talking moose said: "Never trust a computer you can not lift." When it comes to physical security it is crucial the other way around: Never trust a computer somebody else can lift. In an application you can not trust any communication that comes from a certain client unless you established some trust. Password, card access whatever. But the trust to maintain is up to the server, which some bad guy can not nick.

<h1>Where does it come?</h1>

Single page applications contain static HTML, CSS and JavaScript. The server communicates with the client using Ajax, REST, JSON. The users identify themselves using some authentication, probably OAuth. After that the client application displays whatever the functionality of the application needs and the server provides only data functionality. All the server should do is CRUD with access control. Whenever a client wants to access some data the server has to check if the said user has the rights to read and/or to write the data. Other than that the server need not know anything about the business functionality.

Persistence services, like MySQL or MongoDB (to name one of SQL and NoSQL) are providing REST interface and the interfaces obviously do require authentication. However the authorization scheme of these interfaces are very weak. The usual approach is: if you authenticate you are authorized. There is no document or record level access control, which I see will come in the future. First we will have applications that work as a front-end to these persistence applications that check the authorization and based on that let or deny the operation to perform. However this solution is not optimal from the performance point of view. The logical implementation of such logic is where the data is: in the database.

If and when the databases will support such a record level authorization schema we can write all our code, or almost all code in JavaScript running on the client. Applications will be developed in JavaScript. Java will only remain for enterprise integration, connection handling to legacy systems. Java will be what Cobol is today. Will it?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>611</wp:post_id>
  <wp:post_date>2014-11-19 10:00:00</wp:post_date>
  <wp:post_date_gmt>2014-11-19 09:00:00</wp:post_date_gmt>
  <wp:post_modified>2014-11-19 10:25:41</wp:post_modified>
  <wp:post_modified_gmt>2014-11-19 09:25:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-all-business-login-on-the-client-using-javascript</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5940763653782409218&type=U&a=7p0k]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204234003983022]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/ecFd8aeNGyX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/k6pt9IxNJP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fd69f69a11a605bf9643ab2ec3d7d272</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6177</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.25</wp:comment_author_IP>
    <wp:comment_date>2014-12-19 15:48:29</wp:comment_date>
    <wp:comment_date_gmt>2014-12-19 14:48:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The question is if that middle tier could be written in JavaScript and also executed on the browser. Considering that a browser becomes available on all platforms as native operating system application or embeddable into an application as a component it could be possible.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6176</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1419000509]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419000509.5990040302276611328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1419000509]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6176</wp:comment_id>
    <wp:comment_author><![CDATA[Greg Brown (@gk_brown)]]></wp:comment_author>
    <wp:comment_author_email>gk_brown@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/gk_brown</wp:comment_author_url>
    <wp:comment_author_IP>50.201.19.35</wp:comment_author_IP>
    <wp:comment_date>2014-12-19 15:41:45</wp:comment_date>
    <wp:comment_date_gmt>2014-12-19 14:41:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Putting business logic in the client is arguably fine if you are only going to have a single client app. However, if you plan to support multiple client apps (e.g. native desktop/mobile in addition to HTML), you'd need to duplicate that logic across all of your client implementations. That's going to require a lot of extra development and testing. Placing business logic in the middle tier allows you to implement and test it once for all clients. It also allows you to more easily add support for additional clients in the future.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[882946304]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1419000264]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1419000264]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419000264.995440006256103515625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://abs.twimg.com/sticky/default_profile_images/default_profile_2_normal.png]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419000106.3106520175933837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5749</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.68.38.6</wp:comment_author_IP>
    <wp:comment_date>2014-12-03 15:05:27</wp:comment_date>
    <wp:comment_date_gmt>2014-12-03 14:05:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No it will be PHP instead or some successor of it :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1417630504]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417615529.1627089977264404296875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1417630504]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417630505.0687348842620849609375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6154</wp:comment_id>
    <wp:comment_author><![CDATA[chomnoue]]></wp:comment_author>
    <wp:comment_author_email>chomnoue@yahoo.fr</wp:comment_author_email>
    <wp:comment_author_url>http://chomnoue.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>41.205.31.148</wp:comment_author_IP>
    <wp:comment_date>2014-12-17 09:32:40</wp:comment_date>
    <wp:comment_date_gmt>2014-12-17 08:32:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Even if you can let the client securely have access to the data base, how will you do if you want them to access from different devices and technologies? will you implement one version of the business logic for each technology ( browser, android, ios, linux and windows desktop)? How will you let other applications access your business logic?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>67451847</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418805160.6234281063079833984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"chomnoue";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1418805282]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1418805282]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418805282.6619369983673095703125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6157</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.25</wp:comment_author_IP>
    <wp:comment_date>2014-12-17 13:12:16</wp:comment_date>
    <wp:comment_date_gmt>2014-12-17 12:12:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I do not say that the technology is ready and smooth, uniform and can be developed once and deployed anywhere. But technology goes into that direction. Browsers, android, ios, linux and windows desktops all can be programmed in JavaScript as well as server side.

If you separate the business logic from UI in your JavaScript code the same code can be deployed on a server using the CRUD rest interface as well as on any user facing client.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6154</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1418818337]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418818337.830728054046630859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1418818338]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6178</wp:comment_id>
    <wp:comment_author><![CDATA[Greg Brown (@gk_brown)]]></wp:comment_author>
    <wp:comment_author_email>gk_brown@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/gk_brown</wp:comment_author_url>
    <wp:comment_author_IP>50.201.19.35</wp:comment_author_IP>
    <wp:comment_date>2014-12-19 17:48:21</wp:comment_date>
    <wp:comment_date_gmt>2014-12-19 16:48:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think that certain types of applications could benefit from the approach you describe. But I doubt that this type of approach will ever become a "universal" solution. As always, use the right tool for the job...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6177</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1419007702]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419007702.7869050502777099609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1419007703]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8820</wp:comment_id>
    <wp:comment_author><![CDATA[Burak]]></wp:comment_author>
    <wp:comment_author_email>ozduzen@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.240.144.233</wp:comment_author_IP>
    <wp:comment_date>2015-09-25 19:56:20</wp:comment_date>
    <wp:comment_date_gmt>2015-09-25 18:56:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter, I think there is much need for what you describe and a lot of people moving on that direction but on the other side still a lot of companies and individuals invest considerable amount of time and money to the business logic and from compettion perspective moving this investment to a tier that can easily be obtained by competirors is still a lot of risk.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1443416461]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443416461.54471588134765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1443416460]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443207381.263433933258056640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1443212122.454432964324951171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9480</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2016-01-04 09:57:03</wp:comment_date>
    <wp:comment_date_gmt>2016-01-04 08:57:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My anticipation:
The diversity in languages will remain, so Java will remain as in server side as in client-side (say Android). Even if new languages will appear, some of them will carry on Java's heritage. The more important thing IMHO is, that clients will be more like microservices. They're not tied to a particular server, they survive if the network is down, etc.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1451897825]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451897825.9757630825042724609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1451897826]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[When null checking miserably fails]]></title>
  <link>https://javax0.wordpress.com/2014/11/05/nonnullstringisnull/</link>
  <pubDate>Wed, 05 Nov 2014 09:00:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=613</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Disclaimer</h1>

Before going on I have to state that the techniques described in this article serve no practical purpose when we program Java. It is like a crossword or puzzle. It may train your brain in logical thinking, may develop your Java language knowledge or even your thinking skills. It is like a trick a magician performs. At the end you realize that nothing is what it looks like. Never do such tricks in real life programming that you may need to apply to solve this mind twister.

<h1>The Problem</h1>

I recently read an <a href="http://darylmathison.wordpress.com/2013/11/08/when-a-string-is-null-but-not-null/">article</a> that described the debugging case when

[sourcecode language="java"]
if(trouble != null &amp;&amp; !trouble.isEmpty()) {
  System.out.println(âfine here: â + trouble);
  }else{
  System.out.println(ânot so fine here: â + trouble);
}
[/sourcecode]

was printing out

[sourcecode language="text"]
fine here: null
[/sourcecode]

The actual bug was that the string contained "null", a.k.a. the characters 'n', 'u', 'l' and 'l'. May happen in real life especially when you concatenate strings without checking the nullity of a variable.
<p>
Then I started to think about other similar strange code and debug situation. Could I make it so that the variable is not only "null" string with these characters but really null? Seems to be crazy? Have a look at the code:

[sourcecode language="java"]
package com.javax0.blog.nullisnotnull;

public class NullIsNotNull {

	public static void troubled(){
		String trouble = new String(&quot;hallo&quot;);
		Object z = trouble != null &amp;&amp; !trouble.toString().isEmpty() ? 
                                                          trouble.toString() : &quot;&quot;;
		if (z == null) {
			System.out.println(&quot;z is really &quot; + z + &quot;?&quot;);
		}
	}
}
[/sourcecode]

Will it ever print out the 

[sourcecode language="text"]
z is really null?
[/sourcecode]

question. The fact is that you can create a Java class containing a <tt>public static void main()</tt> so that starting that class as a Java application the sentence will be printed when <tt>main()</tt> invokes the method <tt>troubled()</tt>. In other words: I really invoke the method <tt>troubled()</tt> and the solution is not that <tt>main()</tt> prints the sentence.

In this case the variable <tt>z</tt> is not only printed as "null" but it really is null.

<h1>Hints</h1>

The solution should not involve

<ul>
	<li>reflection</li>
	<li>byte code manipulation</li>
	<li>calling JNI</li>
	<li>special class loaders</li>
	<li>java agent</li>
	<li>annotation processor</li>
</ul>

These are too heavy tools. You do not need such armory for the purpose.

<h2>Hint #1</h2>

If I change the code so that the variable <tt>z</tt> is <tt>String</tt> it does not even compile:

[caption id="attachment_622" align="aligncenter" width="630"]<a href="https://javax0.files.wordpress.com/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png"><img src="https://javax0.files.wordpress.com/2014/10/java_ee_-_stringdemo_src_main_java_com_javax0_blog_nullisnotnull_nullisnotnull_java_-_eclipse_-__users_verhasp_github_javax_blog.png" alt="This is what I see in Eclipse" width="630" height="165" class="size-full wp-image-622" /></a> This is what I see in Eclipse[/caption]

If it confused you even more, then sorry. Read on!

<h2>Hint #2</h2>

In the Java language <tt>String</tt> is an identifier and not a keyword. The <a href="http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf">Java Language Specification</a> section 3.9 may give more information on the significance of this.

<h2>Hint #3</h2>

The method <tt>toString()</tt> in class <tt>Object</tt> has a return type <tt>java.lang.String</tt>. You may want to read my <a href="http://javax0.wordpress.com/2014/09/03/name-of-the-class/">article</a> about the difference between the name, simple name and canonical name of a class. It may shed some light and increase the hit count of the article.

<h2>Hint #4</h2>
 
To use a class declared in the same package you need not import that package.

<h1>Solution</h1>

The solution is to create a class named <tt>String</tt> in the same package. In that case the compiler will use this class instead of <tt>java.lang.String</tt>. The ternary operator in the code is simple magician trick. Something to diverge your attention from the important point. The major point is that String is not <tt>java.lang.String</tt> in the code above. If you still can not find out how to create the trick class, click on the collapsed source code block to see it in all glory:

[sourcecode language="java" collapse="true"]
package com.javax0.blog.nullisnotnull;

class String {
	private java.lang.String jString;
	private boolean first = true;

	public String(java.lang.String s) {
		jString = s;
	}

	public boolean isEmpty() {
		return jString.isEmpty();
	}

	@Override
	public java.lang.String toString() {
		if( first ){
			first = false;
			return jString;
		}
		return null;
	}

	public static void main(java.lang.String[] args) {
		NullIsNotNull.troubled();
	}
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>613</wp:post_id>
  <wp:post_date>2014-11-05 10:00:12</wp:post_date>
  <wp:post_date_gmt>2014-11-05 09:00:12</wp:post_date_gmt>
  <wp:post_modified>2014-11-17 15:16:02</wp:post_modified>
  <wp:post_modified_gmt>2014-11-17 14:16:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nonnullstringisnull</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0fea58ba955144231affacdfa08bb843</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_220873f61a874517f460acf55d74a1c2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204141659434466]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/ADT6fmNfhYB]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/G9b2zM8YJZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5935686994351923201&type=U&a=KQDw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bbf273dc410b455c064c794e456e65a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c9df135d988b4f9165c4c76aeef8826</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f16426491ca68d50eeaf272f708f9f4f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_966bf703d2c0beefa9c085db043c67f9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Some Sentences about Java]]></title>
  <link>https://javax0.wordpress.com/2014/11/26/some-sentences-about-java/</link>
  <pubDate>Wed, 26 Nov 2014 09:00:33 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=640</guid>
  <description/>
  <content:encoded><![CDATA[There is nothing new in this article. I just collected some trivial statements which may not be trivial for some of the junior programmers programmers. Boring old stuff.

If you happen all of these things you know more about Java than the average house wife. I do not know if there is point to know all of these. You can be a fairly good Java programmer if you do not know some of these features. However a lot of new information in this article probably indicates you have room to develop.

<h1>There are 4 different protection types</h1>

in Java (not three). These are <tt>private</tt>, package private, <tt>protected</tt> and <tt>public</tt>. If you do not specify any protection modifier when you define an element in a class it will be package private (and not public and not protected). [caption id="attachment_670" align="alignleft" width="300"]<img src="https://javax0.files.wordpress.com/2014/11/four-levels-of-protection.png" alt="4 levels" width="300" height="264" class="size-full wp-image-670" /> There are four levels of protection in Java.[/caption]On the other hand if you do not specify protection modifier in front of a method declaration in an <em>interface:</em> it will be public. You may specify it to be explicitly <tt>public</tt> but it does not have effect on Java and SONAR will not like you doing so.[caption id="attachment_673" align="alignright" width="300"]<img src="https://javax0.files.wordpress.com/2014/11/protection-is-transitive.png" alt="Protection is Transitive" width="300" height="365" class="size-full wp-image-673" /> Protection is Transitive[/caption]

<em>My opinion about Java allowing you to optionally write <tt>public</tt> in front of a method in an interface is that this is a technology mistake.</em>

Similarly you can write <tt>final</tt> in front of a field in an interface, or even <tt>static</tt>. It may imply that they could be non-static or non-final: not true. Fields of an interface are final and static. Always.

<h1>Protected and package private are not the same</h1>

Package private (or default) protection will let other classes of the same package access to the method or field. Protected methods and fields can be used from 
classes in the same package (so far the same as package private) and in addition to that it can be used from other classes that extend the class containing the protected field or method.

<h1>Protected is transitive</h1>

If there are three packages <tt>a</tt>, <tt>b</tt> and <tt>c</tt>, each containing a class named <tt>A</tt>, <tt>B</tt> and <tt>C</tt> so that <tt>B</tt> extends <tt>A</tt> and <tt>C</tt> extends <tt>B</tt> then the class <tt>C</tt> can access the protected fields and methods of <tt>A</tt>.

[sourcecode language="java"]
package a;

public class A {
	protected void a() {

	}
}
package b;

import a.A;

public class B extends A {
	protected void b() {
		a();
	}
}
package c;

import b.B;

public class C extends B {
	protected void c() {
		a();
	}
}
[/sourcecode]

<h1>Interface can not define protected methods</h1>

Many thinks that you can also define <tt>protected</tt> methods in an interface. When programming the compiler makes it obvious fast and brutally: you can not. Btw: this is why I think that allowing the <tt>public</tt> keyword in an interface is a technology mistake: it makes people think that it could also be something else as well.[caption id="attachment_671" align="alignright" width="300"]<img src="https://javax0.files.wordpress.com/2014/11/private-is-the-new-public.png" alt="Private is the new public" width="300" height="285" class="size-full wp-image-671" /> Private is the new public[/caption]

If you want to declare a <tt>protected</tt> method in an interface, you probably did not understand encapsulation.

<h1>Private is not that private</h1>

Private variables and methods are visible inside the compilation unit. If that sounds too cryptic: in the same Java file (almost). This is a bit more than "in the class where they are defined". They can also be seen from classes and interfaces that are in the same compilation unit. Inner and nested classes can see private fields and methods of the class enclosing them. However enclosing classes can also see the private methods and fields of the classes they enclose down to any depth.

[sourcecode language="java"]
package a;

class Private {
	private class PrivateInPrivate {
		private Object object;
	}

	Object m() {
		return new PrivateInPrivate().object;
	}
}
[/sourcecode]

This latter is not widely known. As a matter of fact it is rarely useful.

<h1>Private is class level not object</h1>

If you can access a variable or method you can access it no matter which object it belongs to. If <tt>this.a</tt> is accessible then <tt>another.a</tt> is also accessible assumed that <tt>another</tt> is an instance of the same class. Objects that are instances of the same class can fool around with each others variables or methods. Rarely makes sense to have such a code though. A real life exception is <tt>equals()</tt> (as generated by Eclipse, lines 15 and 18):

[sourcecode language="java"]
package a;

public class PrivateIsClass {
	private Object object;

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PrivateIsClass other = (PrivateIsClass) obj;
		if (object == null) {
			if (other.object != null)
				return false;
		} else if (!object.equals(other.object))
			return false;
		return true;
	}
}
[/sourcecode]

<h1>Static classes may have many instances</h1>

[caption id="attachment_672" align="alignright" width="300"]<img src="https://javax0.files.wordpress.com/2014/11/protection-is-class-feature.png" alt="Protection is not object level. It is class level." width="300" height="326" class="size-full wp-image-672" /> Protection is not object level. It is class level.[/caption]

Classes that are not supposed to have any instances are usually called utility classes. They contain only static fields and static methods and the only constructor is private, not invoked from any of the static methods of the class. In Java 8 you can have such a beasts implemented in  interfaces, since Java 8 interfaces can have static methods in it. I am not convinced that we should use that feature instead of utility classes. I am not absolutely convinced that we should use utility classes at all.

Static classes are always inside in another class (or interface). They are nested classes. They are static and just as static methods can not access instance methods and fields of the class similarly a static nested class can not access the instance methods and fields of the embedding class. That is because nested classes do not have a reference (pointer if you like) to an instance of the embedding class. Inner classes, as opposed to nested classes are non static and can not be created without an instance of the embedding class. Each instance of an inner class has a reference to exactly one instance of the embedding class and thus an inner class can access instance methods and fields of the embedding class.

Because of this you can not create an inner class without an instance of the surrounding class. You need not specify it though if this is the current object, a.k.a <tt>this</tt>. In that case you can write <tt>new</tt>, which is, in this case, just a short form for <tt>this.new</tt>. In a static environment, for example from a static method you have to specify which instance of the enclosing class should the inner class created with. See the line 10:

[sourcecode language="java"]
package a;

class Nesting {
	static class Nested {}
	class Inner {}
	void method(){
		Inner inner = new Inner();
	}
	static void staticMethod(){
		Inner inner = new Nesting().new Inner();
	}
}
[/sourcecode]

<h1>Anonymous classes can access only final variables</h1>
[caption id="attachment_680" align="alignright" width="356"]<img src="https://javax0.files.wordpress.com/2014/11/effective-final.png" alt="Variable has to be effective final" width="356" height="140" class="size-full wp-image-680" /> Variable has to be effective final[/caption]
When an anonymous class is defined inside a method, it can access local variables if they are final. But saying that is vague. They have to be declared <tt>final</tt> and they also have to be effective final. This is what is relaxed a bit in Java 8. You need not declare such variables as <tt>final</tt> but they still have to be effective final.[caption id="attachment_683" align="alignleft" width="294"]<img src="https://javax0.files.wordpress.com/2014/11/java_ee_-_javabeantester_src_main_java_com_javax0_jbt_blog_java_-_eclipse_-__users_verhasp_github_javax_blog.png" alt="Java 8 does not require final, only effective final" width="294" height="119" class="size-full wp-image-683" /> Java 8 does not require final, only effective final[/caption]

Why do you need to declare something final, when it has to be checked being that anyway? Like method arguments: they also have to be final. You say that this is not a requirement of Java? Well, you are right. It is a requirement of programming in good style.





]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>640</wp:post_id>
  <wp:post_date>2014-11-26 10:00:33</wp:post_date>
  <wp:post_date_gmt>2014-11-26 09:00:33</wp:post_date_gmt>
  <wp:post_modified>2015-01-22 09:54:28</wp:post_modified>
  <wp:post_modified_gmt>2015-01-22 08:54:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>some-sentences-about-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204274771242178]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/KVicBvxd8sm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/uDSQ3Bim2d]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5943297850048794624&type=U&a=aYm_]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6697</wp:comment_id>
    <wp:comment_author><![CDATA[Kofa]]></wp:comment_author>
    <wp:comment_author_email>kofa@kovacs-telekes.org</wp:comment_author_email>
    <wp:comment_author_url>http://kovacs-telekes.org/</wp:comment_author_url>
    <wp:comment_author_IP>176.63.254.136</wp:comment_author_IP>
    <wp:comment_date>2015-01-22 21:32:18</wp:comment_date>
    <wp:comment_date_gmt>2015-01-22 20:32:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Regarding 'Anonymous classes can access only final variables'
In reality, this is true for <em>all</em> inner classes - see JLS v3 (Java 5) p.182:
Any local variable, formal method parameter or exception handler parameter used but not declared in an inner class must be declared final. Any local variable, used but not declared in an inner class must be definitely assigned (Â§16) before the body of the inner class.
Inner classes include local (Â§14.3), anonymous (Â§15.9.5) and non-static member classes (Â§8.5).

WIth JLS8, the definition has been updated:
An inner class is a nested class that is not explicitly or implicitly declared static.
An inner class may be a non-static member class (Â§8.5), a local class (Â§14.3), or an anonymous class (Â§15.9.5). A member class of an interface is implicitly static (Â§9.5) so is never considered to be an inner class.â

And it also relaxes the requirement, as you, rightly, pointed it out (effectively final):
Any local variable, formal parameter, or exception parameter used but not declared in an inner class must either be declared final or be effectively final (Â§4.12.4), or a compile-time error occurs where the use is attempted.
Any local variable used but not declared in an inner class must be definitely assigned (Â§16 (Definite Assignment)) before the body of the inner class, or a compile-time error occurs.
Similar rules on variable use apply in the body of a lambda expression (Â§15.27.2).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>44825336</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1421958824]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421958824]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421958824.4668018817901611328125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421958739.07485198974609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"kofa73";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6324</wp:comment_id>
    <wp:comment_author><![CDATA[Vineel Kumar Reddy Kovvuri]]></wp:comment_author>
    <wp:comment_author_email>vineel.kovvuri@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://vineelkumarreddy.com</wp:comment_author_url>
    <wp:comment_author_IP>49.205.40.100</wp:comment_author_IP>
    <wp:comment_date>2015-01-09 02:55:15</wp:comment_date>
    <wp:comment_date_gmt>2015-01-09 01:55:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The article is very good. The illustrations are awesome.. May I know which tool was used to create them. Thanks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420768516.1652410030364990234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"vineel567";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1420773158]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1420773158]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420773158.5164470672607421875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6326</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-01-09 09:09:28</wp:comment_date>
    <wp:comment_date_gmt>2015-01-09 08:09:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[iPad mini retina, Jot Touch pencil, Sketches app]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1420790968]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420790969.0257670879364013671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1420790969]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Unit test life?]]></title>
  <link>https://javax0.wordpress.com/2014/12/03/unit-test-life/</link>
  <pubDate>Wed, 03 Dec 2014 09:00:53 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=688</guid>
  <description/>
  <content:encoded><![CDATA[You can not program without testing. You write unit tests first and then you write your code. (Well, I know you don't but just let's focus on best practice.) When there is an error in the code, first you write a new unit test that demonstrates the bug and then you fix it. After the unit test runs fine the same bug should never ever happen again without being immediately signaled by the unit test.

Later the integration and user tests come. They test the application and in case there is some error the developer fixes the code. If possible and feasible we create new unit tests to cover the case that was not discovered earlier so that the same bug will not slip to more expensive integration and user tests. In other cases unit testing is not possible or would just be too cumbersome and not worth paying the cost when the bug is strongly related to integration or user experience.

This is a working practice that was developed for software creation during the last twenty or so years.


Real life is, however, not that simple. There may be no time to create the new unit tests after a bug was discovered during integration or user tests. You fix the bug and test the functionality of the application manually and omit the new unit, or non-unit but still automated test because creating that is too expensive, would require too long time and project constraints are tight. The bug you fix is serious, high level, show-stopper and this is already the last few days of the testing period. So you focus on doing the right thing: get the job done, fix the bug.

<blockquote>
<ul>
	<li>Have you started to fix the bug we reported yesterday?</li>
	<li><em>No. We had no time to deal with it. We had to attend to higher level issues.</em></li>
	<li>Higher Level? What are you talking about? There can no fix be more important than this!</li>
	<li><em>Then why did you report it as a cosmetic in the first place?</em></li>
	<li>Cosmetic????? COSMIC!!!!</li>
</ul>
Sometimes even drop-down lists do not prevent erroneous user input.
</blockquote>

Later, over a calm weekend perhaps, you start to think about the case. How come that a serious bug is only discovered at the end of the testing period? Isn't there a bug in the testing process?

Unless the bug was introduced during the recent bugfixes, in which case there can also be some issue with how the developers fix bugs, there is a bug in the testing process. The tests cover all significant functionality of the application and the test cases that assert the correct behavior are ordered by severity. The test cases that are supposed to discover severe issues should be executed sooner, and less important, cosmetic issues should be tested later. If this was not the case: it is a bug.

How do you fix this bug? Move the test case that was executed late to it's proper position. It will not fix the bug manifestation that has already happened, the very same way as a bug fix does not remedy the lost money caused by program malfunction. Fix will just prevent causing more damage. During the next release period (well, yes, think about good old waterfall) the regression testing will discover the same bug sooner.

But why do not we create a unit test for the testing process? Why don't we have unit tests for the processes of the corporate? How could we generalize the idea and practice of unit testing over all aspects of the life?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>688</wp:post_id>
  <wp:post_date>2014-12-03 10:00:53</wp:post_date>
  <wp:post_date_gmt>2014-12-03 09:00:53</wp:post_date_gmt>
  <wp:post_modified>2014-12-01 11:12:13</wp:post_modified>
  <wp:post_modified_gmt>2014-12-01 10:12:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>unit-test-life</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204317340906393]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/cyPfLx7Cs9j]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/qr328Hfr5d]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5945835091736420352&type=U&a=bHe2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5744</wp:comment_id>
    <wp:comment_author><![CDATA[szabolcsszijarto]]></wp:comment_author>
    <wp:comment_author_email>szabolcs.szijarto@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>194.230.159.209</wp:comment_author_IP>
    <wp:comment_date>2014-12-03 14:41:07</wp:comment_date>
    <wp:comment_date_gmt>2014-12-03 13:41:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Valid points, but for complex business applications, even a relatively high functional test coverage covers not much more than the tip of the iceberg. The  total number of customer, product, channel and use case combinations is so high that realistically only a relatively critical subset can be tested. This applies even more to UAT where resources are usually even more limited. Consequently most test cases can actually result in critical issues with potentially high business impact. For this reason I don't think much can be achieved by re-prioritizing test cases alone.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417614486.2198369503021240234375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1417614485]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1417614485]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[3970460358]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1417614070]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417614069.4440000057220458984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:16:"szabolcsszijarto";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5747</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2014-12-03 14:56:29</wp:comment_date>
    <wp:comment_date_gmt>2014-12-03 13:56:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think it's a great idea to have a dynamic regression test order, starting with the most critical test cases. It can work even in Scrum or Kanban.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1417630496]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[3978418241]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417614991.01548290252685546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417618948.65631389617919921875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:16:"szabolcsszijarto";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1417630496]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417630496.7837450504302978515625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Why do we mock?]]></title>
  <link>https://javax0.wordpress.com/2014/12/11/why-do-we-mock/</link>
  <pubDate>Wed, 10 Dec 2014 23:33:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=694</guid>
  <description/>
  <content:encoded><![CDATA[I do Java interviews. During the interviews I ask technical question that I know the answer for. You may think this is boring. To be honest: sometimes it is. But sometimes it is interesting to learn what misconcepts there are. I happened to ask during the interview what you can read in the title: "Why do we mock?". The answer was interesting. I can not quote word by word and I also would not like to do that for editorial, ethical and many other reasons. I also would like to stress that a misconcept does not qualify the person clever or stupid or anything. It is just a misconcept that comes from someone's personal experience. Here is what she/he was saying.

<i>We use mocks so that we can write tests for units that use heavy services that may not be available when we run the test. It is also important to mock so that the tests can run fast even when the services would make the testing slow. It may also happen in an enterprise environment that some of the services are not available when we develop, and therefore testing would be impossible if we did not use mocks.</i>

Strictly speaking the above statements are true. I would not argue about why you or anybody else uses mocks. But as a Java professional I would argue about what the major and first goal we use mocks for.

<blockquote>We use mocks to separate the modules from each other during testing so that we can tell from the test results which module is faulty and which passed the tests.</blockquote>

This is what unit tests were invented for the first place. There are side effects, like those mentioned above. There are other side effects. For example the unit tests are great documentations. If formulated well they explain better how the unit works and what interfaces it needs and provides than any javadoc. Especially that javadocs tend to be outdated while Junit tests fail during build if get outdated.

Another side effect is that you write testable code if you craft the unit tests first and this generally improve your coding style.

Saying it simply: unit testing is testing units. Units bare without dependencies. And this can be done with mocks. The other things are side effects. We like them, but thy are not the main reason to mock when we unit test.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>694</wp:post_id>
  <wp:post_date>2014-12-11 00:33:10</wp:post_date>
  <wp:post_date_gmt>2014-12-10 23:33:10</wp:post_date_gmt>
  <wp:post_modified>2014-12-11 00:33:10</wp:post_modified>
  <wp:post_modified_gmt>2014-12-10 23:33:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-do-we-mock</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204366420133343]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/Vog5jRMaemR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/BvWy3vAxEk]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5948590094230245376&type=U&a=5QiS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0110ce0c2de5162e792af94173caf59d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6164</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2014-12-18 09:19:02</wp:comment_date>
    <wp:comment_date_gmt>2014-12-18 08:19:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I would ask this follow-up questions:
"Would you use a service which is needed for a unit test if the service is available and quick?"
"And what if this service is also continuously developed at the time? What if it makes side effects? What if it contains bugs?"]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1418890743]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418890743.502068042755126953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1418890743]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6165</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.25</wp:comment_author_IP>
    <wp:comment_date>2014-12-18 10:16:30</wp:comment_date>
    <wp:comment_date_gmt>2014-12-18 09:16:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Technically: yes. Practically: there is no time. An interview is 60 minutes and there is no time to discover all the areas and everything that the candidate knows well or does not know well. The aim of the interview is to get an approximate assessment about the knowledge of the candidate.

Later, if and when we work together we discuss things and we, professionals, help each other to develop code as well as our own skills.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6164</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1418894190]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418894190.89264011383056640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1418894191]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6140</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>188.142.217.199</wp:comment_author_IP>
    <wp:comment_date>2014-12-14 22:47:17</wp:comment_date>
    <wp:comment_date_gmt>2014-12-14 21:47:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good one.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1418593637]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418593637.8223209381103515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1418593638]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Outsourcing, Do It Right]]></title>
  <link>https://javax0.wordpress.com/2014/12/17/outsourcing-do-it-right/</link>
  <pubDate>Wed, 17 Dec 2014 09:00:49 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=702</guid>
  <description/>
  <content:encoded><![CDATA[Most of the times <a href="http://en.wikipedia.org/wiki/Outsourcing">outsourcing</a> is a <a href="http://humanistcoder.com/2014/12/01/outsourcing-is-literally-my-worst-nightmare/">nightmare</a>. Companies outsource the activities that are not their core activity nevertheless needed for business to get the job done as cheap as possible. They look at it as some necessary evil, something that would better be not to know all about, forget the details and have it been done. Many times IT is outsourced with this mindset and causes disaster. The problem does not lie in the fact that IT itself is outsourced. It is the mindset. IT can be outsourced and in many cases this is rational to do. The problem is that management many times does not realize that only the T (technology) is what can be outsourced but no I (information).

<blockquote>
When you outsource Information Technology running your business outsource only Technology but never Information!
</blockquote>

<small>
Note that in the expression "information technology" the work "information" is an adjective to "technology" therefore when we speak IT outsourcing we do speak about the outsourcing of the technology and only the handling of the information.
</small>

If you are a manufacturer IT is not your core business. If you are an insurance company, or a bank IT is not your core business. If you are doing anything except IT, probably IT is not your core business. You have some system that does the book keeping, resource planning, customer relationship management and so on. This is the technology. Your business can be running fine even if you do not own the knowledge that runs these systems. Does it help you to be a better manufacturer, bank or whatever you are if you own the information technology? Probably no. It does not give you business advantage. If your book keeping is as good as your competitor's then this is ok as a foundation to compete on other grounds.

The information, however, how you run your business, what makes you a better manufacturer, bank, whatever than others is important to own. That you should not outsource. How you produce , what are the best business processes in your company, how you can adapt to market changes are core business. If you do not care about that and you outsource these core activities to a software technology company they most probably will not provide the best fitting solution for you and the cost may increase, profitability lowers, and your general competitiveness weakens. This task needs business knowledge and companies can outsource this only to companies that have the knowledge and skills. Some software companies do, but in this case these companies are not only software companies but rather consulting-and-software companies. Sometimes you can not tell where the border is. You can hire a consulting company, or you can hire experts as employees. The difference is paper work, sometime taxation. You need the knowledge and you should get it to serve your business goals.

Having all that said, let's focus on the technology outsourcing assuming we know where business information ends and technology starts.

The major point to outsource IT is to save cost. The outsourcing company can do it cheaper. I have seen many times that on the decline huge companies cut off the IT department, formed a new company, sold and contracted this company for IT outsourcing. The next Monday everybody was sitting at the same desk, doing the same work. How could it be cheaper than some nasty taxation tricks, less benefits from the new company to the employees and similar effects? In some cases such IT companies cut off the body of a huge corporation can survive, but I have never seen any. They inherit the company culture of the corporate that I do not say is wrong, but may just not be the best and most competitive for a small IT company. They stay alive for many years and know one that is alive for more than a decade and is a success story. Whenever you see such success stories remember that

<blockquote>To have a success story you need success and story. One of them is optional.</blockquote>

Really successful IT companies, as I see, come from small and grow big. They learn, as they go how to do IT in a professional way. Focusing the core, working for multiple clients gives the real advantages. The solution at the end of the day can be cheaper using the resources more effectively, having better distribution and better skill matching. 

If your problem needs 7.5 person, you can not hire that amount. People are not really effective when chopped into half. You should hire at least 8 persons and find some occupation for the "half" person. An IT company can find that occupation more effectively. They can also easily allocate 15 persons each half time if that may be more effective. If somebody does not fit the task you need not fire the person, the outsource company will find the person that fits best and a task for the person that fits his/her skills. These are possibilities when outsourcing is done right.

If the people of the IT company work only for you and they never submerge into the culture of the mother company then you loose the advantage that comes from knowledge gathered. If the outsourcing company just hires people and sells them out right away they are simply slave traders. That is not the way. If outsourcing is <a href="http://humanistcoder.com/2014/12/01/outsourcing-is-literally-my-worst-nightmare/"><i>"Letâs get others to do the work that does not mean much to us as cheaply as possible."</i></a>, then it is wrong. If it does not mean much to "us", we should not do it. We should not outsource it. It should rather be eliminated. If it can not be eliminated, then it does mean much.

Just as much as it means for the outsourcing company. Your business depends on it.


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>702</wp:post_id>
  <wp:post_date>2014-12-17 10:00:49</wp:post_date>
  <wp:post_date_gmt>2014-12-17 09:00:49</wp:post_date_gmt>
  <wp:post_modified>2014-12-16 09:53:48</wp:post_modified>
  <wp:post_modified_gmt>2014-12-16 08:53:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>outsourcing-do-it-right</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5950907360867282945&type=U&a=YNrt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204412297920259]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/WiTfgToYGRX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/3NRlqTE1YE]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e58b841b3f9bec41640cb0e8244517b8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d475e6d39893fef556ff950a45281373</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4658b86e9797e668fdf0e73843beb475</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee38ba1d00ad772bd8a2bfb092d78d1c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8357f766d0a37276f6d3d6f427e9e9ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6276</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>188.142.217.199</wp:comment_author_IP>
    <wp:comment_date>2015-01-03 18:23:17</wp:comment_date>
    <wp:comment_date_gmt>2015-01-03 17:23:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[http://kisszines.hu/image/100652919913]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1420305797]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420305798.0828349590301513671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1420305798]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Some more sentences on Java, private variables]]></title>
  <link>https://javax0.wordpress.com/2015/01/08/some-more-sentences-on-java-private-variables/</link>
  <pubDate>Thu, 08 Jan 2015 15:30:43 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=712</guid>
  <description/>
  <content:encoded><![CDATA[In the article <a href="http://javax0.wordpress.com/2014/11/26/some-sentences-about-java/">Some Sentences about Java</a> I described that privates variables are visible from inner and nested classes and the other way around also. This is done on Java level, it is a feature of the language. However knowing that the JVM does not know anything about inner and nested classes one may wonder how this is implemented.

<h1>No inner classes in JVM</h1>

When you compile a Java class source file the compiler generates the binary file with the extension <tt>.class</tt> from the <tt>.java</tt> file. This binary file contains the symbolic information needed by the compiler to compile other classes that some way depend on this class and it also contains the JVM byte code, which is needed to execute the program. The same is true for interfaces except that they contain executable code only for default methods and for field initialization code executed when the classloader loads the interface.

When there is a class inside another class or interface then the compiler generates extra <tt>.class</tt> files for these classes. The name of these classes usually contain the name of the outer class, <tt>$</tt> sign and the name of the inner or nested class. Since the <tt>$</tt> sign is a legal character in an identifier in Java the JVM can not tell, and does not bother to tell if the class is an inner or top level class in Java language level.

<h1>Private is not private then?</h1>

Private methods and fields this way are accessed between classes. Because JVM does not know class nesting these are, for the JVM, "top level" classes.

As a sample lets have a Java code:

[sourcecode language="java"]
package com.javax0;
public class Inner {
	private static class InnerInner {
		private static Object b;
	}
	public void m() {
		InnerInner.b = null;
	}
}
[/sourcecode]

If I compile the code with the command line

[sourcecode language="text"]
$ javac  Inner.java
$ ls -1
Inner$InnerInner.class
Inner.class
Inner.java
[/sourcecode]

I get the two class files. Dissassembling the inner class:

[sourcecode language="text"]
$ javap -v Inner\$InnerInner.class 
Classfile /Users/verhasp/github/JavaBeanTester/src/test/java/com/javax0/Inner$InnerInner.class
  Last modified 2014.12.27.; size 413 bytes
  MD5 checksum 79f4ea55abe8211fec751d9a4dec9ae1
  Compiled from &quot;Inner.java&quot;
class com.javax0.Inner$InnerInner
  minor version: 0
  major version: 52
  flags: ACC_SUPER
Constant pool:
   #1 = Fieldref           #3.#15         // com/javax0/Inner$InnerInner.b:Ljava/lang/Object;
   #2 = Methodref          #4.#16         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V
   #3 = Class              #18            // com/javax0/Inner$InnerInner
   #4 = Class              #21            // java/lang/Object
   #5 = Utf8               b
   #6 = Utf8               Ljava/lang/Object;
   #7 = Utf8               &lt;init&gt;
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               access$002
  #12 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #13 = Utf8               SourceFile
  #14 = Utf8               Inner.java
  #15 = NameAndType        #5:#6          // b:Ljava/lang/Object;
  #16 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V
  #17 = Class              #22            // com/javax0/Inner
  #18 = Utf8               com/javax0/Inner$InnerInner
  #19 = Utf8               InnerInner
  #20 = Utf8               InnerClasses
  #21 = Utf8               java/lang/Object
  #22 = Utf8               com/javax0/Inner
{
  static java.lang.Object access$002(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: dup
         2: putstatic     #1                  // Field b:Ljava/lang/Object;
         5: areturn
      LineNumberTable:
        line 4: 0
}
SourceFile: &quot;Inner.java&quot;
$ 
[/sourcecode]

you can notice that an synthetic method was created to set the value of the private field <tt>b</tt>. This method is needed to access the field from the outer class. The direct access is prohibited by the JVM but the compiler allows you to access the field through the synthetic methods it generates. You can not, however call the synthetic method from any other class, because the Java compiler will refuse to compile the code that tries to access directly a synthetic method. This protection works on the compiler level. If you happen to craft some JVM code directly using some special tool that accesses the synthetic method, the JVM will not stop you.

<h1>Eclipse warnings</h1>

There is another sign that you may face when creating classes causes the compiler to create synthetic methods. This is when Eclipse warns you about it:

<a href="https://javax0.files.wordpress.com/2014/12/fullscreen_2014__12__27__19_00.png"><img src="https://javax0.files.wordpress.com/2014/12/fullscreen_2014__12__27__19_00.png" alt="Fullscreen_2014__12__27__19_00" width="598" height="121" class="alignleft size-full wp-image-771" /></a>

This screen capture shows the line #7 of the previous Java source code where Eclipse tells you that though the code "<tt>InnerInner.b = null;</tt>" looks like a simple assignment it will be executed as a method call.

Fortunately you can configure Eclipse not to display this warning.

<h1>Synthetic methods</h1>

If you are interested more in synthetic and bridge methods, read a <a>previous article</a> of Java Deep.

<h1>Should we avoid private variables inside inner classes?</h1>

The final question after we looked at this detail of the Java language is how seriously we should be worried about the warning that Eclipse gives us. Should we use private nested classes or should we avoid them?

If we use them then the generated JVM code will be littered with synthetic methods and thus the execution will be more complex. If we do not use them then the generated JVM code will be simpler. Should I be worried about the simplicity and the coolness of the generated JVM? I doubt.

What I would focus on is the readability of the code we maintain and not the code javac generates.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>712</wp:post_id>
  <wp:post_date>2015-01-08 16:30:43</wp:post_date>
  <wp:post_date_gmt>2015-01-08 15:30:43</wp:post_date_gmt>
  <wp:post_modified>2015-01-08 10:22:07</wp:post_modified>
  <wp:post_modified_gmt>2015-01-08 09:22:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>some-more-sentences-on-java-private-variables</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204655008307867]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/CACpEkqJbvM]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/hwMVxZnull]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5958978219372740610&type=U&a=1hAA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Do not work on unimportant projects]]></title>
  <link>https://javax0.wordpress.com/2014/12/24/do-not-work-on-unimportant-projects/</link>
  <pubDate>Wed, 24 Dec 2014 09:00:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=722</guid>
  <description/>
  <content:encoded><![CDATA[I have heard many times from junior developers that they are working on a project that is not important. This is demotivating a lot when you do some work just to be thrown away after some while. It is just like digging a hole and next day bury it. (Unless, of course, you are a sexton, in which case it makes sense. But that is a different story.)

<a title="EugÃ¨ne Delacroix [Public domain or Public domain], via Wikimedia Commons" href="http://commons.wikimedia.org/wiki/File%3AEug%C3%A8ne_Ferdinand_Victor_Delacroix_018.jpg"><img width="256" alt="EugÃ¨ne Ferdinand Victor Delacroix 018" src="//upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Eug%C3%A8ne_Ferdinand_Victor_Delacroix_018.jpg/256px-Eug%C3%A8ne_Ferdinand_Victor_Delacroix_018.jpg" align="right" /></a>

Once I met a person, who was working on <a href="http://en.wikipedia.org/wiki/Algorithmic_trading">algo-trading</a> algorithms. This is when computers perform tradings and compete with each other executing stock and money trading in milliseconds. He was paid well, the mathematical background was interesting and creating the algorithms was a challenge for him. However he claimed not seeing too much of value of his work to the advantage of the human mankind. He said algo-trading was just machines trading with other machines and nothing else.

We were on a long train travel and had time to discuss, and I explained that algo-trading is a form of competition but not between machines rather between the people who create, execute, maintain the trading. This way algo-trading is an essential part of the evolution that our economy is based on, in my view it may also add to the money liquidity that help the money flow where it really is needed to support investment and innovation.

This person was open to embrace my ideas and was happy seeing that there is more result of his work than just getting the salary. After a half year we met again just by accident (both of us traveled frequently between Budapest and ZÃ¼rich) and explained that since he believes that his work has real value he is not only happier but also sees the algorithms from a different point of view resulting more success.

Although I believe that the statement above is partly fairy tale, partly result of auto suggestion it still has an important point. You will work better if you know what the meaning of your work is. Being agnostic I know that the life is pointless generally, so the above means that it is only the level how deep you have to dig to find meaning. If you are a shallow person getting paid may make the job important. If you think more complex you want to know what good your work does for the company and through that to the shareholders. If you are a humanistic type you have to know what your work advances humanity, human mankind general. (Be aware not to dig deeper than that risking mental illnesses.)

However what you really have to do: understand the meaning of your work, otherwise it will be no benefit for anybody. Seniors know it.

Happy Christmas!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>722</wp:post_id>
  <wp:post_date>2014-12-24 10:00:23</wp:post_date>
  <wp:post_date_gmt>2014-12-24 09:00:23</wp:post_date_gmt>
  <wp:post_modified>2014-12-16 10:41:12</wp:post_modified>
  <wp:post_modified_gmt>2014-12-16 09:41:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-work-on-unimportant-projects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/SQkTYtgUPaX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"117525213959765509146";b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/FY3mZCZx7i]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5953444466734964736&type=U&a=X26m]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6206</wp:comment_id>
    <wp:comment_author><![CDATA[aszomor]]></wp:comment_author>
    <wp:comment_author_email>attila@szomor.hu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>81.182.7.93</wp:comment_author_IP>
    <wp:comment_date>2014-12-24 13:49:17</wp:comment_date>
    <wp:comment_date_gmt>2014-12-24 12:49:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Merry Christmas!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>4674544</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419425357.634934902191162109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"aszomor";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1419426055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1419426055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419426055.318582057952880859375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11904</wp:comment_id>
    <wp:comment_author><![CDATA[Do We Need User Acceptance Test? | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2017/12/20/do-we-need-user-acceptance-test/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.109</wp:comment_author_IP>
    <wp:comment_date>2017-12-20 16:01:23</wp:comment_date>
    <wp:comment_date_gmt>2017-12-20 15:01:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] it may even be zero, but a happier user never meant less income. Well, maybe if you work as a sexton, but that is far from software [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1513788114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1513787474.4956939220428466796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1513788114.7623579502105712890625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1513782083.6483020782470703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fine points of protection]]></title>
  <link>https://javax0.wordpress.com/2015/01/21/fine-points-of-protection/</link>
  <pubDate>Wed, 21 Jan 2015 15:30:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=733</guid>
  <description/>
  <content:encoded><![CDATA[In the article <a href="http://javax0.wordpress.com/2014/11/26/some-sentences-about-java/">Some Sentences about Java</a> I wrote that <i>"Protected methods and fields can be used from
classes in the same package (so far the same as package private) and in addition to that it can be used from other classes that extend the class containing the protected field or method."</i>

Although the statement above is true it may not reveal the whole truth and I believe it deserves a new article.

When you have a private X (method, field, class, interface, constructor) in a class you can use that X from within the top level class. The use means, as described in the previous article, that X can be accessed in the instance "<tt>this</tt>" and in other instances so long as long the code accessing is in the same top level class where X is.

If you remove the <tt>private</tt> keyword in front of X then you extend the visibility to package level. You can use X inside the package the same way as you could use it before from within the class when it was private.

If we still go further one step and insert the keyword <tt>protected</tt> in front of X it will became visible from classes that extend the class where X is declared but can NOT be accessed the SAME WAY as private X from within the class or package private from within the same package. Since <tt>protected</tt> is extending the visibility of X from package private, protected X can still be used the same way within the package, but not the same way outside of it.
<blockquote>The difference is that you can only access a protected X in the code that is extending the functionality of X.</blockquote>
The above is not a precise definition. The <a href="http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf">Java Language Specification</a> that I cite here in this blog many times details that in chapter 6.6.2 What can I say about that? Precise, complete but may not be easy or entertaining to read, which may also be true for this article, but since you are reading it I assume that you find it entertaining, educating or you have some very specific reason to read it.

While you are in the same package as the class declaring X you can access X on other instances. We can have some simple classes to demonstrate this. First of all we can have a root class that we will extend:

[sourcecode language="java"]
package a;
public class A {
	protected void protectedMethod(A a) { }
}
[/sourcecode]

We have the class 'B' which extends 'A' and is in the same package.

[sourcecode language="java"]
package a;
import a.A;
public class B extends A {
	@Override
	protected void protectedMethod(A a) {
		a.protectedMethod(this);
		super.protectedMethod(this);
	}
}
[/sourcecode]

If we move/copy the class 'B' to another package, like here:

[sourcecode language="java"]
package b;
import a.A;
public class B extends A {
	@Override
	protected void protectedMethod(A a) {
		a.protectedMethod(this);
		super.protectedMethod(this);
	}
}
[/sourcecode]

then the line 6 will not compile. When it was in the previous package the compiler allowed it to access the method, because package protection made it possible. No matter what implementation instance the argument 'a' is to the method, they are in the same package. In case of 'b.B' class package protection does not allow access and because the actual object instance that we store in the method argument 'a' may be an instance of a class that 'b.B' is not extending it can not access it. It can be an instance for example of the class:

[sourcecode language="java"]
package c;
import a.A;
public class C extends A { }
[/sourcecode]

What you can do is
<ul>
	<li>Override the method in the child class or</li>
	<li>call the parents method using the keyword <tt>super</tt>.</li>
</ul>
And generally this is really all you can do with protected methods outside of their package.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>733</wp:post_id>
  <wp:post_date>2015-01-21 16:30:00</wp:post_date>
  <wp:post_date_gmt>2015-01-21 15:30:00</wp:post_date_gmt>
  <wp:post_modified>2015-01-20 12:12:04</wp:post_modified>
  <wp:post_modified_gmt>2015-01-20 11:12:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fine-points-of-protection</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5963688973313277953&type=U&a=hXDX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204753251483885]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/C64DkcXRrdi]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/6EiQpnZ1l0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6715</wp:comment_id>
    <wp:comment_author><![CDATA[Calling grandparent methods in Java: you can not | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2015/01/28/calling-grandparent-methods-in-java-you-can-not/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.38.63</wp:comment_author_IP>
    <wp:comment_date>2015-01-28 16:31:48</wp:comment_date>
    <wp:comment_date_gmt>2015-01-28 15:31:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article Fine points of protection I detailed how &#8220;protected&#8221; extends the &#8220;package private&#8221; access. There I [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422459109.10136508941650390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422459586]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422459586.6506459712982177734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Calling grandparent methods in Java: you can not]]></title>
  <link>https://javax0.wordpress.com/2015/01/28/calling-grandparent-methods-in-java-you-can-not/</link>
  <pubDate>Wed, 28 Jan 2015 15:30:33 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=740</guid>
  <description/>
  <content:encoded><![CDATA[In the article <a href="https://javax0.wordpress.com/2015/01/21/fine-points-of-protection/">Fine points of protection</a> I detailed how "protected" extends the "package private" access. There I wrote: 

<blockquote>
What you can do is
<ul>
	<li><i>Override the method in the child class or</i></li>
	<li><i>call the parents method using the keyword super.</i></li>
</ul>
And generally this is really all you can do with protected methods.
</blockquote>

(Note that in this article I talk about methods and method calling, but the very similar statements can be said about fields, constructors.)

If you can call <tt>super.method()</tt> to access the parent's <tt>method()</tt> even if the actual class has overridden it why can not you call <tt>super.super.method()</tt>?

The absolutely correct and short answer is: because Java language does not allow you to do that. (<a href="http://rohandhapodkar.blogspot.in/2012/03/call-grand-parent-method-in-java.html">JVM does</a> though, but you should not.) You can not directly access grandparent methods skipping parent methods. The interesting question is: Why?

The reason lies in object orientation principles. When you extend a class you extend the defined functionality of the class.

The fact that the parent class extends another class (the grandparent class) is part of the implementation that is none of the business of any other code outside of the class. This is the basic principle of encapsulation: advertise the defined functionality of a class to the outside world but keep the implementation private. There are secrets that you keep hidden even from your son. "Nicht vor dem Kind."

Generally this is the reason. If you could access the grandparent directly you would create a dependency on the implementation of the father, and this would violate encapsulation.



]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>740</wp:post_id>
  <wp:post_date>2015-01-28 16:30:33</wp:post_date>
  <wp:post_date_gmt>2015-01-28 15:30:33</wp:post_date_gmt>
  <wp:post_modified>2015-03-05 10:42:52</wp:post_modified>
  <wp:post_modified_gmt>2015-03-05 09:42:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>calling-grandparent-methods-in-java-you-can-not</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204802176226973]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/JPDKcuc5kM8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/yY3gGGnbaV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d828694b5a3effe05a4d9cf6543cc7e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d2cd1c7bbf1df955ae606aebc3ab603d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_585bbc1c2c314bf51cbc6b4744782e90</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_906802c558e00d99cb72ee9de60fa387</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_43a2014f92d98a6adc67bb8e8f8e6b41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_267fe2e8b239d39d1f4d7f84f85c3706</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d2a4aa7a1d224e4c1fef95bf53ac0523</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6976</wp:comment_id>
    <wp:comment_author><![CDATA[bugybunny]]></wp:comment_author>
    <wp:comment_author_email>testacc1992@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>152.96.234.124</wp:comment_author_IP>
    <wp:comment_date>2015-03-05 10:40:05</wp:comment_date>
    <wp:comment_date_gmt>2015-03-05 09:40:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[While youâre at it: âKindâ should be capitalized]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6719</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425548406.1021740436553955078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7671377542]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425548585]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425548585]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425548585.619083881378173828125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6978</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-03-05 10:43:28</wp:comment_date>
    <wp:comment_date_gmt>2015-03-05 09:43:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Danke.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6719</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425548608]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425548608.9322130680084228515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7671388613]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1425548609]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6716</wp:comment_id>
    <wp:comment_author><![CDATA[Kofa]]></wp:comment_author>
    <wp:comment_author_email>kofa@kovacs-telekes.org</wp:comment_author_email>
    <wp:comment_author_url>http://kovacs-telekes.org/</wp:comment_author_url>
    <wp:comment_author_IP>176.63.254.136</wp:comment_author_IP>
    <wp:comment_date>2015-01-28 22:26:32</wp:comment_date>
    <wp:comment_date_gmt>2015-01-28 21:26:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is one exception to this: if you implement two related interfaces (say Parent and Child), both implementing the same default method (say defaultMethod()), your class must override it, too (since it's ambiguous), but it can use the syntax Parent.super.defaultMethod() to call it.
http://www.lambdafaq.org/how-are-conflicting-method-declarations-resolved/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>44825336</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422480394.0345919132232666015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"kofa73";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1422480394]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422480393]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6718</wp:comment_id>
    <wp:comment_author><![CDATA[vladmihalcea]]></wp:comment_author>
    <wp:comment_author_email>mih_vlad@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http://vladmihalcea.com</wp:comment_author_url>
    <wp:comment_author_IP>195.20.156.19</wp:comment_author_IP>
    <wp:comment_date>2015-01-29 12:04:49</wp:comment_date>
    <wp:comment_date_gmt>2015-01-29 11:04:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't know ant German so I went on searching that German phrase, but I think it should be "Nicht vor dem kind", instead of "Nich vor dem kind".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>55983739</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[6174506336]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1422533890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422533890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422533890.4381840229034423828125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422529490.1684539318084716796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"vladmihalcea";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6719</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-01-29 13:19:31</wp:comment_date>
    <wp:comment_date_gmt>2015-01-29 12:19:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks. Typo fixed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6718</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422533971.733769893646240234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[6174554074]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1422533972]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422533971]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Use copy paste programming!]]></title>
  <link>https://javax0.wordpress.com/2015/01/14/use-copy-paste-programming/</link>
  <pubDate>Wed, 14 Jan 2015 15:30:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">http://javax0.wordpress.com/?p=757</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Copy paste is bad</h1>
We hate copy paste. Why? Because the result code is unmaintainable. I get a bug reported from QA, I analyze the code, look at logs, debug, drink a lot of coffee and finally I get to the code that is the root cause of the bug. I fix it, test the use case, release new code to learn next day that a very similar bug appears in a similar use case. In that case a different code runs looking very similar to the one I was mending the day before and I just start to wonder how many more copies of the same code will I face and have to change.

<h1>There are things worse than copy paste</h1>
Now imagine a schnitt, like in movies. Let's jump to another time. I get a bug reported from QA, I analyze the code. I do not understand. There are a lot of small interfaces, abstract classes, deep hierarchies. Many of the classes have no direct relation to business. I ask for help from the developer who created the code, and he starts to explain. In two days I start to understand his idea of coding structure and how he was implementing the code in a strict object oriented way, avoiding the slightest copy/paste. After three days I find the place where a single line has to be modified. Before doing that I plan to create the unit test to fail first, then fix the code and re-run the unit test to see that the same error never comes again. So I open the unit test class testing the one I am going to modify and I do not understand how it works. It is complex and extends another class that uses another and another. This time it is a bit easier to understand since I already know the mindset of the programmer, who created it but it is still a whole day to create the new test. We are already in day #4 following the bug report customers banging on the door for fix.

<h1>To copy or not to copy...</h1>

Which is the better approach? Have some copy paste and face that some of the bugs will just appear in other areas or have an extremely strict but deep hierarchy OO design in the code that avoids bug reappearing but has a steep learning curve?

There is no one and only one best ever answer for this question. Neither of them is a good approach. Sometimes some copy paste may be forgivable sin. Deep inheritance structure is difficult to understand. It is usually recommended not to have more than three levels. One may also argue that in the above example the code could have been created with less levels of inheritance without actual copy paste. (Except that the above is not an actual but an imagined example distilled from many years of experience.) The level of repetition may conflict with OO structure. When you have the OO structure you make abstraction. Abstract code is harder to understand. When you copy-paste-modify the modified code will be on the same abstraction level as the one you copied. It may be easier to understand.

<h1>Copy unit test code</h1>

When it is about unit tests, I tend to forgive copy paste and verbosity to get simpler structures and readability. But that is because unit tests are more documentation than code. They have to be expressive as you look at it immediately. It should not require investigation and understanding of code structures defined somewhere else to get the point what the test is doing. I tend to agree with a unit test that copies one test and then contains slightly modified code. It still has one of the drawbacks on maintenance: if you change the code the change has to be propagated to all other places as well where the code was copied. But in this case if you forget to propagate the change you will get test errors or failures. This way you can see copy paste as an advantage: when you change the code you are forced to look at, refactor and think through all the test cases that are affected.

<h1>Do not copy production code</h1>

These effects that turn drawbacks to advantages in case unit test code may become a nightmare in production code. If you have doubt then do not copy. Do not be afraid to create too steep hierarchy structure. Programmers fall more often into the copy-paste trap than into steep hierarchies. Unless you are a senior programmer I recommend that you avoid copy-paste in production code at all costs as a rule of thumb. If you are senior you do not need my recommendation: you will avoid copy-paste on your own.

<h1>Side note</h1>

Just a story: <i>Some time ago I wrote some mail about copy-paste in a code and I created a typo writing copy-pasta. In a few minutes I got a reply: "Pasta? You are referring to spaghetti code?" Nomen est omen.</i>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>757</wp:post_id>
  <wp:post_date>2015-01-14 16:30:10</wp:post_date>
  <wp:post_date_gmt>2015-01-14 15:30:10</wp:post_date_gmt>
  <wp:post_modified>2015-01-08 11:32:53</wp:post_modified>
  <wp:post_modified_gmt>2015-01-08 10:32:53</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-copy-paste-programming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5961152150007488512&type=U&a=9ffs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204694948346343]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/BXPLUrHEQcD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/RLyBBocgz3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6358</wp:comment_id>
    <wp:comment_author><![CDATA[szjanihu]]></wp:comment_author>
    <wp:comment_author_email>szjani@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>84.3.236.122</wp:comment_author_IP>
    <wp:comment_date>2015-01-14 21:16:21</wp:comment_date>
    <wp:comment_date_gmt>2015-01-14 20:16:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think intention is the keyword. If there are two places where you can use the same code, but they are completely independent and may differ in the future, then copy&amp;paste not just allowed but a must. Otherwise, if they are related things and a business rule says the same logic must be used there, then the same code have to be used.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19570253</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421266581]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421266582.0109710693359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"szjanihu";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5624390563]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421266582]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6362</wp:comment_id>
    <wp:comment_author><![CDATA[OttÃ³ TakÃ¡cs]]></wp:comment_author>
    <wp:comment_author_email>takacsot@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/109696442647592159849</wp:comment_author_url>
    <wp:comment_author_IP>136.173.62.145</wp:comment_author_IP>
    <wp:comment_date>2015-01-15 10:52:24</wp:comment_date>
    <wp:comment_date_gmt>2015-01-15 09:52:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The article is both good and wrong.

It is all about compromise to resolve contradicting concepts: DRY and decoupling

copy paste is 100% decoupled and 0% DRY
fully reused code is 100% DRY and 0% decoupled.

It is all about compromise.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421315544.7800600528717041015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-eI2MMQhTt6Q/AAAAAAAAAAI/AAAAAAAAAAA/XsszEl8cK4k/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[109696442647592159849]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[5648098261]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1421319854]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421319854]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421319256.8857119083404541015625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421319854.2951099872589111328125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6356</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-01-14 16:48:28</wp:comment_date>
    <wp:comment_date_gmt>2015-01-14 15:48:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Isn't copy-pasta the result of copy-pasting spaghetti code? ;)

Worse than plain copy-paste is copy-paste-modify, where you end up with tons of similar but somehow differing code. When you understand one occurrence, you may think that the others will be easy, but they're not. To make it really evil, the differences are numerous and most of them were created by editing different occurrences in a different way for no reason, but some are important. So you have to deal with more code which is resistant to any unification attempt as you can be never sure why it differs.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1421250508]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421250508.643022060394287109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1421250508]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6777</wp:comment_id>
    <wp:comment_author><![CDATA[GÃ¡bor LiptÃ¡k]]></wp:comment_author>
    <wp:comment_author_email>gabor.liptak@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/117570574002796472922</wp:comment_author_url>
    <wp:comment_author_IP>213.185.184.228</wp:comment_author_IP>
    <wp:comment_date>2015-02-20 10:36:24</wp:comment_date>
    <wp:comment_date_gmt>2015-02-20 09:36:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Steep hierarchies can be avoided in a lot of cases with preferring composition over inheritance. Unit tests "might" contain copy pasted code, since they should test a unit. If I have a super class for test cases, then I introduce an unwanted dependency between my tests. This case I think copy pasting test code is really better.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424424984.956263065338134765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-W_Y_oOcFGbU/AAAAAAAAAAI/AAAAAAAABjE/c10M69kqnhA/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[117570574002796472922]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[7109850520]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1424426722]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1424426723]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424426723.1649110317230224609375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6745</wp:comment_id>
    <wp:comment_author><![CDATA[Do not unit test bugs | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2015/02/04/do-not-unit-test-bugs/</wp:comment_author_url>
    <wp:comment_author_IP>207.198.101.32</wp:comment_author_IP>
    <wp:comment_date>2015-02-04 16:00:31</wp:comment_date>
    <wp:comment_date_gmt>2015-02-04 15:00:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Why something would be good in unit testing when this is not good in programming. One thing is that it is not always the way like that, and the other is that the same mistake may not be so obvious when we create unit [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423062031.7627079486846923828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423073934]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423073934.876430988311767578125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6710</wp:comment_id>
    <wp:comment_author><![CDATA[Peter]]></wp:comment_author>
    <wp:comment_author_email>fodpeter@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.218.32.7</wp:comment_author_IP>
    <wp:comment_date>2015-01-25 22:35:24</wp:comment_date>
    <wp:comment_date_gmt>2015-01-25 21:35:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sometimes when I watch people working, I think the copy-paste shortcut was invented by the devil.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422221725.3657989501953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422258284.2713680267333984375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[6050346381]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1422258284]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1422258284]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422226973.1497409343719482421875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do not unit test bugs]]></title>
  <link>https://javax0.wordpress.com/2015/02/04/do-not-unit-test-bugs/</link>
  <pubDate>Wed, 04 Feb 2015 15:00:09 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=782</guid>
  <description/>
  <content:encoded><![CDATA[Before getting to the topic of the title let's have a simple programming sample. On the programming task I will demonstrate some bad coding style and based on that it will be easier for me to explain why the same style is bad in unit tests. Well, now that I wrote this sentence this seems to be a obvious statement. Why something would be good in unit testing when this is not good in programming. One thing is that <a href="https://javax0.wordpress.com/2015/01/14/use-copy-paste-programming/">it is not always the way like that</a>, and the other is that the same mistake may not be so obvious when we create unit tests.

<h2>Demo task</h2>

The demo task is very simple. Let's write a class to decide if an integer number &gt; 1 is prime. The algorithm is simple. Check all the numbers starting with 2 until the square root of the number. If the number is not prime we will find a number that divides the number integer times, if we do not find a divisor then the number is prime.

[sourcecode language="java"]
public class PrimeDecider {
	final int number;

	public PrimeDecider(int number) {
		this.number = number;
	}

	public boolean isPrime() {
		for (int n = 2; n * n &amp;lt; number; n++) {
			if (number % n == 0) {
				return false;
			}
		}
		return true;
	}
}
[/sourcecode]

The unit test is

[sourcecode language="java"]
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class PrimDeciderTest {

	@Test
	public void sample_2_IsPrime() {
		PrimeDecider decider = new PrimeDecider(2);
		boolean itIsPrime = decider.isPrime();
		assertTrue(itIsPrime);
	}

	@Test
	public void sample_17_IsPrime() {
		PrimeDecider decider = new PrimeDecider(17);
		boolean itIsPrime = decider.isPrime();
		assertTrue(itIsPrime);
	}

	@Test
	public void sample_10_IsNotPrime() {
		PrimeDecider decider = new PrimeDecider(10);
		boolean itIsPrime = decider.isPrime();
		assertFalse(itIsPrime);
	}
}
[/sourcecode]

This is a great test, readable, some copy paste and most of all it gives us 100% code coverage. Believe me:

<a href="https://javax0.files.wordpress.com/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png"><img src="https://javax0.files.wordpress.com/2015/01/java_ee_-_javabeantester_src_test_java_primedecider_java_-_eclipse_-__users_verhasp_github_javax_blog.png" alt="Java_EE_-_JavaBeanTester_src_test_java_PrimeDecider_java_-_Eclipse_-__Users_verhasp_github_javax_blog" width="393" height="257" class="alignright size-full wp-image-784" /></a>

It is all green. There can go nothing wrong! We happy.

<h2>Bug appears</h2>

One day, however, somebody gets the strange idea to test if 9 is prime. Believe it or not, our program says that 9 is prime. So the tester (or, if you are not lucky a customer) opens a bug ticket:



<blockquote>BGTCKT17645329-KT The method Prime does not give the 
  correct answer for the numbers that are multiplications of three. For example it results true for an object that represents 9.
</blockquote>


Then comes the tedious work of bug fixing. What a joy it is usually. First of all you overcome your feeling that whispers into your ear that "the customer is stupid". Obviously the customer is stupid because he wanted to use the class to test the number 9 it was never meant to be... hahh!!! and because the bug description is simply wrong. There is no method <tt>Prime</tt>! And the code correctly detects for example the number 3 (which is a multiplication of 3 itself) is prime. And it also detect correctly that 6 and 12 are not prime number. So how does a customer dare to craft such a bug report. Thoughts in your brain like that may help you calm down but do not help business, which is the first priority for a professional like you.

After calming down you admit that the code does not really work for the number 9 and you start to debug and fix it. First there comes a unit test that fails. That is the way we have to do TDD:

[sourcecode language="java"]
	@Test
	public void demonstrationOf_BGTCKT17645329() {
		PrimeDecider decider = new PrimeDecider(9);
		boolean itIsPrime = decider.isPrime();
		assertFalse(itIsPrime);
	}
[/sourcecode]

and you deliver the fix:

[sourcecode language="java"]
	public boolean isPrime() {
		if (number == 9)
			return false;
		for (int n = 2; n * n &amp;lt; number; n++) {
			if (number % n == 0) {
				return false;
			}
		}
		return true;
	}
[/sourcecode]


<blockquote>I am just kidding!!!... or not</blockquote>


Actually I have seen fixes like that in real production code. When you are under time pressure and since life is finite you are, you may come up with a fix like that even when you know what the proper solution would be. In this case it is as simple as inserting a <tt>=</tt> in front of the <tt>&lt;</tt> sign in the loop condition to test that the number is actually not the square of a prime number. Essentially the code

[sourcecode language="java"]
for (int n = 2; n * n =&amp;lt; number; n++) {
[/sourcecode]

would be nice.

In real production cases this may be a real and huge refactoring and if these special cases appear rarely since the code is usually used for numbers less than 25 then this fix is (may be) commercially OK.

<h2>Realistic fix for the bug</h2>

Be more realistic and assume that you realize that problem is not limited to the number 9 but to all square numbers and you apply the fix:

[sourcecode language="java"]
public class PrimeDecider {
	final int number;

	public PrimeDecider(int number) {
		this.number = number;
	}

	public boolean isPrime() {
		if (isASquareNumber(number))
			return false;
		for (int n = 2; n * n &amp;lt; number; n++) {
			if (number % n == 0) {
				return false;
			}
		}
		return true;
	}

	private boolean isASquareNumber(int number) {
		double d = Math.sqrt(number);
		return Math.floor(d) == d;
	}
}
[/sourcecode]

This is ugly, but it works. Real word code with god classes containing a few thousand lines do not get any better than this even after refactoring.

Are we finished? Not really. Lets look at the unit tests again. It documents that the code

[sourcecode language="text"]
sample 2 is prime
sample 17 is prime
sample 10 is not prime
demonstration of BGTCKT17645329
[/sourcecode]

Thats is not really meaningful, especially the last line. The bug was reported (in addition to some false statement) that the number 9 is not handled properly. But the actual bug was that the program did not handle properly the numbers that were squares of prime numbers. If you know ITIL the first one is the incident and the second one is the problem. We created a unit test for the incident and it was good we did that. It helped the debugging. But when we identified the problem, before applying the fix we did not create one to test the fix for the problem. This was not real TDD and because there was a unit test for the incident but we did not create it to test the fix.

The proper test would have a name something like

[sourcecode language="text"]
some sample square number is not prime
[/sourcecode]

(with the appropriate camel casing in the method name) and it would have some square numbers, like 9, 25, 36 as test data.

<h2>Conclusion</h2>

When fixing bug be careful with TDD. You may apply it wrong. TDD says to write the unit test before you code. The unit test you write will define what you want to code. This is not the unit test that demonstrate the bug. You can use that as a tool to debug and find the root cause. But that is not the part of TDD. When you know what to write, no matter how eager you are to fix the code: do write the unit test that will test the functionality that you are going to write.

This is what I wanted to imply (in an attention catching way) in the title: write a unit test for the functionality or functionality change that fixes the bug instead of the bug.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>782</wp:post_id>
  <wp:post_date>2015-02-04 16:00:09</wp:post_date>
  <wp:post_date_gmt>2015-02-04 15:00:09</wp:post_date_gmt>
  <wp:post_modified>2015-02-04 19:20:04</wp:post_modified>
  <wp:post_modified_gmt>2015-02-04 18:20:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-unit-test-bugs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/f25y4Uquzm3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204847927250720]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/R8PQlHlJlq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5968754788756652032&type=U&a=WuGf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6748</wp:comment_id>
    <wp:comment_author><![CDATA[GÃ¡bor Schermann]]></wp:comment_author>
    <wp:comment_author_email>gabor.schermann@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/115349693993638412570</wp:comment_author_url>
    <wp:comment_author_IP>188.142.210.49</wp:comment_author_IP>
    <wp:comment_date>2015-02-05 11:43:57</wp:comment_date>
    <wp:comment_date_gmt>2015-02-05 10:43:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The difficulity is always to find the real domain that you want to test. In this case (primes) you should have tested the factors: 0 factor (the '1'), 1 factor (primes), 2 factors (separate cases for the same number (square numbers) or different numbers), 3 factors (all combinations, including 3rd power), etc. Then, if you receive a bug (e.g '9'), you could categorize it, and detect that your code is not working for that category. You may define other categories (e.g. 4th power tests) during the bug report analysis.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423133037.5880939960479736328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[115349693993638412570]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423133182]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423133182]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423133182.265614986419677734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6746</wp:comment_id>
    <wp:comment_author><![CDATA[hron84]]></wp:comment_author>
    <wp:comment_author_email>hron@hron.me</wp:comment_author_email>
    <wp:comment_author_url>http://hron.me/</wp:comment_author_url>
    <wp:comment_author_IP>178.164.185.178</wp:comment_author_IP>
    <wp:comment_date>2015-02-04 16:34:13</wp:comment_date>
    <wp:comment_date_gmt>2015-02-04 15:34:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The operator =&lt; is wrong, as i know it is &lt;=. The opposite operator is &gt;=, but the equal sign should be the second, if i remember correctly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423064575]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423064575]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423064576.11279201507568359375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423064053.7051250934600830078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"hron84";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6747</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-02-04 16:45:04</wp:comment_date>
    <wp:comment_date_gmt>2015-02-04 15:45:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You are right. That would have been revealed by the compiler even before the unit test phase :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6746</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423064705]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423064705]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423064705.3225309848785400390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6758</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-02-10 05:06:34</wp:comment_date>
    <wp:comment_date_gmt>2015-02-10 04:06:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In case of such a small domain like <code>int</code>, exhaustive testing makes sense (assuming you can verify the result by other means). But this is another story.

The other thing is pseudo-random testing. For example, generate two random factors greater than one, assure that the multiplication can't overflow, and assert that the product is not a prime. It's not as nice as one number per test, but it covers many more cases for just a bit computer time (and a minimum amount of code).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423541194]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423541194.819880962371826171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423560571]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423560568.8399240970611572265625;s:7:"message";s:47:"verhas changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423560571.265819072723388671875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6759</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-02-10 10:35:56</wp:comment_date>
    <wp:comment_date_gmt>2015-02-10 09:35:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The major problem with pseudo-random testing is that it can not be reproduced. We usually like tests reproducible. This is not a dogmatic issue though. There is no statement saying <i>"don't use random tests because they are not reproducible"</i>. There is a cost associated with the non-reproducibility of the tests and if it smaller than the advantage they give on the other side of the scale then you can go for it.

For the case, your suggested pseudo random tests are very well suiting and I wish it was that easy to create test data automatically for real life commercial tests.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6758</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423560956]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423560956.9209918975830078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423560957]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Test JavaBeans]]></title>
  <link>https://javax0.wordpress.com/2015/05/20/test-javabeans/</link>
  <pubDate>Wed, 20 May 2015 15:00:24 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=808</guid>
  <description/>
  <content:encoded><![CDATA[The first question is not how to test JavaBeans. The first question is not even if you need to test JavaBeans. The very first question is whether we need JavaBeans at all. 

I am generally against JavaBeans, but when it comes to Java EE and services you can hardly avoid them. And that is the most I can tell about the first question.

The second question is if we need testing them. JavaBeans are usually generated code and the rule is that generated code should not be tested. Testing a generated code implicitly tests the code generator and not the generated code. If there is any error then the generator is faulty. And the generators have their own unit tests. Hopefully. I am, perhaps, still kind of junior having such beliefs.

So what is the conclusion: Shouldn't you test JavaBeans?

WRONG.

Why? Because the assumption that JavaBeans are generated may be false. They are generated at first, but they are source code and source code has long life. Source code gets modified. By programmers. By humans. Humans make mistakes. Programmers are humans. More or less. You get it?

The usual modification to JavaBeans are small. Minor. Trivial. Trivial code should not be tested. Paying careful attention and generally lacking functionality (is setting and getting a real functionality?) makes tests unnecessary. WROGN again, just like my spelling wrong. Did you notice that at first? Probably not. That is also the case with the errors in the setters and getters. There may be only one single letter of typing. No problem, integrated development environments will do the code completion and voila! The typo proliferates and becomes legacy in the whole corporation. Does it cost? Sooner or later it does.

Code is used from JSP, where the editor does not spot the mistake, BeanUtils does not find the getter or setter and need extra code, but the names are already carved into stone and are guarded by dead souls. You try to change it and application developers in the corporate will bang on your door claiming back their good old cozy typo infested setter and getter.

What errors can there be? Presumably any as far as the possibility is concerned, but the most typical are:

<ul>
<li>Name of the setter or getter has typo and thus does not follow the JavaBeans standard.
<li>Setter alters something else not only the field it is supposed to.
<li>Setter does something and you can not get back that via the getter.
</ul>

To test these, however, you should not write real unit test code. You should probably create some unit test class files, but  they should not contain more than some declarative code. To do the real test you should use some libraries. A good start <a href="http://stackoverflow.com/questions/3294959/java-bean-testing-framework">article</a> is at stackoverflow. They mention <a href="http://docs.bean-matchers.googlecode.com/git/quickStart.html">Bean Matchers</a> or <a href="https://code.google.com/p/rtu/">Reflection Test Utilities</a>. You can also give a try to <a href="https://github.com/verhas/JavaBeanTestRunner/">JavaBeanTestRunner</a> which tests that the setters do not mess up fields they should not, but does not check methods like <tt>toString()</tt>, or <tt>equals()</tt>.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>808</wp:post_id>
  <wp:post_date>2015-05-20 16:00:24</wp:post_date>
  <wp:post_date_gmt>2015-05-20 15:00:24</wp:post_date_gmt>
  <wp:post_modified>2015-05-12 20:34:54</wp:post_modified>
  <wp:post_modified_gmt>2015-05-12 19:34:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-javabeans</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205558020642611]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/3ZEqiq5Gssd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/9Uh96tXAfQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6006805623583358976&type=U&a=ZJbh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Default methods and multiple inheritance]]></title>
  <link>https://javax0.wordpress.com/2015/02/11/default-methods-and-multiple-inheritance/</link>
  <pubDate>Wed, 11 Feb 2015 15:00:11 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=811</guid>
  <description/>
  <content:encoded><![CDATA[Recently Lukas JOOQ Eder posted and <a href="http://blog.jooq.org/2015/02/02/top-5-use-cases-for-nested-types/">article</a> about nested classes and their use. This is an interesting topic and his article is, as always, interesting and worth reading. There was only one slight statement I could not agree with and we had a brief reply chain leading to default method and why there can not be something like

[sourcecode language="java"]
class Outer {
    &lt;non-static&gt; interface Inner {
        default void x() {
            System.out.println(Outer.this.toString());
        }
    }
 
    Inner2 y() {
        return new Inner2();
    }
}
 
class Inner2 implements Inner {
}
 
// This would now print Outer.toString()
// to the console
new Outer().y().x();
[/sourcecode]

in Java. In the above code the default method of an inner interface would refer to the instance that is enclosing the interface, so to say. I believed that a "reply" was not the best communication form for this, as the original topic was different and here I go.

<h1>What are default methods</h1>

You probably know. If not google it, or read my articles <a href="https://javax0.wordpress.com/2014/03/26/the-true-nature-of-java-8-default-methods/">Java 8 default methods: what can and can not do?</a> and <a href="https://javax0.wordpress.com/2014/04/02/how-not-to-use-java-8-default-methods/">How not to use Java 8 default methods</a>.

If you googled you can see that default methods in Java 8 bring the Canaan, multiple inheritance is available.

There is a very good discussion about it on <a href="http://stackoverflow.com/questions/7857832/are-defaults-in-jdk-8-a-form-of-multiple-inheritance-in-java">stackoverflow</a> with real professionals, who do know Java:

<blockquote> Java has always had multiple inheritance of types. Default methods add multiple inheritance of behavior, but not of state. (Multiple inheritance of state in languages like C++ is where most of the trouble comes from.) â  <a href="http://stackoverflow.com/users/3553087/brian-goetz">Brian Goetz</a> Jun 21 '14 at 2:05 </blockquote>

In this article I will examine a little how to interpret and understand that statement.

<h1>Types of inheritance</h1>

The quote from <a href="http://stackoverflow.com/users/3553087/brian-goetz">Brian Goetz</a> mentions:

<ul>
	<li>inheritance of types</li>
	<li>inheritance of behavior, and</li>
	<li>inheritance of state.</li>
</ul>

Inheritance of types is very easy and well known for Java programmers. You define abstract methods in the interface, but you do not specify how they work, only the return value and the signature of the methods. With default methods Java 8 introduced inheritance of behavior without inheritance of state. But can you really have inheritance of behavior without inheritance of state? Not really. At least in Java 8 you can have inheritance of state though this is not recommended, not well performing (I mean: it may be slow) and also cumbersome and error prone to program. But you can, and I will show here how. (In addition to the thread local nonsense I published in the article I referred above.)

I believe that Java 8 inventors wanted the default method to keep backward compatibility while implementing the functional interfaces (e.g.: streams) in the standard run time. I recently watched the series <a href="http://www.imdb.com/title/tt2802850/">Fargo</a> and I feel the language designers just obliviously answered "yes" to the question "Is that what you really want?"

<h1>State inheritance with default methods</h1>

Default methods can not access fields (except static fields, that are final anyway in interfaces, so let's forget them for the while). Just like you can not access private fields of class A from a class B extending A. Or the other way around: you can not access the private fields of B from A. You can however have getters and setters in B and if you declare them as abstract methods in A you gain the access. Open sesame. Getters and setters are the solution.

When you declare abstract methods in an interface for all the state fields you want to access from default methods you can access them. This way you get the very same result as if there was real state inheritance. The difference is the syntax: you use getter and setter methods instead of the field name, and you have to declare these in the interface. That way compile phase checks that the getters and setters are really there.

You can see that things with Java 8 get really complicated. Mix that up with generics and you may not find a living soul who understands it all. Having a construct, like

[sourcecode language="java"]
Outer.this.toString()
[/sourcecode]

from the sample code above would make it even more complex with no real leverage, probably.

I believe I have some knowledge about what default methods are in Java 8 and what you can do with them. Having 10 years of Java and more than 30 years of programming experience, however, is not enough for me to tell how you should use default methods. I feel envy for the developers that still work with Java 1.6 or earlier in production code: they need not worry about default methods. (It was meant to be a joke.)

Even though I try to give some advices.

<h1>Recommendation</h1>

Never mimic state inheritance in default methods. Hard to tell what it is in practice though. Calling a getter or setter is clearly is. Calling some abstract methods that are implemented in the implementing class may or may not be. If doubt: better do not.

Never ever use the threadlocal trick I wrote in the other article.

Use default methods for what Java language inventors used it: keep backward compatibility in your library interfaces. If you ever released a library and it contains an interface (how could otherwise it be, btw) <i>do not change it...</i> Think about client code using your library that implements the interface. From Java 8 you have the possibility to finish the sentence: <i>do not change it incompatible.</i> If there is a new method: create a default implementation so the code that already implemented the previous version remains compatible and there is no need to extend these classes.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>811</wp:post_id>
  <wp:post_date>2015-02-11 16:00:11</wp:post_date>
  <wp:post_date_gmt>2015-02-11 15:00:11</wp:post_date_gmt>
  <wp:post_modified>2015-02-09 11:05:37</wp:post_modified>
  <wp:post_modified_gmt>2015-02-09 10:05:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>default-methods-and-multiple-inheritance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204889975101890]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/YiP8MWi5D17]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/A3aoyqrt2C]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5971292994974810114&type=U&a=m_gD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2790e1084483b9baf1faa9f12fee272a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d9d25a1486755003226701fede149d8a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6765</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>194.230.159.189</wp:comment_author_IP>
    <wp:comment_date>2015-02-11 19:19:23</wp:comment_date>
    <wp:comment_date_gmt>2015-02-11 18:19:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi there! ;)

Well it is very probable that the EG would not allow "inner interfaces" because of their averseness to multiple inheritance of state. And also because it looks and feels complicated and useless (I didn't deny that). But that is simply a <em>motivation</em> not to do it. It doesn't mean that it is technically wrong.

My only point was that it would be technically feasible, and perhaps, useful in 1-2 cases.

Cheers,
Lukas]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1423678764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423678764.2670519351959228515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423678764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Using junit for something else]]></title>
  <link>https://javax0.wordpress.com/2015/02/18/using-junit-for-something-else/</link>
  <pubDate>Wed, 18 Feb 2015 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=825</guid>
  <description/>
  <content:encoded><![CDATA[<h1>junit != unit test</h1>

Junit is the Java unit testing framework. We use it for unit testing usually, but many times we use it to execute integration tests as well. The major difference is that unit tests test individual units, while integration tests test how the different classes work together. This way integration tests cover longer execution chain. This means that they may discover more errors than unit tests, but at the same time they usually run longer times and it is harder to locate the bug if a test fails. If you, as a developer are aware of these differences there is nothing wrong to use junit to execute non-unit tests.

I have seen examples in production code when the junit framework was used to execute system tests, where the execution chain of the test included external service call over the network. Junit is just a tool, so still, if you are aware of the drawbacks there is nothing inherently wrong with it. However in the actual case the execution of the junit tests were executed in the normal maven test phase and once the external service went down the code failed to build. That is bad, clearly showing the developer creating the code was not aware of the big picture that includes the external services and the build process.

After having all that said, let me tell you a different story and join the two threads later.

<h1>We speak languages... many</h1>

Our programs have user interface, most of the time. The interface contains texts, usually in different languages. Usually in English and local language where the code is targeted. The text literals are usually externalized stored in "properties" files. Having multiple languages we have separate properties file for each language, each defining a literal text for an id.

For example we have the files

[sourcecode language="text"]
messages-de.properties
messages-fr.properties
messages-en.properties
messages-pl.properties
messages.properties
[/sourcecode]

and in the Java code we were accessing these via the Spring <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/MessageSource.html"><tt>MessageSource</tt></a> calling

[sourcecode language="java"]
String label = messageSource.getMessage(&quot;my.label.name&quot;,null,&quot;label&quot;,locale);
[/sourcecode]

<h1>We, programmers are kind of lazy</h1>

The problems came when we did not have some of the translations of the texts. The job of specifying the actual text of the labels in different languages does not belong to the programmers. Programmers are good speaking Java, C and other programming languages but are not really shining when it comes to natural languages. Most of us just do not speak all the languages needed. There are people who have the job to translate the text. Different people usually for different languages. Some of them work faster, others slower and the coding just could not wait for the translations to be ready. For the time till the final translation is available we use temporary strings.

<blockquote>All temporary solutions become final.</blockquote>

The temporary strings, which were just the English version got into the release.

<h1>Process and discipline: failed</h1>

To avoid that we implemented a process. We opened a Jira issue for each translation. When the translation was ready it got attached to the issue. When it got edited into the properties file and committed to git the issue was closed. It was such a burden and overhead that programmers were slowed down by it and less disciplined programmers just did not follow the process. Generally it was a bad idea.

We concluded that not having a translation into the properties files is not the real big issue. The issue is not knowing that it was missing and creating a release. So we needed a process to check the correctness of the properties files before release.

<h1>Light-way process and control</h1>

Checking would have been cumbersome manually. We created junit tests that compared the different language files and checked that there is no key missing from one present in an other and that the values are not the same as the default English version. The junit test was to be executed each time when the project was to be released. Then we realized that some of the values are really the same as the English version so we started to use the letter 'X' at the first position in the language files to signal a label waiting for real translated value replacement. At this point somebody suggested that the junit test could be replaced by a simple 'grep'. It was almost true, except we still wanted to discover missing keys and test running automatically during the release process.

<h1>Summary, and take-away</h1>

The Junit framework was designed to execute unit tests, but frameworks can and will be used not only for the purpose they were designed for. (Side note: this is actually true for any tool be it simple as a hammer or complex as default methods in Java interfaces.)

You can use junit to execute tasks that can be executed during the testing phase of build and/or release. 

<ul>
	<li>The tasks should execute fast, since the execution time adds to the build/release cycle.</li>
	<li>Should not depend on external sources, especially those that are reachable over the network, 
            because these going down may also render the build process fail.</li>
	<li>When something is not acceptable for the build use the junit api to signal failure. Do not just write warnings. Nobody reads warnings.</li>
</ul>



]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>825</wp:post_id>
  <wp:post_date>2015-02-18 16:00:00</wp:post_date>
  <wp:post_date_gmt>2015-02-18 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2015-02-16 12:16:11</wp:post_modified>
  <wp:post_modified_gmt>2015-02-16 11:16:11</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-junit-for-something-else</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_path</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204936514065335]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/PK2PU3kVxwd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/TGBKIOnPV9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5973829538830909440&type=U&a=Cji2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Quick, Cheap, Quality: choose two]]></title>
  <link>https://javax0.wordpress.com/2015/02/25/quick-cheep-quality-choose-two/</link>
  <pubDate>Wed, 25 Feb 2015 15:00:23 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=837</guid>
  <description/>
  <content:encoded><![CDATA[[caption id="attachment_845" align="alignleft" width="203"]<a href="https://javax0.files.wordpress.com/2015/02/quick-cheap-fast2-e1424604360219.png"><img src="https://javax0.files.wordpress.com/2015/02/quick-cheap-fast2-e1424604360219.png" alt="Quick Cheap Fast" width="203" height="192" class="size-full wp-image-845" /></a> You can select two[/caption]It is old and common wisdom. Even printed on billboard of the mechanics shop where my car is usually repaired. And as with many well known facts: they are ignored many times. 

Although his is a wider issue, and many statements I am going to make in this article is valid for other industries, I will focus on IT and more specifically on software development. I do that, because this is where I have experience and my interest. The software industry is new as compared to building constructions or car repair and the customers many times have unreal expectations. To make the situation worse bad developers and companies harvest the obliviousness of customers cheating them. This leads to misery and many times customers learn that software vendors are unreliable and they just tend not to believe what we say even when they face an honest vendor.

There will be no liberation of the world in this article. There is no such article that could do that, not even such a minor aspect of our lives as customer vendor relationship in software development.

<h1>As a vendor choose two you can control</h1>

After you realized that there is no free lunch and selected two of the above, it is still not the end of the story. You can say, for example, that you want quality software and fast, no matter what it costs. If you can not control the time or the quality you may get only one or none of the three above.

<h2>Controlling money</h2>

Controlling the money is the easiest these days so long as long there is a healthy society where contracts are obeyed and executed. You have a contract with the software vendor and you pay no more than the contract price. I have seen software projects when the software was not ready by time and the vendor demanded more money to finish. The customer had two choices. Pay the extra and get the software with some delay or start the whole project with another vendor from scratch. Both of them meant extra cost. Extra payment: obvious. Project start over: investment into vendor relationship on technical level and time to market money lost.

Looking at the story you can say the vendor simply blackmailed the customer. Real life is not that simple many times and a story can not be told in a paragraph as complex as the life is. I was lucky not to be involved in the whole story since I could see that there was foul play on both sides. It is kind of culture how we play these games.

<h2>Controlling time</h2>

Perhaps time is the second in this list. At least it can easily be measured since the invention of the <a href="http://en.wikipedia.org/wiki/Chronograph">chronograph</a>. Controlling is, however, more than just measure. As you could see in the example above facing the fact that the software is not ready at the end of the project is a disaster.

To control the time you should use mile stones and project deliverables that show the progress of the project. It may be so important that in some project I have experienced delivery of artifacts that were not needed in the long run and from the position of the developers it seemed to be waste of money. We were asked, and paid of course, to develop a version of a software with an extremely simple UI that was not appropriate for use in the production version. Not a single line of code of this UI was used in the final version. Even though this was capable to demonstrate that the back-end of the software was partially developed it was possible for the customer to check some of the features and there was no room for slide ware lies. (We actually did not intend to lie, but even if we wanted there was no room: the demo was working on a partially developed back-end.)

On the other hand the strong control of time may lead to something that hardly can be named "control" in the noble sense of management. Tracking the progress, requiring constant administration and deliverables only for the time tracking may lead to unjustifiable overhead cost. Since the developers are usually not knowledgable about management they do not usually understand the importance of the measurement of their work and this may lead to frustration adversely affect motivation and thus work.

As is always: there has to be a good balance. There is no easy way to find the balance though. As one of my junior coworker once said when there was too much control and checkpoint in the project: "It is controlling without con." (for those who have brain challenges: trolling)

<h2>Controlling quality</h2>

This is the hardest. It is not even trivial to measure the quality. There are great practices in software development that can help the measurement of the quality of a developing software product but they are not measuring quality itself in purest form. They measure something that may, if we are lucky, correlate with the quality of the software. We can measure the number of bugs discovered during a test phase. We can use sonar, PMD, findbugs, checkstyle on the code and follow strict coding conventions. These alone however does not assert that you will have good quality.

It is also a misconcept to aim for bug free software. There can be bugs in the code. The aim is to have a software that fits the business needs. If a software is targeted toward prospect customers, general internet audience who get distracted from a menu structure not intuitive enough then the UI has to be designed accordingly tested with trial audience and fine tuned. It incurs cost. If the cost is less than the business gain: go for it. 

If you work for a company and the intranet application is used by internal users, who spend 8 hours a day using the application they learn to use a menu system even that is not too intuitive. I have experienced a software development project where we wanted to make the menu structure more intuitive and the users refused the change wanting the old, bad style structure back: they have already learnt where to click, what key combos to press.

<h1>Conclusion</h1>

All of these subjects deserve more discussion than a short article or just a section in an article. Here they are more as a discussion ice breaker than something to learn from like a tutorial. Just some ideas and fragments that you can add to in comments if you like.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>837</wp:post_id>
  <wp:post_date>2015-02-25 16:00:23</wp:post_date>
  <wp:post_date_gmt>2015-02-25 15:00:23</wp:post_date_gmt>
  <wp:post_modified>2015-02-25 17:21:47</wp:post_modified>
  <wp:post_modified_gmt>2015-02-25 16:21:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-cheep-quality-choose-two</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10204982852943778]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/117525213959765509146/posts/NarWMHds3bz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/vMMqPIA4Mk]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5976368746615316480&type=U&a=nDG_]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_18d1b476715b12dcbd29ed6bf3e3e641</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7092</wp:comment_id>
    <wp:comment_author><![CDATA[johnspikowski]]></wp:comment_author>
    <wp:comment_author_email>support@scriptbasic.org</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/johnspikowski</wp:comment_author_url>
    <wp:comment_author_IP>24.19.241.121</wp:comment_author_IP>
    <wp:comment_date>2015-03-09 20:49:42</wp:comment_date>
    <wp:comment_date_gmt>2015-03-09 19:49:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter, Enjoyed your article. Give me a ping when you find time to revisit one of you other masterpieces, Script BASIC. (ANSI C open source project)

John]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6781</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425930582.20460796356201171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"johnspikowski";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1425967389]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425934874.720263957977294921875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:13:"johnspikowski";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1425967389]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425967389.78396511077880859375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6780</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.68.38.6</wp:comment_author_IP>
    <wp:comment_date>2015-02-25 16:40:47</wp:comment_date>
    <wp:comment_date_gmt>2015-02-25 15:40:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What's wrong? Typo in the title line? Brain challenged readers? It is not you Peter.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424880793.45156192779541015625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424880656.4821109771728515625;s:7:"message";s:47:"verhas changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424878848.38930988311767578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1424880793]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1424878848]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6781</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>185.12.129.229</wp:comment_author_IP>
    <wp:comment_date>2015-02-25 17:22:28</wp:comment_date>
    <wp:comment_date_gmt>2015-02-25 16:22:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I was making cheep work. Sorry.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6780</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1424881349]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1424881349.2444210052490234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1424881349]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Sometimes you need tuples in Java. Or not.]]></title>
  <link>https://javax0.wordpress.com/2015/04/22/sometimes-you-need-tuples-in-java-or-not/</link>
  <pubDate>Wed, 22 Apr 2015 15:00:18 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=863</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://en.wikipedia.org/wiki/Tuple">Tuple</a> is an ordered list of elements. In Java that is <tt>List&lt;Object&gt;</tt>. Even though it exists there is an extra need from programmers for tuples. You can see that there is a package named <a href="http://www.javatuples.org/">javatuples</a> that defines tuples that contain 1, 2 up to 10 elements. (Btw: There is a class in the package named <a href="http://www.javatuples.org/apidocs/org/javatuples/Unit.html">Unit</a> that contains one element. WAT?) There is a long <a href="http://stackoverflow.com/questions/13977236/tuple-unmodifiable-ordered-list-of-elements-data-structure-in-java">discussion on stackoverflow</a> about tuples.

But where does it come from? Why do some Java programmers long for tuples? The answer is that tuples are part of the language constructs of other languages. They date back to such old ages that only program archeologist can remember. Languages like LISP use tuples. Python is also lurking here from the last century. Why did they implement a feature like tuples? <a href="http://www.youtube.com/watch?v=0ieicflBG_Y">Perhaps it seemed to be a good idea.</a> If it was not coming from the past, Java developer would not long for it. Which itself is a hint: do you really need it? But the fact is fact:

<blockquote>Java misses tuples. <em>THIS IS A LIE!</em></blockquote>

Which is not true for two reasons:

<ol>
	<li>There is no need for tuples.</li>
	<li>There is a built in type in Java that can handle tuple</li>
</ol>

There is an interface named <tt>java.util.Map.Entry</tt> that is there just to hold two objects and there is a simple implementation <tt>java.util.AbstractMap.SimpleEntry</tt>. Thus Java does not misses tuples and neither do I.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>863</wp:post_id>
  <wp:post_date>2015-04-22 16:00:18</wp:post_date>
  <wp:post_date_gmt>2015-04-22 15:00:18</wp:post_date_gmt>
  <wp:post_modified>2015-04-21 15:58:56</wp:post_modified>
  <wp:post_modified_gmt>2015-04-21 14:58:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sometimes-you-need-tuples-in-java-or-not</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Yv5GKm3DwST]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205385723855299]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/Bv6cmWxRm2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5996659370463678464&type=U&a=swai]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc1c2dd9f9215537bee6656a50910c36</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc4cf3d09d8a2887baee3d869292ac1d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_60908706409d159aaca05245b526f7ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4503f0827ea6f4b847599fd8dccff66c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_27655a1618e8a87edabb1b5ecd9c652e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33410e9988b313dacb8cbe655f6ff1fd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8116</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>84.75.224.45</wp:comment_author_IP>
    <wp:comment_date>2015-04-23 17:12:34</wp:comment_date>
    <wp:comment_date_gmt>2015-04-23 16:12:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  some of them would say or think â âduhh itâs from AbstractMap package...
</blockquote>

I would not call that person Java developer. Not even a junior Java developer. Inner classes are essential part of the language. Should be known.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8115</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1429805555]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429805555.197021961212158203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9872028267]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1429805555]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8115</wp:comment_id>
    <wp:comment_author><![CDATA[satyr]]></wp:comment_author>
    <wp:comment_author_email>moj.spam@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>31.182.89.82</wp:comment_author_IP>
    <wp:comment_date>2015-04-23 16:40:34</wp:comment_date>
    <wp:comment_date_gmt>2015-04-23 15:40:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think that using java.util.AbstractMap.SimpleEntry is like demanding that Java developers would think outside the box (some of them would say or think - 'duhh it's from AbstractMap package, it's too complicated, method can return only one object unless it's a collection otherwise it's a violation of OOP'). Furthermore as Martin mentioned it's half-immutable.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1429803634]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9871813426]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1429805123]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1429805123]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429805123.7790470123291015625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429803634.792213916778564453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"fobos314";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8114</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-04-22 22:13:15</wp:comment_date>
    <wp:comment_date_gmt>2015-04-22 21:13:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I disagree a bit. There's sometimes a need for a tuple, e.g., when you need to return two or more things and there's no behavior to add. Fortunately, this is pretty rare and writing one more trivial class once per year is not that bad (especially when using project Lombok). Concerning

<pre>AbstractMap.SimpleEntry</pre>

, it's half-immutable, which makes it rarely suitable. But all in all, having no tuples in Java is a good thing as it'd be surely overused.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1429737196]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429737196.33977603912353515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1429737196]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10274</wp:comment_id>
    <wp:comment_author><![CDATA[Homer]]></wp:comment_author>
    <wp:comment_author_email>meh@meh.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>96.8.87.136</wp:comment_author_IP>
    <wp:comment_date>2016-10-24 18:32:49</wp:comment_date>
    <wp:comment_date_gmt>2016-10-24 17:32:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Java methods are invoked with tuples. A tuple is a list with a fixed size and fixed type by index position. Entry can only replace a 2-tuple.

If Java supported tuples, you could write:
(String, String) parsePair(String stuff) { return (..., ...); }

The results could be used directly with method invocation:
some.method(parsePair(stuff)); // where method(String x, String y);;

Without support for tuples, you have to create a holder type (or hijack something like Entry):
map.put(e.getKey(), e.getValue())]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1477334845.304131031036376953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1477330369.191874980926513671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[0]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[28189999935]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1477337320]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1477337320]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1477337321.4420149326324462890625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10813</wp:comment_id>
    <wp:comment_author><![CDATA[plchung4]]></wp:comment_author>
    <wp:comment_author_email>plchung4@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>113.28.102.61</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 11:41:09</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 10:41:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What about a tuple of 3, 4, 5, 6, ... or more items??

Let's say you want to write quickly a simple program to find some data in CSVs. Of course object arrays would work but sometimes a generic class that supports typed value and some default implementation of hashCode / equals etc would improve productivity a lot more.

That's the reason why the old language python regained so much popularity these days. Not everyone has the luxury of time to design all the architecture carefully and foresee the upcoming 5 years of future developments.

The target result could just be a very small temporary program just fits within one screen. Or some financial institute production support cases we just want quick fix urgently within minutes.

Code first, and refactor later. In some urgent situation we really need this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[4822550192]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1494245531]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494245531]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494245531.6696488857269287109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494245361.5594151020050048828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494240071.3123569488525390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11628</wp:comment_id>
    <wp:comment_author><![CDATA[Malte]]></wp:comment_author>
    <wp:comment_author_email>malte@labs.ws</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>196.213.223.210</wp:comment_author_IP>
    <wp:comment_date>2017-10-25 13:41:34</wp:comment_date>
    <wp:comment_date_gmt>2017-10-25 12:41:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I feel the need to point out that Python is hardly "lurking here from the last century". It's a modern, powerful language. Whether or not a language has a tuple type has nothing to do with its age, but is a design decision that the creators of the language made. Plenty of modern languages have tuples, others don't, and they all have their reasons.

They are neither good nor bad, it just depends.

Also, if you're worried that AbstractMap.SimpleEntry is "half-immutable" then take a look at AbstractMap.SimpleImmutableEntry.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1508935296.8776700496673583984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10716868906]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1508935612]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1508935612]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1508935612.8777549266815185546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11629</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.247</wp:comment_author_IP>
    <wp:comment_date>2017-10-25 13:49:08</wp:comment_date>
    <wp:comment_date_gmt>2017-10-25 12:49:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[https://en.wikipedia.org/wiki/History_of_Python

"The programming language Python ... implementation was started in December 1989..."]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11628</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1508935749]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1508935749.0216128826141357421875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10716935276]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1508935749]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11630</wp:comment_id>
    <wp:comment_author><![CDATA[Malte]]></wp:comment_author>
    <wp:comment_author_email>malte@labs.ws</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>196.213.223.210</wp:comment_author_IP>
    <wp:comment_date>2017-10-25 13:59:09</wp:comment_date>
    <wp:comment_date_gmt>2017-10-25 12:59:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[https://en.wikipedia.org/wiki/Java_(programming_language)

"James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991"

I guess Java is also lurking here from the last century? :P
Anyway, my point was really that a language's age says very little about its applicability, relevance or whether or not its design is "good". Forgive my knee-jerk reaction.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11629</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1508936350]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1508936351.2828800678253173828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10717234414]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1508936352]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11631</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.247</wp:comment_author_IP>
    <wp:comment_date>2017-10-25 14:01:22</wp:comment_date>
    <wp:comment_date_gmt>2017-10-25 13:01:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["I guess Java is also lurking here from the last century?"

Absolutely.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11630</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1508936482]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1508936482.0795109272003173828125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10717304727]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1508936482]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[The Magic Setter Antipattern]]></title>
  <link>https://javax0.wordpress.com/2015/03/25/the-magic-setter-antipattern/</link>
  <pubDate>Wed, 25 Mar 2015 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=871</guid>
  <description/>
  <content:encoded><![CDATA[Setters and getter are evil. When the JavaBean definition was created it seemed to be a good idea. But they do a lot of harm to the Java community. Not as many as the null pointer generally, but enough.

The very first thing is that many juniors believe that implementing setters and getter (hey, it is just a few click in Eclispe!) does encapsulation properly. Should I detail why it does not?

The other things is that using setters and getters are against YAGNI. YAGNI stands for <a href="http://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">You aren't gonna need it</a>. It means that you should not develop a code that the project does not need <em>now</em>. The emphasis is on the word <em>now</em>. Many programmers tend to develop code that extends the actual functionality and does something more general than actually needed. Even though in principle it could be valuable: in most of the practical cases it is not. The code becomes more complex and on the other hand project never develops to the stage where the generalization the programmer created is needed.

Setters and getter are a clean, simple and very broadly used example of YAGNI. If the setter does nothing else but sets the value of a field and if the getter does nothing else than returns the value of the field then why do we need them at all? Why do not alter the access modifier of the field to the value that the setter and the getter has (probably <tt>public</tt>)?

The answer usually is that you <em>may need to implement</em> some more complex functionality either in the getter or in the setter and then you need not change the "interface" the bean provides. The words "<em>you may need to implement</em>" suggests that this is YAGNI. What is more: it is dangerous. Implementing the setters and the getters you implicitly expose the implementation of the class. What does a setter do? Sets the value of a field. For example <tt>setBirthDate()</tt> by definition sets the field <tt>birthDate</tt>. And this is the way your users, who write the code calling the setter will think about it. You may document in your JavaDoc that <tt>setBirthDate()</tt> actually "specifies" a birth date but that is too late. You named the method to be a setter and that is it. Nobody reads JavaDoc. API rulez.

Later, when you change your code and <tt>setBirthDate()</tt> does not only sets birth date or does not even do that the users will not be notified. The change is silent and you just changed the interface you implicitely provided for your users. There will be bugs, debug session, new releases and this is good, because this creates workplace (feel the irony, please). If the users were provided direct access to the fields moving the fields from <tt>public</tt> to behind the barricades of <tt>private</tt> access modifier would cause compile time errors. Perhaps it is only a weird personal taste, but I prefer compile time errors more than bugs. They are easier (read: cheaper) to fix.

Do not worry: you still can modify your API. You can still remove your setters and getters from the set of methods and force fellow programmers to fix their code that implicitly assumed that setters really set and getters get. Please do.

What the actual story was making me write this?

Once upon a time there was an object that could do something. To perform its task you could set either field <tt>aaa</tt> or the field <tt>bbb</tt>, but never both. The application was developed this way and all was good for more than six years. Some day a young programmer princess came riding on white horse wanting to make the world to be a better place. He wanted to make the before mentioned class safer and modified the setter <tt>setAaa()</tt> to <tt>null</tt> the field <tt>bbb</tt> and the other way around. Unit tests shined. Coverage was 100%. (I should learn not to lie.) He submitted a new release of the library and a few weeks later he finished his internship and went back to school. That time the applications started to use the new version of the library. And they failed miserably because of this small change and rolled back to the old version. We all had hard time and summing up, well, the corporate spent approximately one person year of work caused by the simple change not to mention the amount of hair that programmers tore off from their head.

Why did the programs failed? There was some code that cloned an object containing the fields <tt>aaa</tt> and <tt>bbb</tt> in a way like this:

[sourcecode language="java"]
    BadBean newBadBean = new BadBean();
    newBadBean.setAaa(oldBadBean.getAaa());
    newBadBean.setBbb(oldBadBean.getBbb());
[/sourcecode]

You see the point. In the new bean the field <tt>aaa</tt> was always <tt>null</tt>.

Now that you have read this article you will never try to create a clever setter. I know you won't! You know the saying: <i>Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.</i> Behold!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>871</wp:post_id>
  <wp:post_date>2015-03-25 16:00:00</wp:post_date>
  <wp:post_date_gmt>2015-03-25 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2015-03-25 11:19:31</wp:post_modified>
  <wp:post_modified_gmt>2015-03-25 10:19:31</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-magic-setter-antipattern</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205172512365145]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/fg8PVj9gJPb]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/XWdASzA0N6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5986514219548368896&type=U&a=nHwx]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1d640d5d436a9fbcf92239eb4284ddd2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7d374086a28f1b8ad7bcac7f1ce21330</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc3111564a13034793bb275389ee72ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d02d476a51b4063e86ade859df75af47</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2e2ac9a83764ea7c517a39e09eefca97</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4dcec530870f6171ea5af2c26107c3f8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b236683bdbbcd281bbac6abc07d0b689</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cec8271e453f1215de6a47be6bb805a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb7341228ca83b6ca5a863966914617e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5a1d1f8d988179ad8f0b01c28bff4a0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8050</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-03-30 10:09:24</wp:comment_date>
    <wp:comment_date_gmt>2015-03-30 09:09:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Something like

[sourcecode language="java"]
public setAaa(aaa) {
   this.aaa = aaa;
   if (aaa!=null) this.bbb = null;
}
[/sourcecode]

would work and <em>less likely</em> to cause harm ...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8048</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427706564]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427706564.7822399139404296875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8841391652]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427706564]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8049</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-03-30 09:52:15</wp:comment_date>
    <wp:comment_date_gmt>2015-03-30 08:52:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I do not think that we have to choose who was wrong at this late point. The fact that the cloning code was not appropriate does not lift the responsibility of somebody changing an already established interface. It is not the one or the other case. Both practices are wrong.

In case of changing the setter and getter there was good intent to correct a mistake. However -- in my belief -- it was done in a wrong way. If the patient walks with a drag because of a broken leg it may not be the best approach to break the other leg. The original problem breaking the first leg was the use of setters and getters exposing the internals of the bean.

Making the bean clonable, or providing an appropriate builder for the bean would have been good. But that was not what the person making the "correction" did.

DRY: It is just another principle that was violated. It still not validates the wrong movement. A mistake at one place does not justify another mistake another place. It may also worth mentioning that violating DRY you can see many times in large organization. You can see examples of some functionality that has its logical place in one library belonging to one group. and is needed by another. The solution would be to manage the change of the library. It may need many organizational management effort. Programmers are not good in managing and organizing issues. They love to create code that works and have things controlled on the technical level. SO they develop the code where they need it. This clearly leads to code duplication, violation of DRY. But in this case this is already organization issue, that I would not like to touch, out of subject. I am not good at managing things, I like to code and control things on the technical level.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8047</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427705535]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427705535.753643035888671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8840848994]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427705535]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8030</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Sufliarsky]]></wp:comment_author>
    <wp:comment_author_email>sufliarskyp@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-03-25 17:42:54</wp:comment_date>
    <wp:comment_date_gmt>2015-03-25 16:42:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually those clever setters don't look like evil to me. However if they should be clever, they need to be really clever enough. And should not forget about possible null on the input for example. If only Java programmers would always expect null on input. The world would be a nicer place to live.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427301774.95030498504638671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1427311211]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427311211]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427306378.58959293365478515625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427311211.7053840160369873046875;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8055</wp:comment_id>
    <wp:comment_author><![CDATA[Jacob Zimmerman]]></wp:comment_author>
    <wp:comment_author_email>sad2project@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://programmingideaswithjake.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>71.13.119.2</wp:comment_author_IP>
    <wp:comment_date>2015-04-01 18:28:43</wp:comment_date>
    <wp:comment_date_gmt>2015-04-01 17:28:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You missed his point. Using the setters and getters in your classes exposes the object state almost as much as leaving them public. And if you're going to provide getters and setters that aren't doing anything, you might as well be making the fields public.

Granted, overall this was still a poor design, not originally preventing both from getting set, and making the copier do things a dumb way. But that doesn't change the fact that just placing getters and setters for all your fields is a bad idea. Unless it's sole purpose is as a data object. Even then, the data should be set in the constructor and the object remain unchangeable, removing the need for setters.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8034</wp:comment_parent>
    <wp:comment_user_id>17955486</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427909325]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427909326.1408050060272216796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"zimvasion";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8959488813]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427909327]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8039</wp:comment_id>
    <wp:comment_author><![CDATA[Piotr]]></wp:comment_author>
    <wp:comment_author_email>papaj997@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>87.239.222.243</wp:comment_author_IP>
    <wp:comment_date>2015-03-26 11:28:37</wp:comment_date>
    <wp:comment_date_gmt>2015-03-26 10:28:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What do you say about single responsibility ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427365795]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427365795.5491139888763427734375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427365795]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8654870258]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427365718.3021390438079833984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8040</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.134.254.24</wp:comment_author_IP>
    <wp:comment_date>2015-03-26 17:20:53</wp:comment_date>
    <wp:comment_date_gmt>2015-03-26 16:20:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@none

<blockquote>
  Just make it public?
</blockquote>

I merely wanted to say that creating setter and getter is not better than making the field <tt>public</tt>.

<blockquote>
  Well, it took your team a year in hour just to find a bug in the state of an object?
  That should be a clue.
</blockquote>

You can come to the conclusion that we are unprofessional and the code base is a mess.

However at the same time you could also come to the conclusion it is a really really huge organization with very many applications that are dependent on that library that was changed. If each application needed one person day to fix the issue, and three person day for an extra regression release test then the one person year was a modest estimation.

You comment presents a great example how easy it is to underestimate the consequences of a "small" mistake.

<blockquote>
  The moral of your story should not be, donât try to refactor old shitty code.
</blockquote>

And it is not. "Code refactoring is the process of restructuring existing computer code â changing the factoring â without changing its external behavior." In the example the external behavior was changed. It is no refactoring.

<blockquote>
  Please take down your blog post, it is an embarrassment to real programmers.
</blockquote>

http://www.programcreek.com/2012/11/top-100-java-developers-blogs/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8667595181]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427386854]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427386853]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427386854.092300891876220703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8038</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2015-03-26 10:19:55</wp:comment_date>
    <wp:comment_date_gmt>2015-03-26 09:19:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Peter: Are you using non-private fields instead of accessor methods since then? What are your experiences with them?

In my read, the main failure in this story was, that nobody reviewed the code of an intern.

You and I know that 100% code coverage for unit tests doesn't guarantee perfect code. For setters it would be sensible to make assertions that they don't make other unwanted side effects for more possible incoming parameters. So not just an assert would be needed which checks that the actual field has been set, but asserts for other fields that they are not changed, or actually changed if it's needed. Of course this is an overkill, but an experienced programmer will find this kind of mistake by the first look at the code.

Another thing is about cloning: Cloning is a very risky operation as for real creatures as well as digital objects. I believe that cloning should be handled by the object itself but not externally. Or if it's handled externally it should happen with extra care. If the object can clone itself it can use its private fields.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8652421796]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427361596]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427361595]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427361595.9683640003204345703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8037</wp:comment_id>
    <wp:comment_author><![CDATA[OttÃ³ TakÃ¡cs]]></wp:comment_author>
    <wp:comment_author_email>takacsot@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/109696442647592159849</wp:comment_author_url>
    <wp:comment_author_IP>136.173.62.130</wp:comment_author_IP>
    <wp:comment_date>2015-03-26 08:40:09</wp:comment_date>
    <wp:comment_date_gmt>2015-03-26 07:40:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@none: you are not professional enough to use your own identity when you write such a comment. Please do not talk about being real programmer...

To the case study: the change was incorrect because the novice did not checked each invocation of the code (Eclipse CTR+ALT+H) even if this is not blocking the mistake (e.g when using framework and reflection) but decreasing the risk..

To the subject:

One of the main problem that getters and setter are expected by frameworks. E.g. all web framework I know is not able to use beans without setters and getters. I have tried to use just plain objects with public field (as data holder "record" type - more info about the concept -&gt; Search for Uncle Bob presentations and videos) but it is failed. I am forced to use getters and setters.

99.99% of getters and setters I have seen and written  is just simply exposing internal state of a class instance.

At least http://projectlombok.org helps eliminating boilerplate code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-eI2MMQhTt6Q/AAAAAAAAAAI/AAAAAAAAAAA/XsszEl8cK4k/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[109696442647592159849]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1427355612]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427355611]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427355611.7055110931396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[0]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8034</wp:comment_id>
    <wp:comment_author><![CDATA[none]]></wp:comment_author>
    <wp:comment_author_email>p1_rawr@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://none</wp:comment_author_url>
    <wp:comment_author_IP>182.171.233.67</wp:comment_author_IP>
    <wp:comment_date>2015-03-26 00:43:23</wp:comment_date>
    <wp:comment_date_gmt>2015-03-25 23:43:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just make it public?
This is not what YNGNI is about.
I think you need to read this.
http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29
Exposing object state is bad.
Just like global state is bad.
Why is it bad? 
Well, it took your team a year in hour just to find a bug in the state of an object?
That should be a clue.
How pathetic you must be, to try to blame the person trying to fix your mess.

Just because it broke the shitty code does not mean the code fix was incorrect.
The fact that the code broke from something so simple means much more.
I have worked on projects with people like this author, and the code base is always a disaster.
The moral of your story should not be, don't try to refactor old shitty code.
And the fact that your company spend a year of man hours to fix a bug as simple as this tell volumes of the competence of the preexisting, obviously incompetent lifers who have fooled management into keeping them.

These are the same people who build mazes into the code bases and use single characters for variable names.
Their goal is job security.
They don't do their jobs.
They sabotage the company for their own self interest.

Please take down your blog post, it is an embarrassment to real programmers.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1427327167]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427327167]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427327167.208692073822021484375;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427327003.801425933837890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8047</wp:comment_id>
    <wp:comment_author><![CDATA[Joe]]></wp:comment_author>
    <wp:comment_author_email>joe.chambers@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.87.132.19</wp:comment_author_IP>
    <wp:comment_date>2015-03-30 07:59:40</wp:comment_date>
    <wp:comment_date_gmt>2015-03-30 06:59:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You read that entirely wrong and then tried to fit it into your article.  The intern was right.  The people who incorrectly cloned were wrong.  The object should be Cloneable  and the clone method should be used.  Or a builder pattern that handles the scenario correctly should be used.

Worse if this clone pattern issue caused so much time I have to wonder, was it in more than one place?  Doesn't  that violate DRY?

To be honest YAGNI  really should be considered an anti pattern that people looking to slap dash code out the door without design or forethought use as a justification.

Seems to me your throwing an intern under the bus to excuse bad code written by "professional" "developers."]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8837494124]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427699125]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427699125]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427699125.48585605621337890625;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427698780.839973926544189453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8048</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-03-30 09:22:02</wp:comment_date>
    <wp:comment_date_gmt>2015-03-30 08:22:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[After the intern's change

[sourcecode language="java"]
setAaa(aaa)
[/sourcecode]

is no no-op anymore and that's something nobody expects, so I'd call it wrong. Something like

[sourcecode language="java"]
public setAaa(aaa) {
   this.aaa = aaa;
   if (aaa!=null) this.bbb = null;
}
[/sourcecode]

would work and cause no harm, however,

[sourcecode language="java"]
assert aaa==null || bbb==null
[/sourcecode]

is what I'd strongly prefer (assert-haters can choose something else). My reasoning is "don't enforce what's believed to already hold, assert it instead".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427703722]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427703722.715424060821533203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8847411483]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427717347]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427717347.16763591766357421875;s:7:"message";s:47:"verhas changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427717347.262299060821533203125;s:7:"message";s:45:"verhas changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8046</wp:comment_id>
    <wp:comment_author><![CDATA[Bo]]></wp:comment_author>
    <wp:comment_author_email>sittingatthebay@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.109.73.167</wp:comment_author_IP>
    <wp:comment_date>2015-03-29 02:47:06</wp:comment_date>
    <wp:comment_date_gmt>2015-03-29 01:47:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hm, I think this post might easily lead to wrong conclusions, although I do understand the deeper issue. 
Imagine your story is slightly changed, with the engineer being a senior from the security/QA team, and the bean change is part of making it more robust: the bean was created so you could not set both values. The cloning code in question does that (sets both fields), thereby resulting in unsupported/undefined behavior. Either the bean already caught such wrong behavior (obviously not), otherwise any bets are off with code that happily explores the land of unspecified/unsafe behavior. Would you still blame the engineer for such change? I wouldn't. It's more the question which of the two fragile pieces of code eventually breaks first...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1427593628]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1427593629.282949924468994140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8782786995]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1427593629]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8896</wp:comment_id>
    <wp:comment_author><![CDATA[test your work | javayourweek]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javayourweek.wordpress.com/2015/10/05/test-your-work/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.201</wp:comment_author_IP>
    <wp:comment_date>2015-10-05 14:58:11</wp:comment_date>
    <wp:comment_date_gmt>2015-10-05 13:58:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] https://javax0.wordpress.com/2015/03/25/the-magic-setter-antipattern/ [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1444057494.43494892120361328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1444053492.1612761020660400390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1444078052]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1444078053.2873380184173583984375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8822</wp:comment_id>
    <wp:comment_author><![CDATA[Reiner]]></wp:comment_author>
    <wp:comment_author_email>rws2@saddey.net</wp:comment_author_email>
    <wp:comment_author_url>http://blog.saddey.net</wp:comment_author_url>
    <wp:comment_author_IP>80.187.102.232</wp:comment_author_IP>
    <wp:comment_date>2015-09-25 23:16:55</wp:comment_date>
    <wp:comment_date_gmt>2015-09-25 22:16:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks Peter!

Yes, getters and setters used to be a technical necessity in ancient Java Beans days and now turn into pure evil.

Both me and Java (e.g. parallelised lambdas) coming of age, I see a computing world populated by two species:

"Real" objects implementing behaviour - heavy weights

DTOs aggregating values, very much like arrays or collections or maps - light weights, no behaviour added beyond the one inherited from the aggregates

For the latter, IMHO, they should:
1. be immutable (all fields are final)
2. have no setters or getters at all
3. are created using either builder of factory patterns


Promotes both reliability and performance. Performance by obviating the need for synchronisation per se (and most programers do fail miserably in this area). Reliability by preventing arbitrary hidden code sequences to change state, either willingly or by chance - effectively turning an object into a global variable of ancient Fortran days: Disgusting!
Promotes documentation: It's far more easy to document a field, than to copy and paste it to getters / setters (and keep it synchronised as well). Thus the documentation is per se canonical (i.e. there's only one place instead of multiple ones that inevitably tend to diverge over time). Noone likes to create setters and getters manually - thus they are likely to end up having no documentation at all (i.e. Eclipse: Sets the value of / gets the value of). Using a run of the mill IDE, all getters and setters are bound to have the very same effect: They set, or they get - only God knows what and what for.
IMHO the most important fact (implicitly resulting from 1. immutability): For each instance, there is just ONE place that is/was responsible for creating a particular DTO instance. A constructor / factory / builder is far more easy to prove correct than a sequence of mutations that tends to escape human control with as little as three or four independent variables - short of applying a rule engine to enforce constraints. And even constraints turn out hard to implement with objects, whose state is never final...


Take care,
Reiner]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>4696137</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443224274.524157047271728515625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"rsaddey";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1443263320]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15186064683]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1443263320]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443263320.7573959827423095703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443219415.7764279842376708984375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"rsaddey";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10737</wp:comment_id>
    <wp:comment_author><![CDATA[Brainless Getters &amp; Setters are a Waste | Agile Software Craftsmanship]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://agiletribe.wordpress.com/2016/03/07/brainless-getters-setters-are-a-waste/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.11</wp:comment_author_IP>
    <wp:comment_date>2017-04-16 15:02:27</wp:comment_date>
    <wp:comment_date_gmt>2017-04-16 14:02:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The Magic Setter Antipattern &#8211; Peter Verhas, March 25, 2015, Setters and getters are evil. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492355860.229095935821533203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492351347.3143100738525390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1492366608.870831012725830078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1492366608]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11499</wp:comment_id>
    <wp:comment_author><![CDATA[CodeChimp]]></wp:comment_author>
    <wp:comment_author_email>javax0@codechimp.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.217.93.204</wp:comment_author_IP>
    <wp:comment_date>2017-10-02 12:39:50</wp:comment_date>
    <wp:comment_date_gmt>2017-10-02 11:39:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I came here because a coworker of mine has argued that JavaBeans is an anti-pattern, and I honestly wanted to read the cases people make as to why they believe that is so.

First off, yes, your example does show a glaringly bad design.  However, I would argue that it is NOT the fault of the JavaBeans (anti???)-pattern, but a flaw in the design of the API in question.  Let me explain...

You say you have a bean that should only be set to "aaa" or "bbb", with the other value being set to null.  The assumption was noble in that if I set "aaa" then I should null "bbb" or if I set "bbb" I should null "aaa", but that's where you went wrong.  I think the proper action would have been to throw an exception the moment you tried to set both OR when you tried to use the bean that had both set (I would opt for when it was set so the exception is thrown immediately when the problem occurred).  That would have been the proper API way to handle a problem where the bean state is not in a bad way.

Second problem: Your unit tests may have all be spot-on, but your integration testing was not.  Had you had a decent set of regression tests it should have identified the issue.

My arguments as to why JavaBeans are good:
  - It is a well documented, well supported pattern in the community.  Sticking to well supported, well documented patterns is a good thing.
  - It helps people coming behind you to follow your code.  It is WAY easier to find all the locations a value is set when I can search "setAAA()" and not have to worry about places where I get AAA showing up
  - Almost ALL the tools used to make our life easier in the Java world revolve around the JavaBean pattern (see well documented, well supported above)
  - It allows you the chance to deal with exception handling like invalid values being set or lazy-inited collections (largest cause of NPEs, IMHO, is null collections being returned)
  - It gives you a chance to make properties be "read-only" or "write-only", which is sometimes a good thing

Are there ways to handle all of the above without using JavaBeans?  Sure, absolutely.  Am I advocating that JavaBeans is the best, most sacred pattern to follow?  No, surely not.  But to say it's "bad" or "outdated" or "worthless" is probably not correct either.

As for the JavaDoc comment, I actually read that too.  It was another argument my coworker has brought up.  I am sorry, I have been programming Java for almost 20yrs and I still have a hard time reading my own code I wrote after having not looked at it for some time, let alone trying to figure out what some other person who thinks they are the smartest developer alive does in their fancy attempt to flex their programming muscles.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1506944391.4606668949127197265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9887269308]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1506944693]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1506944693]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1506944693.6973469257354736328125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Break Single Responsibility Principle]]></title>
  <link>https://javax0.wordpress.com/2015/04/29/break-single-responsibility-principle/</link>
  <pubDate>Wed, 29 Apr 2015 15:00:20 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=885</guid>
  <description/>
  <content:encoded><![CDATA[Single Responsibility Principle (SRP) is not absolute. It exists to help the code maintainability and readability. But from time to time you may see solutions, patterns that break the SRP and are kind of OK. This is also true for other principles, but this time I would like to talk about SRP. 

<h1>Singleton breaks SRP</h1>
The oldest and simplest pattern that breaks SRP is the <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton pattern</a>. This pattern restricts the creation of an object so that there is a single instance of a certain class. Many thinks that singleton actually is an antipattern and I also tend to believe that this is better to use some container to manage the lifecycle of the objects than hard coding singletons or other home made factories. The anti pattern-ness of singleton generally comes from the fact that it breaks the SRP. A singleton has two responsibilities:

<ol>
<li>Manage the creation of the instance of the class</li>
<li>Do something that is the original responsibility of the class</li>
</ol>

You can easily create a singleton that does not violate SRP keeping the first responsibility and drop the second one

[sourcecode language="java"]
public class Singleton {
    private static final Singleton instance = new Singleton();
    public static Singleton getInstance() { return instance; }
    private Singleton() {}
}
[/sourcecode]

but there is not much use of such a beast. Singletons are simple and discussed more than enough in blogs. Let me look at something more complex that breaks SRP.

<h1>Mockito breaks SRP</h1>

<a href="http://mockito.org/">Mockito</a> is a <a href="http://en.wikipedia.org/wiki/Mock_object">mocking framework</a>, which we usually use in unit tests. I assume that you are familiar with <a href="http://martinfowler.com/articles/mocksArentStubs.html">mocking</a> and mockito. A typical test looks like the following:

[sourcecode language="java"]
import static org.mockito.Mockito.*;
List mockedList = mock(List.class);
when(mockedList.get(0)).thenReturn(&quot;first&quot;);
System.out.println(mockedList.get(0));
mockedList.add(&quot;one&quot;);
mockedList.clear();
verify(mockedList).add(&quot;one&quot;);
verify(mockedList).clear();
[/sourcecode]

(sample is taken from the Mockito page, actually mixing two examples). The mock object is created using the static call 

[sourcecode language="java"]
List mockedList = mock(List.class);
[/sourcecode]

and after it is used for three different things:

<ol>
<li>Setup the mock object for its mocking task.</li>
<li>Behave as a mock mocking the real life object during testing.</li>
<li>Help verification of the mock usage.</li>
</ol>

The call

[sourcecode language="java"]
when(mockedList.get(0)).thenReturn(&quot;first&quot;);
[/sourcecode]

sets up the mock object. The calls

[sourcecode language="java"]
System.out.println(mockedList.get(0));
mockedList.add(&quot;one&quot;);
mockedList.clear();
[/sourcecode]

use the core responsibility of the mock object and finally the lines

[sourcecode language="java"]
verify(mockedList).add(&quot;one&quot;);
verify(mockedList).clear();
[/sourcecode]

act as verification.

These are three different tasks not one. I get the <a href="http://en.wikipedia.org/wiki/Point_%28geometry%29">point</a> that they are closely related to each other. You can even say that they are just three aspects of a single responsibility. One could argue that verification only uses the mock object as a parameter and it is not the functionality of the mock object. The fact is that the mock object keeps track of its mock usage and acts actively in the verification process behind the scenes. Okay, okay: these all may be true, more or less. The real question is: does it matter?

<h1>So what?</h2>

Does the readability of the code of Mockito suffer from treating the SRP this way? Does the usability of the API of Mockito suffer from this?

The answer is definite NO for both of the questions. The code is as readable as it gets (imho it is more readable than many other open source projects) but it is not affected by the fact that the mock objects have multiple responsibilities. As for the API you can even say more. It is readable and usable even more with this approach. Former mocking frameworks used strings to specify the method calls like

[sourcecode language="java"]
mailer.expects(once()).method(&quot;send&quot;);
warehouse.expects(once()).method(&quot;hasInventory&quot;)
[/sourcecode]

(fragment from the <a href="http://martinfowler.com/articles/mocksArentStubs.html">page</a>), which is less readable and error prone. A typo in the name of the method is discovered test run time instead of compile time.

What is the morale? Don't be dogmatic. Care programming principles, since they are there to help you to write good code. I do not urge anyone to ignore them every day. On the other hand if you feel that some of the principles restrict you and your code would be better without it, do not hesitate to consider writing a code that breaks the principles. Discuss it with your peers (programming is a team work anyway) and come to a conclusion. The conclusion will be that you were wrong considering to break SRP in 90% of the cases. In 10%, however, you may come up with brilliant ideas.






]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>885</wp:post_id>
  <wp:post_date>2015-04-29 16:00:20</wp:post_date>
  <wp:post_date_gmt>2015-04-29 15:00:20</wp:post_date_gmt>
  <wp:post_modified>2015-04-29 14:22:39</wp:post_modified>
  <wp:post_modified_gmt>2015-04-29 13:22:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>break-single-responsibility-principle</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205437653073497]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/6Uy9RRonCb6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/Qzhuq263dN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=5999198854002548736&type=U&a=svXI]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_040f01d08662732c4b8468ac5255815f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8169</wp:comment_id>
    <wp:comment_author><![CDATA[James]]></wp:comment_author>
    <wp:comment_author_email>nospam@sorrynoremorse.oib.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>141.170.2.100</wp:comment_author_IP>
    <wp:comment_date>2015-05-12 15:14:48</wp:comment_date>
    <wp:comment_date_gmt>2015-05-12 14:14:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mockito doesn't break the SRP, the class you're talking about is an implmentation of the facade pattern. That is its SRP is to be a facade to the richer API of mockito...

Also you can make the Singleton pattern observe the SRP by making the Singleton (the thing that holds a single instance of a class) separate from the thing you want to be a Singleton, e.g. SingletonHolder.getSingleton().

Otherwise, yeah totally agree the thing about principals is you can move them when you HAVE TO, but you should have a darn good reason for wanting to do so and it shouldn't be at the expense of readability/testability/etc.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431468239.99256801605224609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431468238.0563290119171142578125;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1431440089]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10545074698]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1431468239]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1431440180]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431440180.5761759281158447265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1431440089.2284810543060302734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29045</wp:comment_id>
    <wp:comment_author><![CDATA[Simptreat]]></wp:comment_author>
    <wp:comment_author_email>nalu.sales@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.simptreat.com/</wp:comment_author_url>
    <wp:comment_author_IP>185.191.215.221</wp:comment_author_IP>
    <wp:comment_date>2020-04-02 01:09:16</wp:comment_date>
    <wp:comment_date_gmt>2020-04-02 00:09:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[But this always leads to an interesting question, which is, should I be writing code that looks like this?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1585786157.108645;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1585791186.466404;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[42529421323]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1585827032]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1585827032]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1585827032.842836;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Using Junit Test Name]]></title>
  <link>https://javax0.wordpress.com/2015/05/06/using-junit-test-name/</link>
  <pubDate>Wed, 06 May 2015 15:00:32 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=890</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Name your tests</h1>

When we create Junit test usually there is no practical use of the name of the method. The Junit runner uses reflection to discover the test methods and since version 4 you are not restricted to start the name of the method with <tt>test</tt> anymore. The name of the test methods are there for documentation purpose.

There are different styles people follow. You can name your test in the <tt>given_Something_when_Something_then_Something</tt> style I also followed for a while. Other schools start the name of the method with the world <tt>should</tt> to describe what the tested object "should" do. I do not really see why this is significantly better than starting the name of the method with <tt>test</tt>. If all methods starts with the same prefix, then this is only noise. These days I tend to name the methods as simple statements about what the SUT does.

<h1>How to Access the Test Name?</h1>

Technically you are free to name your methods so long as long the names are unique. The name is usually not used in the test and the outcome of the test should not depend on the actual name of the test method. Even though there is a way supported by Junit to access the name of the method.

If you have a Junit Rule

[sourcecode language="java"]
@Rule
public TestName name = new TestName();
[/sourcecode]

you can refer to the object <tt>name</tt> in your test getting the name of the actual method as

[sourcecode language="java"]
String testName = name.getMethodName();
[/sourcecode]
<p>&nbsp;</p>

<h1>What can we use this for?</h1>

Sometimes the unit under test creates some huge structure that can be serialized as a binary or text file. It is a usual practice to run the test once, examine the resulted file and if that is OK then save it to use for later comparison. Later test executions compare the actual result with the one that was saved and checked by the developer.

A similar scenario may be used in case of integration tests when the external systems are stubbed and their responses can be fetched from some local test data file instead of querying the external service. 

In such situations the name of the test can be used to create a file name storing the test data. The name of the test is unique and makes it easy to pair the data with the test needing it. I used this approach in the <a href="https://github.com/verhas/jscglib">jscglib</a> library. This library provides a fluent API to create Java source code. The tests contain some java builder pattern director code and then the resulted source code is saved into a file or compared to an already stored result.

To save the file the aux method <tt>getTargetFileName</tt> was used

[sourcecode language="java"]
	private String getTargetFileName() {
		String testName = name.getMethodName();
		String fileName = &quot;target/resources/&quot; + testName + &quot;.java&quot;;
		return fileName;
	}
[/sourcecode]

To get the name of the resource the method <tt>getResourceName</tt> was used:

[sourcecode language="java"]
	private String getResourceName() {
		String testName = name.getMethodName();
		return testName + &quot;.java&quot;;
	}
[/sourcecode]

After that loading and saving the generated Java code was a breeze:

[sourcecode language="java"]
	private void saveGeneratedProgram(String actual) throws IOException {
		File file = new File(getTargetFileName());
		file.getParentFile().mkdirs();
		FileOutputStream fos = new FileOutputStream(file);
		byte[] buf = actual.getBytes(&quot;utf-8&quot;);
		fos.write(buf, 0, buf.length);
		fos.close();
	}

	private String loadJavaSource() {
		try {
			String fileName = getResourceName();
			InputStream is = this.getClass().getResourceAsStream(fileName);
			byte[] buf = new byte[3000];
			int len = is.read(buf);
			is.close();
			return new String(buf, 0, len, &quot;utf-8&quot;);
		} catch (Exception ie) {
			return null;
		}
	}
[/sourcecode]

Generally that is the only example I know that you can use the name of a test method for other than documentation.

<h1>What you should not use the name for</h1>

There is a saying in my language: "Everybody is good in something. At least demonstrating failure." The following example demonstrates such a failure.

I have seen a code that was encoding test data into the name of the test method. Access to the test method name was also implemented in a strange way. The programmer probably did not know that there is a supported way getting the name of the method. This lack of knowledge may have stopped him or her to do the evil, but this person was a genius. The test test method was calling static method of a helper class. This static method was throwing an exception, it also caught it and looked into the stack trace to identify the name of the caller method.

After it had access to the name the code applied regular expression to extract the values from the method name.

<h1>Summary</h1>

I do not know what the intention of the developers of Junit was giving us the class <a href="http://junit.org/apidocs/org/junit/rules/TestName.html"><tt>TestName</tt></a>. Probably there was some use case that needed the feature. I am certain that they did not provide the function because it was possible to do so. If you do not know what the API you provide is good for, you probably should not provide it just because you can. Novice programmers will use it wrong way more than good.

Also on the other hand: if you see something in a API that can be used it does not mean that you should use the feature. You should better understand the aim of the feature what it was designed for and use it accordingly.

Writing unit tests is more important than naming them. Debate on the naming of unit tests is useless so long as long there are no unit tests.

Write unit tests as many as needed, but not more.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>890</wp:post_id>
  <wp:post_date>2015-05-06 16:00:32</wp:post_date>
  <wp:post_date_gmt>2015-05-06 15:00:32</wp:post_date_gmt>
  <wp:post_modified>2015-05-06 09:57:08</wp:post_modified>
  <wp:post_modified_gmt>2015-05-06 08:57:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-junit-test-name</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205476337320579]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/9dcZdAuJYqR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/Wx0LeoTb3R]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6001732574207111168&type=U&a=uV5R]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8146</wp:comment_id>
    <wp:comment_author><![CDATA[Sandro Zbinden]]></wp:comment_author>
    <wp:comment_author_email>sandrozbinden@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>84.74.139.150</wp:comment_author_IP>
    <wp:comment_date>2015-05-06 21:51:07</wp:comment_date>
    <wp:comment_date_gmt>2015-05-06 20:51:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interessting post about unit test names. In my opinion a Unit Test name should provide information about what is beeing tested and thus can be longer than usual method names. About the TestName Rule we currently use the TestName Rule to show in our ant build which test is currently running. All our tests are extending from a BaseTest class that prints in the before method when a test methods is started and after execution when it is finished. This comes in handy when executing integrationtests that might cause a deadlock. Then you want to know which test is causing the deadlock.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1430945468.6397130489349365234375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"heritchan";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1430945469]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10339688515]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1430945783]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1430945783]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1430945783.7406070232391357421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Generics Names]]></title>
  <link>https://javax0.wordpress.com/2015/05/13/generics-names/</link>
  <pubDate>Wed, 13 May 2015 15:00:19 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=919</guid>
  <description/>
  <content:encoded><![CDATA[Generics type parameter names usually contain one, single capital case character. If you start to read the official ORACLE documentation on generics the first example is

[sourcecode language="java"]
/**
 * Generic version of the Box class.
 * @param &lt;T&gt; the type of the value being boxed
 */
public class Box&lt;T&gt; {
    // T stands for &quot;Type&quot;
    private T t;

    public void set(T t) { this.t = t; }
    public T get() { return t; }
}
[/sourcecode]

The name of the generic type is <tt>T</tt>. One single letter, not too meaningful and generally against other identifier naming styles. It is widely used only for generics. Strange. What is the reason for that? 

Here are the arguments I have heard so far:

<ul>
  <li><i>A class or method does not need many type variable names, so you will not run out of the letters of the ABC.</i>
  <ul>
    <li>Based on that reasoning we should also use one character method names? There should not bee too many methods in a class so we will not run out of the alphabet there as well.
  </ul>
  <li><i>It is not a problem that the one character does not inherently explain the type, since there is JavaDoc. You can explain what the type name actually stands for.</i>
  <ul>
    <li>And we should also forget everything we have learned about clean code and variable naming. Code structure defines what the code does and since that is what it really is code structure is up-to-date. Naming (variables, methods, etc.) usually follow the change of code structure, since naming helps the programmer. Even though naming is many times outdated especially in case of boolean variables. It suggest many times just the very opposite what the real meaning is. JavaDoc is maintained and corrected some time after the code and the unit tests are finished, debugged and polished. In practice "some time after" means: never. JavaDoc is outdated, not available when reading the code as promptly as name itself thus should contain information you can not include into the code structure and well naming. Why would type names be an exception?
  </ul>
  <li><i>Types names bearing one character makes them distinguishable from variable, method and class names as well as constant names.</i>
  <ul>
    <li>It is a good point. Type names have to be distinguishable from variable, method and class names. But I see no strong point why we should use different name casing from constants. There is no place where you could use a constant and a type or where it would really be confusing. They are used in totally different places, in different syntactical positions. If this is such a big pain in the donkey why do not we suffer from it in case of method and variable names? Method names are followed by <tt>()</tt> characters in Java? Not anymore as we get to Java 8!
  </ul>
  <li><i>But <a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s5.2.8-type-variable-names">Google Code Style</a> allows you to use multi character type names.</i>
  <ul>
    <li>Oh yes. And it says that if you use multi character type names the name should have a <tt>T</tt> postfix, like <tt>RequestT</tt>, <tt>FooBarT</tt>. Should I also prefix <tt>String</tt> variables with the letters <tt>sz</tt> and <tt>Integer</tt>s with <tt>i</tt> as in <a href="http://en.wikipedia.org/wiki/Hungarian_notation">Hungarian Notation</a>?
  </ul>
</ul>

<h1>What then?</h1>

If you do not like the single character naming for generics you can name them with <tt>_</tt> or <tt>$</tt> prefix. This is a suggestion that you can see on <a href="http://stackoverflow.com/questions/6143402/breaking-java-generics-naming-convention">stackoverflow</a>. As for me: it is strange. Using the <tt>$</tt> makes some "heimlich", warm feeling reminding me of my youth when I was programming Perl. I do not do that anymore and for good reasons. Times changed, technology changed, I changed. 

The <tt>$</tt> is usually used by the compiler and some code generators to name generated fields and methods. Your use of <tt>$</tt> on the Java source level may cause some difficulty for the compiler to find the appropriate name in case there is some naming collision, but the current version of the java compilers are fairly error prone in this respect. They just keep trying to find an appropriate name with some simple algorithm until they find a name that is not colliding with any Java source code name, so this will not be a problem.

<b>Underscore</b>: well, is really something that we used in old times instead of space. On old matrix printers the underscore character was printed so badly that you could not distinguish it from space and thus this was an ugly trick to have multi word variable names. Because of this underscore at the start of the name is a total anti-pattern imho, practically naming two things using the same name. It is almost like if the underscore character was not there at all.

You can also use <tt>T_</tt> prefix as it is the convention in C++ and in C# (I am not familiar with those too much, I am not sure about that). But this is just as ugly as it is without the <tt>T</tt>.

My taste is to use meaningful names with the same conventions we follow in case of constants. For example to use 

[sourcecode language="java"]
    public final class EventProducer&lt;LISTENER extends IEventListener&lt;EVENT&gt;,EVENT&gt; 
           implements IEventProducer&lt;LISTENER, EVENT&gt; {
[/sourcecode]

instead of

[sourcecode language="java"]
    public final class EventProducer&lt;L extends IEventListener&lt;E&gt;,E&gt; 
            implements IEventProducer&lt;L,E&gt; {
[/sourcecode]

Even though that is my personal, senior, professional, expert opinion I do not use it. Why? Because I work in an enterprise environment in a team. The gain to use something more readable than the official default is not as high as the damage of a debate and disagreement would be. In addition to that new hires have to get used to the local style and it also costs money. Using the usable, but not optimal global style is better than using a good local style. Live with it.

<h1>Can we go global?</h1>

You can try. That is the most I can say. It would have been better if the original suggestion setting the coding standard were better than the 1960's style one letter approach, but this is already history. The damage has been done. And this is nothing comparable to the damage caused by the brilliant idea introducing null into OO.

We will live with the one character generics so long as long Java is alive. And since I am almost 50, it is going to be a longer period than my life span. Note that COBOL is still alive. We should expect nothing less from Java.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>919</wp:post_id>
  <wp:post_date>2015-05-13 16:00:19</wp:post_date>
  <wp:post_date_gmt>2015-05-13 15:00:19</wp:post_date_gmt>
  <wp:post_modified>2015-05-12 15:15:23</wp:post_modified>
  <wp:post_modified_gmt>2015-05-12 14:15:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generics-names</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_facebook_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://facebook.com/10205512775511511]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/57k45f36FCb]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:8:"facebook";a:1:{i:1015281651;b:1;}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://t.co/jaRTEz838L]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6004269917216522240&type=U&a=ecka]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8183</wp:comment_id>
    <wp:comment_author><![CDATA[Java Weekly 20/15: Microservice Premium, Wildfly Swarm, Hibernate OGM]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.thoughts-on-java.org/java-weekly-2015/</wp:comment_author_url>
    <wp:comment_author_IP>162.243.77.193</wp:comment_author_IP>
    <wp:comment_date>2015-05-18 04:25:15</wp:comment_date>
    <wp:comment_date_gmt>2015-05-18 03:25:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Verhas wrote a nice post about Generic Names.Â A standard name for a generic type parameter consists of one capital letter, e.g. T. As it is not [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1431919516.103003025054931640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1431926420]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1431924683.447329998016357421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431926420.4999139308929443359375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8184</wp:comment_id>
    <wp:comment_author><![CDATA[Mark Perry]]></wp:comment_author>
    <wp:comment_author_email>maperry78@yahoo.com.au</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/maperry78</wp:comment_author_url>
    <wp:comment_author_IP>58.106.10.69</wp:comment_author_IP>
    <wp:comment_date>2015-05-18 16:18:41</wp:comment_date>
    <wp:comment_date_gmt>2015-05-18 15:18:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think the most important reason is you should not be relying on generic names to be inferring meaning.  The meaning comes from the types and associated methods (the algebra) and introducing descriptive names implies otherwise.  This is why we use single letter generics like List&lt;A&gt;, Either&lt;A, B&gt;, State&lt;S, A&gt;, etc.  Of course, Java's type system is poor, but the types are documentation (http://yowconference.com.au/slides/yowlambdajam2014/Morris-ParametricityTypesAreDocumentation.pdf).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10753569145]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1431975385]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1431975385]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431975385.92564296722412109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431962322.0551950931549072265625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"maperry78";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1431962322]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1431967354.2876360416412353515625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"maperry78";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8186</wp:comment_id>
    <wp:comment_author><![CDATA[Caleb Cushing]]></wp:comment_author>
    <wp:comment_author_email>xenoterracide@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+CalebCushing</wp:comment_author_url>
    <wp:comment_author_IP>24.206.100.35</wp:comment_author_IP>
    <wp:comment_date>2015-05-19 14:07:12</wp:comment_date>
    <wp:comment_date_gmt>2015-05-19 13:07:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I mostly agree with this, I tend to use all uppercase, and snake case (underscores). I sometimes use T, for example Factory , where i can't really infer more about T than it is a type, or I'll use E for Entity, I also find K and V appropriate in their context, but reality is once you get beyond a certain number of generic parameters (2) it generally becomes hard to read the code using single character names.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-cCzNQWTyA78/AAAAAAAAAAI/AAAAAAAAAxM/y8BSKEZL9PU/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[109135658789518811986]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10779234100]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432041226]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432040832.486980915069580078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432041226]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432041226.7081339359283447265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8187</wp:comment_id>
    <wp:comment_author><![CDATA[Caleb Cushing]]></wp:comment_author>
    <wp:comment_author_email>xenoterracide@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+CalebCushing</wp:comment_author_url>
    <wp:comment_author_IP>24.206.100.35</wp:comment_author_IP>
    <wp:comment_date>2015-05-19 14:08:47</wp:comment_date>
    <wp:comment_date_gmt>2015-05-19 13:08:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Mark you could use that to justify single character variable names too, and truthfully in some contexts short names aren't that unreadable because of types and good IDE's but saying it's ok to do this in all contexts leads to unreadable code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8184</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432040927.364016056060791015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-cCzNQWTyA78/AAAAAAAAAAI/AAAAAAAAAxM/y8BSKEZL9PU/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[109135658789518811986]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10779236892]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432041233]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432041233]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432041233.6660029888153076171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8172</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-05-13 16:32:16</wp:comment_date>
    <wp:comment_date_gmt>2015-05-13 15:32:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  But I see no strong point why we should use different name casing from constants.
</blockquote>

Right, but having this difference makes it more visible on the first sight.

Actually, all kind of sane names should be used. We have already i, j, k for loop variables (and x, y, z for coordinates) and whenever I see a single small letter identifier, I know what it is. This is very useful as this information comes before I even start to think. Similarly it works for type variables like K and V.

The meaning of type variables is usually pretty obvious as they're omnipresent. If I don't know what L and E in IEventProducer&lt;L,E&gt; mean, I look at a method like send(E event, L listener) and then I do. And I won't forget it as there just the two.

It also helps to keep the signatures short (and usually fit into one line). Imagine something like combineInto(Map&lt;K, V&gt; result, Map&lt;K, V&gt; source1, Map&lt;K, V&gt; source2).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1431531137]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1431531137.471972942352294921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1431531137]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[If you do it do it right]]></title>
  <link>https://javax0.wordpress.com/2015/05/27/if-you-do-it-do-it-right/</link>
  <pubDate>Wed, 27 May 2015 18:02:07 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=934</guid>
  <description/>
  <content:encoded><![CDATA[This is a philosophical or ethical command. Very general. It is something like "fail fast". The reason it came up to my mind is that I wanted to compile and release License3j using Java 8 and JavaDoc refused to compile during release build.

This package is a simple license manager, which has some established user base who require that I keep up with the new versions of BouncyCastle. It itself being a cryptography package should not be outdated and programs are encouraged to use the latest version to avoid security issues. When I executed <tt>mvn release:prepare</tt> I got many errors:

[sourcecode language="text"]
[ERROR] * &lt;p&gt;
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/License3j.java:132: error: unexpected end tag: &lt;/p&gt;
[ERROR] * &lt;/p&gt;
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/License3j.java:134: warning: no @param for args
[ERROR] public static void main(String[] args) throws Exception {
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/License3j.java:134: warning: no @throws for java.lang.Exception
[ERROR] public static void main(String[] args) throws Exception {
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/com/verhas/licensor/ExtendedLicense.java:73: warning: no @param for expiryDate
[ERROR] public void setExpiry(final Date expiryDate) {
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/com/verhas/licensor/License.java:196: warning: no description for @throws
[ERROR] * @throws IOException
[ERROR] ^
[ERROR] /Users/verhasp/github/License3j/src/main/java/com/verhas/licensor/License.java:246: warning: no description for @throws
[/sourcecode]

<h1>New JavaDoc Wants You DIR</h1>

The errors are there because the java doc of License3j is a bit sloppy. Sorry guys, I created the code many years ago and honestly it is not only the java doc that could be improved. As a matter of fact one of the unit tests rely on network and the reachability of GitHub. (Not anymore though, I fixed that.)

The new Java version 8 is very strict regarding to JavaDoc. As you can see on the "<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/whatsnew-8.html">Enhancements in Javadoc, Java SE 8</a>" page of ORACLE:

<blockquote>The javadoc tool now has support for checking the content of javadoc comments for issues that could lead to various problems, such as invalid HTML or accessibility issues, in the files that are generated by javadoc. The feature is enabled by default, and can also be controlled by the new -Xdoclint option. For more details, see the output from running "javadoc -X". This feature is also available in javac, although it is not enabled by default there.
</blockquote>

To get the release working I had the choice to fix the JavaDoc or to use the configuration

[sourcecode language="xml"]
&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.9&lt;/version&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;id&gt;attach-javadocs&lt;/id&gt;
            &lt;goals&gt;
                &lt;goal&gt;jar&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
[/sourcecode]

in <tt>pom.xml</tt>. (Source is <a href="http://stackoverflow.com/questions/15886209/maven-is-not-working-in-java-8-when-javadoc-tags-are-incomplete">stackoverflow</a>.)

<h1>But You Just Won't DIR</h1>

You can easily imagine that you will opt for the second option when you are under time pressure. You fix the issue modifying your <tt>pom.xml</tt> or other build configuration and forget about it.

But you keep on thinking about why it is the way like that? Why is the new tool strict by default? Is it a good choice? Will it drive people to create better JavaDoc?

(Just for now I assume that the aim of the new behavior was to drive programmers to create better JavaDoc documentation and not simply to annoy us.)

I am a bit suspicious that this alone will be sufficient to improve documentation. Programmers will:

<ul>
<li>Switch off the lint option.</li>
<li>Delete JavaDoc from the source.</li>
<li>Write some description that Java 8 will accept but is generally meaningless.</li>
</ul>

or some of them will just write correct java doc. Some of them who were writing it well anyway and will be helped by the new strictness. How many of us? 1% or 2%? The others will just see it as a whip and try to avoid. We would need carrot instead. Hey, bunnies! Where is the carrot?
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>934</wp:post_id>
  <wp:post_date>2015-05-27 19:02:07</wp:post_date>
  <wp:post_date_gmt>2015-05-27 18:02:07</wp:post_date_gmt>
  <wp:post_modified>2015-05-18 19:56:12</wp:post_modified>
  <wp:post_modified_gmt>2015-05-18 18:56:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>if-you-do-it-do-it-right</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/HxSUmFhSpCj]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6009388627400945664&type=U&a=TZzz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11070218032]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10205631792086851";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/603622963301101569";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8220</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>77.47.82.132</wp:comment_author_IP>
    <wp:comment_date>2015-05-27 19:35:13</wp:comment_date>
    <wp:comment_date_gmt>2015-05-27 18:35:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The carrot is called markdown javadoc, already scheduled for Java 30.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432751714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432751714.5235021114349365234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1432751714]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8227</wp:comment_id>
    <wp:comment_author><![CDATA[Nicolai Parlog]]></wp:comment_author>
    <wp:comment_author_email>nipa@codefx.org</wp:comment_author_email>
    <wp:comment_author_url>http://codefx.org</wp:comment_author_url>
    <wp:comment_author_IP>188.99.240.23</wp:comment_author_IP>
    <wp:comment_date>2015-05-29 22:01:03</wp:comment_date>
    <wp:comment_date_gmt>2015-05-29 21:01:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Let me toot my own horn here and put myself into the 1-2% you mention. With <a href="http://libfx.codefx.org" rel="nofollow">LibFX</a> I had about 30 minutes of work to fix the existing docs and now I have that linter on my side. Feels great, you should try it. ;-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432933263.4356029033660888671875;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"thepauljonas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1432933346]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432933346]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432933346.4955708980560302734375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Code is like public toilet]]></title>
  <link>https://javax0.wordpress.com/2015/06/03/code-is-like-public-toilet/</link>
  <pubDate>Wed, 03 Jun 2015 15:00:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=963</guid>
  <description/>
  <content:encoded><![CDATA[We, developers, work with legacy code. There are only two types of code: legacy or dead. Before your code dies it becomes legacy unless it was born dead. Legacy code must be dealt with and legacy code is never perfect. Was it perfect when it was created? Perhaps it was. A piece of code can erode because of change of the environment. This environment can be other code, integration interfaces, developer experience. The code that looked okay one day may seem to be disgusting next day or a year later. The code that one team created may just not seem okay to another team. There may be something "real" issue that the industry generally agrees today as bad practice like having 5000 lines god objects, or some discussable things like having many return statements in an otherwise readable and neatly written method. One group may agree to use a variable <tt>retval</tt> and have one return statement, other schools do not care so long as long other readability issues are not present.

There is one thing that all schools agree: whenever you fix some code in a legacy application you should not leave a bigger mess behind you than the mess was when you arrived. What is more: you are encouraged to clean the code up. If there is a bug in a method you fix write a unit test for the fix. If there were no unit tests for the method or class then create. If the method is a mess refactor it (but before that you create unit tests). If the method uses some other methods do not be shy to modify the other method so that their cooperation is cleaner. Do not be shy to modify the argument list, method signature. And if you do that you are also obligated to clean up the mess there as well.

You see the analogy implied in the title. Sometimes when the drive is not that strong I just turn around without hesitation and hope that the next place I will find will be less abominable. I am talking about code. But sometimes I just can not do that. After all, I am a programmer, that is my job: create good quality code from what is available. If the source is a requirement definition we have to deal with those. If we have use case definitions or vague user stories we go agile and do the best. If the source is a mess, we clean up.

That is the life of a coder.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>963</wp:post_id>
  <wp:post_date>2015-06-03 16:00:10</wp:post_date>
  <wp:post_date_gmt>2015-06-03 15:00:10</wp:post_date_gmt>
  <wp:post_modified>2018-07-31 21:06:35</wp:post_modified>
  <wp:post_modified_gmt>2018-07-31 20:06:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-is-like-public-toilet</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/LTRPbckoL6S]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11298082423]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6011879088581591040&type=U&a=S-V4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10205697657413443";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/606113421826793472";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8247</wp:comment_id>
    <wp:comment_author><![CDATA[gaborthere]]></wp:comment_author>
    <wp:comment_author_email>gbraun@chello.hu</wp:comment_author_email>
    <wp:comment_author_url>http://donekeyblog.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.99.166.3</wp:comment_author_IP>
    <wp:comment_date>2015-06-03 19:43:48</wp:comment_date>
    <wp:comment_date_gmt>2015-06-03 18:43:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Quite true. I am always having a little bad feeling how quickly our code erodes - not only erodes, it gets rotten! I feel that nowadays because of the sudden change of the business needs and the emergence of better technologies, our code gets legacy quite fast.

Sometimes I am wondering though, what is the reason for this? Basic business calculations don't change, we do calculate percentages exactly the same way as hundred years ago.

Do business requirements change? Of course they do, but I was alive in the dark ages of dBase III and Clipper, when applying those changes were made in a few hours. Oh, and that was well before inventing the meaning of "agile", and "unit testing" was going out for serious drinking.
So, the "fundamental complexity" in our work does not change <em>that</em> fast.

Does technology change? Errr, this is a definitive yes. Just have a peek at the rate how HTML5 and CSS3 started to rule the world of web, and how quickly we got Java7 and Java8 after a many years of deep sleep of Java. I believe things are even more tricky on other ends: C# came up from nothing, and taken over Java in quite many aspects recently. 
Oh, and let's not mention the paradigm shifts, MVC, SOA, DDD, CQRS, and what not... pulling data out of the database with ORMs, and so on, and so fort. I feel that we have a way too many "accidental complexities" in our world.

I tend to feel that we start using technologies immediately, because they known to be "modern". But I propose to start using techologies if a new technology makes our work easier.

Write less code. Write more powerful code. This way it is hopefully easier to tame the rotten parts!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>69979249</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433357029.7163178920745849609375;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"gaborthere";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433384719.2889358997344970703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1433384719]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1433362404.75858211517333984375;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"gaborthere";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1433384719]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8450</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tinybrain.blog.de</wp:comment_author_url>
    <wp:comment_author_IP>176.4.107.24</wp:comment_author_IP>
    <wp:comment_date>2015-08-02 13:23:19</wp:comment_date>
    <wp:comment_date_gmt>2015-08-02 12:23:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think I have solutions for that "legacy code" thing. It's

-storing as source code
-having an engine that works on source code to keep it up to date

Well that's basically it. Both is being realized as we speak in the JavaX project. :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438523210.48635101318359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[13342339274]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1438551163]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1438551163]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438551163.444438934326171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438518199.99779796600341796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1438518200]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Best Interview Answer Ever]]></title>
  <link>https://javax0.wordpress.com/2015/06/10/best-interview-answer-ever/</link>
  <pubDate>Wed, 10 Jun 2015 15:00:36 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=972</guid>
  <description/>
  <content:encoded><![CDATA[I am not absolutely sure that this one deserves the title, but it should run for the prize. I swear it is not just made up. It actually happened during a java technical interview where the candidate applied for a senior position.

Q: When you work in a group following agile methodology and scrum what is the velocity of a team?

A: This is 6.1

<img src="http://bloggar.nwt.se/genusbooden/files/2014/06/wait-what.jpg" />
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>972</wp:post_id>
  <wp:post_date>2015-06-10 16:00:36</wp:post_date>
  <wp:post_date_gmt>2015-06-10 15:00:36</wp:post_date_gmt>
  <wp:post_modified>2015-06-10 09:28:00</wp:post_modified>
  <wp:post_modified_gmt>2015-06-10 08:28:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>best-interview-answer-ever</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/LhnbrD7SbLW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11531904655]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6014417003371130880&type=U&a=wMqb]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10205737785016608";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/608651344275095552";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6d96ae6dbb2e106d22bf912ac912d252</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8451</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tinybrain.blog.de</wp:comment_author_url>
    <wp:comment_author_IP>176.4.107.24</wp:comment_author_IP>
    <wp:comment_date>2015-08-02 13:26:04</wp:comment_date>
    <wp:comment_date_gmt>2015-08-02 12:26:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I hate that kind of job interview.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1438551170]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438523210.57997989654541015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1438551170]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438551170.4431860446929931640625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438518364.5575249195098876953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Reasons to stay up-to-date and your tasks to help the senses]]></title>
  <link>https://javax0.wordpress.com/2015/07/15/reasons-to-stay-up-to-date-and-your-tasks-to-help-the-senses/</link>
  <pubDate>Wed, 15 Jul 2015 15:00:02 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=976</guid>
  <description/>
  <content:encoded><![CDATA[When you work in an enterprise environment you face many times applications implemented using outdated technology. And most of the developers agree that it is bad. It is bad not only because nobody loves to work with outdated technology but also because it is not good for the enterprise. Outdated technology is never so flexible as the new one, always has more development, maintenance and lost opportunity cost. You certainly have hard time to find an <a href="http://marketplace.eclipse.org/search/site/struts">eclipse plugin</a> for the actual version that supports struts 1.0 When there is some bug in the system you are less lucky to find a solution on <a href="http://stackoverflow.com/search?q=struts">open source boards</a>. New environments produce easier to use user interface and are more flexible to develop features to follow the ever changing business needs.

All these seem evident and still enterprise environments usually contain a huge load of outdated software. Why? The reason is that change needs demand and the demand many time is lacking. A very good model for corporate change is  from <a href="http://www.kotterinternational.com/the-8-step-process-for-leading-change/">Kotter</a> and it says that the first step out of eight steps for change is "sense of urgency". If there is no sense then there is no action. There may be a need, but if people do not feel the urgency they will not change.

I recall an old story when I was working for Digital Equipment Corp. and we were requested to do a USA export training. We did not feel the urgency no matter how well it was explained why it is important for the company. On a day when the deadline was only a few days ahead I, who have not done the online training yet, got an eMail from the country manager: <i>"Dear Peter, This training is mandatory. You or your successor will do the training. Sincerely: Ferenc"</i> At that point I sensed the urgency.

There are other examples, like global warming, environmental pollution or me being overweight, all that will some time cost something more than just jobs or money.

Why did I tell this story? Because the situation in enterprise IT is similar. There is urgency for updating the technology, but there is a lack of sense. We pollute our environment with outdated technology, we face ever increasing (warming up) maintenance costs, more bugs that are harder to fix and many times a fix just causing other problems.

Technology people are in the position to help the senses. Albeit not exactly the same way as our country manager was doing. Those that are aware of the urgency should make documentation, presentation or any other effective way of communication to deliver the knowledge to those that should have the sense (of urgency) and to raise awareness.

If you are a good developer you should be able to communicate this to the business people. You can convince them to update the technology or else you will face dramatic change in the economy of the company. It may cost jobs and it may cost the enterprise in the long run. That is a problem. Not a tragedy, but a problem. If the company is on the decline and the shareholders decide to squeeze the last drops out of it but are reluctant to invest, the decision not to upgrade to a newer technology may be absolutely reasonable. On the other hand, as a developer you may not want to work there. On the other hand if the company is not on decline but the shareholders still decide not to invest into technology then actually the company <i>is</i> on decline. It is just that they are not aware of it. And again as a developer you may not want to work there.



]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>976</wp:post_id>
  <wp:post_date>2015-07-15 16:00:02</wp:post_date>
  <wp:post_date_gmt>2015-07-15 15:00:02</wp:post_date_gmt>
  <wp:post_modified>2015-07-09 15:50:10</wp:post_modified>
  <wp:post_modified_gmt>2015-07-09 14:50:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reasons-to-stay-up-to-date-and-your-tasks-to-help-the-senses</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/XvmbgyF4TUT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12755326304]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6027100029288796160&type=U&a=nJpt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206033616692215";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/621334364144558081";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8370</wp:comment_id>
    <wp:comment_author><![CDATA[Laszlo Gazsi]]></wp:comment_author>
    <wp:comment_author_email>laszlo@gazsi.net</wp:comment_author_email>
    <wp:comment_author_url>http://laszlo.gazsi.net</wp:comment_author_url>
    <wp:comment_author_IP>94.53.246.6</wp:comment_author_IP>
    <wp:comment_date>2015-07-21 17:58:54</wp:comment_date>
    <wp:comment_date_gmt>2015-07-21 16:58:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You have nailed it again, Peter! I currently work in an enterprise environment and this is what hurts the most: we see new technologies appear, but we are not allowed to touch them, even if we know that the hours spent with maintaining the old system would drastically decrease and so would the costs. The reason we are not allowed to use the newer technologies is that tens of thousands of users depend on our tools day by day and the newer versions of the technologies we use may contain yet undiscovered issues. From my experience it is very hard and most of the time even impossible to make a change in an enterprise environment, in which the management usually fears and resists any change.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1437497935.1305329799652099609375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"lacyg88";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1437497935]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1437497935]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Why we do not use comments]]></title>
  <link>https://javax0.wordpress.com/2015/07/22/why-we-do-not-use-comments/</link>
  <pubDate>Wed, 22 Jul 2015 15:00:44 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=994</guid>
  <description/>
  <content:encoded><![CDATA[When I learned PASCAL programming at TU Budapest in 1986 there was a preprocessor developed specially for student code. It stopped the compilation process if the number of inline comments was less than the number of executable code. There was a rule: we had to have at least 50% of the code meaningful comments. 30 years passed and now we fight inline comments. Clean code purists evangelize not to have inline comments at all and have unit documentation (JavaDoc in case of Java) only on the interface. Anything else explaining the implementation has to be self explanatory from the code itself.

That time there were even tools that extracted inline comments into documentation partially including the executable code. Can you recall <a href="https://en.wikipedia.org/wiki/WEB">WEB</a> and <a>TANGLE</a>? That time it seemed to be very exciting to have a language that can be compiled to TeX for documentation purposes and also to PASCAL so the code could be executed. After 30 years we can see that was a dead end street. We do not mix programming and documentation. We rather separate them.

What is the reason for the change of attitude? Computer scientists 30 years ago were "stupid"? Were they advocating something that was and is bad? Or was that good that time and it is good now? Is there something that radically changed in the world and we live in a different world?

I was thinking about this recently and came to the conclusion that the answer is: A bit of both. The word "stupid" is a bit harsh and rude, but stating that computer scientists did not know as much as they do today is agreeable. After all that is development. If the knowledge remained the same it would mean we are at the point where we were 30 years ago. We learned a lot of things related to computer science. Many of these things are related to human science, and should belong to the area of psychology or something alike. That is one side of the dish.

30 years ago comments were demanded. Today we say that comments are bad among other reasons because they become outdated and misleading. 30 years ago the mantra was to keep the comments maintained along with the code and keep it up to date. Easy to say, but people tend not to follow that advice. For a while you can push the mantra and you can try to force people to keep their comments up to date but that is as futile as forbidding sex for a teenager. It is like trying to command gravity to stop and walk home dry while the raindrops float above your head. Human works differently and you can not alter human mankind. What is the solution we seem learned in 30 years? Adapt practice to what human can and will do.

If comments get outdated and misleading then it is better not to have any. On the other hand we need something to compensate for the loss of the feature comments provided. What we aim now is readable code. And this is the other side of the scale. This is something that changed in the world. We have new programming languages and new tools. If you were required to create readable code in FORTRAN or COBOL so that there is no need for inline comments you would be in trouble. Thus there was the strong push to comment. Those days the comments compensated for the language shortage and the outcome average was better including the misleading comments than naked code.

Today we have Java, Scala, C#, Go, Swift, Ruby, Python. All modern languages (sorry for those I missed) that make it possible to express the behavior and implementation in a readable and concise format that does not need comments. We also use unit tests, something that was unknown 30 years ago, which is more a documentation of the implementation than test. We use code to document, and ever less documentation going from waterfall towards agile. I hope that this is a good direction for some time and I look curious to the future.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>994</wp:post_id>
  <wp:post_date>2015-07-22 16:00:44</wp:post_date>
  <wp:post_date_gmt>2015-07-22 15:00:44</wp:post_date_gmt>
  <wp:post_modified>2015-07-13 10:07:22</wp:post_modified>
  <wp:post_modified_gmt>2015-07-13 09:07:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-we-do-not-use-comments</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/3eZJu9Y6gs9]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12977119823]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6029636405754417152&type=U&a=qQ8E]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206088162015814";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/623870738987003905";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6f6204a33d7786200bed4d1fa4489855</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_05ed3f62ef503c5b87ec90c7dc7573b4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8722</wp:comment_id>
    <wp:comment_author><![CDATA[Amir Najam]]></wp:comment_author>
    <wp:comment_author_email>amirnajam@yandex.com</wp:comment_author_email>
    <wp:comment_author_url>http://amirnajamjava.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>43.229.106.21</wp:comment_author_IP>
    <wp:comment_date>2015-09-09 10:44:03</wp:comment_date>
    <wp:comment_date_gmt>2015-09-09 09:44:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Informative post. Actually I am used to doing comments with coding. And this post is helpful for me. Thanks for sharing.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>87881822</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441795648.7874319553375244140625;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"amirnajamjava";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441800005.6656649112701416015625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441800005]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441800005]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441791843.21347904205322265625;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"amirnajamjava";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Some thoughts about yagni]]></title>
  <link>https://javax0.wordpress.com/2015/08/12/some-thoughts-about-yagni/</link>
  <pubDate>Wed, 12 Aug 2015 15:54:19 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1001</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://martinfowler.com/bliki/Yagni.html">Yagni</a> means "You Aren't Gonna Need It". This is a phrase used many times to refuse the development of some features that may be needed later but not now. Yagni means that you should develop a feature in your code, which is needed and when it is needed and not sooner.

Why do we have this term at all? Do developers tend to develop features that are not needed? It should be like that otherwise there would not be any expression for the phenomena. It may seem crazy for someone not knowing how a programmer thinks and works.However the fact is that programmers do like to develop features that were not requested.

Why do programmers tend to develop features that are not needed?
<h1>Reasons and Problems of Yagni</h1>
Coding a feature, which is similar to one I have just developed is easier than something totally unrelated. Developing similar features one after the other is simpler than developing one, then doing something totally different and developing the second one weeks later. The developer is "on the track". She knows how to develop the feature having just developed a similar one.

The problem is that many times the feature will not be needed (1). Even if it is going to be needed there is high probability that it will be needed a bit (or a lot) different from what has been developed (2). The code developed but not in use by business has costs attached to it (3), but no business benefit.

If (1) the feature is not needed in the future the investment devoted to the development of the feature is wasted. It does not matter who is financing it. It may be financed by the business but many times I see that it is financed by (usually junior) developers creating the feature after work hours. They argue that it was a good way of learning, practicing. However I strongly believe it is not a good way of learning. It is a way someone lies to him/herself. The cognitive patterns in the brain prevent to admit: <i>"I was wrong and wasted my time."</i> One can do more valuable things during that time and doing free work is not professional. There are better ways for learning or practicing something. Be professional!

If the feature is needed but in a different format (2) you have to modify it. It is not likely that the cost of the development at the first place and the modification is cheaper than developing the feature the correct way upfront.

Even if it is needed and exactly the way it was developed the costs (3) associated with the prematurely developed features include maintenance, increased complexity debugging, maintaining and costs related to the delayed delivery of the features that were needed in early stage. It is likely that you do not deliver feature "ONE" faster if developed it together with feature "TWO".
<h1>When Yagni is Good</h1>
The only situation when Yagni <i>seems</i> to be valuable is when developing a feature <i>A</i> alone needs extra coding that gets useless and erased when the latter feature is developed. For example you need feature <i>A</i> and to have it without the other feature <i>B</i>&nbsp;you need some extra classes that you will just throw away when you finished the development of <i>B</i>.

The reasoning is good as formal logic. Only the basic assumption that such situation exists may not be true. The need for some extra code for <i>A</i> but useless when <i>B</i> is developed is a code smell. In that case you have to think about how to develop those extra classes so that they can be usable also by the feature <i>B</i> later on.

But wait a minute! Isn't that yagni by itself? Developing some classes differently just because some later features will need it differently? No, it is not. To get that correct we have to distinguish between
<h1>Feature Yagni and Structure Yagni</h1>
So far I was speaking about feature yagni. Structure yagni is different and is not really a yagni. Well, most of the cases.

Wording is important! I do not advocate writing the classes for <i>A</i> in a way so that they can be used by <i>B</i> but nothing else. What I recommend is that you check your style and coding to find the reason why the extra classes would be thrown away. If you can write it different way so that they can be used when <i>B</i> is implemented then they are reusable (by definition). In that case your code is generally good (or at least better) style.

That way implementing good style code, creating clean code, good data and class structures is not yagni. The implementation of a feature not needed yet: that is yagni.
<h1>Refactoring is not Yagni</h1>
Even if creating clean code needs more work than the Q+D solution this extra coding, including some extra classes is not yagni. We do develop code that is not strictly needed by any business function. That way when there is some not soo good code and we refactor it is also not yagni. &nbsp;This is not l'art pour l'art. It is needed by business and sometimes, if the seniors and BA do their jobs right business people even know it.
<h1>Practice avoid yagni</h1>
Writing code that does not develop extra features and is not especially prepared to be ready for extra features not needed yet (yagni), but are open for extension is hard. It is a kind of art and needs a lot of practice. Actually this is what we do when we strictly follow TDD. We develop a test first and it fails. Then we deevelop the code that is minimally needed to fulfill the test. Then we create the next test and so on. When doing TDD you never create a new test while there is a test failing and you never develop any (non test) code unless there is a test failing and you develop the code to pass the test, but nothing else.

This is exactly the practice to develop without yagni. It works on the small scale. When you start you hate it first. It seems to be slow and cumbersome like dacing hogtied. But after a while it becomes a habit, your code style improves and without realizing your way of thinking changes and you get the yagni free design on higher levels.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1001</wp:post_id>
  <wp:post_date>2015-08-12 16:54:19</wp:post_date>
  <wp:post_date_gmt>2015-08-12 15:54:19</wp:post_date_gmt>
  <wp:post_modified>2015-08-12 16:54:19</wp:post_modified>
  <wp:post_modified_gmt>2015-08-12 15:54:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>some-thoughts-about-yagni</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/8eLxh7U1fZ8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6037259637361766400&type=U&a=pTXf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[11]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13660122988]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206238050602935";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/631493974595760129";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13d0c8a3eba727bfee70ead70d4f6ab2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_54cf037ebd0f4499bc7a79713e471c9a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4ac0c11e7a202b01b1d7e13e20070529</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8926</wp:comment_id>
    <wp:comment_author><![CDATA[YAGNI | Adictos al Trabajo]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.adictosaltrabajo.com/tutoriales/yagni/</wp:comment_author_url>
    <wp:comment_author_IP>5.56.62.169</wp:comment_author_IP>
    <wp:comment_date>2015-10-12 15:03:59</wp:comment_date>
    <wp:comment_date_gmt>2015-10-12 14:03:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Some thoughts about yagni. Peter Verhas. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1444662076]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1444662077.0715730190277099609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1444658639.7828919887542724609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8545</wp:comment_id>
    <wp:comment_author><![CDATA[heritchan]]></wp:comment_author>
    <wp:comment_author_email>sandrozbinden@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://sandroizabel.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>62.2.164.170</wp:comment_author_IP>
    <wp:comment_date>2015-08-12 17:12:39</wp:comment_date>
    <wp:comment_date_gmt>2015-08-12 16:12:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogged this on <a href="https://mainzelm.wordpress.com/2015/08/12/some-thoughts-about-yagni/" rel="nofollow">mainzelM&#039;s Blog</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19695720</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1440315128]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440315129.25024509429931640625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439400224.74925994873046875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"heritchan";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1440315128]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439395960.445106029510498046875;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"heritchan";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Teenage Sex and What the sun.misc.Unsafe Misery Teaches Us Generally]]></title>
  <link>https://javax0.wordpress.com/2015/07/29/teenage-sex-and-what-the-sun-misc-unsafe-misery-teaches-us-generally/</link>
  <pubDate>Wed, 29 Jul 2015 15:00:38 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1008</guid>
  <description/>
  <content:encoded><![CDATA[Lukas Eder wrote an <a href="http://blog.jooq.org/2015/07/20/what-the-sun-misc-unsafe-misery-teaches-us/">article</a> about the miseries of the proposed drop off of <tt>sun.misc.Unsafe</tt>. If you have not heard that Oracle will remove the internal sun.misc.Unsafe class in Java 9 then read the article of Lukas and follow some of the links he provides at your discretion. His article is about what we learn from this happening.

<tt>sun.misc.Unsafe</tt> is a class available in most of the Java implementations delivering some "unsafe" functionality that are not available in other ways. These functions are not part of the specification and are not guaranteed to be available. They just happen to be there and are available via some nasty reflection hack. In other words: you should not use it, but you can. There are some Java tools that help protect you from using the interface but not too heavily.

Other languages, like Perl do not even have that level of protection. In that language there is no 'private', 'protected' or other access modifier. What is created in a module it is there. You can use an underscore in front of the method to signal that it is meant to be private but that is more a polite 'please' than a harsh 'thou shalt not'. The philosophy there says that you won't come to my bedroom, not because I am standing there with a machine gun, but because going there would not be nice.

What <tt>sun.misc.Unsafe</tt> misery teaches us is that it does not work. Sorry to say, but it <i>seems</i> you need to have a gun in your hand to prevent library users invading your bedroom. That is also what Lukas suggests: put all your library internal code into a single package and make all package private.

But there are also other approaches. If you look at Jira and Confluence and the extensions you can write you see a different approach. By natural evaluation Jira started small and the designers probably never dreamed about such a huge developer community writing all purpose extensions to their software. They simply did not define an API at all. There were the jar files, the classes in them and extensions were free to invoke any method of any class more or less. The result: every extension had to be tested against each version of the software and when you had an extension working with one of the versions of Jira it may not work with the next (minor upgraded) version. Atlassian had a long way to define an API that is stable and is "officially" available for extension modules. Do they put everything else into a single package? I do not think so. Instead they listen to their customers, they have developers forum and they do have empowered employees listening on those channels and understand the needs and their API provides features that are needed by the users.

And this is the more appealing approach. If you provide the features that the users of the library need, they won't bother to go into the bedroom.
<blockquote>
If you do not provide the features, they WILL come in. You can not prevent them doing that, just like you can not prevent teenage sex. If you do provide what they need, they will not use forbidden calls no non API classes.</blockquote>
This is actually what Sun and later ORACLE failed to do properly (imho). They did not provide the features and "unsafe" was just there. They warned us many times not to use that, but they failed to tell what to use instead. And now it all is coming apart at the seams. What will be the consequences?

What I see as most probably scenario is the following:
<ul>
	<li>Java 9 will come out without unsafe.</li>
	<li>Because many libraries make use of the "unsafe" package implementation the industry acceptance of Java 9 will be delayed. The enterprise standard Java version remains 8 (or 7 or 6 in some enterprises) for prolonged time.</li>
	<li>There will be signs of possible market loss for Java that will drive Oracle to give some solution.</li>
	<li>There will be some API developed by Oracle providing a limited set of features (most commonly used features) of the current unsafe feature set.</li>
	<li>Libraries will be modified within few months using the new API.</li>
	<li>Enterprises will skip to the version that supports the new API.</li>
</ul>
What I do not expect to change is the attitude of Oracle to customers.

We will see how accurate it was in ... two to three years?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1008</wp:post_id>
  <wp:post_date>2015-07-29 16:00:38</wp:post_date>
  <wp:post_date_gmt>2015-07-29 15:00:38</wp:post_date_gmt>
  <wp:post_modified>2015-07-30 09:05:10</wp:post_modified>
  <wp:post_modified_gmt>2015-07-30 08:05:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>teenage-sex-and-what-the-sun-misc-unsafe-misery-teaches-us-generally</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/8GyHzXWgDbT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13208423306]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6032173041667100672&type=U&a=F4hw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206132851653027";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/626407374358626304";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_070eba9b102d539cf42cf58f9e663e3d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8484</wp:comment_id>
    <wp:comment_author><![CDATA[David Kovacs]]></wp:comment_author>
    <wp:comment_author_email>warieth@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>171.25.193.26</wp:comment_author_IP>
    <wp:comment_date>2015-08-07 17:56:39</wp:comment_date>
    <wp:comment_date_gmt>2015-08-07 16:56:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article, but there are alternatives to Unsafe. If someone wants better perfomance (this is the goal), then use C or C++ over JNI (has some cost for passing arguments like arrays). Using an undocumented and unsupported internal class is not the solution, it is the problem.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438966600.3960249423980712890625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1439322348]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438970814.6282880306243896484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439322348.4491550922393798828125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1439322348]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8430</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.83.177.249</wp:comment_author_IP>
    <wp:comment_date>2015-07-29 21:47:41</wp:comment_date>
    <wp:comment_date_gmt>2015-07-29 20:47:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Special thanks to IstvÃ¡n KovÃ¡cs who suggested a lot of corrections to the language of the article.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1438202862]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438202863.03269290924072265625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1438202863]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8463</wp:comment_id>
    <wp:comment_author><![CDATA[Philippe Marschall]]></wp:comment_author>
    <wp:comment_author_email>philippe.marschall@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://marschall.github.io/</wp:comment_author_url>
    <wp:comment_author_IP>194.126.144.2</wp:comment_author_IP>
    <wp:comment_date>2015-08-04 12:41:25</wp:comment_date>
    <wp:comment_date_gmt>2015-08-04 11:41:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My understanding is that Java 9 will ship with sun.misc.Unsafe. A lot (serialization, lambda, java.util.concurrent, ...) JDK classes depend on functionality only offered by Unsafe.
Unsafe will just be not visible by default to the application. You will either be able to use a JVM flag or some additional nasty reflection hacks to have access to it again.
In the end, not really a change at all.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438688485.35326099395751953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1438793714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1438793714.703648090362548828125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1438793714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1438692950.2741539478302001953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8572</wp:comment_id>
    <wp:comment_author><![CDATA[Peter]]></wp:comment_author>
    <wp:comment_author_email>fodpeter@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.218.32.7</wp:comment_author_IP>
    <wp:comment_date>2015-08-16 14:21:28</wp:comment_date>
    <wp:comment_date_gmt>2015-08-16 13:21:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Watch "JVMLS 2015 - The Secret History and Tragic Fate of sun.misc.Unsafe" on YouTube
https://youtu.be/4HG0YQVy8UM]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1440315098.0274779796600341796875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1439741614.3993899822235107421875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1440315097]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1439731289]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1439731290.164864063262939453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java Dynamic Proxy]]></title>
  <link>https://javax0.wordpress.com/2016/01/20/java-dynamic-proxy/</link>
  <pubDate>Wed, 20 Jan 2016 15:00:28 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1020</guid>
  <description/>
  <content:encoded><![CDATA[Proxy is a design pattern. We create and use proxy objects when we want to add or modify some functionality of an already existing class. The proxy object is used instead of the original one. Usually the proxy objects have the same methods as the original one and in Java proxy classes usually <tt>extend</tt>Â the original class. The proxy has a handle to the original object and can call the method on that.

This way proxy classes can implement many things in a convenient way:
<ul>
	<li>logging when a method starts and stops</li>
	<li>perform extra checks on arguments</li>
	<li>mocking the behavior of the original class</li>
	<li>implement lazy access to costly resources</li>
</ul>
without modifying the original code of the class. (The above list is not extensive, only examples.)

In practical applications the proxy class does not directly implement the functionality. Following the single responsibility principle the proxy class does only proxying and the actual behavior modification is implemented in handlers. When the proxy object is invoked instead of the original object the proxy decides if it has to invoke the original method or some handler. The handler may do its task and may also call the original method.

Even though the proxy pattern does not only apply into situation when the proxy object and proxy class is created during run-time, this is an especially interesting topic in Java. In this article I will focus on these proxies.

This is an advanced topic because it requires the use of the reflection class, or byte code manipulation or compiling Java code generated dynamically. Or all of these. To have a new class not available as a byte code yet during run-time will need the generation of the byte code, and a class loader that loads the byte code. To create the byte code you can use <a href="https://github.com/cglib/cglib">cglib</a> or <a href="http://bytebuddy.net/">bytebuddy</a> or the built in Java compiler.

When we think about the proxy classes and the handlers they invoke we can understand why the separation of responsibilities in this case is important. The proxy class is generated during run-time, but the handler invoked by the proxy class can be coded in the normal source code and compiled along the code of the whole program (compile time).

The easiest way to do this is to use the <tt>java.lang.reflect.Proxy</tt> class, which is part of the JDK. That class can create a proxy class or directly an instance of it. The use of the Java built-in proxy is easy. All you need to do is implement a <tt>java.lang.InvocationHandler</tt> so that the proxy object can invoke that. <tt>InvocationHandler</tt> interface is extremely simple. It contains only one method: <tt>invoke()</tt>. When <tt>invoke()</tt> is invoked the arguments contain the original object, which is proxied, the method that was invoked (as a reflection <tt>Method</tt> object) and the object array of the original arguments. A sample code demonstrate the use:

[sourcecode language="java"]
package proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class JdkProxyDemo {

    interface If {
        void originalMethod(String s);
    }

    static class Original implements If {
        public void originalMethod(String s) {
            System.out.println(s);
        }
    }

    static class Handler implements InvocationHandler {
        private final If original;

        public Handler(If original) {
            this.original = original;
        }

        public Object invoke(Object proxy, Method method, Object[] args)
                throws IllegalAccessException, IllegalArgumentException,
                InvocationTargetException {
            System.out.println(&quot;BEFORE&quot;);
            method.invoke(original, args);
            System.out.println(&quot;AFTER&quot;);
            return null;
        }
    }

    public static void main(String[] args){
        Original original = new Original();
        Handler handler = new Handler(original);
        If f = (If) Proxy.newProxyInstance(If.class.getClassLoader(),
                new Class[] { If.class },
                handler);
        f.originalMethod(&quot;Hallo&quot;);
    }

}
[/sourcecode]

If the handler wants to invoke the original method on the original object it has to have access it. This is not provided by the Java proxy implementation. You have to pass this argument to the handler instance yourself in your code. (Note that there is an object usually named <tt>proxy</tt> passed as an argument to the invocation handler. This is the proxy object that the Java reflection dynamically generate and not the object we want to proxy.) This way you are absolutely free to use a separate handler object for each original class or use some shared object that happens to know some way which original object to invoke if there is any method to invoke at all.

As a special case you can create an invocation handler and a proxy of an interface that does not have any original object. Even more it is not needed to have any class to implement the interface in the source code. The dynamically created proxy class will implement the interface.

What should you do if the class you want to proxy does not implement an interface? In that case you have to use some other proxy implementation. We will look at about that next week.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1020</wp:post_id>
  <wp:post_date>2016-01-20 16:00:28</wp:post_date>
  <wp:post_date_gmt>2016-01-20 15:00:28</wp:post_date_gmt>
  <wp:post_modified>2017-09-19 14:33:34</wp:post_modified>
  <wp:post_modified_gmt>2017-09-19 13:33:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-dynamic-proxy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/KH3qDTkzhtj]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18949939807]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6095659163159969794&type=U&a=W3mn]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207221596270962";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/689893504307200001";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9596</wp:comment_id>
    <wp:comment_author><![CDATA[Creating a Proxy Object Using cglib -]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.thepointofinterest.com/2016/01/creating-a-proxy-object-using-cglib/</wp:comment_author_url>
    <wp:comment_author_IP>66.96.183.93</wp:comment_author_IP>
    <wp:comment_date>2016-01-30 15:08:09</wp:comment_date>
    <wp:comment_date_gmt>2016-01-30 14:08:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous post I was talking about the standard Java-based proxy objects. These can be used when you want to have [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454162891.0444049835205078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1454165799]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1454165800.1152191162109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9584</wp:comment_id>
    <wp:comment_author><![CDATA[Creating a proxy object using cglib | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/01/27/creating-a-proxy-object-using-cglib/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.158</wp:comment_author_IP>
    <wp:comment_date>2016-01-27 16:05:26</wp:comment_date>
    <wp:comment_date_gmt>2016-01-27 15:05:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous post I was talking about the standard Java based proxy objects. These can be used when you want to have [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453909535]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1453909535.0938770771026611328125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453907126.5932369232177734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9684</wp:comment_id>
    <wp:comment_author><![CDATA[grimmeld]]></wp:comment_author>
    <wp:comment_author_email>dammkewl@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>145.131.196.98</wp:comment_author_IP>
    <wp:comment_date>2016-03-15 09:04:34</wp:comment_date>
    <wp:comment_date_gmt>2016-03-15 08:04:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In the fourth paragraph you have a typo I think, "proxy cass" should be "proxy class" I presume.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3074261</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1458029216]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458029216]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458029216.77093791961669921875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458029074.8996369838714599609375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"grimmeld";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9685</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.144</wp:comment_author_IP>
    <wp:comment_date>2016-03-15 09:07:17</wp:comment_date>
    <wp:comment_date_gmt>2016-03-15 08:07:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[thanks, fixed]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9684</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1458029237]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458029237.1531350612640380859375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458029237]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27454</wp:comment_id>
    <wp:comment_author><![CDATA[Java Dynamic Proxy | æ¼éç½]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.go2live.cn/nocate/java-dynamic-proxy.html</wp:comment_author_url>
    <wp:comment_author_IP>123.57.145.149</wp:comment_author_IP>
    <wp:comment_date>2019-05-03 14:33:42</wp:comment_date>
    <wp:comment_date_gmt>2019-05-03 13:33:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] åºç¨åºæ¯ [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1556890423.525693;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1556900233]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1556894046.421107;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1556900234.201216;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12284</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan D]]></wp:comment_author>
    <wp:comment_author_email>douma4@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/stefandouma</wp:comment_author_url>
    <wp:comment_author_IP>95.97.71.14</wp:comment_author_IP>
    <wp:comment_date>2018-03-23 17:04:28</wp:comment_date>
    <wp:comment_date_gmt>2018-03-23 16:04:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think you confuse Decorator vs Proxy. Their implementation is mostly the same, but their intention is different. Decorator adds functionality to an existing object, like logging when a method is called. A proxy controls access to an object, like in access control or having a remote object.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>9387516</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1521825742.5490849018096923828125;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"stefandouma";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16045706114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1521847647]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1521847647]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1521847648.0853340625762939453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1521821068.8114559650421142578125;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"stefandouma";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Use of optional is optional]]></title>
  <link>https://javax0.wordpress.com/2015/09/02/use-of-optional-is-optional/</link>
  <pubDate>Wed, 02 Sep 2015 15:00:22 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1031</guid>
  <description/>
  <content:encoded><![CDATA[After the article of last week <a href="https://javax0.wordpress.com/2015/08/26/optional-in-collections/">"Optional in collections"</a> today I can't help but talking a bit more about the same beast. A bit more detail.

The class <tt>Optionial</tt> originally introduced by Google Guava and later included in the Java 8 package is simply a wrapper that wraps an optional object. The wrapped object is optional in the sense that it is either there or there is no object in the wrapping, in which case it is empty. There is not too much magic there. The wrapping code, the class <tt>Optional</tt> insist that the object wrapped is not <tt>null</tt>. After all <tt>null</tt> is <tt>null</tt> and not an object. An object is never <tt>null</tt>. Only a reference to an object can be <tt>null</tt>.

These are nuances, fine details; but important fine details. After all, these fine details are those that required the introduction of <tt>Optional</tt>. Average java coder does not see the importance of such tiny details. They think that <tt>Optional</tt> is just as good as a variable to the wrapped object itself assuming that the variable can also be <tt>null</tt>. At some level they are right. At their own level.

That level says that the good code works, can be understood and that is it. Most of enterprise legacy code that run banks, insurance companies, pace makers and weapons were made on this level. You can not do about it, just hope that you have the luck and a software bug will not select your house, bank account or body (in case of medical device) in a "bomb" explode there. What you can do is to understand the issue and do your part to slowly improve the situation. It will take a few generations unless we all are wiped out before that.

"Code working" and "possible to understand" are the very basic requirement for software. Some old times we said that if the software runs then it was ok and for the maintenance it was enough if there were two "person" who could understand the code: the coder who created it and God, who created the coder. Fortunately there are also levels higher. (I mean above the coder. Not above God.)

"Code working" and "easy (not so hard) to understand" are the next level. This is important in case you have to debug the code and need to identify the root cause of some malfunction. "Code working" and "easy to modify" are again new steps up the ladder. I had seen code that I could easily understand. The code was running. But the dependencies between the different modules were so complex like a macrame or a traditional Italian spagetti. Wherever I wanted to change something to fix a bug here, there were a few other places where the program started to fail. Easy to modify: that code was not.

The next level is "code working", "easy to modify" <em>and</em> "hard to create bad modifications". This means that the code provides style and internal data structures and APIs that the maintaining person will follow to some level and will create a working modified code that still works, easy to understand and to modify. This is the point where we get to the point of <tt>Optional</tt>.

When a method returns <tt>Optional</tt> is says that it may return something or just nothing. <tt>Optional&lt;Integer&gt;</tt> may return an <tt>Integer</tt> but it may just return an empty <tt>Optional</tt>, which means: there was no <tt>Integer</tt> that I could return. Why is it any better than returning an <tt>Integer</tt> that may optionally be <tt>null</tt>?

<h2>Optional method return value</h2>

The answer is that in case of returned <tt>Optional&lt;Integer&gt;</tt> you can not

[sourcecode language="java"]
integer = methodReturningIntegerOrNull();
otherInteger = integer +1;
[/sourcecode]

that causes NPE. Why you do that? Because you forget to check, and the JavaDoc mentions the possibility somewhere at the end of the description that is not visible in the mouse over window when you code. In case of <tt>Optional&lt;Integer&gt;</tt> you are forced to

[sourcecode language="java"]
optionalInteger = methodReturningOptionalInteger();
if( optionalInteger.isPresent() ){
  otherInteger = optionalInteger.get() +1;
  }
[/sourcecode]

Still there is a small chance that you will write:

[sourcecode language="java"]
optionalInteger = methodReturningOptionalInteger();
otherInteger = optionalInteger.get() +1;
[/sourcecode]

but in that case you deserve what you get.



<blockquote>
<tt>Optional</tt> helps you to create more code and less documentation. It gives a semantic to pass on some optional value in a way that is harder to neglect than a nullable value. It says: I do not trust you handling <tt>null</tt> properly, therefore I give you a wrapped object so you have to handle optionality explicitly.
</blockquote>

If you consider that you can easily answer the questions
<ul>
	<li>requiring <tt>Optional&lt;Something&gt;</tt> as a method argument</li>
	<li>having a <tt>private</tt> field optional.</li>
</ul>

are good ideas.

<h2>Optional method argument</h2>

There are pros and cons. When the argument says

[sourcecode language="java"]
countFrom(Optional&lt;Date&gt; from, Date to);
[/sourcecode]

it is clear that the <tt>from</tt> value may be missing and there should be some special default semantics when an absent value is passed. On the other hand the caller may pass <tt>null</tt> to get the special behavior. It is less likely that the caller will pass <tt>null</tt> just by mistake neglecting the optionality. Even if the argument is <tt>Optional</tt> the argument actually passed can still be <tt>null</tt> and I expect that the method throws NPE in this case. Last, but not least there is another danger introducing <tt>Optional</tt>: the caller may pass an <tt>Optional</tt> embracing an object that is not a <tt>Date</tt>. Generics can be circumvented in Java easy and a sloppy coder may pass a wrong <tt>Optional</tt>. It means that you have to implement assertions in your method: 

<ul>
	<li>argument is not null, </li>
	<li>argument is of the proper type.</li>
</ul>

Also recall that <tt>Optional</tt>, in case of a method return value says: <em>I do not trust you handling <tt>null</tt> properly, therefore I give you a wrapped object so you have to handle optionality explicitly</em>. What would this message be when you create the API requiring <tt>Optional</tt> as an argument? <em>Please do not trust me! Give me only <tt>Optional</tt> because even I do not trust myself to handle a <tt>null</tt> value properly.</em> Weird... <em>On the other hand I trust that you will not pass <tt>null</tt> or wrong type.</em>

In my opinion: in this case using <tt>Optional</tt> does not deliver more value than having proper documentation for the API and does not force the caller to behave better than it would anyway. On the other side you put extra code on your own shoulder.

<blockquote>Give <tt>Optional</tt> to code you trust, accept it from code that does not trust your code but do not request it! Trust yourself!</blockquote>


<h2>Private Optional Fields</h2>

When you declare a local, private field to be <tt>Optional</tt> you will force the developer of the class itself to pay more attention to the optional feature of the field. The cost of this is the extra wrapper, the extra clutter in the code handling optional. On the other side there is no much gain, because you can get the same level of quality extending your unit tests checking all cases where <tt>null</tt> value of the field is to be considered. Since all the code is in the hand of the current developer being responsible for the whole code there is no benefit of <tt>Optional</tt>. It is again, like you not trusting yourself. That is a serious issue needing more and different treatment than what <tt>Optional</tt> Java class can provide.

<h2>Optional in functional programming</h2>

You can use <tt>Optional</tt> to program Java in functional programming style if you want, but Java is not a functional language and optional and lambda and the functional style methods alone will not make it to be. But that is a different topic for later.



]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1031</wp:post_id>
  <wp:post_date>2015-09-02 16:00:22</wp:post_date>
  <wp:post_date_gmt>2015-09-02 15:00:22</wp:post_date_gmt>
  <wp:post_modified>2015-09-01 18:49:49</wp:post_modified>
  <wp:post_modified_gmt>2015-09-01 17:49:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-of-optional-is-optional</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>draftfeedback_requests</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:13:"55da199d084fc";a:4:{s:3:"key";s:13:"55da199d084fc";s:4:"time";s:10:"1440356765";s:7:"user_id";s:8:"31131067";s:7:"revoked";s:1:"1";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14357343120]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/LjH3kau2jgf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6044856337374932992&type=U&a=Td8L]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206374920264591";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/639090670360096769";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_070eba9b102d539cf42cf58f9e663e3d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8678</wp:comment_id>
    <wp:comment_author><![CDATA[Nicolai Parlog]]></wp:comment_author>
    <wp:comment_author_email>nipa@codefx.org</wp:comment_author_email>
    <wp:comment_author_url>http://codefx.org</wp:comment_author_url>
    <wp:comment_author_IP>178.5.143.108</wp:comment_author_IP>
    <wp:comment_date>2015-09-03 11:48:35</wp:comment_date>
    <wp:comment_date_gmt>2015-09-03 10:48:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice, more discussions about 'Optional'. :-)

You might have read <a href="http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html" rel="nofollow">Stephen Colebourne's post about 'Optional'</a> and <a href="http://blog.codefx.org/java/stephen-colebourne-optional-a-strict-approach/" rel="nofollow">my reply</a>. If so, you know that I disagree with your assessment regarding optional parameters and fields.

Specifically I think you should not assume that "me" writing a method or class and "me" modifying them are the same person. On the contrary, in a team with shared code ownership this is pretty unlikely. In such situations, 'Opional' helps immensely to communicate intent. (And way quicker and clearer than tests.)

I also fail to see "the extra clutter in the code handling optional". Coding for optionality is more succinct with 'Optional' than with regular references, see 'ifPresent' for example.

Finally and most importantly, you are missing one crucial aspect. If following your approach (no optional parameters, fields), null is still a legal value in some parts of the code. That means that if I encounter an NPE I am still forced to find out whether this value is even meant to exist. That's wasting a lot of time.

If parameters and fields use 'Optional' as well, null is always a bug. Whenever I see null I already know something went wrong somewhere else and I can aggressively sprinkle null-tests anywhere because it can <strong>never</strong> be a legal value.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441280832]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441280833.29403400421142578125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441280832]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441277316.3372800350189208984375;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"thepauljonas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8680</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.87</wp:comment_author_IP>
    <wp:comment_date>2015-09-03 12:55:10</wp:comment_date>
    <wp:comment_date_gmt>2015-09-03 11:55:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I can absolutely accept your approach, arguments and conclusion. These issues are about the style and not carved in stone. Tastes can be different. If I were made to work in a group where the coding standard recommends, requires the approach you described I would not argue but follow the rules.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8678</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441281312.4130079746246337890625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441281313]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441281311]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8684</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>korondi.mark@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://markkorondi.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>144.200.0.129</wp:comment_author_IP>
    <wp:comment_date>2015-09-03 21:33:23</wp:comment_date>
    <wp:comment_date_gmt>2015-09-03 20:33:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[While "pattern marching" could be a very researchy term that'd describe some obscure SW-technology phenomenon of codepatterns walking here and there but I need to admit, it's just a typo of "pattern matching" which comes from the proximity of R and T on the keyboard :-(]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8683</wp:comment_parent>
    <wp:comment_user_id>33237381</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441312404]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441312404.258162021636962890625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"kmarc11";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14403252607]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441312404]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8686</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.83.177.249</wp:comment_author_IP>
    <wp:comment_date>2015-09-03 22:17:48</wp:comment_date>
    <wp:comment_date_gmt>2015-09-03 21:17:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[lol]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>8684</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441315070]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441315070.580586910247802734375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14404511420]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441315071]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8692</wp:comment_id>
    <wp:comment_author><![CDATA[Piotr Laskowski]]></wp:comment_author>
    <wp:comment_author_email>piotrek@echo.waw.pl</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1032688733447885/</wp:comment_author_url>
    <wp:comment_author_IP>83.142.193.133</wp:comment_author_IP>
    <wp:comment_date>2015-09-04 09:51:20</wp:comment_date>
    <wp:comment_date_gmt>2015-09-04 08:51:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  Please do not trust me! Give me only Optional because even I do not trust myself to handle a null value properly. Weirdâ¦ &lt;
</blockquote>

I do not trust myself that after 3 months I will still remember details of given code. Optional is a doc in place, javadoc of public method is not. Especially when delegating work to private methods/helper classes. Not to mention the burden of keeping code and javadoc in sync.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/1032688733447885/picture?type=large&_md5=6d409463486adb679aa89e163fc4cae9]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[1032688733447885]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14420705011]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441357270]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441357270]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441357270.65542888641357421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441356681.23863506317138671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8694</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>213.163.40.33</wp:comment_author_IP>
    <wp:comment_date>2015-09-04 12:30:29</wp:comment_date>
    <wp:comment_date_gmt>2015-09-04 11:30:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Using Optional as a private field... It could make sense when you have a monster class with thousands of lines.
But wait! That's below the 'possible to understand' level.

Still I find it a good idea: when you introduce an Optional into a huge legacy class, then the compiler will tell you when and how you need to check nulls.

And that's it: leaning on the compiler is incredibly useful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441366230]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441366230.2286090850830078125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14424487945]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441366230]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8683</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>korondi.mark@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://markkorondi.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>144.200.0.129</wp:comment_author_IP>
    <wp:comment_date>2015-09-03 21:26:58</wp:comment_date>
    <wp:comment_date_gmt>2015-09-03 20:26:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice contemplation about Optional. It's a good thing in my opinion that Java tries to solve , or at least give tools to cope with, "the dreadful NPE problem".

However, Optional without pattern marching is just a fancy word and an additional line of imports. Also it's monadic properties are not exploitable (e.g. syntax-supported short-circuit of faulty operation).

TBH for me it seems Optional makes Java code only a slight more understandable while a lot more verbose. In Haskell, the Optional equivalent Maybe is a bliss: shortens code a lot while reduces "structure" (no more if-indentation hell), makes it way more comprehensible while helps you reason about your code.

In your argument,you distinguish between average and better coders. Average coders won't start caring because of Optional. The more skilled, on the other hand, did already care: for them, it doesn't matter whether they check for null or isPresent().]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441312019.066380023956298828125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"kmarc11";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441312018]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441312019]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Optional in collections]]></title>
  <link>https://javax0.wordpress.com/2015/08/26/optional-in-collections/</link>
  <pubDate>Wed, 26 Aug 2015 15:00:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1053</guid>
  <description/>
  <content:encoded><![CDATA[Sometime it is argued that the type <tt>Optional</tt> is worth being used in collections. It allegedly solves the problem of e.g.: <tt>HashMap</tt> that returns <tt>null</tt> in case there is no mapping for a key as well as when the value <tt>null</tt> is mapped to the key. If you use a <tt>Map&lt;Optional&lt;Something&gt;&gt;</tt> then you can clearly separate a missing mapping and an absent value. <em>And that way you are one level deeper in the rabbit hole.</em>

First of all

<h2>you can</h2>

tell if a key is mapped to <tt>null</tt> or not mapped without using <tt>Optional</tt>. There is the method <tt>containsKey()</tt>. This is one more method call to separate the non-mapped key from a mapped <tt>null</tt> value. However calling the methods of <tt>Optional</tt> is also. So what is the point? On the other hand

<h2>you do not need</h2>

to tell if the key is mapped to <tt>null</tt> or the mapping is missing. If there is a difference in your program code between the two cases then you created the code for the business login in a wrong way. This is certainly code smell. Think of <tt>null</tt> as "nothing", and instead of thinking "<tt>null</tt> is assigned to the key 'aaaaaarrghhh'" say out loud: Nothing is assigned to the key 'aaaaaarrghhh'. You see? There is no difference except that all look at you now in the office.

And using optional as a value in a <tt>Map</tt>

<h2>you will</h2>

end up one level deeper in the rabbit hole after a while. Code lives independent life. It is not only you, who develop it. In large organizations there are developers who are certainly drunk when code. (This is the  only reasonable explanation for some code.) They will soon populate your <tt>Map&lt;Optional&lt;Something&gt;&gt;</tt> with 

<ul>
	<li><tt>null</tt> values, </li>
	<li>absent <tt>Optional</tt> values </li>
	<li>and even with <tt>Optional</tt> object that wrap something else but not your "<tt>Something</tt>". </li>
</ul>

From time to time, if you are lucky you may even find some non <tt>null</tt>, non absent <tt>Optional&lt;Something&gt;</tt> values.

 ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1053</wp:post_id>
  <wp:post_date>2015-08-26 16:00:12</wp:post_date>
  <wp:post_date_gmt>2015-08-26 15:00:12</wp:post_date_gmt>
  <wp:post_modified>2015-08-25 17:30:02</wp:post_modified>
  <wp:post_modified_gmt>2015-08-25 16:30:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>optional-in-collections</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/EFeVGPfy5EL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14118777643]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6042319676128657408&type=U&a=L4Ci]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206327765845760";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/636554014151172097";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8677</wp:comment_id>
    <wp:comment_author><![CDATA[Use of optional is optional | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2015/09/02/use-of-optional-is-optional/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.85</wp:comment_author_IP>
    <wp:comment_date>2015-09-02 16:01:06</wp:comment_date>
    <wp:comment_date_gmt>2015-09-02 15:01:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article of last week &#8220;Optional in collections&#8221; today I can&#8217;t help but talking a bit more about the same beast. A bit more [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441210879.2370541095733642578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441206066.397797107696533203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441216159]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441216159.5617539882659912109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9297</wp:comment_id>
    <wp:comment_author><![CDATA[Using Java 8&#039;s &#039;Optional&#039; is Optional -]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.thepointofinterest.com/2015/12/using-java-8s-optional-is-optional/</wp:comment_author_url>
    <wp:comment_author_IP>66.96.183.93</wp:comment_author_IP>
    <wp:comment_date>2015-12-02 10:55:50</wp:comment_date>
    <wp:comment_date_gmt>2015-12-02 09:55:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article of last week âOptional in collectionsâ today I can&#8217;t help but talking a bit more about the same beast in a bit more [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449050151.1621959209442138671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1449054213]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449054213.0930559635162353515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8642</wp:comment_id>
    <wp:comment_author><![CDATA[David Kovacs]]></wp:comment_author>
    <wp:comment_author_email>warieth@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>89.134.145.17</wp:comment_author_IP>
    <wp:comment_date>2015-08-26 16:28:38</wp:comment_date>
    <wp:comment_date_gmt>2015-08-26 15:28:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree in not using Optional. Using Optional instead of null has only one justification, it makes more visible in the code when something can be optional/null or not. The @NonNull and @Nullable annotation solves this cleaner.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1440602919]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1440602919.237740993499755859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1440602919]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9311</wp:comment_id>
    <wp:comment_author><![CDATA[Using Java 8&#039;s &#039;Optional&#039; is Optional | JAVA]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://java.hot4web.com/2015/12/03/using-java-8s-optional-is-optional/</wp:comment_author_url>
    <wp:comment_author_IP>52.24.44.94</wp:comment_author_IP>
    <wp:comment_date>2015-12-03 06:06:27</wp:comment_date>
    <wp:comment_date_gmt>2015-12-03 05:06:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article of last week &ldquo;Optional in collections&rdquo; today I can&rsquo;t help but talking a bit more about the same beast in a bit more [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449119189.13722896575927734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1449126816]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449123687.420115947723388671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449126816.165875911712646484375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8668</wp:comment_id>
    <wp:comment_author><![CDATA[Robert]]></wp:comment_author>
    <wp:comment_author_email>robert.sanders@ahcmedia.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>38.88.190.162</wp:comment_author_IP>
    <wp:comment_date>2015-08-31 14:45:55</wp:comment_date>
    <wp:comment_date_gmt>2015-08-31 13:45:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It seems to me that Optional is really designed around certain types of functional chaining.  I think it tends to work (better) in languages like Scala, but I question how useful it really is in Java. To me at the moment I don't see a good value.  If Java were to move a lot further into being a functional language then maybe it would become more valuable; but with so much need for backwards compatibility I just don't see that happening anytime soon (it ever).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441028756.950090885162353515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441028757]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14283861189]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1441032483]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441032483]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1441032483.7937209606170654296875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[The dumbest interview question ever]]></title>
  <link>https://javax0.wordpress.com/2015/09/10/the-dumbest-interview-question-ever/</link>
  <pubDate>Thu, 10 Sep 2015 19:26:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1077</guid>
  <description/>
  <content:encoded><![CDATA[This article is not really about informatics at first. But on second though...

<h1>Why are sewer covers round?</h1>

This is the interview question that I believe is the most pointless ever. This is asked many times and the interviewer usually expects the clever answer: "Because this is the shape that prevents the cover to be dropped into the hole under it." When I got this question once I had different answer: "Because there are no corners and thus there are no singularities where very huge forces can appear, which are responsible for cracks usually." Actually I learned that at the university when I had to study a subject about mechanics and machinery. I graduated as electric engineer and I only later became software specialist. After many years of software engineering I have now a different opinion about this question.

<h1>What I really think sewer covers are round for?</h1>

Because it was always the way like that. Somebody, sometime a hundred or two-hundred years ago created the first sewer top and there was some reason to design it round. They documented it (or not) and started the production. For a short period of time the engineers knew the reasons, but after, say 20 years, the reasons were forgotten and sewer covers were created round for some forgot reasons. Simply because that was the way to do it.

So what? Somebody designed it and it was good,we can follow. Is there any problem with the approach? YES.

The decision was made in a certain environment that radically changed. Labour was cheaper that time, automation was non-existent and metallurgy was far from what it is now. I do not imply that the round form is bad. I do not imply that we have to use octagonal or star shaped sewer tops. I only express my strong belief that nobody was checking the validity of the assumptions recently.

<h1>What does it do with software?</h1>

Nothing really more than design and logic that we also use in software engineering. As well as routine, practice, pattern, drill. Many times without considering the original boundary conditions.

So next time when somebody asks you this question on an interview just tell them: "Because this is the shape that prevents the cover to be dropped into the hole under it."]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1077</wp:post_id>
  <wp:post_date>2015-09-10 20:26:12</wp:post_date>
  <wp:post_date_gmt>2015-09-10 19:26:12</wp:post_date_gmt>
  <wp:post_modified>2015-09-10 20:26:12</wp:post_modified>
  <wp:post_modified_gmt>2015-09-10 19:26:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-dumbest-interview-question-ever</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Vjvj7SEZcm7]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14645646805]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6047822212730277888&type=U&a=ngYP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206436368040747";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/642056554959663104";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>8734</wp:comment_id>
    <wp:comment_author><![CDATA[David Kovacs]]></wp:comment_author>
    <wp:comment_author_email>warieth@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.165.223.232</wp:comment_author_IP>
    <wp:comment_date>2015-09-11 18:29:00</wp:comment_date>
    <wp:comment_date_gmt>2015-09-11 17:29:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[âBecause this is the shape that prevents the cover to be dropped into the hole under it.â

Circle is one shape, but Reuleaux polygons would be fine for that reason. Maybe a concave equilateral hexagon could not dropped in the hole.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1441992540]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441992540.612123012542724609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1441992540]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8733</wp:comment_id>
    <wp:comment_author><![CDATA[Szaszvari Peter]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/112478567534402128217</wp:comment_author_url>
    <wp:comment_author_IP>195.184.188.232</wp:comment_author_IP>
    <wp:comment_date>2015-09-11 11:38:14</wp:comment_date>
    <wp:comment_date_gmt>2015-09-11 10:38:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Enjoyed much!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1442067209]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1442067209.2393820285797119140625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441967895.2180840969085693359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-ptCT3M9eBQQ/AAAAAAAAAAI/AAAAAAAAC7A/aYn-SPHk7vA/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[112478567534402128217]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1442067209]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1441972657.4407260417938232421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8753</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2015-09-14 08:15:17</wp:comment_date>
    <wp:comment_date_gmt>2015-09-14 07:15:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My answer: By using round shape you don't have to adjust the cover's angle to match into the hole. Given that these covers are quite heavy, rolling them into the right angle would require quite much effort.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1442214918]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1442214918.26206493377685546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1442214918]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9102</wp:comment_id>
    <wp:comment_author><![CDATA[Shai Almog (@Codename_One)]]></wp:comment_author>
    <wp:comment_author_email>Codename_One@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/Codename_One</wp:comment_author_url>
    <wp:comment_author_IP>37.142.245.53</wp:comment_author_IP>
    <wp:comment_date>2015-11-01 15:13:46</wp:comment_date>
    <wp:comment_date_gmt>2015-11-01 14:13:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ask them why plane windows are rounded or round as a response...
The first commercial flight jet engine had square windows and a few years after its launch it started crashing mysteriously... After 2 or 3 crashes they investigated and came to the conclusion that the windows had weaknesses due to the corners.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446391325.4476959705352783203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446387228.268906116485595703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1446396924.883388042449951171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1446396924]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://pbs.twimg.com/profile_images/1725438191/Codename_One_Square_normal.png]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[451298054]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1446396924]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do we need coding conventions?]]></title>
  <link>https://javax0.wordpress.com/2015/11/11/do-we-need-coding-conventions/</link>
  <pubDate>Wed, 11 Nov 2015 15:00:09 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1081</guid>
  <description/>
  <content:encoded><![CDATA[There are things that just come natural and we forget to wonder if it could be some other way. It is like that the sun rise morning and sets evening. But scientists raise the question and even though the sun still rise in the morning and still sets evening we gathered a lot of knowledge about it. It is similar to every profession. We do thing, follow procedures and do not ask the question: why? Should we?

In some cases we follow some procedure because that is the way we always did. We write program codes in lines, because that was the only way to record code in <a href="https://en.wikipedia.org/wiki/IBM_RPG">RPG</a>Â that was created for <a href="https://en.wikipedia.org/wiki/Punched_card">Hollerith cards</a>. You do not even know what a Hollerith card is butÂ you still write code lines in an editor and still many times the suggested maximal line length is 72 characters. Should we write code into 72 character length lines? No, obviously. Many times we do not. Modern editors and screens make it more feasible to have longer lines. Still there is a maximum length that makes the code more readable. Integrated development environments, like Eclipse wrap too long lines if we ask them.Â Nobody questions it. What people question is the actual length of the line. Should be 80 character, 130 or 125 or something else? One thing is certain: when coding in a team there should be only one decided and agreed limit. The sad thing is that setting a coding standard sometimes is a good ground and source for dissension.

From my practice the most important Java coding question (as far as temperature of debates shows) before starting a project is:
<blockquote>"Should there be a space between the keyword 'if' and the opening parenthesis?"</blockquote>
You may laugh, but just look at the following two sample code segments:

[sourcecode language="java"]
  if( debugIsSwitchedOn )log.debug(&quot;Here we go&quot;);
[/sourcecode]

and

[sourcecode language="java"]
  if ( debugIsSwitchedOn )log.debug(&quot;Here we go&quot;);
[/sourcecode]

Now you can understand that answering this question and having a consensus on that may make a project success or fail. The proper selection between waterfall and agile methodology is a matter of free choice and does not really effect the outcome of the project as much as this question. At least if I measure importance based on the effort put into the debate usually.

Now you think that I am kidding. Some way yes, but lets have a look at from another angle:
<blockquote>If having or not having a space between the keyword 'if' and the opening parenthesis is not important then why do people invest so much emotion and effort discussing it?</blockquote>
It seems that such nuances are important for the developers. And what is important for the developers is important for the project. Unhappy developers do not deliver successful project.

This is not a hard coded area, like performance of reflection or thread local usage in Tomcat that you can try, test, measure and have a final word. This is more psychology that I am not an expert in, but still I have my experience in coding and I have my ideas about the question I set forth. After all having a discussion about a topic we are not expert in is at least such a good ground for a disputeÂ as something that is more religious than fact based, like the space between the 'if' and '('.

<h1>Code is owned by the developer</h1>

Today agile methodology says that the code belongs to the group. Anyone can fix any part of the code. In old times it was not the case. We did not stick to such "expensive" and strict rules. Developers were lone wolfs and were responsible for their own code. Sharing the code has its cost involving the other members to learn the code somebody else from the group developed. In the long run it is cheaper when you consider the maintenance cost of the code starting even before the first release during debugging sessions. Even though sharing the code is not the human nature. Developers in the deep soul are still lone wolfs and honestly when I code I am alone. I am in a kind of flow state many times realizing that last ten minutes I spent with coding was actually more than an hour. Having enough experience I am not reluctant to share the code with others, explain if needed what and why is there. (Btw: need for extensive explanation is already a code smell unless the other side is junior, in which case the explanation is more kind of education.)

This means that in the deep heart we still own the code. Each and every member of the developer team should feel owning the code to be effective when she has to fix a bug, extend a feature. And the feeling is greatly affected by small nuances, like how we usually format the code. I open the source code in my IDE, I see the code using the coloring and the font face I set (that already makes it a bit cosy) and try to understand the code. If the coding convention is totally different from my code: it is a distraction. Up to some level I can convince myself not to pay attention to the fact the the opening braces are on the next line, like we do when we program C# but it is an annoyment when we code in Java. That is not the way we usually do it. Eclipse, IntelliJ or even some vi macro helps to reformat, but then we waste time when comparing the pull request in GitHub: there will be a lot of changes most of it formatting. We loose the information in the noise.

If the group has coding convention the code will look more like mine even if developed by some fellow programmer. I will look at it, I will understand it easier. You should not underestimate the effect of that.

<h1>The actual coding convention is not important</h1>

It is more important that the group has one (and only one). To have it settled during the start of the project is a good topic to increase group cohesion. Even if the discussion goes into a wrong direction and the final decision is not optimal, what can you loose? A space between the keyword 'if' and '('? People, especially when a group is recently formed has to forge itself and forging is usually at high temperature. It has to be like that and what can be a better topic where flames make no real harm?
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1081</wp:post_id>
  <wp:post_date>2015-11-11 16:00:09</wp:post_date>
  <wp:post_date_gmt>2015-11-11 15:00:09</wp:post_date_gmt>
  <wp:post_modified>2015-11-11 10:49:26</wp:post_modified>
  <wp:post_modified_gmt>2015-11-11 09:49:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-we-need-coding-conventions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/A6ubncTWpr7]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16754605033]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6070223541314338816&type=U&a=zd4y]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206781232662147";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/664457880897126400";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9194</wp:comment_id>
    <wp:comment_author><![CDATA[Erdin Eray]]></wp:comment_author>
    <wp:comment_author_email>eraygezer.94@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://alreadycoded.tumblr.com</wp:comment_author_url>
    <wp:comment_author_IP>46.1.159.160</wp:comment_author_IP>
    <wp:comment_date>2015-11-12 20:01:02</wp:comment_date>
    <wp:comment_date_gmt>2015-11-12 19:01:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As a linguistics student, I wish to present a point of perspective here. The matter in this article is called as the distinction between descriptivism and prescriptivism.

A prescriptivist simply says how you should speak or write a langauge system, while the descriptivists (which is widely accepted by linguists) say there's no need to since it's a natural process of language system and that we should investigate the language system.

So from this perspective, there's a system of any programming language, so any attempt of writing rules might be violated by any way and that does not really matter. However, according to discourse analysis which is a field of linguistics, if you tend to violate the rules of a discourse society (a society of any programming language), you're simply excluded. I mean if something is developed for the development group (like web frameworks, GUI frameworks etc.), we should be loyal to rules, not in a strict manner but loyal to fundamentals (like documenting etc.). That matters just a little bit if we're inside the production level.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447354863.82800197601318359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"erayerdin";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16794417751]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1447355040]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1447355040]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447355040.96259593963623046875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9218</wp:comment_id>
    <wp:comment_author><![CDATA[Cheryl]]></wp:comment_author>
    <wp:comment_author_email>cheryllivecodingtv@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>180.191.130.183</wp:comment_author_IP>
    <wp:comment_date>2015-11-18 00:19:00</wp:comment_date>
    <wp:comment_date_gmt>2015-11-17 23:19:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice article. I don't really like the idea of cramping the programmerâs natural creativity with excessive constraints and restrictions. Yes,  Coding convention is important but should be to the minimum level.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1447802341.0697729587554931640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447814156.9008829593658447265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16959890074]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1447814156]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1447814156]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1447807293.381702899932861328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9185</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.99.48.140</wp:comment_author_IP>
    <wp:comment_date>2015-11-11 21:15:29</wp:comment_date>
    <wp:comment_date_gmt>2015-11-11 20:15:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I really like this post. Totally agree with it.

There are some corner cases though. Most of the languages have industry-wide standards, like this is the one Sun used to recommend: http://www.oracle.com/technetwork/java/codeconvtoc-136057.html They put a space between the 'if' and '('
It can be annoying, when a specific coding standard differs a lot from the default one. Especially for new members on the team - the first couple of weeks will be more difficult than necessary.

Another corner case is when a team has a standard but has no automatic tool to enforce it. I find it a waste when I see technical leads sorting out white spaces.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447272929.897430896759033203125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1447272929]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1447272929]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447275830.0324580669403076171875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16764365627]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1447275832]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1447275832.3665521144866943359375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Can you call non-static method from a static?]]></title>
  <link>https://javax0.wordpress.com/2015/11/25/can-you-call-non-static-method-from-a-static/</link>
  <pubDate>Wed, 25 Nov 2015 14:54:20 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1099</guid>
  <description/>
  <content:encoded><![CDATA[There are questions on a Java technical interview that even the most entry level junior is expected to give the right answer for. Since I am facing candidates who are not that junior I do not even bother most of the times to ask those questions. I assume that the candidate knows the correct answer. Some time however there are some candidates who I feel from the start they are&nbsp;juniors and to cut the interview short not wasting his/her and my time I ask some of those simple questions. The answers usually reveals the real level of knowledge and we can get to an agreement in short time about the assessed level.

Sometimes I also meet candidates who not only simply do not know the answer but give wrong answer. To know something wrong is worse than not knowing. Out of these very few even insists and tries to explain how I should have interpreted their answer. That is already a personality problem and definitely a no-go in an interview.

One such simple question is:
<blockquote>Can a static method in a class call a non-static method of the same class?</blockquote>
If you know Java a little bit you know the answer: no, it can not. A static method belongs to the class and not the instance. It can even be executed using the name of the class directly without any instance of the class. It can even run when there is not even a single instance of the class in the whole JVM. How could it invoke a normal method that runs attached to an instance?

But then again: the answer from one candidate this time was: yes. And he even started to explain that it may happen that the static method has access to an instance. It may get an instance as a method argument and through that reference it can call an instance method. That person was right. It did not, however, mended the fact that he did not know Java good enough, but as a matter of fact in this very specific question she was right.

What is the morale of the story? You tell.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1099</wp:post_id>
  <wp:post_date>2015-11-25 15:54:20</wp:post_date>
  <wp:post_date_gmt>2015-11-25 14:54:20</wp:post_date_gmt>
  <wp:post_modified>2015-11-25 15:54:18</wp:post_modified>
  <wp:post_modified_gmt>2015-11-25 14:54:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>can-you-call-non-static-method-from-a-static</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/UY8ksyQ7uLQ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[11]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17191513036]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6075295258617397249&type=U&a=rjFN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10206854310489047";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/669529597734617088";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6eea83bc30d7cd2396628a8d5c1eb5cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e94f368624f914d6b4db141349a52c80</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a0c4359a1945d99700d8a40c99848988</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9e062b25b0de95d80863059c81c46e03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a95787259cdf7ba8b4054d968192361e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9314</wp:comment_id>
    <wp:comment_author><![CDATA[Kofa]]></wp:comment_author>
    <wp:comment_author_email>kofa@kovacs-telekes.org</wp:comment_author_email>
    <wp:comment_author_url>http://kovacs-telekes.org/</wp:comment_author_url>
    <wp:comment_author_IP>176.63.254.87</wp:comment_author_IP>
    <wp:comment_date>2015-12-04 21:22:08</wp:comment_date>
    <wp:comment_date_gmt>2015-12-04 20:22:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It's a bit like the questions from school: 'what's the next number in the sequence'? I have to agree with the others that the answer was acceptable and logical, it's just not what you had in mind; you wanted to hear the 'canonical' answer ('no').]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>44825336</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17479469441]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1449260546]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449260544.9452168941497802734375;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449260546.9119510650634765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1449260528]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1449260528.8112509250640869140625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"kofa73";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11205</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2017-07-11 11:40:17</wp:comment_date>
    <wp:comment_date_gmt>2017-07-11 10:40:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[An interesting rant to this article:

http://blogs.tedneward.com/post/when-interviews-fail/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1499769617]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1499769617.1062080860137939453125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[6980341839]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1499769617]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9261</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>213.163.40.33</wp:comment_author_IP>
    <wp:comment_date>2015-11-25 16:46:21</wp:comment_date>
    <wp:comment_date_gmt>2015-11-25 15:46:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The question was too board, I guess :)
I'd say yes too. Like, it's a stupid example but it's good for the compiler: you create an instance in the static method, then you invoke a method on this instance. Voila.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1448466382]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1448466383.12166595458984375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1448466384]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9436</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2015-12-29 16:59:28</wp:comment_date>
    <wp:comment_date_gmt>2015-12-29 15:59:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The morale for me:
A healthy and professional conversation is more important than the answer itself.
If the interviewer blindly insists to some putative 'right answer', that is also a good sneak peek into the company culture.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1451404768]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451404768.4930479526519775390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18218395962]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1451404769]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9263</wp:comment_id>
    <wp:comment_author><![CDATA[csorbazoli]]></wp:comment_author>
    <wp:comment_author_email>csorbazoli@freemail.hu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.63.13.51</wp:comment_author_IP>
    <wp:comment_date>2015-11-25 21:32:08</wp:comment_date>
    <wp:comment_date_gmt>2015-11-25 20:32:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, you usually do it from the public static void main method of a class:)
First instantiate the class then call a method of it.
But the trivial answer would be "no", unless you are expecting to have a tricky question;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>38769047</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1448483529.984714984893798828125;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"csorbazoli";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17201513819]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1448488146]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1448488146]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1448488146.535583019256591796875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do Not Create DSL for the Customer]]></title>
  <link>https://javax0.wordpress.com/2015/12/23/do-not-create-dsl-for-the-customer/</link>
  <pubDate>Wed, 23 Dec 2015 15:00:34 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1112</guid>
  <description/>
  <content:encoded><![CDATA[Domain Specific Language (DSL) solutions are many times created with the intent to give a tool to the hands of the customer representatives (business people) to do the configuration of the application on their own. Most of these attempts fail miserably: the DSL ends in the hands of the developers. (Sometimes there can be exceptions those I have never experienced.) Why can't business people use DSL?

That is because

<blockquote>customers are stupid.</blockquote>

 After all this is the rule number one when you are working in a support organization on L1 level. And it will never change. So long as long "never" means the time until you are the customer in a situation. In that case 

<blockquote>the customer is always right.</blockquote>

Right? Although it may seem funny, stupid or exagarating both of these ideas have some background and can be true to some limit no matter how contradicting they are.
 
The harsh and offending formulation "customers are stupid" comes from the fact that customers are not expert in your area. If you are a mechanic your customers do not know about the injectors and the valve settings. They just want the car running from A to B. If you are plumber your customers just want to have a shower and drink fresh water but they are not really interested nor knowledgable about fittings. If you are electrician your customers just want light and wiring is an unavoidable nuisance.
 
Customers are not stupid. They just see the world from a different angle and they do not know your profession. And this is very good, otherwise you would be jobless.
 
On the other side of the scale customers are not entirely right all the times. It is just the fact that they have the money you want to work for and if they are not satisfied they will not pay. 

<blockquote>Customers pay for the value they get and not for the work you do.</blockquote>

 Generally: you have to find a job where you can create great value with minimal work. Some people are good at it some are not that good.
 
You can fix their cars but it has to be a value for them. If you just refill the water in the screenwash: that is not a huge value as compared to the effort. They could do it themselves and actually today they do. Likewise if you are a plumber your service is not requested each time the client wants the water to run. Similarly there is no need for an electrician to switch the light on and off.
 
This is the idea of DSL. A switch on the wall is a DSL. Does it work?
 
Why do most of the DSL projects fail then?
 
What I see is that most of these project implement first the switch on the wall and the outlet to plug in the TV, washing machine and so on but then they start to go on and try to invent other tools that would support the reorganization of the wiring. Someting like a cross connection table at the electric center of the house where the customer can plug in wires to have 12V direct current in some of the outlets, 120V alternating current in other outlets and 220V in the guest room when visitors come from Europe.
 
I hope you get the point: DSL solutions become just too complex for the customers. First it starts off with a simple text file. Later on it is an Excell table. Then a whole buch of sheets with many columns. Even later somehow scripts emerge that help the editing and the conistency maintenance of the data. And it all supposed to be maintained by the customer.

The house will burn down! Call the firebrigade!
 
And you do call the firebrigade and you realize that you, as a programmer do nothing but edit XLS files and maintain scripts that edit XLS files and fix bugs that were introduced by the customer. To avoid that you invent new XLS files that the customers fills in and that the developers use as a definition manually entering, copy pasting data to the XLS that controls the application. (Btw: Excell could be anything else, some other tool, but it is just the fact of life: it is Excell.)
 
You wanted to focus on more advanced programming tasks and offload the everyday burden of configuration and you ended up editing XLS 10 hours a day. You made the right choice, didn't?
 
So what is the right way to do it? Are DSLs doomed and should not be created?
 
The fact is that you can create DSL for the customer but they have to be as simple as a light switch or a tap. You can build DSL that is more complex but do not expect a customer to use it. Layer the tasks, and separate who can do what so that everybody is working on tasks where he/she can have the most added value.

Yes, this is a simple advice that is hard to execute. But we can try.
 
 
 ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1112</wp:post_id>
  <wp:post_date>2015-12-23 16:00:34</wp:post_date>
  <wp:post_date_gmt>2015-12-23 15:00:34</wp:post_date_gmt>
  <wp:post_modified>2015-12-22 16:54:02</wp:post_modified>
  <wp:post_modified_gmt>2015-12-22 15:54:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-create-dsl-for-the-customer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/eszCPxSb2y5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18061794792]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6085444150587637760&type=U&a=zvQd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207034287668364";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/679678485388906496";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9399</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.99.48.140</wp:comment_author_IP>
    <wp:comment_date>2015-12-23 17:29:01</wp:comment_date>
    <wp:comment_date_gmt>2015-12-23 16:29:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just a side note: being always right means being insane. Since it cuts you off the feedback cycle. So calling the customer 'stupid' is a euphemism.

Otherwise I *mostly agree. Only mostly because I happen to work on a project where accountant are using excel tables to define some accountant stuff that I hardly understand. They've been operating like this for 20 years and they are fine with it. However, this is the 1st such example in my career.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1450888142]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450888141.0748040676116943359375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450889437.604775905609130859375;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18064340680]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1450889439]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1450889440.1675739288330078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1450888141]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Constructors, superconstructors and Swift]]></title>
  <link>https://javax0.wordpress.com/2015/12/30/constructors-superconstructors-and-swift/</link>
  <pubDate>Wed, 30 Dec 2015 15:00:06 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1123</guid>
  <description/>
  <content:encoded><![CDATA[Recently I was looking at the language tutorial of Swift. It is totally different from Java. It resembles more to C++ in its structure. It is compiled code, no VM, no garbage collection (it uses reference counting that is more like C++ smart pointers). At the same time it is a modern language that tries to get all the good constructs from other languages. Some part of the tutorial is easy to read when the construct is similar to Java. In that case terminology and the way the language designer was thinking is the same as in Java that I know well. In other cases the approach is totally different. In that case it is harder to understand the language construct but the same time there is some intellectual reward.

One such aspect is class constructor. It has lots of similarities to Java constructors. The functionality of the constructor is the same as  in Java: it has to initialize the object. Fields have to be initialized almost the same way as in Java. Though Java allows you to have non-final fields to keep some default value (zero or null), Swift requires that all fields are initialized or have explicit default values. Some way I can understand that restriction: Swift tries to get rid off the one million dollar mistake, the null value. (It calls it nil, and has build-in optional value handling.)

The interesting thing is how superclasses are initialized. In Java the super constructor has to be invoked by the constructor before any other code is executed. There is a good reason for it. The class inherits fields from the super class and before executing the super constructor the part of the object that belongs to the super class is not properly initialized. Initializer blocks make it even more complex, but the essence is the same.
<img src="https://javax0.files.wordpress.com/2015/12/childclass_java_-_javax_blog_-____github_javax_blog_.png" alt="Source Code showing syntax error calling super constructor too late" />

Swift on the other hand allows you to call the super constructor any time from the child constructor. You may think that Swift in this sense is not so restrictive. But it is a modern language and avoids all messy constructs, like uninitialized variables, half initialized objects or even implicite null values in variables. Knowing that I could soon realize reading the tutorial that Swift is not less restrictive. It has more complex rules.

Swift defines a two phase initialization process. It does not require that the very first thing an initializer does is invoking the super constructor, but it does not allow the initializer to do much before doing so. Very specifically the constructor can not access any of the fields in the first phase. 
<img src="https://javax0.files.wordpress.com/2015/12/main_swift_e28094_edited.png" alt="main_swift_â_Edited" width="630" height="191" class="alignleft size-full wp-image-1129" />
The only extra functionality is that this way the constructor can use the constructor arguments to decide which super constructor to invoke. This is not possible in Java.

These are the facts. The rest is subjective.

Should I miss this possibility in Java? Several years of experience show that we can program with the restrictions of Java successfully and I have never felt the lack of this feature as a huge burden.

At the same time I feel that Swift's more complex rules may be confusing and complex to learn and get experience with for a novice programmer.

But neither languages are for novice programmers, and also I got used to the restrictions of Java I live with. If you, as a programmer, get too much freedom from a programming language you also get the numerous possibilities to create bad code. Restrictions are good. Freedom is slavery. Or not? This may lead too far.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1123</wp:post_id>
  <wp:post_date>2015-12-30 16:00:06</wp:post_date>
  <wp:post_date_gmt>2015-12-30 15:00:06</wp:post_date_gmt>
  <wp:post_modified>2015-12-25 09:19:32</wp:post_modified>
  <wp:post_modified_gmt>2015-12-25 08:19:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>constructors-superconstructors-and-swift</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/KbkX5z5YwYm]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18250359390]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6087980777935556608&type=U&a=PQFJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207080866192798";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/682215117933527041";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Pointers in Java]]></title>
  <link>https://javax0.wordpress.com/2016/01/06/pointers-in-java/</link>
  <pubDate>Wed, 06 Jan 2016 15:00:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1145</guid>
  <description/>
  <content:encoded><![CDATA[Are there pointers in Java? The short answer is "no, there are none" and this seems to be obvious for many developers. But why is it not that obvious for others?
<ul>
	<li>
<a href="http://stackoverflow.com/questions/1750106/how-can-i-use-pointers-in-java">http://stackoverflow.com/questions/1750106/how-can-i-use-pointers-in-java</a>
</li>
	<li>
<a href="http://stackoverflow.com/questions/2629357/does-java-have-pointers">http://stackoverflow.com/questions/2629357/does-java-have-pointers</a>
</li>
	<li>
<a href="https://www.google.hu/search?q=pointers+in+java">https://www.google.hu/search?q=pointers+in+java</a></li>
</ul>

That is because the references that Java uses to access objects are very similar to pointers. If you have experience with C programming before Java it may be easier to think about the values that are stored in the variables as pointers that point to some memory locations holding the objects. And it is more or less ok. More less than more but that is what we will look at now.

<h1>Difference between reference and pointer</h1>

As <a href="http://stackoverflow.com/users/12960/brian-agnew">Brian Agnew</a> <a href="http://stackoverflow.com/questions/2629357/does-java-have-pointers">summarized</a> on stackoverflow there are two major differences.

<ol>
	<li>There is no pointer arithmetic</li>
	<li>References do not "point" to a memory location</li>
</ol>

<h2>Missing pointer arithmetic</h2>

When you have an array of a <tt>struct</tt> in C the memory allocated for the array contains the content of the structures one after the other. If you have something like

[sourcecode language="C"]
struct circle {
   double radius;
   double x,y;
}
struct circle circles[6];
[/sourcecode]

it will occupy <tt>6*3*sizeof(double)</tt> bytes in memory (that is usually 144 bytes on 64 bit architecture) in a continuous area. If you have something similar in Java, you need a class (<a href="http://cr.openjdk.java.net/~jrose/values/values-0.html">until we get to Java 10 or later</a>):

[sourcecode language="Java"]
class Circle {
   double radius;
   double x,y;
}
[/sourcecode]

and the array

[sourcecode language="Java"]
Circle circles[6];
[/sourcecode]

will need 6 references (48 bytes or so) and also 6 objects (unless some of them are null) each 24bytes data (or so) and <a href="http://stackoverflow.com/questions/26357186/what-is-in-java-object-header">object header</a> (16bytes). That totals to 288bytes on a 64bit architecture and the memory area is not continuous.

When you access an element, say <tt>circles[n]</tt> of the C language array the code uses pointer arithmetic. It uses the address stored in the pointer <tt>circles</tt> adds <tt>n</tt> times <tt>sizeof(struct circle)</tt> (bytes) and that is where the data is.

The Java approach is a bit different. It looks at the object <tt>circles</tt>, which is an array, calculates the <tt>n</tt>-th element (this is similar to C) and fetches the reference data stored there. After the reference data is at hand it uses that to access the object from some different memory location where the reference data leads.

Note that in this case the memory overhead of Java is 100% and also the number of memory reads is 2 instead of 1 to access the actual data.

<h2>References do not point to memory</h2>

Java references are not pointer. They contain some kind of pointer data or something because that comes from the nature of today computer architecture but this is totally up to the JVM implementation what it stores in a reference value and how it accesses the object it refers to. It could be absolutely ok though not too effective implementation to have a huge array of pointers each pointing to an object of the JVM and the references be indices to this array.

In reality JVM implement the references as a kind of pointer mix, where some of the bits are flags and some of the bits are "pointing" to some memory location relative to some area.

Why do JVMs do that instead of pointers?

The reason is the garbage collection. To implement an effective garbage collection and to avoid the fragmentation of the memory the JVM regularly moves the objects around in the memory. When memory occupied by objects not referenced anymore are freed and we happen to have a small object still used and referenced in the middle of a huge memory block available we do not want that memory block to be split. Instead the JVM moves the object to a different memory area and updates all the references to that object to keep track of the new location. Some GC implementations stop the other Java threads for the time these updates happen, so that no Java code uses a reference not updated but objects moved. Other GC implementations integrate with the underlying OS virtual memory management to cause page fault when such an access occurs to avoid the stopping of the application threads.

However the thing is that references are NOT pointers and it is the responsibility of the implementation of the JVM how it manages all these situations.

The next topic strongly related to this area is parameter passing.

<h1>Are parameters passed by value or passed by reference in Java?</h1>

The first programming language I studied at the uni was PASCAL invented by <a href="https://en.wikipedia.org/wiki/Niklaus_Wirth">Niklaus Wirth</a>. In this language the procedure and function arguments can be passed by value or by reference. When a parameter was passed by reference then the declaration of the argument in the procedure or function head was preceded by the keyword <tt>VAR</tt>. At the place of the use of the function the programmer is not allowed to write an expression as the actual argument. You have to use a variable and any change to the argument in the function (procedure) will have effect on the variable passed as argument.

When you program in language C you always pass a value. But this is actually a lie, because you may pass the value of a pointer that points to a variable that the function can modify. That is when you write things like <tt>char *s</tt> as an argument and then the function can alter the character pointed by <tt>s</tt> or a whole string if it uses pointer arithmetic.

In PASCAL the declaration of pass-by-value OR pass-by-reference is at the declaration of the function (or procedure). In C you explicitly have to write an expression like <tt>&amp;s</tt> to pass the pointer to the variable <tt>s</tt> so that the caller can modify it. Of course the function also has to be declared to work with a pointer to a whatever type <tt>s</tt> has.

When you read PASCAL code you can not tell at the place of the actual function call if the argument is passed-by-value and thus may be modified by the function. In case of C you have to code it at both of the places and whenever you see that the argument value <tt>&amp;s</tt> is passed you can be sure that the function is capable modifying the value of <tt>s</tt>.

What is it then with Java? You may program Java for years and may not face the issue or have a thought about it. Java solves the issue automatically? Or just gives a solution that is so simple that the dual pass-by-value/reference approach does not exist?

The sad truth is that Java is actually hides the problem, does not solve it. So long as long we work only with objects Java passes the objects by reference. Whatever expression you write to the actual function call when the result is an object a reference to the object is passed to the method. If the expression is a variable then the reference contained by the variable (which is the value of the variable, so this is a kind of pass-by-value) is passed.

When you pass a primitive (<tt>int</tt>, <tt>boolean</tt> etc) then the argument is passed by value. If the expression evaluated results a primitive then it is passed by value. If the expression is a variable then the primitive value contained by the variable is passed. That way we can say looking at the three example languages that

<ul>
	<li>PASCAL declares how to pass arguments</li>
	<li>C calculates the actual value where it is passed</li>
	<li>Java decides based on the type of the argument</li>
</ul>

Java, in my opinion, is a bit messy. But I did not realized it because this messiness is limited and is hidden well by the fact that the boxed versions of the primitives are immutable. Why would you care the underlying mechanism of argument passing if the value can not be modified anyway. If it is passed by value: it is OK. If it passed by reference, it is still okay because the object is immutable.

Would it cause problem if the boxed primitive values were mutable? We will see if and when we will have <a href="http://cr.openjdk.java.net/~jrose/values/values-0.html">value types</a> in Java.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1145</wp:post_id>
  <wp:post_date>2016-01-06 16:00:12</wp:post_date>
  <wp:post_date_gmt>2016-01-06 15:00:12</wp:post_date_gmt>
  <wp:post_modified>2017-08-24 09:15:08</wp:post_modified>
  <wp:post_modified_gmt>2017-08-24 08:15:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pointers-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_49ca50a4b1aa1d3f3026d15b37f7cb26</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cd3ffd2b89f64c08bd66a0a8eb576336</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13d03459b7be5385fcf3e2fb0b7805c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207127422076666";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/684751517610414082";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18474671626]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/fDUJRZAatFj]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6090517183174098944&type=U&a=xFXw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9586</wp:comment_id>
    <wp:comment_author><![CDATA[pail]]></wp:comment_author>
    <wp:comment_author_email>paulc@objectvision.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>81.187.253.174</wp:comment_author_IP>
    <wp:comment_date>2016-01-27 20:51:14</wp:comment_date>
    <wp:comment_date_gmt>2016-01-27 19:51:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Java is pass-by-value. There is no pass-by-reference because java does not have objects, only object references (which are passed by value).

'null' is a value (as demonstrated by the fact that it can be used in = and == expressions) and since it can be passed as any object type arg, args must therefore be references which are passed by value.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453924276.65552997589111328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[19190980865]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1453931148]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453931148]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453929514.6469669342041015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1453931148.097939014434814453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9552</wp:comment_id>
    <wp:comment_author><![CDATA[Value types in Java: why should they be immutable? | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/01/13/value-types-in-java-why-should-they-be-immutable/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.29</wp:comment_author_IP>
    <wp:comment_date>2016-01-13 16:02:36</wp:comment_date>
    <wp:comment_date_gmt>2016-01-13 15:02:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you may recall from the previous article I detailed that Java passes method arguments by reference or by value depending on the type of the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452701887]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452701888.051475048065185546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452697356.509481906890869140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9537</wp:comment_id>
    <wp:comment_author><![CDATA[Francis Ham]]></wp:comment_author>
    <wp:comment_author_email>kungfupfirsich@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104843154609502980160</wp:comment_author_url>
    <wp:comment_author_IP>91.143.102.5</wp:comment_author_IP>
    <wp:comment_date>2016-01-11 10:06:57</wp:comment_date>
    <wp:comment_date_gmt>2016-01-11 09:06:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In response to your last comment: Although you have explained things (mostly) correctly, you still seem to confuse how and what. One paragraph is particularly confusing. Let's examine it.

"So long as long we work only with objects Java passes by reference."
No, <strong>a</strong> reference is passed <strong>by value</strong>.

"Whatever expression you write to the actual function call when the result is an object a reference to the object is passed to the method."
Correct. And it's passed by value.

" If the expression is a variable then the reference contained by the variable (which is the value of the variable, so this is a kind of pass-by-value) is passed."
Not kind of but exactly pass-by-value.

The irony is that you explained pass-by-reference correctly earlier:
"... will have effect on the variable passed as argument".
That cannot be done in Java.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452503220.3994419574737548828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452503220]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18630645935]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1452503221]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9512</wp:comment_id>
    <wp:comment_author><![CDATA[assylias]]></wp:comment_author>
    <wp:comment_author_email>ylt@letallec.org</wp:comment_author_email>
    <wp:comment_author_url>http://assylias.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.31.243.225</wp:comment_author_IP>
    <wp:comment_date>2016-01-08 13:04:19</wp:comment_date>
    <wp:comment_date_gmt>2016-01-08 12:04:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And also this: http://www.yoda.arachsys.com/java/passing.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9511</wp:comment_parent>
    <wp:comment_user_id>22959887</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18540060907]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1452259714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452259714.0245740413665771484375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452259714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452254659.9319820404052734375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"assylias";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9509</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>213.163.40.33</wp:comment_author_IP>
    <wp:comment_date>2016-01-08 10:58:57</wp:comment_date>
    <wp:comment_date_gmt>2016-01-08 09:58:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I really like it: a simple explanation of a complex situation.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452247139]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1452247141]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452247139.82746601104736328125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9510</wp:comment_id>
    <wp:comment_author><![CDATA[Francis Ham]]></wp:comment_author>
    <wp:comment_author_email>kungfupfirsich@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104843154609502980160</wp:comment_author_url>
    <wp:comment_author_IP>91.143.102.5</wp:comment_author_IP>
    <wp:comment_date>2016-01-08 12:58:32</wp:comment_date>
    <wp:comment_date_gmt>2016-01-08 11:58:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In Java arguments are passed by value. Always. Structs are value types whereas classes are reference types. Comparing them to make your point is not the best of ideas.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452258716]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452258135.2888660430908203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[104843154609502980160]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18539611312]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1452258716]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452254314.7743771076202392578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452258716.91594600677490234375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9511</wp:comment_id>
    <wp:comment_author><![CDATA[assylias]]></wp:comment_author>
    <wp:comment_author_email>ylt@letallec.org</wp:comment_author_email>
    <wp:comment_author_url>http://assylias.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.31.243.225</wp:comment_author_IP>
    <wp:comment_date>2016-01-08 13:02:15</wp:comment_date>
    <wp:comment_date_gmt>2016-01-08 12:02:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Java is always pass-by-value - in the case of Objects, it is the reference itself that is passed by value. Saying that objects are passed by reference would imply that when you write <code>void m(Dog d) { d = new Dog(); }</code>, the Dog in the calling code would now refer to a new Dog, which is not the case... See for example: http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>22959887</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452254536.8400690555572509765625;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"assylias";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18539672880]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1452258852]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452258852.31369304656982421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452258135.3831241130828857421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452258852]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9513</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.240</wp:comment_author_IP>
    <wp:comment_date>2016-01-08 14:28:34</wp:comment_date>
    <wp:comment_date_gmt>2016-01-08 13:28:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am very certain that I described the topic detailed and clear. I do not want to argue about if the explanation "objects are passed by reference" or "objects are not passed at all" is the better. I personally vote for the first.

The referenced web pages underline the statement of my article that there is a lot of confusion about this issue and thing will become more confusing if/when value types are going to be introduced.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9512</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452259714.2457630634307861328125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18540061032]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1452259714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452259714]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11420</wp:comment_id>
    <wp:comment_author><![CDATA[turner2448]]></wp:comment_author>
    <wp:comment_author_email>turner2448@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://turner2448.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>87.81.141.128</wp:comment_author_IP>
    <wp:comment_date>2017-09-09 11:28:10</wp:comment_date>
    <wp:comment_date_gmt>2017-09-09 10:28:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Incorrect. Java is pass by value. Always. No ifs, no buts.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>47308895</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504952890.3779599666595458984375;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"turner2448";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[9110297659]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504953001]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504953001]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504953001.527966022491455078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Value types in Java: why should they be immutable?]]></title>
  <link>https://javax0.wordpress.com/2016/01/13/value-types-in-java-why-should-they-be-immutable/</link>
  <pubDate>Wed, 13 Jan 2016 15:00:39 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1158</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>Value types need not be immutable. But they are.</blockquote>

In the previous post I discussed the difference between pointers and references in Java and how the method parameters are passed (passed-by-value or passed-by-reference). These are strongly related to value types that do not exist in Java (yet).

There is a <a href="http://cr.openjdk.java.net/~jrose/values/values-0.html">proposal</a> from John Rose, Brian Goetz, and Guy Steele detailing how value types will/may work in Java and also there are some good articles about it. I have read <a href="http://www.beyondjava.net/blog/java-8-types-revamping-javas-type-system/">"Value Types: Revamping Javaâs Type System"</a> that I liked a lot and I recommend to read. If the proposal is too dense for you to follow the topic you can read that article first. It summarizes very much the background, what value types are, advantages, why it is a problem that Java does not implement value types and why it is not trivial. Even though the terminology "value type" may also be used to denote something different I will use it as it is used in the proposal and in the article.

<h1>How do we pass arguments vs. what do we store in variables</h1>

As you may recall from the <a href="https://javax0.wordpress.com/2016/01/06/pointers-in-java/">previous article</a> I detailed that Java passes method arguments by reference or by value depending on the type of the argument:

<ul>
	<li>reference is passed when the argument is an object</li>
	<li>by-value when the argument is primitive.</li>
</ul>

There are some comments <a href="https://javax0.wordpress.com/2016/01/06/pointers-in-java/">on the original</a> post and also on the <a href="http://www.javacodegeeks.com/2016/01/pointers-in-java.html">JCG republish</a> that complain about my terminology about passing an argument by-reference. The comments state that arguments are always passed by value because the variables already contain reference to the objects. In reality variables, however contain bits. Even though this is important to know how we imagine those bits, and what terminology we use when we communicate. We can either say that

<ol>
	<li>class variables contain objects and in that case we pass these objects to methods by-reference</li>
	<li>or we can say that the variables contain the reference and in that case we pass the value of the variables.</li>
</ol>

If we follow the thinking #1 then the argument passing is by-value and/or by-reference based on the actual nature of the argument (object or primitive). If we follow the thinking #2 then the variables store reference and/or values based on the nature of their type. I personally like to think that when I write

[sourcecode]
Triangle triangle;
[/sourcecode]

then the variable <tt>triangle</tt> is a triangle and not a reference to a triangle. But it does not really matter what it is in my brain. In either of the cases #1 or #2 there is a different approach for class types and for primitives. If we introduce value types to the language the difference becomes more prevalent and important to understand.

<h1>Value types are immutable</h1>

I explained that the implicit argument passing based on type does not cause any issue because primitives are immutable and therefore, when passed as method argument, they could not be changed even if they were passed by reference. So we usually do not care. Value types are not different. Value types are also immutable because they are values and values do not change. For example the value of PI is 3.145926... and it never changes.

However, what does this immutability mean in programming? Values be real numbers, integers or compound value types are all represented in memory as bits. Bits in memory (unless memory is ROM) can be changed.

In case of an object immutability is fairly simple. There is an object somewhere in the universe that we can not alter. There can be numerous variables holding the object (having a reference to it) and the code can rely on the fact that the bits at the memory location where the actual value of the object is represented are not changed (more or less).

In case of value types this is a bit different and this difference comes from the different interpretation of the bits that represent a value type from the same bits when they may represent an object.

<h1>Value types have no identity</h1>

Value types do not have identity. You can not have two <tt>int</tt> variables holding the value <tt>3</tt> and distinguish one from the other. They hold the same value. This is the same when the type is more complex.

Say I have a value type that has two fields, like

[sourcecode]
ValueType TwoFields {
  int count;
  double size;
  }
[/sourcecode]

and say I have two variables

[sourcecode]
 Twofields tF1 = new TwoFields(1,3.14)
 Twofields tF2 = new TwoFields(1,3.14)
[/sourcecode]

I can not tell the variables <tt>tF1</tt> and <tt>tF2</tt> from other. If they were objects they would be <tt>equals</tt> to each other but not <tt>==</tt> to each other. In case of value types there is not <tt>==</tt> as they have no identity.

If <tt>TwoFields</tt> is immutable class I can not or should not write

[sourcecode]
 TwoFields tF;
  ...
 tF.count++;
[/sourcecode]

or some similar construct. But I still can write

[sourcecode]
 TwoFields tF;
  ...
 tF = new TwoFields(tF.count+1, tF.size)
[/sourcecode]

which leaves the original object intact. If <tt>TwoFields</tt> is a value type then either of the constructs, whichever is allowed, will create a new value.

<h1>Value types as arguments</h1>

How are value types passed as method argument then? Probably copying the value to the parameter variable. Possibly passing some reference. It is, however, up to the compiler (be it Java, or some other language). Why?
<ul>
	<li>Value types are usually small. At least they should be small. A huge value type looses the advantages that value types deliver but have the disadvantages.</li>
	<li>Value types are immutable so there is no problem copying them just like in case of primitives. They can be passed by value the same way as "everything in Java is passed by value".</li>
        <li>They have no identity, there can be no references to them.</li>
</ul>

But this is not only about passing them as arguments. This is also how variables are assigned. Look at the code

[sourcecode]
 Twofields tF1 = new TwoFields(1,3.14)
 Twofields tF2 = new TwoFields(1,3.14)
[/sourcecode]

and compare it to

[sourcecode]
 Twofields tF1 = new TwoFields(1,3.14)
 Twofields tF2 = tF1
[/sourcecode]

If <tt>TwoFields</tt> is a value type there should be no difference between the two versions. They have to produce the same result (though may not through the same code when compiled). In this respect there is no real difference between argument passing and variable assignment. Values are copied even if the actual variables as bits contain some references to some memory locations where the values are stored.

<h1>Summary</h1>

As I started the article: value types need not be immutable. This is not something that the language designers decide. They are free to implement something that is mutable, but in that case it will not be value type. Value types are immutable.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1158</wp:post_id>
  <wp:post_date>2016-01-13 16:00:39</wp:post_date>
  <wp:post_date_gmt>2016-01-13 15:00:39</wp:post_date_gmt>
  <wp:post_modified>2016-01-13 13:46:35</wp:post_modified>
  <wp:post_modified_gmt>2016-01-13 12:46:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>value-types-in-java-why-should-they-be-immutable</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Fm3bULfs9KG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207177065357717";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/687288660501245952";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18709283366]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6093054323632201729&type=U&a=nmyt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9583</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.156.56</wp:comment_author_IP>
    <wp:comment_date>2016-01-26 18:11:46</wp:comment_date>
    <wp:comment_date_gmt>2016-01-26 17:11:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My opinion is that the disservice was done when it was first declared that Java argument passing is by value. It is a simplification and as soon as value types will come into picture you will run out of terminology. How would you call passing a value type as an argument when not the reference to
memory piece holding the compound type is pushed on the stack but the actual value? That is "real" passing by value and what Java does with objects will be called, perhaps pass by reference value or something.

Generally we are discussing terminology as far as I can understand the situation. Many novice can be confused by the complexity of the real world, but it does not justify oversimplification.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453828306]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1453828306.4302508831024169921875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1453828306]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9559</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.238</wp:comment_author_IP>
    <wp:comment_date>2016-01-15 10:22:37</wp:comment_date>
    <wp:comment_date_gmt>2016-01-15 09:22:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Martin Grajcar is your name. Even though we write

"Martin wrote: ...."

And not

"The person referenced by the name Martin wrote: ..."

When I see "Martin Grajcar" I like to think about the intelligent and clever person making the comments and not the reference (a.k.a. a name).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9558</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1452849757]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1452849757.8268740177154541015625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452849757]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9558</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>188.120.199.45</wp:comment_author_IP>
    <wp:comment_date>2016-01-15 05:49:21</wp:comment_date>
    <wp:comment_date_gmt>2016-01-15 04:49:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I personally like to think that when I write

[sourcecode language="java"]
Triangle triangle;
[/sourcecode]

, then the variable triangle is a triangle and not a reference to a triangle.

Just write

[sourcecode language="java"]
Triangle triangle2 = triangle;
[/sourcecode]

to see that it's wrong. You have two variables, but just a single triangle. So the statement that variables are objects rather than references is equivalent to

[sourcecode]
2 = 1
[/sourcecode]

.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1452833361]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452833361.698050022125244140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1452833362]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9588</wp:comment_id>
    <wp:comment_author><![CDATA[Paul Bjorkstrand]]></wp:comment_author>
    <wp:comment_author_email>paul.bjorkstrand@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>76.113.171.248</wp:comment_author_IP>
    <wp:comment_date>2016-01-28 01:32:48</wp:comment_date>
    <wp:comment_date_gmt>2016-01-28 00:32:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As it has been stated in much of the documentation and many, many write-ups, Java is fully pass-by-value. The way Java passes "objects" is by passing the object-reference, by-value, to  called methods. Java object-references are a special case <em>value-type</em> (yes, they are value types) that allow you to easily access another location in memory. Another name for this concept is: a pointer. Regardless whether it is called (object-)pointer or (object-)reference, the semantics of Java is the same.

A resource that I found useful when I try to explain the difference to newbies to Java is http://javadude.com/articles/passbyvalue.htm . I think that page has a pretty good write up explaining the difference between pass-by-value vs pass-by-reference and how it pertains to Java.

Cheers!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9583</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1453941171]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453941171.0398590564727783203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453941170]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9581</wp:comment_id>
    <wp:comment_author><![CDATA[illegalmethod]]></wp:comment_author>
    <wp:comment_author_email>gehtdichnichtsan@gmx.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.111.114.59</wp:comment_author_IP>
    <wp:comment_date>2016-01-26 16:45:14</wp:comment_date>
    <wp:comment_date_gmt>2016-01-26 15:45:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Parameters in Java are always passed by value. Otherwise you could write Methods like this:
[sourcecode language="java"]
public static void swap(Integer a, Integer b) {
    Integer temp = a;
    a = b;
    b = temp;
}
[/sourcecode]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453823115.606751918792724609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1453823455]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453823455]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1453823456.10816192626953125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9582</wp:comment_id>
    <wp:comment_author><![CDATA[Paul Bjorkstrand]]></wp:comment_author>
    <wp:comment_author_email>paul.bjorkstrand@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>144.15.255.228</wp:comment_author_IP>
    <wp:comment_date>2016-01-26 17:28:22</wp:comment_date>
    <wp:comment_date_gmt>2016-01-26 16:28:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I understand that you are trying to "simplify" the thought of how Java passes arguments. It doesn't change the fact that you are incorrectly using the phrase "pass by reference". What does the following print to the console?

[sourcecode language="java"]
void testByReference() {
 String variable = &quot;apple&quot;;
 setBananaByReference(variable);

System.out.println(variable);
}

void setBananaByReference(String parameter) {
  parameter = &quot;banana&quot;;
}
[/sourcecode]

If Java is pass by reference, then it would print "banana". That is how pass by reference is defined: taking an action on the <em>variable</em> that is passed in. This is not the case with Java.

In Java, the line parameter = "banana"; does not actually set the value of the passed in <em>variable</em>, it sets the value of the parameter. Yes, if the object which is referenced by the parameter is mutable, you can take action on the internal parts of the referenced object, but you cannot, CANNOT change what variable points to. No matter how much you try, variable can never be changed in this manner.

The following code is a test of this invariant:

[sourcecode language="java"]
void testByValue() {
  String variable = &quot;apple&quot;;
  String temp = variable;

assert variable == temp;
  setBananaByReference(variable);
  assert variable == temp;
}

void setBananaByReference(String parameter) {
  parameter = &quot;banana&quot;;
}
[/sourcecode]

By saying Java is anything other than pass by value is not just somewhat incorrect, it is doing a disservice to anyone who is learning the difference between pass by reference and pass by value. Regardless your opinion on the terminology, pass by reference has a specific definition, pass by value has a specific definition. Coopting them in this manner, continues to propagate the misinformation that Java is pass by reference.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1453826389]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1453825703.8552000522613525390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1453826389]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1453826389.703545093536376953125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9806</wp:comment_id>
    <wp:comment_author><![CDATA[Comparing Golang with Java | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/04/27/comparing-golang-with-java/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.241</wp:comment_author_IP>
    <wp:comment_date>2016-04-27 16:01:33</wp:comment_date>
    <wp:comment_date_gmt>2016-04-27 15:01:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] more than that. Go lang has interfaces and structs. But they are not really classes. They are value types. They are passed by value and wherever they are stored in memory the data there is only the pure [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461769293.93647098541259765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1461781095]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1461781095.4416599273681640625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461773016.261929988861083984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11128</wp:comment_id>
    <wp:comment_author><![CDATA[GolangãJavaã¨æ¯ã¹ã¦ã¿ãï½Javaæå¥½å®¶ãGoã®æ©è½ãè¦ãã¨ãã®ç¬¬ä¸å°è±¡ï½ | FAworksãã­ã°]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://fa-works.com/blog/comparing-golang-with-java</wp:comment_author_url>
    <wp:comment_author_IP>54.65.206.141</wp:comment_author_IP>
    <wp:comment_date>2017-06-22 03:48:21</wp:comment_date>
    <wp:comment_date_gmt>2017-06-22 02:48:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] é¢æ°ã¨ã¯ã­ã¼ã¸ã£ãç¬¬ä¸ç´ãªãã¸ã§ã¯ãã§ããGoã¯ãå°ãªãã¨ãJavaScriptã®ãããªãªãã¸ã§ã¯ãæåã ããããå®éã¯ããä»¥ä¸ã ãGolangã«ã¯ã¤ã³ã¿ã¼ãã§ã¼ã¹ã¨æ§é ä½ããããã ãããããã¯å¥ã«ã¯ã©ã¹ã¨ããããã§ã¯ãªããå¤åã ããããã«å¤ãæ¸¡ãããã¡ã¢ãªã®ã©ãã«æ ¼ç´ããã¦ãã¦ãããªãã¸ã§ã¯ãããããªã©ã®ãªãç´ç²ãªãã¼ã¿ã®ã¿å­å¨ãããGoã®æ§é ä½ã¯ãCè¨èªã®æ§é ä½ã¨éå¸¸ã«è¯ãä¼¼ã¦ããããã£ã¼ã«ããå«ãããã¨ã¯ã§ããããäºãã«æ¡å¼µãããã¨ããã¡ã½ãããå«ãããã¨ã¯ã§ããªãããªãã¸ã§ã¯ãæåã«ã¯ããéã£ãã¢ãã­ã¼ããåãããã [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1498099702.626483917236328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1498119876]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1498105050.610454082489013671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1498119876.1205561161041259765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32050</wp:comment_id>
    <wp:comment_author><![CDATA[golangä¸java_Golangä¸Javaæ¯è¾ | ç®æ³ç½]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://itpcb.com/a/2121123</wp:comment_author_url>
    <wp:comment_author_IP>43.128.14.191</wp:comment_author_IP>
    <wp:comment_date>2022-01-23 02:57:46</wp:comment_date>
    <wp:comment_date_gmt>2022-01-23 01:57:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Go langå·ææ¥å£åç»æã ä½æ¯å®ä»¬å¹¶ä¸æ¯çæ­£çè¯¾ç¨ã å®ä»¬æ¯å¼ç±»å ã [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1644171812.233054;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643052391.278948;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643052410.939375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643052445.367994;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1643052387]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643052387.963506;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642908420.693857;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642903067.69553;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Creating a proxy object using cglib]]></title>
  <link>https://javax0.wordpress.com/2016/01/27/creating-a-proxy-object-using-cglib/</link>
  <pubDate>Wed, 27 Jan 2016 15:00:24 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1184</guid>
  <description/>
  <content:encoded><![CDATA[In the <a href="https://javax0.wordpress.com/2016/01/20/java-dynamic-proxy/">previous post</a> I was talking about the standard Java based proxy objects. These can be used when you want to have a method invocation handler on an object that implements an interface. The Java reflection proxy creation demands that you have an object that implements the interface. The object we want to proxy is out of our hand, it does not implement the interface that we want to invoke from our handler and still we want to have a proxy.

<h1>When do we need proxy to objects w/o interface?</h1>

This is a very common case. If ever we have a JPA implementation e.g. Hibernate that implements lazy loading of the records. For example the audit log records are stored in a table and each record, except the first one has a reference to the previous item. Something like

[sourcecode language="java"]
class LinkedAuditLogRecord {
  LinkedAuditLogRecord previous;
  AuditLogRecord actualRecord;
}
[/sourcecode]

Loading a record via JPA will return an object <tt>LinkedAuditLogRecord</tt> which contains the previous record as an object and so on until the first one that probably has <tt>null</tt> in the field named <tt>previos</tt>. (This is not an actual code.) Any JPA implementation grabbing and loading the whole table from the start to the record of our interest would be an extremely poor implementation. Instead the persistence layer loads the actual record only and creates a proxy object extending <tt>LinkedAuditLogRecord</tt> and that is what the field <tt>previous</tt> is going to be. The actual fields are usually private fields and if ever our code tries to access the previous record the proxy object will load it that time. This is lazy loading in short.

But how do the JPA implementations create proxies to objects of classes that do not implement interfaces? Java reflection proxy implementation can not do that and thus JPA implementation uses something different. What they usually use is cglib.

<h1>What is cglib</h1>

Cglib is an open source library that capable creating and loading class files in memory during Java run time. To do that it uses Java byte-code generation library 'asm', which is a very low level byte code creation tool. I will not dig that deep in this article.

<h1>How to use cglib</h1>

To create a proxy object using cglib is almost as simple as using the JDK reflection proxy API. I created the same code as the last week article, this time using cglib:

[sourcecode language="java"]
package proxy;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

import java.lang.reflect.Method;

public class CglibProxyDemo {

    static class Original {
        public void originalMethod(String s) {
            System.out.println(s);
        }
    }

    static class Handler implements MethodInterceptor {
        private final Original original;

        public Handler(Original original) {
            this.original = original;
        }

        public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
            System.out.println(&quot;BEFORE&quot;);
            method.invoke(original, args);
            System.out.println(&quot;AFTER&quot;);
            return null;
        }
    }

    public static void main(String[] args){
        Original original = new Original();
        MethodInterceptor handler = new Handler(original);
        Original f = (Original) Enhancer.create(Original.class,handler);
        f.originalMethod(&quot;Hallo&quot;);
    }
}
[/sourcecode]

The difference is that name of the classes are a bit different and we do not have an interface.

It is also important that the proxy class extends the original class and thus when the proxy object is created it invokes the constructor of the original class. In case this is resource hungry we may have some issue with that. However this is something that we can not circumvent. If we want to have a proxy object to an already existing class then we should have either an interface or we have to extend the original class, otherwise we just could not use the proxy object in place of the original one.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1184</wp:post_id>
  <wp:post_date>2016-01-27 16:00:24</wp:post_date>
  <wp:post_date_gmt>2016-01-27 15:00:24</wp:post_date_gmt>
  <wp:post_modified>2016-01-26 22:24:41</wp:post_modified>
  <wp:post_modified_gmt>2016-01-26 21:24:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-a-proxy-object-using-cglib</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/3VAfajiRxFC]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207263977050455";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/692362811259768832";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19179516488]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6098128476475314179&type=U&a=iWjn]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9599</wp:comment_id>
    <wp:comment_author><![CDATA[Java Weekly 5/16: cglib, Hibernate performance, free ebook]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.thoughts-on-java.org/java-weekly-516/</wp:comment_author_url>
    <wp:comment_author_IP>162.243.77.193</wp:comment_author_IP>
    <wp:comment_date>2016-02-01 05:55:42</wp:comment_date>
    <wp:comment_date_gmt>2016-02-01 04:55:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If you want to create a dynamic proxy of an object via reflection, the reflection API requires your object to implement an interface. But there are also situations where you need a proxy of an object which doesn&#8217;t implement an interface. In these cases, you have to use byte-code generation to create the proxy.Â Peter Verhas explains in his recent post how you can do that with cglib:Â Creating a proxy object using cglib. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454306379.7297420501708984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1454312909]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1454312909.8360080718994140625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454302543.50224208831787109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9686</wp:comment_id>
    <wp:comment_author><![CDATA[grimmeld]]></wp:comment_author>
    <wp:comment_author_email>dammkewl@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>145.131.196.98</wp:comment_author_IP>
    <wp:comment_date>2016-03-15 13:33:27</wp:comment_date>
    <wp:comment_date_gmt>2016-03-15 12:33:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What about constructors with parameters? Is there away to provide objects to inject into the super(...) call the proxy invokes during its constructor?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3074261</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458045207]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458045207.604763031005859375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"grimmeld";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1458045207]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Creating proxy object using djcproxy]]></title>
  <link>https://javax0.wordpress.com/2016/02/03/creating-proxy-object-using-djcproxy/</link>
  <pubDate>Wed, 03 Feb 2016 15:00:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1193</guid>
  <description/>
  <content:encoded><![CDATA[During the last weeks I have shown how to create a proxy object using Java reflection API and cglib. In this article I will show you how this can be done using djcproxy.

<blockquote>Oh, not again, another proxy implementation!</blockquote>

What is the point to write about this in addition to the selfish fact that I created this proxy? The point is that this is a proxy that is written in Java, it creates Java code that can be examined. It also compiles and loads the created Java classes on the fly so it is also usable but the main advantage is that you can easily get a good insight how a dynamic proxy works. At least a bit easier than digging around the code of cglib, which is creating byte codes directly.

<h1>How to use it</h1>

You can get the source from <a href="https://github.com/verhas/djcproxy">github</a> or you can just add the dependency to you project maven pom.

[sourcecode language="xml"]
&lt;dependency&gt;
	&lt;groupId&gt;com.javax0&lt;/groupId&gt;
	&lt;artifactId&gt;djcproxy&lt;/artifactId&gt;
	&lt;version&gt;2.0.3&lt;/version&gt;
&lt;/dependency&gt;
[/sourcecode]

After that you can use the following code:

[sourcecode language="java"]
class A {
  public int method() {
  return 1;
  }
}
class Interceptor implements MethodInterceptor {

  @Override
  public Object intercept(Object obj, Method method, Object[] args,
    MethodProxy mproxy) throws Exception {
      if (method.getName().equals(&quot;toString&quot;)) {
        return &quot;interceptedToString&quot;;
      }
      return 0;
  }
}

 ...

    A a = new A();
    ProxyFactory&lt;A&gt; factory = new ProxyFactory&lt;&gt;();
    A s = factory.create(a, new Interceptor());
[/sourcecode]

<sub>This code can be found in the tests of the project in GitHub. This is an edited abbreviated version prone to editing errors.</sub>

The class 'A' is the original class and when we want to create a new proxy object we create a proxy to an already existing object. This is different from reflection or cglib. In case of cglib you create a proxy object and it "contains" the original object. It is not really a containment in OO terms, because the proxy class extends the original class. However because of this extending the proxy object is also an instance of the original class. Cglib does not really care which class instance (object) you want to intercept. You can inject a reference to any object instance to your interceptor if you want. Djcproxy uses a different approach and it does that for you and in your interceptor you will get this object passed as argument. This is why you have to instantiate the object in line 20.

The <tt>Interceptor</tt> implements the interface <tt>MethodInterceptor</tt> also provided in the library. It has only one method: <tt>intercept</tt>, which is invoked when the proxy object method is called. The arguments are
<ul>
	<li><tt>obj</tt> - the original object</li>
	<li><tt>method</tt> - the method that was invoked in the proxy object</li>
	<li><tt>args</tt> - the arguments that were passed to the method call on the proxy object. Note that primitive arguments will be boxed.</li>
	<li><tt>mproxy</tt> - the method proxy that can be used to call the method on the original object or on just any other object of the same type</li>
</ul>

This is all about how to use this library. The next thing is to have a look at what is generated so that you can get a better understanding how a proxy works. Insight never hurts, even if you use a different proxy. Many times debugging or just generating better code is easier when you know the principles of a library you use.

While cglib gives you a static factory method to create new objects djcproxy requires that you create a proxy factory. This is on line numbered above 21. If you want to use it the same way as you used cglib you can declare a static <tt>ProxyFactory</tt> field in the class where you want to use the factory from. On the other hand it is possible to have different factories in different parts of the code. Although the advantage of it is rare, still I believe it is a cleaner approach than providing static factory method.

<h1>How does the proxy work?</h1>

The extra thing in this package is that it lets you get access to the generated source. You can insert the lines

[sourcecode language="java"]
    String generatedSource = factory.getGeneratedSource();
    System.out.println(generatedSource);
[/sourcecode]

to print out the generated proxy class which is after some formatting is this:

[sourcecode language="java"]
package com.javax0.djcproxy;

class PROXY$CLASS$A extends com.javax0.djcproxy.ProxyFactoryTest.A implements com.javax0.djcproxy.ProxySetter {
    com.javax0.djcproxy.ProxyFactoryTest.A PROXY$OBJECT = null;
    com.javax0.djcproxy.MethodInterceptor PROXY$INTERCEPTOR = null;

    public void setPROXY$OBJECT(java.lang.Object PROXY$OBJECT) {
        this.PROXY$OBJECT = (com.javax0.djcproxy.ProxyFactoryTest.A) PROXY$OBJECT;

    }

    public void setPROXY$INTERCEPTOR(com.javax0.djcproxy.MethodInterceptor PROXY$INTERCEPTOR) {
        this.PROXY$INTERCEPTOR = PROXY$INTERCEPTOR;

    }

    PROXY$CLASS$A() {
        super();

    }

    private com.javax0.djcproxy.MethodProxy method_MethodProxyInstance = null;

    @Override
    public int method() {

        try {
            if (null == method_MethodProxyInstance) {
                method_MethodProxyInstance = new com.javax0.djcproxy.MethodProxy() {
                    public java.lang.Object invoke(java.lang.Object obj, java.lang.Object[] args) throws Throwable {
                        return ((com.javax0.djcproxy.ProxyFactoryTest.A) obj).method();

                    }
                };
            }
            return (int) PROXY$INTERCEPTOR.intercept(
                    PROXY$OBJECT, PROXY$OBJECT.getClass().getMethod(&quot;method&quot;, new Class[]{}),
                    new Object[]{}, method_MethodProxyInstance);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }

    }


... other overridden methods deleted ...

}
[/sourcecode]

Note that the class <tt>A</tt> is a static nested class of <tt>ProxyFactoryTest</tt> for this generated code.

The interesting code is the overriding of the method <tt>method()</tt>. (Sorry for the name. I have no fantasy to have a better name for a method that does nothing.) Let's skip the part where the method checks if there is already a <tt>MethodProxy</tt> instance and if is missing it creates one. The method <tt>method()</tt> actually calls the interceptor object that we defined, passing the proxied object, the reflective method object, the arguments and also the method proxy.

<h1>What is the method proxy</h1>

The name may be confusing first because we already have an "object" proxy. There is a separate method proxy for each method of the original class. These can be used to invoke the original method without reflective call. This speeds up the usage of the proxies. You can also find this call and a similar mechanism in cglib.

<h1>Notes</h1>

The implementation has some flows, for example the late method proxy instantiations have no advantage really but the same time may hurt in case of multi-thread execution of the proxies. It could also be possible to create a proxy object that not only extends a class but also implement arbitrary interfaces (perhaps some that is not even implemented by the extended class). The implementation is used in some other hobby opensource project also available on github about which I may write in the future. They are more demonstrative, educational and proof of concept projects than production code. If you have anything to say on the implementation, the ideas, or just any comments, please reward me with your comments.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1193</wp:post_id>
  <wp:post_date>2016-02-03 16:00:17</wp:post_date>
  <wp:post_date_gmt>2016-02-03 15:00:17</wp:post_date_gmt>
  <wp:post_modified>2016-02-04 19:46:36</wp:post_modified>
  <wp:post_modified_gmt>2016-02-04 18:46:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-proxy-object-using-djcproxy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/ircUp2iWqMq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19424959289]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6100664727543824384&type=U&a=kgtS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207310422851571";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/694899065239154688";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9666</wp:comment_id>
    <wp:comment_author><![CDATA[Java compile in Java | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2016/03/09/java-compile-in-java/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.48</wp:comment_author_IP>
    <wp:comment_date>2016-03-09 16:13:22</wp:comment_date>
    <wp:comment_date_gmt>2016-03-09 15:13:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post I wrote about how to generate a proxy during run-time and we got as far as having Java source code [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1457540489]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1457540489.3905160427093505859375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1457536402.8475449085235595703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[The Little Architect]]></title>
  <link>https://javax0.wordpress.com/2016/02/10/the-little-architect/</link>
  <pubDate>Wed, 10 Feb 2016 15:00:02 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1217</guid>
  <description/>
  <content:encoded><![CDATA[Uncle Bob published recently an article titled "<a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html">A Little Architecture</a>". The article is a conversation between a young developer and a senior (Uncle Bob himself presumably) about being software architect. The article starts with these sentences:

<blockquote>
<ul>
	<li><em>I want to become a Software Architect.</em></li>
	<li>That's a fine goal for a young software developer.</li>
	<li><em>I want to lead a team and <strong>make all the important decisions</strong> about databases and frameworks and web-servers and all that stuff.</em></li>
</ul>
</blockquote>

The next part asks the young developer to list what the important things are. However that is not the only thing that may be interesting in this last sentence. There is another thing, perhaps less technical, that hit me. The young developer says: <em>"make ... decisions"</em>.

That may be a mistake. You can interpret it differently what "making decision" means, but let me here tell you my thoughts about that. Some thoughts that were triggered by those two words. First of all here is a story, when I was making some decisions.

<h1>Story</h1>

Not really many years ago when I was much younger I was acting as system architect and <em>I made a decision</em> on how to store some content. Mainly text and not too large pictures. The obvious choice could be to use database and implement the CRUD operations. A database is always a good solution just as a scarf is always a good gift for Christmas. You love getting a new scarf for every Christmas, don't you?

On second thought, however the real power of database is when the content is to be searched, indexed and when transactions are executed. They are not really requirements for a media store. On the other hand versioning and user level access control was. I have previously implemented something like that in the past and that time we used SVN for content storage. And that worked fine. So I decided that we should go and use SVN this time also. The project was a success story. A little bit more story than success though. Halfway thriving towards the solution the back-end storage was replaced by a DB layer.

Why didn't SVN work?

The reason is simple. The developers did not like and understood the decision. They were not familiar with the technology. They used SVN for source code storage but they never used the programming API of it. Instead of using the Java client they forked external svn processes and they were checking out files individually. Displaying a directory containing 20 files was starting 20 processes one after the other. On that system that was approx. 20 seconds.

Okay. It could have been mended in different ways: there was not enough control on the use of the technology and there was a lack of professional code review as well as performance testing due time and so on. The root of the problems though was that <em>I made the decision</em>. I was acting like an omnipotent god, who knows it much better. I was not and I did not.

<h1>So what?</h1>

I could do it better discussing the solution more with the developers until we all agree on what the solution could have been. I could understand that the DB solution was better or they could understand how the SVN could have been used that way. We could make a decision together. I could make it so that they could make the decision.

<blockquote>A real architect never makes a decision.</blockquote>

A real architect works with the team developing the software asking the right questions making sure that the team make the right decision. 

<blockquote>Good architects approve the decision of the team and bear the responsibility. Bad architects make the decisions and blame the team.</blockquote>

Part of it is psychology. If the team makes the decision they are more likely to love the ideas than if they were force fed. They may come up with some ideas that you missed. Good architects recognize that and improve him/herself. Really good architect can even admit at this stage being wrong. On the contrary of what young developers think this increases the esteem. (Unless the architect is wrong more times than not, in which case he/she is not really a good architect.)

Asking the questions also reveal if the team is not prepared for some of the technologies. If they have to learn something new. It may turn out that education is in place or some more familiar technology is to be used. This may also be a smell that you wanted to use some niche technology that may require <a href="https://javax0.wordpress.com/2013/11/21/cheap-programing-language/">expensive developers</a> in the coming years to maintain the product. You better don't!

This does not mean that you should open the floodgates. You still should approve the decision and you should not approve a decision you can not live with. If the team makes a decision on some technology that you feel not good enough it means you have not asked the right questions. You should ask more. The responsibility is your.

I recommend that if you want to be a good architect let the team make the decision and help them forging a good one. Approve it and never blame them. That way they will not leave you in cold water. If you even bring free pizza now and then they may even love you.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1217</wp:post_id>
  <wp:post_date>2016-02-10 16:00:02</wp:post_date>
  <wp:post_date_gmt>2016-02-10 15:00:02</wp:post_date_gmt>
  <wp:post_modified>2016-02-08 20:54:27</wp:post_modified>
  <wp:post_modified_gmt>2016-02-08 19:54:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-little-architect</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/ag2mzshwTKd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207356565445107";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/697435069661605891";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19665929560]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6103200733589495808&type=U&a=Eh9V]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9618</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan]]></wp:comment_author>
    <wp:comment_author_email>info@superinformatiker.de</wp:comment_author_email>
    <wp:comment_author_url>http://ai1.lol</wp:comment_author_url>
    <wp:comment_author_IP>176.2.139.181</wp:comment_author_IP>
    <wp:comment_date>2016-02-10 17:41:50</wp:comment_date>
    <wp:comment_date_gmt>2016-02-10 16:41:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Im not impressed anymore, Peter. This is BS.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1455127120]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1455127120]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1455127121.1852180957794189453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1455122512.32061290740966796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do not (only) meet the budget]]></title>
  <link>https://javax0.wordpress.com/2016/05/13/do-not-only-meet-the-budget/</link>
  <pubDate>Fri, 13 May 2016 10:00:56 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1243</guid>
  <description/>
  <content:encoded><![CDATA[In a previous article I wrote
<blockquote><em>The actual decision </em>(of a software architect)<em> should lead to a solution that meets availability, performance, reliability, scalability, manageability and cost criteria. (Btw: the first six criteria should be met, the last one should be at least met and minimized, but that is a different story.)
</em></blockquote>
Many times the criteria are met and there is no intention to minimize the cost. "There is a budget and we have to fit into it." This is the approach teams follow. There are several reasons for it. But the reasons do not necessarily mean that the approach is ok. I may even accept the argument that this behaviour is unavoidable in large organizations.

Why is this approach bad?

When you sell something you want to sell it the highest price you can. Cost represents a minimum for the selling price: if the reachable price is lower than the cost to reproduce then production will stop. Budget is also a limiting factor. You go to the food shop and you buy the bread that meets your likes and is the cheapest among those if you have the money. If your money is limited you will select one that <a href="http://www.bbc.com/news/world-europe-36190557">you can pay for</a>. Why would one buy the more expensive if all other criteria they need are met?

(Do not start to talk about Apple products: feeling you are rich is also a need.)

The same is true for development projects even if the customer buying the development is in the same company. Your customer is either "business" if you are an in-house team or sales in case your company develops software for customes. In the latter case the "customer customers" are the customer of the company. The customer of the development team is sales. Same company. Customer provides the budget that you have to fit in but
<blockquote>nobody ever complained that a project was under budget.</blockquote>
I am not talking about lower budget commitment. All projects have risks and all risks have financial impact. One way of risk mitigation is to have contingency in the budget. But again: that is the budget and not the actual spending. Still teams, departments tend to fill their budget. Why do they do that? There can be several reasons and sure I will not be able list all possible.
<h1>Reasons to spend more</h1>
<h2>1</h2>
The more a department spends the more <a href="http://www.jah-lyrics.com/song/dominoes-justin-hinds-the-higher-the-monkey-climbs">important it looks</a>. I have seen such company. The company was a large expanding company heavily investing into assets, building infrastructure for years (like telecom infrastructure, roads or railways, I won't tell you which one) and the one who was building the more miles the better performer was. The measurement was the spent money and this culture remained when it was IT spending. Weird.
<h2>2</h2>
In some companies budget not spent will lessen the financing possibilities of the department for the future. If you, as a software architect can save up from the original estimates it means your estimation was not good. That will be taken into account next time you estimate. Thus the department rather wastes (usually towards end of the year) the budget left over than giving it back to treasury. It is like fixing a bug creating another. (How about unit testing departments?)
<h2>3</h2>
Some companies underfinance maintenance, developer trainings, education, equipment or some other IT related activities and departments tend to amend the situation from other sources: overbudgeting projects. Things certainly will happen. If you want to have something you do not pay for you will not get it. If you got it you paid for it just you do not know where, when and how much. Developers, architect, project managers may even not realize that they follow this practice in some cases. I have heard a few times the argument: <em>"We select the more expensive technology X for the project because this way we can learn it."</em> This is also crossfinancing. You use the project to finance the developer's education.

All these are bad practices. I do not need to explain the first example. The second is also quite obvious. The last one, cross financing is not that obvious.
<h1>Why cross financing is bad</h1>
When you select the more expensive technology (it may be more expensive because it has license fees, or needs more development, learning) you decide to invest the company money into something. As an architect it is not your responsibility. You may suggest that to management but you should not decide even if you are in the position that you can (unless you are also the management in a small company, but in that case you decide with your management hat on). It is only management who can decide how to invest the money. Investing into people is always a good investment even if they leave your company later. (But what if you do not invest and they stay?) But as a matter of fact management may see even more lucrative investment possibilities at that very moment.
<h1>Don't feel bad</h1>
Do I suggest that you rush to management now and ask them to lessen your budget? Do I think that you, as a software architect should feel bad if you fill the budget and cross finance?

Not at all. I said that crossfinancing is bad practice but I did not say that it is YOUR bad practice. It is a bad practice implemented in a company. The larger the organization is the more difficult it is to change it. And it is not your task, and more importantly you may not have the capabilities to do that.

The only thing you have to: know that you follow a practice that is not optimal, so to say. If there is any chance to improve it just a little bit, go for it. Everybody making one small step will save the world.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1243</wp:post_id>
  <wp:post_date>2016-05-13 11:00:56</wp:post_date>
  <wp:post_date_gmt>2016-05-13 10:00:56</wp:post_date_gmt>
  <wp:post_modified>2016-05-14 17:19:06</wp:post_modified>
  <wp:post_modified_gmt>2016-05-14 16:19:06</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-not-only-meet-the-budget</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22768258551]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/5theh1TpYkh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10208103119588494";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/731061829263228929";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Optimize the client for the server's sake]]></title>
  <link>https://javax0.wordpress.com/2016/02/17/optimize-the-client-for-the-servers-sake/</link>
  <pubDate>Wed, 17 Feb 2016 15:00:06 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1252</guid>
  <description/>
  <content:encoded><![CDATA[<h1>The Story</h1>

Once upon a time there was an application that was running on some server and the client functionality was implemented in HTML/CSS and JavaScript. The application was serving trillion (not literally) of users all hanging on the end of some phone lines talking to customers who were usually impatient and needed fast resolution to their problems. Typical call center application where speed is key.

<blockquote>Users were dissatisfied by the speed of the service.</blockquote>

No surprise. They usually are.
<p>
The application was delivering static resources for the client and JSON encoded data via REST interface. The underlying data structure was using relational database managed from Java using <a href="http://www.jooq.org/">JOOQ</a>. All good technologies were applied to make the service as fast as possible, still the performance was not accepted by the users. Users claimed that the system was slow, unusable, annoying, dead as fish frozen in a lake (yes, actually that was one of the expression we got in the ticketing system). We were aware that "unusable" was some exaggeration: after all there were thousands of queries running through the system daily. But "slow" and "annoying" are not measurable terms not to mention "dead fish". First thing first: we had to measure!

<h1>Measure</h1>

To address the issue we injected some JavaScript that was measuring the actual performance and it was also reporting the client measured response times to a separate server via some very simple and very fast REST service. We paid attention not to put extra load on the original servers not to make the situation even worse. The result showed that some of the results arrived to the client within 1sec, most of them in 2sec but there was actually a significant tail of the Poisson distribution with some responses as long as 15sec. We also had the measurement on the server side and the results were similar. On the server side we measured approximately 10% more transactions that were lost for the measurement on the client and the Poisson tail on the server contained responses up to 90sec. We did not pay attention to these differences until a bit later.

<blockquote>Meeting the requirements may not be enough.</blockquote>

The actual measurements showed that the response times were in-line with the requirement so we created a report showing all good and shiny hoping that this will settle the story. We presented the results to the management and we almost got fired. They were not interested in measurements and response time milisecs. All they cared was user satisfaction. (Btw: At this point I understood why the name "user acceptance test" is not "customer acceptance test".) We were blatantly directed not to mess with some useless measurements but go and stand by some of the users and experience direct eyes how slow the system was. It was a kind of shock. Standing by a user and "feeling" the system speed was not considered to be an engineering approach. But having nothing else in hand we did. And it worked!

<h1>Assess</h1>

We could see that some of the users were impatient. They clicked on a button and after a second when nothing happened they clicked on it again. It meant that the browser was sending a request to the server but before the response arrived the communication was cancelled on the client side and the request was sent again. Processing started from zero by the second button press but the wait time for the user accumulated.

<h1>Fix</h1>

To help the patience of the users we introduced some hour glass effect on the JavaScript level that signalled to the user that they have pressed a button and that the button press was handled by the application. Also the hour glass was moving "entertaining" the users and we also hid the button (and the whole filled in form) behind a semitransparent DIV layer actually preventing double submit. We did not have high expectations. Afterall it did not make the system faster. The users loved the new feature. First of all they felt that we care. They had been complaining and now we were doing something for them. Interestingly they also felt the system faster because of the rotating hour glass on the screen. End of story? Almost.

<h1>Learn</h1>

After a week or so we executed the measurement again. It was not a big effort since all the tooling was already there. What we experienced was that the 10% difference between the number of transactions measured on the client and on the server practically vanished. Probably these were the transactions when the user pressed the button second time. It was a full processing run on the server side, but was not reported by the client since the transaction as well as the measurement on the client side was cancelled. These got eliminated with the improved user interface that also decreased the load on the server by 10%. Which finally resulted slightly faster response times.
<p>
<em>Usual disclaimers apply.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1252</wp:post_id>
  <wp:post_date>2016-02-17 16:00:06</wp:post_date>
  <wp:post_date_gmt>2016-02-17 15:00:06</wp:post_date_gmt>
  <wp:post_modified>2016-02-17 15:44:16</wp:post_modified>
  <wp:post_modified_gmt>2016-02-17 14:44:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>optimize-the-client-for-the-servers-sake</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/SJB7f199HLu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19898090803]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6105739057629839360&type=U&a=4Rdt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207402248667159";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/699973398781259779";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9633</wp:comment_id>
    <wp:comment_author><![CDATA[GÃ¡bor LiptÃ¡k]]></wp:comment_author>
    <wp:comment_author_email>gabor.liptak@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/117570574002796472922</wp:comment_author_url>
    <wp:comment_author_IP>80.110.81.186</wp:comment_author_IP>
    <wp:comment_date>2016-02-19 21:39:44</wp:comment_date>
    <wp:comment_date_gmt>2016-02-19 20:39:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Preventing multiple submits of course is a good idea. It is usually a must for ajax based frontends.
Uncertainty is the worst for the customers. For example I am going mad, when I call some call center and the following is said: "Our agents are quite busy, please expect a longer wait". If it is clearly said: "You have to wait approximately 10 minutes", it is fine.
The same is with for example buying something at amazon. They say, that the delivery comes on Wednesday, when it is 80% that it can be delivered on Tuesday. The customer will be happy if it comes on Tuesday, when Wednesday was promised.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-W_Y_oOcFGbU/AAAAAAAAAAI/AAAAAAAABjE/c10M69kqnhA/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[117570574002796472922]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1455914385]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1455914385.6529710292816162109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1455914385]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java compile in Java]]></title>
  <link>https://javax0.wordpress.com/2016/03/09/java-compile-in-java/</link>
  <pubDate>Wed, 09 Mar 2016 15:00:36 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1285</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="https://javax0.wordpress.com/2016/02/03/creating-proxy-object-using-djcproxy/">previous post</a> I wrote about how to generate a proxy during run-time and we got as far as having Java source code generated. However to use the class it has to be compiled and the generated byte code to be loaded into memory. That is "compile" time. Luckily since Java 1.6 we have access the Java compiler during run time and we can, thus mix up compile time into run time. Though that may lead a plethora of awful things generally resulting unmaintainable self modifying code in this very special case it may be useful: we can compile our run-time generated proxy.

<h1>Java compiler API</h1>

The Java compiler reads source files and generates class files. (Assembling them to JAR, WAR, EAR and other packages is the responsibility of a different tool.) The source <em>files</em> and class <em>files</em> do not necessarily need to be real operating system files residing in a magnetic disk, SSD or memory drive. After all Java is usually good about abstraction when it comes to the run-time API and this is the case now. These files are some "abstract" files you have to provide access to via an API that can be disk files but the same time they can be almost anything else. It would generally be a waste of resources to save the source code to disk just to let the compiler running in the same process to read it back and to do the same with the class files when they are ready.

The Java compiler as an API available in the run-time requires that you provide some simple API (or SPI of you like the term) to access the source code and also to send the generated byte code. In case we have the code in memory we can have the following code (<a href="https://github.com/verhas/jscc/blob/master/src/main/java/com/javax0/jscc/Compiler.java">from this file</a>):

[sourcecode language="java"]
public Class&lt;?&gt; compile(String sourceCode, String canonicalClassName)
			throws Exception {
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		List&lt;JavaSourceFromString&gt; sources = new LinkedList&lt;&gt;();
		String className = calculateSimpleClassName(canonicalClassName);
		sources.add(new JavaSourceFromString(className, sourceCode));

		StringWriter sw = new StringWriter();
		MemoryJavaFileManager fm = new MemoryJavaFileManager(
				compiler.getStandardFileManager(null, null, null));
		JavaCompiler.CompilationTask task = compiler.getTask(sw, fm, null,
				null, null, sources);

		Boolean compilationWasSuccessful = task.call();
		if (compilationWasSuccessful) {
			ByteClassLoader byteClassLoader = new ByteClassLoader(new URL[0],
					classLoader, classesByteArraysMap(fm));

			Class&lt;?&gt; klass = byteClassLoader.loadClass(canonicalClassName);
			byteClassLoader.close();
			return klass;
		} else {
			compilerErrorOutput = sw.toString();
			return null;
		}
	}
[/sourcecode]

This code is part of the opensource project <a href="https://github.com/verhas/jscc/">Java Source Code Compiler (jscc)</a> and it is in the file <a href="https://github.com/verhas/jscc/blob/master/src/main/java/com/javax0/jscc/Compiler.java">Compiler.java</a>.

The compiler instance is available through the <tt>ToolProvider</tt> and to create a compilation task we have to invoke <tt>getTask()</tt>. The code write the errors into a string via a string writer. The file manager (<tt>fm</tt>) is implemented in the same package and it simply stored the files as byte arrays in a map, where the keys are the "file names". This is where the class loader will get the bytes later when the class(es) are loaded. The code does not provide any diagnistic listener (see the documentation of the java compiler in the RT), compiler options or classes to be processed by annotation processors. These are all nulls. The last argument is the list of source codes to compile. We compile only one single class in this tool, but since the compiler API is general and expects an iterable source we provide a list. Since there is another level of abstraction this list contains <tt>JavaSourceFromString</tt>s.

To start the compilation the created task has to be "call"ed and if the compilation was successful the class is loaded from the generated byte array or arrays. Note that in case there is a nested or inner class inside the top level class we compile then the compiler will create several classes. This is the reason we have to maintain a whole map for the classes and not a single byte array even though we compile only one source class. If the compilation was not successful then the error output is stored in a field and can be queried.

The use of the class is very simple and you can find samples in the unit tests:

[sourcecode language="java"]
	private String loadJavaSource(String name) throws IOException {
		InputStream is = this.getClass().getResourceAsStream(name);
		byte[] buf = new byte[3000];
		int len = is.read(buf);
		is.close();
		return new String(buf, 0, len, &quot;utf-8&quot;);
	}
...
	@Test
	public void given_PerfectSourceCodeWithSubClasses_when_CallingCompiler_then_ProperClassIsReturned()
			throws Exception {
		final String source = loadJavaSource(&quot;Test3.java&quot;);
		Compiler compiler = new Compiler();
		Class&lt;?&gt; newClass = compiler.compile(source, &quot;com.javax0.jscc.Test3&quot;);
		Object object = newClass.newInstance();
		Method f = newClass.getMethod(&quot;method&quot;);
		int i = (int) f.invoke(object, null);
		Assert.assertEquals(1, i);
	}
[/sourcecode]

Note that the classes you create this way are only available to your code during run-time. You can create <a href="https://javax0.wordpress.com/2013/11/13/creating-immutable-objects-run-time/">immutable</a> versions of your objects for example. If you want to have classes that are available during compile time you should use annotation processor like <a href="https://javax0.wordpress.com/2013/09/11/dont-write-biolerplate-use-scriapt/">scriapt</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1285</wp:post_id>
  <wp:post_date>2016-03-09 16:00:36</wp:post_date>
  <wp:post_date_gmt>2016-03-09 15:00:36</wp:post_date_gmt>
  <wp:post_modified>2016-03-03 11:39:43</wp:post_modified>
  <wp:post_modified_gmt>2016-03-03 10:39:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-compile-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Zu4YmmuSJMN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20588671927]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6113350767823904768&type=U&a=GhCJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207553011236129";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/707585106991382528";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Implementing an annotation interface]]></title>
  <link>https://javax0.wordpress.com/2016/03/16/implementing-an-annotation-interface/</link>
  <pubDate>Wed, 16 Mar 2016 15:00:49 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1301</guid>
  <description/>
  <content:encoded><![CDATA[â
Using annotation is every day task for a Java developer. If nothing else simple <tt>@Override</tt> annotation should ring the bell. Creating annotations is a bit more complex. Using the "home made" annotations during run-time via reflection or creating a compile time invoked annotation processor is again one level of complexity. But we rarely "implement" an annotation interface. Somebody secretly, behind the scenes certainly does for us.

When we have an annotation

[sourcecode language="java"]
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface AnnoWithDefMethod {
    String value() default &quot;default value string&quot;;
}
[/sourcecode]

then a class annotated with this annotation

[sourcecode language="java"]
@AnnoWithDefMethod(&quot;my default value&quot;)
public class AnnotatedClass {
}
[/sourcecode]

and finally we when get the annotation during runtime executing

[sourcecode language="java"]
AnnoWithDefMethod awdm = AnnotatedClass.class.getAnnotation(AnnoWithDefMethod.class);
[/sourcecode]

then what do we get into the variable <tt>awdm</tt>? It is an object. Objects are instances of classes, not interfaces. Which means that somebody under the hood of the Java runtime has "implemented" the annotation interface. We can even print out features of the object:

[sourcecode language="java"]
        System.out.println(awdm.value());
        System.out.println(Integer.toHexString(System.identityHashCode(awdm)));
        System.out.println(awdm.getClass());
        System.out.println(awdm.annotationType());
        for (Method m : awdm.getClass().getDeclaredMethods()) {
            System.out.println(m.getName());
        }
[/sourcecode]

to get a result something like

[sourcecode]
my default value
60e53b93
class com.sun.proxy.$Proxy1
interface AnnoWithDefMethod
value
equals
toString
hashCode
annotationType
[/sourcecode]

So we do not need to implement an annotation interface but we can if we wanted. But why would we want that? So far I have met one situation where that was the solution: configuring guice dependency injection.

Guice is the DI container of Google. The configuration of the binding is given as Java code in a declarative manner as it is described on the <a href="https://github.com/google/guice/wiki/Bindings">documentation page</a>. You can bind a type to an implementation simply declaring

[sourcecode language="java"]
bind(TransactionLog.class).to(DatabaseTransactionLog.class);
[/sourcecode]

so that all <tt>TransactionLog</tt> instance injected will be of <tt>DatabaseTransactionLog</tt>. If you want to have different imlpementation injected to different fields in your code you should some way signal it to Guice, for example creating an annotation, putting the annotation on the field, or on the constructor argument and declare the

[sourcecode language="java"]
bind(CreditCardProcessor.class)
        .annotatedWith(PayPal.class)
        .to(PayPalCreditCardProcessor.class);
[/sourcecode]

This requires <tt>PayPal</tt> to be an annotation interface and you are required to write an new annotation interface acompaniing each <tt>CreditCardProcessor</tt> implementation or even more so that you can signal and separate the implementation type in the binding configuration. This may be an overkill, just having too many annotation classes.

Instead of that you can also use names. You can annotate the injection target with the annotation <tt>@Named("CheckoutPorcessing")</tt> and configure the binding

[sourcecode language="java"]
bind(CreditCardProcessor.class)
        .annotatedWith(Names.named(&quot;CheckoutProcessing&quot;))
        .to(CheckoutCreditCardProcessor.class);
[/sourcecode]

This is a tehnique that is well known and widely used in DI containers. You specify the type (interface), you create the implementations and finally you define the binding type using names. There is no problem with this, except that it is hard to notice when you type porcessing instead of processing. Such a mistake remains hidden until the binding (run-time) fails. You can not simply use a <tt>final static String</tt> to hold the actual value because it can not be used as the annotation parameter. You could use such a constant field in the binding definition but it is still duplication.

The idea is to use something else instead of String. Something that is checked by the compiler. The obvious choice is to use a class. To implement that the code can be created learning from the code of <a href="https://github.com/google/guice/blob/master/core/src/com/google/inject/name/Named.java"><tt>NamedImpl</tt></a>, which is a class implementing the <a href="https://github.com/google/guice/blob/master/core/src/com/google/inject/name/Named.java">annotation interface</a>. The code is something like this (Note: <tt>Klass</tt> is the annotation interface not listed here.):

[sourcecode language="java"]
class KlassImpl implements Klass {
    Class&lt;? extends Annotation&gt; annotationType() {
        return Klass.class
    }
    static Klass klass(Class value){
        return new KlassImpl(value: value)
    }
    public boolean equals(Object o) {
        if(!(o instanceof Klass)) {
            return false;
        }
        Klass other = (Klass)o;
        return this.value.equals(other.value());
    }
    public int hashCode() {
        return 127 * &quot;value&quot;.hashCode() ^ value.hashCode();
    }
 
     Class value
    @Override
    Class value() {
        return value
    }
}
[/sourcecode]

The actual binding will look something like

[sourcecode language="java"]
  @Inject
  public RealBillingService(@Klass(CheckoutProcessing.class) CreditCardProcessor processor,
      TransactionLog transactionLog) {
    ...
  }
 
    bind(CreditCardProcessor.class)
        .annotatedWith(Klass.klass(CheckoutProcessing.class))
        .to(CheckoutCreditCardProcessor.class);
[/sourcecode]

In this case any typo is likely to be discovered by the compiler. What happens actually behind the scenes, and why were we requested to implement the annotation interface?

When the binding is configured we provide an object. Calling <tt>Klass.klass(CheckoutProcessing.class)</tt> will create an instance of <tt>KlassImpl</tt> and when Guice tries to decide if the actual binding configuration is valid to bind <tt>CheckoutCreditCardProcessor</tt> to the <tt>CreditCardProcessor</tt> argument in the constructor of <tt>RealBillingService</tt> it simply calls the method <tt>equals()</tt> on the annotation object. If the instance created by the Java runtime (remember that Java runtime creates an instance that had a name like <tt>class com.sun.proxy.$Proxy1</tt>) and the instance we provided are equal then the binding configuration is used otherwise some other binding has to match.

There is another catch. It is not enough to implement <tt>equals()</tt>. You may (and if you are a Java programmer (and you are why else you read this article (you are certainly not a lisp programmer)) you also should) remember that if you override <tt>equals()</tt> you have to override also <tt>hashCode()</tt>. And actually you should provide an implementation that does the same calculation as the class created by the Java runtime. The reason for this is that the comparison may not directly be performed by the application. It may (and it does) happen that Guice is looking up the annotation objects from a Map. In that case the hash code is used to identify the bucket in which the comparing object has to be and the method <tt>equals()</tt> is used afterwards to check the identity. If the method <tt>hashCode()</tt> returns different number in case of the Java runtime created and out objects they will not even match up. <tt>equals()</tt> would return true, but it is never invoked for them because the object is not found in the map.

The actual algorithm for the method <tt>hashCode</tt> is described on the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Annotation.html">documentation</a> of the interface <tt>java.lang.annotation</tt>. I have seen this documentation before but understood the reason why the algorithm is defined when I first used Guice and implemented a similar annotation interface implementing class.

The final thing is that the class also has to implement <tt>annotationType()</tt>. Why? If I ever figure that out I will write about that.


â]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1301</wp:post_id>
  <wp:post_date>2016-03-16 16:00:49</wp:post_date>
  <wp:post_date_gmt>2016-03-16 15:00:49</wp:post_date_gmt>
  <wp:post_modified>2016-03-16 14:14:19</wp:post_modified>
  <wp:post_modified_gmt>2016-03-16 13:14:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>implementing-an-annotation-interface</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/BSgatYpdT9c]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207611824226417";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/710120963187191809";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20816482995]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6115886625105989632&type=U&a=uZuI]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9695</wp:comment_id>
    <wp:comment_author><![CDATA[Garai MÃ¡rton]]></wp:comment_author>
    <wp:comment_author_email>garaimarton.mail@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>46.139.106.227</wp:comment_author_IP>
    <wp:comment_date>2016-03-18 00:53:46</wp:comment_date>
    <wp:comment_date_gmt>2016-03-17 23:53:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Umm. Can't You use just

[sourcecode language="java"]
myContainer.RegisterType&lt;IMyService, CustomerService&gt;();
[/sourcecode]

? Like any normal IoC would do? Or Just use convention based registration, like any normal IoC would do?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458434656]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458434656.7195188999176025390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458258827.96100711822509765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[20928638573]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1458434656]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458262697.2801311016082763671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9704</wp:comment_id>
    <wp:comment_author><![CDATA[notRealThing]]></wp:comment_author>
    <wp:comment_author_email>iAmABot@botbot.com</wp:comment_author_email>
    <wp:comment_author_url>http://bot</wp:comment_author_url>
    <wp:comment_author_IP>31.10.158.34</wp:comment_author_IP>
    <wp:comment_date>2016-03-20 23:45:06</wp:comment_date>
    <wp:comment_date_gmt>2016-03-20 22:45:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Seems you did not understood the reason - idea is to have multiple different implementations injected for the same interface at runtime. Suppose you have:

[sourcecode language="java"]
class Bla {
IMyService one; // want here instance of CustomerService
IMyService two; // want gere instance of SuperCustomerService
}
[/sourcecode]

to avoid creating surrogate interfaces or using "Named" you can use what Peter described.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9695</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458513907.79041290283203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1458513974]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458513974]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458513974.95621490478515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[20957367503]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9690</wp:comment_id>
    <wp:comment_author><![CDATA[JÃ¡nos Szurovecz]]></wp:comment_author>
    <wp:comment_author_email>szjani@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+JÃ¡nosSzurovecz</wp:comment_author_url>
    <wp:comment_author_IP>46.139.77.18</wp:comment_author_IP>
    <wp:comment_date>2016-03-16 20:53:52</wp:comment_date>
    <wp:comment_date_gmt>2016-03-16 19:53:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article. I don't know the answer to your last question, but the class can implement multiple annotation interfaces and this might be the reason. But I bet you know the answer.
I think the "annotation interface" link is wrong.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458158033.0048010349273681640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1458158114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1458158114.9858319759368896484375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[106989217649842219710]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-quyNy2DZ43k/AAAAAAAAAAI/AAAAAAAAE3c/Hkao6taZt7U/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1458158114]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9726</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>188.120.199.45</wp:comment_author_IP>
    <wp:comment_date>2016-03-29 21:11:53</wp:comment_date>
    <wp:comment_date_gmt>2016-03-29 20:11:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Concerning

<pre>annotationType()</pre>

I couldn't resist to ask: http://stackoverflow.com/q/36293911/581205]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1459282313.7961900234222412109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21253520031]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1459282314]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1459282313]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27922</wp:comment_id>
    <wp:comment_author><![CDATA[Annotation Handling and JPMS | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/07/31/annotation-handling-and-jpms/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.56</wp:comment_author_IP>
    <wp:comment_date>2019-07-31 16:02:40</wp:comment_date>
    <wp:comment_date_gmt>2019-07-31 15:02:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Many frameworks use annotations during run-time, others hook into the compilation phase implementing an annotation processor. I wrote about annotation processors and how to create one. This time we focus on the simpler way: handling annotations during run-time. We do not even implement the annotation interface, which is a rarely used possibility but is complex and hard to do as the article describes. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1564585360.450463;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1564589834.46315;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1565162465]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1565162465.96445;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Random Ideas about Code Style]]></title>
  <link>https://javax0.wordpress.com/2016/04/13/code-style/</link>
  <pubDate>Wed, 13 Apr 2016 15:00:04 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1321</guid>
  <description/>
  <content:encoded><![CDATA[<em>Some of the sentences of this article are ironic. Others are to be taken serious. It is up to the reader to separate them. Start with these sentences.</em>

How long should a method be in Java?

This is a question I ask many times during interviews. There is no one best answer. There are programming styles and different styles are just different and many can be ok. I absolutely accept somebody saying that a method should be as short as possible, but I can also accept 20 to 30 lines methods. Above 30 lines I would be a bit reluctant.

<blockquote>"When I wrote this code only God and I understood it. Now only God does."<br />Quote from unknown programmer. Last quarter of the XX. century.</blockquote>

The most important thing is that the code is readable. When you write the code you understand it. At least you think you understand what you wanted to code. What you actually coded may be a different story. And here comes the importance of readability as opposed to writeablity.

When you refactor a code containing some long method and you split up the method into many small methods you actually create a tree structure from a linear code. Instead of having one line after the other you create small methods and move the actual commands into those. After that the small methods are invoked from a higher level. Why does it make the code more readable?

First of all, because each method will have a name. That is what methods have and in Java we love camel cased talking names.

[sourcecode language="java"]
private void pureFactoryServiceImplementationIncomnigDtoInvoker(IncomingDto incomingDto){
  incomingDto.invoke();
}
[/sourcecode]

But why is it any better than inlining the code and using comments?

[sourcecode language="java"]
// pure factory service implementation incoming dto invoker
incomingDto.invoke();
[/sourcecode]

Probably that is because you have to type <tt>pureFactoryServiceImplementationIncomnigDtoInvoker</tt> twice? I know you will not type it twice. You will copy paste it or use some IDE auto-complete feature and for that reason the type replacing 'Incoming' to 'Incomnig' does not really matter.

<blockquote>
When you split up the code into small methods the names are a form of comment.
</blockquote>

Very much like what we do in unit tests using JUnit 4.0 or later. Old versions had to start the test methods with the literal <tt>test...</tt> but that was not a good idea. It was discovered long time ago. (I just wonder when Go will get there.) These days Groovy (and especially spock) lets us use whole sentences with spaces and new lines as method names in unit tests. But those method names fortunately should not be typed twice. They are listed and invoked by Junit via reflection and thus they really are what they really are: documentation.

So then the question still is: Why is tree structure better than linear?

Probably that is how our brains work. We look at a method and see that there are two-three method calls in that. There can be a simple branch or loop structure in it, perhaps one nested to the other but not much deeper than that. It is simple and if method names are selected well (I mean really in a good, meaningful and talking way), they are easy to understand, easy to read.

The we can, using the navigational aid of the IDE go to the methods and we can concentrate on the limited context of the method we are looking at. There is a rough rule:

<blockquote>
You should be able to understand what a method does in 15 seconds.
</blockquote>

If you stare at the method longer and you still have no idea what the method does it means it is too complex. Some people are better apprehending the structure of the code, others are challanged in that. I am in the latter group, so when I review code I many times prefer smaller and simpler methods. I refuse the code to be merged or I refactor it myself depending on the role, the actual task I perform. Juniors I work with think that I am strict and picky. The truth is I am slow. The complexity of the code should be compatible with the weakest chain: any one of the team (including imaginable future maintainers of the next coming 20 years till the code is finally deleted from production) should understand and maintain the code easily.

Many times looking at git history I see refactoring ping-pong. For example the method

[sourcecode language="java"]
Result getFrom(SomeInput someInput){
  Result result = null;
  if( someInput != null ){
    result = someInput.get();
  }
  return result;
}
[/sourcecode]

is refactored to

[sourcecode language="java"]
Result getFrom(SomeInput someInput){
  final Result result;
  if( someInput == null ){
    result = null;
  }else{
    result = someInput.get();
  }
  return result;
}
[/sourcecode]

and later the other way around.

One is shorter, while the other one is more declarative. Is the repetitive refactoring back and forth a problem? Most probably is, but not for sure. If it happens only a few times and by different people then this is not something to worry about too much. When the code gets refactored the developer feels the code more attached to him/herself. A more "it is my code" feeling, which is important. Even though a good developer is not afraid to touch and modify any code. (what could happen? test fail? so what? test? what test?) Note that not all developers are good developers. But what is a good developer after all? It is relative. There are better developers and there are not so good. If you see only good developers who are better than you, then probably you are lucky. Or not.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1321</wp:post_id>
  <wp:post_date>2016-04-13 16:00:04</wp:post_date>
  <wp:post_date_gmt>2016-04-13 15:00:04</wp:post_date_gmt>
  <wp:post_modified>2016-04-13 10:30:35</wp:post_modified>
  <wp:post_modified_gmt>2016-04-13 09:30:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-style</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Zm9A9p91vR4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21748063711]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6126031086741966848&type=U&a=fb8q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207886800540653";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/720265424902828032";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9789</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/104379794518123041179</wp:comment_author_url>
    <wp:comment_author_IP>178.255.168.75</wp:comment_author_IP>
    <wp:comment_date>2016-04-22 07:11:34</wp:comment_date>
    <wp:comment_date_gmt>2016-04-22 06:11:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Kovacs Geza: I'm not sure, if you do it like me or the other way round. A public method called 
collapseAndConvertHyphensAndUnderscoresToCamelCaseAndWhatever could be called just sanitize if it was private. So bigger scope implies a more descriptive name. But the more often a method gets used, the more I prefer a short name (assuming equal scope). The reasons are 1. a heavily used name should be fast to scan over, 2. a heavily used method is something you get quickly familiar with (so a sort of speed dial is fine).

Concerning getFrom, there's only one acceptable style for me:

<pre>
Result getFrom(SomeInput someInput) {
  return someInput == null ? null : someInput.get();
}
</pre>

Anything else would make me think "what complicated thing there a conditional statement is required for?". An expression (even conditional) feels much simpler (something gets computed, that's all).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9787</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22039952612]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1461305497]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461305497.35352611541748046875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1461305496]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9771</wp:comment_id>
    <wp:comment_author><![CDATA[Szaszvari Peter]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/112478567534402128217</wp:comment_author_url>
    <wp:comment_author_IP>193.68.38.6</wp:comment_author_IP>
    <wp:comment_date>2016-04-14 07:47:13</wp:comment_date>
    <wp:comment_date_gmt>2016-04-14 06:47:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Peter, it is so good to read! Sometimes your post just heals me. BTW, you could color irony...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1460616434]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1460616433]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460616433.7138249874114990234375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9787</wp:comment_id>
    <wp:comment_author><![CDATA[Kovacs Geza]]></wp:comment_author>
    <wp:comment_author_email>don.kihote@freemail.hu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.94.34.202</wp:comment_author_IP>
    <wp:comment_date>2016-04-20 13:55:11</wp:comment_date>
    <wp:comment_date_gmt>2016-04-20 12:55:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Regarding to length of the method name I usually thinking on the scope of the method. As many places it is used as shorter names I choose. For e.g. a utility method should be less then 3 camel part but a very specific method might be longer and more descriptive.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1461183874]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1461183874.4585249423980712890625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461161352.4490261077880859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461156912.7991950511932373046875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21989443921]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1461183874]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9774</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2016-04-15 09:53:58</wp:comment_date>
    <wp:comment_date_gmt>2016-04-15 08:53:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Long method as linear code? That's funny :)

I think if a method is as simple as a properties file, then we can keep it long. Otherwise we need to do so about the nested if-s, exception handling, break and return statements that are scattered unevenly through the lines]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1460710439]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1460710438]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1460710438.6918170452117919921875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Uptime]]></title>
  <link>https://javax0.wordpress.com/2016/04/20/uptime/</link>
  <pubDate>Wed, 20 Apr 2016 15:00:09 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1339</guid>
  <description/>
  <content:encoded><![CDATA[I was working five years in telecom industry where service availability was God. We had to reach five nines that is 99.999% percent of the time the service had to work.

Just a simple calculation 99% availability means that the service may be out of service 3 and half day per year. 99.9% means an outage period close to 9 hours. 99.99% means barely an hour and 99.999% five minutes. Is it okay if the phone is out of service at most 5 minutes a year? Certainly. How about your online banking interface? How about a pace maker?

<h1>How many 9s do we need?</h1>

The point is that you should not aim five nines (or any other availability value) if you do not know why you need that. The bottom line is, as always money. To get to a level of availability has a cost label attached. The more nines you need in your uptime number the more cost you have. The latter nines costs exponentially more. On the other side you have the income, the reputation and all other things that count as money value and are adversely affected by downtime.

Telecom invests a lot of money to get to five nine. Does it pay off? If we only count the lost revenue during the downtime (people can not call and thus do not pay for the talk) then it does not. If we count the reputation, lost customers churning to competition then maybe. If we consider emergency calls: definitely.

Telecom has its values established long time ago and the five nines came from common knowledge distilled during a long time. When you design a service for the enterprise or for the public you do not have that. You have to assess what is worth doing.

Ten years ago I was studying economy. A friend was also studying there and at one of the micmac (mixed micro and macro economy subject) exam he barely passed, though he was usually performing excellent. Being shocked by the unexpected low performance the professor asked him about it. He said: <em>"I was not only studying but also following in practice what you taught us. Invest no more than what is needed to reach the goals. Any more investment is wasted."</em>

Assume for now that we assessed the costs and benefits and we decided we need X nines.

<h1>Is more always better?</h1>

But how about accidental reaching more uptime than needed? Operation wasted money, invested too much into availability. This is certainly not good. It may also happen that by time small investments (e.g.: continuous improvement of personnel, new technologies) lead to better uptime. If it costs nothing the higher uptime is extra gift. But if there is a significant difference between the aimed availability and the actual, the investment was definitely oversized. What will prevent operation to aim higher than what financially feasible is?

It is a difficult organizational question. This is not simply put money in on one end of the tube and get availability on the other. You can invest in many different things that lead to higher availability. You can educate your support people. You can buy higher quality, larger MTBF hardware. You can invest in software quality. Some of these have lower cost others cost a lot. If operation reaches in practice higher availability than needed then they wasted money. But it is hard if not impossible to tell which money.

<h1>Measure the people performance on system uptime?</h1>

Should you measure your operation people on uptime? Certainly. That is a core competency they have: provide the aimed uptime. If the operation does not get the required uptime there will be consequences. You have to assess the reasons, design changes in the system, in the policies, in management hierarchy, but certainly something is to be changed. If there is no change the availability remains low. 

<blockquote>If there are no consequences of underperformance on people certainly there will be on the company.</blockquote>

Should you incentive the higher than aimed uptime? Obviously no. May be not that obviously, but certainly: no. If you incentive then they will be motivated reach the goal. If they are motivated to reach something the company does not need they will spend company money to reach that. If you incentive anyone for getting X they will get X. Simple feedback loop. Simple. Ok. But if you do not incentive higher than needed availability then ...

<h1>should you punish higher availability?</h1>

If you punish people for higher availability, operation will still be motivated to spend extra money to get higher availability and ruin it to the required level by means that they can control. (Simply switch off service "illegally" or claiming maintenance.) Even if you do not punish them, they are still motivated to spend extra money just to be safe. We get to the mix of incentives and punishments controlling quality and budget and companies sometime end up with extremely complex motivational schemes.

This dilemma is nothing special. This is a very general management topic. You cannot measure what you really want to achieve in your organization. In case of operation you cannot measure that operation is spending the money the most possible wise way and deliver services reliably the level business need. You cannot measure it simply because it cannot be defined what most wise way is.

What we can do is measure something that relates somehow to what we really need. We start to measure X. The management problem is that if you measure X people will deliver X. So what is the solution? Measurement and culture. We know what the measurements are, we aim the direct goals we are measured on but perform the strategic, tactic and everyday tasks keeping an eye on company goals. That is the culture part. Without culture we are only robots, and robots don't do good work.

Yet.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1339</wp:post_id>
  <wp:post_date>2016-04-20 16:00:09</wp:post_date>
  <wp:post_date_gmt>2016-04-20 15:00:09</wp:post_date_gmt>
  <wp:post_modified>2017-09-28 14:17:18</wp:post_modified>
  <wp:post_modified_gmt>2017-09-28 13:17:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>uptime</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/EsVhPLA9nRb]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21980036271]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6128567931115753472&type=U&a=R50a]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207936083052685";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/722802266495823874";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9807</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>80.99.48.140</wp:comment_author_IP>
    <wp:comment_date>2016-04-27 20:50:28</wp:comment_date>
    <wp:comment_date_gmt>2016-04-27 19:50:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Punishment for higher availability? That's strange, because the perceived availability is almost always higher than the guaranteed availability. Yeah, it has to do something with probability.

Say, you aim at five 9-s. Is it okay to provide that in every second year? Of course not. You have to provide it at almost every year. So you make sure your system can deal with hardware and software failures too. You implement rigorous deployment processes. Maybe you check the probability of certain failures and plan your system accordingly.

Still, system uptime has variance. So you have to cover lot of ground to provide guarantees. See the <a href="https://en.wikipedia.org/wiki/Confidence_interval" rel="nofollow">confidence intervals</a> for further details. Or just check <a href="http://financetrain.com/assets/cip3.gif" rel="nofollow">this picture</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1461786731]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1461786731]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1461786731.818315982818603515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1461786628.571259021759033203125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Comparing Golang with Java]]></title>
  <link>https://javax0.wordpress.com/2016/04/27/comparing-golang-with-java/</link>
  <pubDate>Wed, 27 Apr 2016 15:00:29 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1357</guid>
  <description/>
  <content:encoded><![CDATA[First of all, I would like to make a disclaimer. I am not an expert in Go. I started to study it a few weeks ago, thus the statements here are kind of first impressions. I may be wrong in some of the subjective areas of this article. Perhaps I will write some time a review of this one later. But until then, here it is and if you are a Java programmer, you are welcome to see my feelings and experiences and the same time you are more than welcome to comment and correct me if I am wrong in some statements.

<h1>Golang is impressive</h1>

As opposed to Java, Go is compiled to machine code and is executed directly. Much like C. Because this is not a VM machine it is very much different from Java. It is object-oriented and the same time functional to some extent thus it is not only a new C with some automated garbage collection. It is somewhere between C and C++ if we think the world of programming languages is on a single line, which it is not. Using a Java programmer's eyes some things are so much different that learning them is challenging and may give a deeper understanding on programming language structures and how objects, classes and all these things are ... even in Java.

I mean that if you understand how OO is implemented in Go, you may understand also some of the reasons why Java has them different.

In short, if you are impatient: do not let yourself freak out by the seemingly weird structure of the language. Learn it and it will add to your knowledge and understanding even if you do not have a project to be developed in Go.

<h1>GC and not GC</h1>

Memory management is a crucial point in programming languages. Assembly lets you do all things. Or rather it requires you to do it all. In case of C there are some support functions in the standard library but it is still up to you to free all memory that you have allocated before calling <tt>malloc</tt>. Automated memory management starts somewhere along C++, Python, Swift, and Java. Golang is also in this category.

Python and Swift use reference counting. When there is a reference to an object the object itself holds a counter that counts the number of references that point to it. There are no pointers or references backward, but when a new reference gets the value and starts to reference an object the counter increases and when a reference becomes null/nil whatever or references another object the counter goes down. So it is known when the counter is zero, there are no references to the object and it can be discarded. The problem with this approach is that an object still may be unreachable while the counter is positive. There can be object circles referencing each other and when the last object in this circle is released from the static, local and otherwise reachable references then the circle starts to float in the memory like bubbles in water: the counters are all positive but the objects are unreachable. The Swift tutorial has a very good explanation of this behavior and how to avoid it. But the point is still there: you have to care about memory management somewhat.

In case of Java, other JVM languages (including the JVM implementation of Python) the memory is managed by the JVM. There is a full-blown garbage collection that runs from time to time in one or more threads, parallel with the working threads or sometimes stopping those (a.k.a. stop the world) marking the unreachable objects, sweeping them and compacting the presumably scattered memory. All you have to worry about is the performance if at all.

Golang is also in this category with a small little, tiny exception. It does not have references. It has pointers. The difference is crucial. It can be integrated with external C code and for performance reasons, there is nothing like a reference registry in the run-time. The actual pointers are not known to the execution system. The memory allocated can still be analyzed to gather reachability information and the unused "objects" can still be marked and swept off, but memory cannot be moved around to do the compacting. This was not obvious for me some time from the documentation and as I understood the pointer handling I was seeking for the magic that Golang wizards implemented to do the compacting. I was sorry to learn, they simply did not. There is no magic.

Golang has a garbage collection but this is not a full GC as in Java. There is no memory compaction. It is not necessarily bad. It can go a long way running servers very long time and still not have the memory fragmented. Some of the JVM garbage collectors also skip the compacting steps to decrease GC pause when cleaning old generations and do the compacting only as a last resort. This last resort step in Go is missing and it may cause some problem is rare cases. You are not likely to face the problem while learning the language.

<h1>Local variables</h1>

Local variables (and sometimes objects in newer versions) are stored on the stack in Java language. So are in C, C++ and in other languages where call-stack as such is implemented. Golang related to local variables is no exception, except...

Except that you can simply return a pointer to a local variable from a function. That was a fatal mistake in C. In case of Go the compiler recognizes that the allocated "object" (I will explain later why I use quotes) is escaping the method and allocates it accordingly so that survives the return of the function and the pointer will not point to an already abandoned memory location where there is no reliable data.

So this is absolutely legal to <a href="http://play.golang.org/p/JfTfa4tYFa">write</a>:

[sourcecode language="java"]
package main

import (
	&quot;fmt&quot;
)

type Record struct {
	i int
}

func returnLocalVariableAddress() *Record {
	return &amp;Record{1}
}

func main() {
	r := returnLocalVariableAddress()
	fmt.Printf(&quot;%d&quot;, r.i)
}
[/sourcecode]

<h1>Closures</h1>

What is more, you can <a href="http://play.golang.org/p/jI296eQhH-">write</a> functions inside functions and you can return functions just like in a functional language (Go is a kind of functional language) and the local variables around it serve as variables in a closure.

[sourcecode language="java"]
package main

import (
	&quot;fmt&quot;
)

func CounterFactory(j int) func() int {
	i := j
	return func() int {
		i++
		return i
	}
}

func main() {
	r := CounterFactory(13)
	fmt.Printf(&quot;%d\n&quot;, r())
	fmt.Printf(&quot;%d\n&quot;, r())
	fmt.Printf(&quot;%d\n&quot;, r())
}
[/sourcecode]

<h1>Function return values</h1>

Functions can return not only one single value, but multiple values. This seems to be a bad practice if not used properly. Python does that. Perl does that. It can be of good use. It is mainly used to return a value and a 'nil' or error code. This way the old habit of encoding the error into the returned type (usually returning -1 as error code and some non-negative value in case there is some meaningful return value as in C std library calls) is replaced with something much more readable.

Multiple values on the sides of an assignment is not only to functions. To swap two values you can write:

[sourcecode language="java"]
  a,b = b,a
[/sourcecode]

<h1>Object Orientation</h1>

With closures and functions being first-class citizens Go is at least object-oriented as JavaScript. But it is actually more than that. Go lang has interfaces and structs. But they are not really classes. They are <a href="https://javax0.wordpress.com/2016/01/13/value-types-in-java-why-should-they-be-immutable/">value types</a>. They are passed by value and wherever they are stored in memory the data there is only the pure data and no object header or anything like that. <tt>struct</tt>s in Go are very much like they are in C. They can contain fields, but they can not extend each other and they can not contain methods. Object orientation is approached a bit different.

Instead of stuffing the methods into the class definition you can specify when you define the method itself which struct it applies to. Structs can also contain other structs and in case there is no name for the field you can reference it by the type of it, which becomes its name implicitly. Or you can just reference a field or method as they belonged to the top struct.

For <a href="http://play.golang.org/p/Z-BUnFSzSS">example</a>:

[sourcecode language="java"]
package main

import (
	&quot;fmt&quot;
)

type A struct {
	a int
}

func (a *A) Printa() {
	fmt.Printf(&quot;%d\n&quot;, a.a)
}

type B struct {
	A
	n string
}

func main() {
	b := B{}
	b.Printa()
	b.A.a = 5
	fmt.Printf(&quot;%d\n&quot;, b.a)
}
[/sourcecode]

This is almost or a kind of inheritance.

When you specify the struct on which the method can be invoked you can specify the struct itself or a pointer to it. If the method is applied to the struct then the method will access a copy of the caller struct (this struct is passed by value). If the method is applied to a pointer to the struct then the pointer will be passed (passed by reference kind of). In the latter case the method can also modify the struct (in this sense the structs are not value types since value types are immutable). Either can be used to fulfill the requirement of an interface. In case of the example above <tt>Printa</tt> is applied to a pointer to the struct <tt>A</tt>. Go says that <tt>A</tt> is the receiver of the method.

Go syntax is also a bit lenient about structs and pointers to it. In C you can have a struct and you can write <tt>b.a</tt> to access the field of the struct. In case of a pointer to the structure in C you have to write <tt>b-&gt;a</tt> to access the same field. In case of a pointer <tt>b.a</tt> is a syntax error. Go says that writing <tt>b-&gt;a</tt> is pointless (you can interpret this literally). Why litter the code with <tt>-&gt;</tt> operators when the dot operator can be overloaded. Field access in case of struct and, well field access through pointers. Very logical.

Because the pointer is as good as the struct itself (to some extent) you can <a href="http://play.golang.org/p/ayX_-SC-1o">write</a>:
[sourcecode language="java"]
package main

import (
	&quot;fmt&quot;
)

type A struct {
	a int
}

func (a *A) Printa() {
	if a == nil {
		fmt.Println(&quot;a is nil&quot;)
	} else {
		fmt.Printf(&quot;%d\n&quot;, a.a)
	}
}

func main() {
	var a *A = nil
	a.Printa()
}
[/sourcecode]

Yes, this is the point as a true-hearted Java programmer you should not freak out. We did call a method on a nil pointer! How can that happen?

<h1>Type in in the variable and not the object</h1>

This is why I was using quotes writing "object". When Go stores a struct it is a piece of memory. It does not have an object header (though it may, since it is a matter of implementation and not the language definition, but it reasonably does not). It is the variable that holds the type of the value. If the variable type is a struct then it is known already at compile time. If this is an interface then the variable will point to the value and the same time it will also reference the actual type it is having the value for.

If the variable <tt>a</tt> is an interface and not a pointer to a struct <a href="http://play.golang.org/p/4cRr_kxiJR">you can not do the same</a>: you get runtime error. <em>(Addition: As Theo pointed out in his comment this is because the pointer variable does not have the type and Go runtime does not know which implementation of the polymorphic method to call. However, you can have an interface variable being nil and still holding the reference to a specific type as <a href="https://play.golang.org/p/OWzqjBpjEa">theo shows in the example</a>.)</em>

<h1>Implementing interfaces</h1>

Interfaces are very simple in Go, and the same time very complex, or at least different from what they are in Java. Interfaces declare a bunch of functions that structs should implement if they want to be compliant with the interface. The inheritance is done the same way as in case of structs. The strange thing is that you need not specify in case of a struct that it implements an interface if it does. After all, it is really not the struct that implements the interface, but rather the set of functions that use the struct or a pointer to the struct as a receiver. If all the functions are implemented then the struct does implement the interface. If some of them are missing then the implementation is not complete.

Why do we need the 'implements' keyword in Java and not in Go? Go does not need it because it is fully compiled and there is nothing like a classloader that loads separately compiled code during run-time. If a struct is supposed to implement an interface but it does not then this will be discovered at compile time without explicitly classifying that the struct does implement the interface. You can overcome this and cause a run-time error if you use reflection (that Go has) but the 'implements' declaration would not help that anyway.

<h1>Go is compact</h1>

Go code is compact and not forgiving. In other languages, there are characters that are simply useless. We got used to them during the last 40 years since C was invented and all other languages followed the syntax, but it does not necessarily mean that it is the best way to follow. After all we all know since C that the 'trailing else' problem is best addressed using the <tt>{</tt> and <tt>}</tt> around the code branches in the 'if' statement. (Maybe Perl was the first mainstream C-like syntax language that requested that.) However, if we must have the braces there is no point to enclose the condition in parentheses. As you could see in the code above:

[sourcecode language="java"]
...
	if a == nil {
		fmt.Println(&quot;a is nil&quot;)
	} else {
		fmt.Printf(&quot;%d\n&quot;, a.a)
	}
...
[/sourcecode]

there is no need and Go does not even allow it. You may also notice that there are no semicolons. You can use them, but you need not. Inserting them is a preprocessing step on the source code and it is very effective. Most of the time they are clutter anyway.

You can use ':=' to declare a new variable and assign a value to it. On the right hand side the expression defines the type usually, so there is no need to write '<tt>var x typeOfX = expression</tt>'. On the other hand, if you import a package, assign a variable that you do not use afterward: it is a bug. Since it can be detected during compile time it is a code error, compilation fails. Very smart. (Sometimes annoying when I import a package that I intend to use, and before referencing it I save the code and IntelliJ intelligently removes the import, just to help me.)

<h1>Threads and queues</h1>

Threads and queues are built into the language. They are called goroutines and channels. To start a goroutine you only have to write <tt>go functioncall()</tt> and the function will be started in a different thread. Although there are methods/functions in the standard Go library to lock "objects" the native multi-thread programming is using channels. Channel is a built-in type in Go that is a fixed size FIFO channel of any other type. You can push a value into a channel and a goroutine can pull it off. If the channel is full pushing blocks and in case the channel is empty the pull is blocking.

<h1>There are errors, no exceptions. Panic!</h1>

Go does have exception handling but this is not supposed to be used like in Java. Exception is called 'panic' and this is really to be used when there is some real panic in the code. In Java term, it is similar to some throwable that ends with '...Error'. When there is some exceptional case, some error that can be handled this state is returned by the system call and the application functions are expected to follow a similar pattern. For <a href="http://play.golang.org/p/KSvCOdGo4O">example</a>

[sourcecode language="java"]
package main

import (
	&quot;log&quot;
	&quot;os&quot;
)

func main() {
	f, err := os.Open(&quot;filename.ext&quot;)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
}
[/sourcecode]

the function 'Open' returns the file handler and nil, or nil and the error code. If you execute it on the Go Playground (click on the link above) you get the error displayed.

This is not really fitting the practice we got used to when programming in Java. It is easy to miss some error condition and write

[sourcecode language="java"]
package main

import (
	&quot;os&quot;
)

func main() {
	f , _ := os.Open(&quot;filename.ext&quot;)
	defer f.Close()
}
[/sourcecode]

that just ignores the error. It is also cumbersome to check the possibility of error at each and every system or application call that may return error when we are interested in a longer chain of commands if any of those produced error and we do not really care which one.

<h1>No finally, defer instead</h1>

Closely coupled with the exception handling is the feature that Java implements with the try/catch/finally feature. In Java, you can have code that is executed in a finally code no matter what. Go provides the keyword 'defer' that lets you specify a function call that will be invoked before the method returns even if there is/was a panic. This is a solution to the problem that gives you fewer options to abuse. You can not write arbitrary code to be executed deferred only a function call. In Java, you can even have a return statement in the finally block or see a mess trying to handle the situation when the code to be executed in the finally block may also throw an exception. Go is prone to that. I like that.

<h1>Other things...</h1>

that also may seem weird at first are like

<ul>
    <li>public functions and variables are capitalized, there are no keywords like 'public', 'private'</li>
    <li>source code of libraries are to be imported into the source of the project (I am not sure I understood that properly)</li>
    <li>lack of generics</li>
    <li>code generation support built into the language in forms of comment directives (this is really a wtf)</li>
</ul>

In general, Go is an interesting language. It is not a replacement for Java even on a language level. They are not supposed to serve the same type of tasks. Java is enterprise development language, Go is a system programming language. Go, just as well as Java, is continuously developing so we may see some change in that in the future.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1357</wp:post_id>
  <wp:post_date>2016-04-27 16:00:29</wp:post_date>
  <wp:post_date_gmt>2016-04-27 15:00:29</wp:post_date_gmt>
  <wp:post_modified>2018-03-11 18:51:01</wp:post_modified>
  <wp:post_modified_gmt>2018-03-11 17:51:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-golang-with-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/MYVfYbMP1P6]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10207985197800523";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/725339134869397504";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22224381060]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6131104793768321025&type=U&a=EuO-]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9809</wp:comment_id>
    <wp:comment_author><![CDATA[notRealThing]]></wp:comment_author>
    <wp:comment_author_email>iAmABot@botbot.com</wp:comment_author_email>
    <wp:comment_author_url>http://bot</wp:comment_author_url>
    <wp:comment_author_IP>31.10.157.144</wp:comment_author_IP>
    <wp:comment_date>2016-04-27 21:58:40</wp:comment_date>
    <wp:comment_date_gmt>2016-04-27 20:58:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1461790721]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461790721.118381023406982421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1461790721]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9866</wp:comment_id>
    <wp:comment_author><![CDATA[gijensen]]></wp:comment_author>
    <wp:comment_author_email>gijensen@protonmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://twitter.com/gijensen3</wp:comment_author_url>
    <wp:comment_author_IP>176.126.252.11</wp:comment_author_IP>
    <wp:comment_date>2016-05-10 14:35:21</wp:comment_date>
    <wp:comment_date_gmt>2016-05-10 13:35:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Goroutines are more like coroutines than threads. Yes, you will get maximal performance writing for the amount of cores there are in the system (provided you're actually generating the # of threads equivilant to your cores, which I'm not sure can be guaranteed). However because goroutines are so cheap, you don't have to feel guilty for using them liberally, in fact it's actually idiomatic.

In most real world scenarios you'll probably get better performance just using goroutines instead of writing the many many extra required to eliminate them, and achieve performance gains. Golang has allowed me to attempt models I never would have considered trying with threads.

Also attempting to limit your goroutine use, you'd be excluding yourself from most third party libraries anyways.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9838</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462887321.6555240154266357421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22668378369]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462887417]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462887417]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462887417.6602709293365478515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9827</wp:comment_id>
    <wp:comment_author><![CDATA[theo]]></wp:comment_author>
    <wp:comment_author_email>theonordsieck@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>98.247.98.166</wp:comment_author_IP>
    <wp:comment_date>2016-05-03 09:03:40</wp:comment_date>
    <wp:comment_date_gmt>2016-05-03 08:03:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["If the variable a is an interface and not a pointer to a struct you can not do the same: you get runtime error."

Not strictly true.  You set the interface to nil, which means it has no concrete type; that is why the error is generated.

If you set the concrete type like this: https://play.golang.org/p/OWzqjBpjEa it works just fine.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462262674]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462262674]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462262674.7380859851837158203125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462262622.34064388275146484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9835</wp:comment_id>
    <wp:comment_author><![CDATA[Mickey Barboi]]></wp:comment_author>
    <wp:comment_author_email>mickey.barboi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10205605126399928/</wp:comment_author_url>
    <wp:comment_author_IP>24.240.72.126</wp:comment_author_IP>
    <wp:comment_date>2016-05-05 12:06:35</wp:comment_date>
    <wp:comment_date_gmt>2016-05-05 11:06:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["It is also cumbersome to check the possibility of error at each and every"

I read that as "it is cumbersome to write correct code." As someone who codes from the hip a lot, I love the rigid way golang handles things like this :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/10205605126399928/picture?type=large&_md5=8a8309c2b194d6fec6437964161fe5fc]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[10205605126399928]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462451475]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462450275.279738903045654296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462451475]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462451475.4281780719757080078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462446396.680553913116455078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9865</wp:comment_id>
    <wp:comment_author><![CDATA[Jose Luis Vazquez]]></wp:comment_author>
    <wp:comment_author_email>josvazg@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/110820853372155568247</wp:comment_author_url>
    <wp:comment_author_IP>54.240.197.225</wp:comment_author_IP>
    <wp:comment_date>2016-05-10 11:59:37</wp:comment_date>
    <wp:comment_date_gmt>2016-05-10 10:59:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Cool to know!
Also these "fibers" they seem to perform really well.
Still this is a library, would prefer the JVM to "bite the bullet" and admit this abstraction is superior to plain OS threads in most cases, providing support from the runtime.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9839</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462877977]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462877977.15032100677490234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-ZCnCuG6EMyA/AAAAAAAAAAI/AAAAAAAACXU/Uj9RTldicns/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[110820853372155568247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22664221140]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462877977]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9837</wp:comment_id>
    <wp:comment_author><![CDATA[Jose Luis Vazquez]]></wp:comment_author>
    <wp:comment_author_email>josvazg@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/110820853372155568247</wp:comment_author_url>
    <wp:comment_author_IP>79.97.133.73</wp:comment_author_IP>
    <wp:comment_date>2016-05-05 19:28:11</wp:comment_date>
    <wp:comment_date_gmt>2016-05-05 18:28:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Golang has a garbage collection but this is not a full GC as in Java, there is no memory compaction."

That might be true today, but might not be so tomorrow. Go already does "move memory" changing pointers. It does so since the move to contiguous stacks.

As said before goroutines are basically lightweight contexts managed by the go runtime on top of OS Threads. Each goroutine has a stack that starts small (and many times may not grow much).

When the 2K are too little, the go runtime kicks in and:
1) Gets a new stack of double the size from the heap.
2) Copies the old stack to the new stack BY FIXING the pointers within it, thanks to the fact that the GC is precise in Go, so it knows any piece of memory in the stack whether it is a pointer or not.
3) Releases the old stuck from the heap (or waits for GC to do it probably)
4) The goroutine continues execution on the new stack and ALL the pointers in it have been moved properly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462472891.0921480655670166015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-ZCnCuG6EMyA/AAAAAAAAAAI/AAAAAAAACXU/Uj9RTldicns/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[110820853372155568247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462475753]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462475753]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462475753.1743729114532470703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9828</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.58</wp:comment_author_IP>
    <wp:comment_date>2016-05-03 09:06:35</wp:comment_date>
    <wp:comment_date_gmt>2016-05-03 08:06:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks! I did not know that. But does not surprise me. It is coherent with the style of the language.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9827</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462262797]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462262796]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462262797.0448338985443115234375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9836</wp:comment_id>
    <wp:comment_author><![CDATA[Jose Luis Vazquez]]></wp:comment_author>
    <wp:comment_author_email>josvazg@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/110820853372155568247</wp:comment_author_url>
    <wp:comment_author_IP>79.97.133.73</wp:comment_author_IP>
    <wp:comment_date>2016-05-05 19:15:40</wp:comment_date>
    <wp:comment_date_gmt>2016-05-05 18:15:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I would not compare goroutines to threads the same way I would not compare threads to processes.

Goroutines are VERY lightweight, they start at 2K. You can have literally tenths of thousands or more without exhausting your laptop memory. And all those on top of just a handful of OS threads, maybe just about the same number of cores your machine has. Behind the scenes the Go runtime does a lot of epoll &amp; goroutine context switching for you.

With goroutines the debate on the thread pool size is over for most projects. 
(Still goroutines are cheap but not free, so it always pays off to think a bit to use them wisely instead of falling into overuse.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-ZCnCuG6EMyA/AAAAAAAAAAI/AAAAAAAACXU/Uj9RTldicns/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[110820853372155568247]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462472140.6391880512237548828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462475582]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462475582]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462475582.4624979496002197265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9843</wp:comment_id>
    <wp:comment_author><![CDATA[Timo Reimann]]></wp:comment_author>
    <wp:comment_author_email>ttr314@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/+TimoReimann</wp:comment_author_url>
    <wp:comment_author_IP>92.211.182.1</wp:comment_author_IP>
    <wp:comment_date>2016-05-06 21:41:28</wp:comment_date>
    <wp:comment_date_gmt>2016-05-06 20:41:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["It is easy to miss some error condition and write [code] that just ignores the error."

Quite the contrary, the code example you've given is not even valid: It won't compile since you missed to store the second return value of the Open() call in a variable. This is Go's way of telling you that you must either handle all return values or make a deliberate decision to discard some by using the blank identifier "_". Have a look yourself: https://play.golang.org/p/YmwzOjA3I9

I recommend reading Dave Cheney's blog posts on error handling in Go, starting with http://dave.cheney.net/2012/01/18/why-go-gets-exceptions-right .]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9839</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462581435]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[100423392580505687552]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22555590840]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462572380.4703490734100341796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462567289.2534580230712890625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh6.googleusercontent.com/-Oz6pxLRtTqo/AAAAAAAAAAI/AAAAAAAAPtY/gdqLDoK3K6o/photo.jpg?sz=50]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462581435]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462581435.180675029754638671875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9844</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.155.23</wp:comment_author_IP>
    <wp:comment_date>2016-05-07 11:36:56</wp:comment_date>
    <wp:comment_date_gmt>2016-05-07 10:36:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You are right. I fixed that example not to give the reader a syntactically wrong sample. I admit I fixed it there, it was wrong. Thanks for that.

As for the article you referenced. This is a well written article that I can summary: Exceptions are not perfect in C++ and in Java therefore better we do not use anything like that in Go.

Without starting arguing on one side or the other: there are lots of articles about Go having no exceptions. People got used to it programming in Java, C++, Swift (after 2.0), Python, C# and in other languages. Despite of all imperfections it proved to be a useful construct and programmers miss it. Lack of exceptions in Go (in addition to generics) is actually a great barrier stopping programmers getting closer with Go.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9843</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22567446209]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462617416]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462617416]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462617416.687796115875244140625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9838</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.155.23</wp:comment_author_IP>
    <wp:comment_date>2016-05-05 20:19:23</wp:comment_date>
    <wp:comment_date_gmt>2016-05-05 19:19:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the additions. I was not aware that goroutines are not equivalent to threads. What I experienced though that a computeintensive multi-gorutine application performed the best when the number of go routines were the same as the number of cores in the machine.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9837</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462475964.026721954345703125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462475964]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462475964]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9839</wp:comment_id>
    <wp:comment_author><![CDATA[Adam]]></wp:comment_author>
    <wp:comment_author_email>zellster@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>204.128.192.31</wp:comment_author_IP>
    <wp:comment_date>2016-05-05 22:40:36</wp:comment_date>
    <wp:comment_date_gmt>2016-05-05 21:40:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Lightweight threads in Java: http://docs.paralleluniverse.co/quasar/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462484533]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462484437.387165069580078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462484533]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462484533.3312399387359619140625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12120</wp:comment_id>
    <wp:comment_author><![CDATA[Adriano Fabris]]></wp:comment_author>
    <wp:comment_author_email>adriano.fabris385@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/1162731457111812/</wp:comment_author_url>
    <wp:comment_author_IP>213.149.51.103</wp:comment_author_IP>
    <wp:comment_date>2018-02-05 16:14:46</wp:comment_date>
    <wp:comment_date_gmt>2018-02-05 15:14:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't understand people who thinks that writing code like this is readable.

NOT READABLE AND CONFUSING:

"if a == nil {
        fmt.Println("a is nil")
    } else {
        fmt.Printf("%d\n", a.a)
    }"

READABLE AND LOGICAL:

if a == nil {fmt.Println("a is nil")}
 else 
{fmt.Printf("%d\n", a.a)}

Same people who think first code is right way to do are people who don't see how languages like C++ are overcomplicated.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1517843688.5848200321197509765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.9/1162731457111812/picture?type=large&_md5=96ea70933c69c1afd7a6cfe05a9addb0]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[1162731457111812]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14404599633]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1517845842]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1517845842]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1517845842.4982459545135498046875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12121</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.81</wp:comment_author_IP>
    <wp:comment_date>2018-02-05 16:59:20</wp:comment_date>
    <wp:comment_date_gmt>2018-02-05 15:59:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What is readable and what is not readable very much depends on the reader. We have different brains, we have different experiences. The code that is readable for one person may not be readable for the other.

As the industry stands these days the style you presented as "not readable and confusing" is the defacto standard and it means that really many people think that for them it is readable and not confusing. You can still, however, code in a different style. The consequence is that fewer number of people will be able to easily read your code and thus the maintenance cost will be higher (something that is rare costs higher). At the same time, you may also face finding fewer job possibilities because of your personal style diverting from the industry standard.

If you raised your concerns at the start of the 1970s then perhaps the coding standard would be different today. It is similar to QWERTY keyboard. They may not be optimal if we started from scratch, but I do not think I could learn to type on something else after 35 years of using it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12120</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1517846360]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1517846360.8181450366973876953125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14404891078]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1517846360]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12379</wp:comment_id>
    <wp:comment_author><![CDATA[Anurag]]></wp:comment_author>
    <wp:comment_author_email>anuragthn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>157.36.146.95</wp:comment_author_IP>
    <wp:comment_date>2018-04-12 14:46:53</wp:comment_date>
    <wp:comment_date_gmt>2018-04-12 13:46:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter, Thanks for this great article. To be honest with you I have not read your article but I want to ask you about golang security. I understand that golang is easier than java but Is golang as secure as java or not? For example in case of socket programming and multiplayer online game.

Please give your valuable thoughts and opinion.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1523540814.1907958984375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[16724882449]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1523541084]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1523541084]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1523541084.589210033416748046875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Code Naked]]></title>
  <link>https://javax0.wordpress.com/2016/05/01/code-naked/</link>
  <pubDate>Sun, 01 May 2016 22:23:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1394</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
    <li><em>I can not merge your pull request on our Git.</em></li>
    <li>Why?</li>
    <li><em>There is only one file modified.</em></li>
    <li>That is because we modified only one Java class.</li>
    <li><em>That is exactly the problem. I can not see in the pull request the modified JUnit test.</em></li>
    <li>I could not modify the unit test because there was no any.</li>
    <li><em>I see. And that is a problem of the past. The present problem is that still there is no unit test.</em></li>
    <li>But we have no time to write unit test for the whole program. There are zillion of lines of code developed during the last few hundred years. They have no unit tests and they just work.</li>
    <li><em>I acknowledge that. That is the life when you maintain legacy code. But why did not you write unit test for the change you just created?</em></li>
    <li>There are zillion of lines already...</li>
    <li><em>Yes, those that "work". But your change is new. How do you know that it works?</em></li>
    <li>We just agreed that we do not start to write unit tests now. We do ad-hoc testing.</li>
    <li><em>Okay. Then let's just get back to the basics. Why do we have unit tests? What is the primary reason?</em></li>
    <li>To have working and tested code.</li>
    <li><em>Im my opinion this is more like documentation. Unit test is a live documentation that is more likely to be maintained than any other documenation. You just created a few lines of code without documentation.</em></li>
    <li>I get your point, but we just do not have time for that.</li>
    <li><em>Let's look at the following situation. It is summer and hot. You wake up late and want to rush to fetch the bus. You take the shower and drink your coffe and run to the bus. Right?</em></li>
    <li>Right.</li>
    <li><em>You do not even dress. Run out naked.</em></li>
    <li>No! No! I dress!</li>
    <li><em>But you have no time. You are in a rush. If you have time to dress yourself why do you let your code run to production without unit tests naked?</em></li>
    <li>I get the point. But you can survive without unit tests. If you run on the street naked you will not survive.</li>
    <li><em>Why is that? The summer is hot, you will not catch cold.</em></li>
    <li>Yeah, but police would catch you.</li>
    <li><em>So this is a kind of society issue, is it?</em></li>
    <li>Yes, it is.</li>
    <li><em>And the coding society is not that matured yet, it lets you run naked without unit tests.</em></li>
    <li>I assume... yes.</li>
</ul>

we still have a long way to go ahead of us...]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1394</wp:post_id>
  <wp:post_date>2016-05-01 23:23:54</wp:post_date>
  <wp:post_date_gmt>2016-05-01 22:23:54</wp:post_date_gmt>
  <wp:post_modified>2019-10-08 14:29:42</wp:post_modified>
  <wp:post_modified_gmt>2019-10-08 13:29:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-naked</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/ULkFYNxynVp]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22375110125]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6132667436396265472&type=U&a=K0rv]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10208017194600423";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/726901777770012672";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9823</wp:comment_id>
    <wp:comment_author><![CDATA[tvk]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>91.82.100.194</wp:comment_author_IP>
    <wp:comment_date>2016-05-02 11:57:40</wp:comment_date>
    <wp:comment_date_gmt>2016-05-02 10:57:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There's always time for having a conversation about having no time for writing unit tests.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[3]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462186661]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462186661.13035106658935546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22391684210]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462186661]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9906</wp:comment_id>
    <wp:comment_author><![CDATA[Vasile Boris]]></wp:comment_author>
    <wp:comment_author_email>vasileboris@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://espressoprogrammer.com/</wp:comment_author_url>
    <wp:comment_author_IP>176.223.64.4</wp:comment_author_IP>
    <wp:comment_date>2016-05-17 14:22:30</wp:comment_date>
    <wp:comment_date_gmt>2016-05-17 13:22:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There are projects were the clients do not want to pay for unit tests. I did not worked in such a project but I heard that it is a common practice. I heard that they explain that they will do the testing so there is not need to also unit test it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1463491727]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1463491727.4148209095001220703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22899346772]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1463491727]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1463491350.8245379924774169921875;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"vasileboris";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9821</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2016-05-02 09:00:15</wp:comment_date>
    <wp:comment_date_gmt>2016-05-02 08:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So, we walk on the street naked because everybody else does. Thus we have lots of code out there that "works" :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462176015]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462176015.9844989776611328125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462176016]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9822</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>209.85.213.169</wp:comment_author_IP>
    <wp:comment_date>2016-05-02 09:20:42</wp:comment_date>
    <wp:comment_date_gmt>2016-05-02 08:20:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So you're the "police" kind of guy. I think that's why my algorithms are better than yours.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_by_email_id</wp:meta_key>
      <wp:meta_value><![CDATA[8717748]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22387966997]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1462177323]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462177323]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462177323.61040496826171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462177243.6316509246826171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9907</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.140</wp:comment_author_IP>
    <wp:comment_date>2016-05-17 14:31:15</wp:comment_date>
    <wp:comment_date_gmt>2016-05-17 13:31:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There are car owners, who do not bring their car to service. They explain that they do brake regularly so they will know when there is some problem with the brakes, so there is no need for the service testing the brakes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9906</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1463491875]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1463491875]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[3]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1463491875.2018549442291259765625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22899416735]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10302</wp:comment_id>
    <wp:comment_author><![CDATA[matopeter]]></wp:comment_author>
    <wp:comment_author_email>mato.peter@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>46.139.168.176</wp:comment_author_IP>
    <wp:comment_date>2016-11-06 09:29:29</wp:comment_date>
    <wp:comment_date_gmt>2016-11-06 08:29:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And... They will ;D]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9907</wp:comment_parent>
    <wp:comment_user_id>73259636</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[28656187027]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1478519694]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1478519694]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1478519694.529098033905029296875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1478425987.4003078937530517578125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"matopeter";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1478420969.9880249500274658203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"matopeter";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10303</wp:comment_id>
    <wp:comment_author><![CDATA[KemÃ©ny AndrÃ¡s]]></wp:comment_author>
    <wp:comment_author_email>pdx@pdx.hu</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10153429545856536/</wp:comment_author_url>
    <wp:comment_author_IP>178.48.104.163</wp:comment_author_IP>
    <wp:comment_date>2016-11-06 10:16:38</wp:comment_date>
    <wp:comment_date_gmt>2016-11-06 09:16:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[ah, come on peter, you know unit testing is for wussies. anything you can test by unit testing is so simple it's actually embarrassing you have to test it. anyway, any code that is so divided that all its pieces can be unit-tested separately is guaranteed to be a shameless resource hog.

now, integration tests... that's where the point is. alas, they are almost as complicated as (and in most cases, actually MORE complicated than) the software they're testing. the systems i code would humongously benefit from integration tests as they tend to have a lot of simple parts interconnected in very, hm, exciting ways.

but most of the clients are, "nah, we'll fix any errors that pop up in the production run." actually, unless you're stupid enough to code bugs that cause actual unfixable data corruption or hard cash losses, then, with a bit of a devotion to fixing errors, it's a viable option.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[10153429545856536]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/10153429545856536/picture?type=large&_md5=cdac78aae9e6c1e29562cfb062b426a3]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478633554.1633899211883544921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478423799.809524059295654296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[127422708]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1482842174]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1482842174]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482842174.87744808197021484375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10304</wp:comment_id>
    <wp:comment_author><![CDATA[KemÃ©ny AndrÃ¡s]]></wp:comment_author>
    <wp:comment_author_email>pdx@pdx.hu</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10153429545856536/</wp:comment_author_url>
    <wp:comment_author_IP>178.48.104.163</wp:comment_author_IP>
    <wp:comment_date>2016-11-06 10:17:07</wp:comment_date>
    <wp:comment_date_gmt>2016-11-06 09:17:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[are you a car owner, peter? :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9907</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478633554.593141078948974609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.2/10153429545856536/picture?type=large]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1478423828.57100009918212890625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[10153429545856536]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482842176.5481660366058349609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[127423357]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1482842175]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1482842175]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29393</wp:comment_id>
    <wp:comment_author><![CDATA[Java Testing Weekly 19 / 2016]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.petrikainulainen.net/weekly/java-testing-weekly-19-2016/</wp:comment_author_url>
    <wp:comment_author_IP>31.187.84.41</wp:comment_author_IP>
    <wp:comment_date>2020-07-10 20:57:18</wp:comment_date>
    <wp:comment_date_gmt>2020-07-10 19:57:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Code Naked is an entertaining blog post that describes the discussion of two developers. The first developer tries to explain to the second developer why he cannot marge the pull request made by the second developers because it has no automated tests. Unfortunately, the second developer doesn&#8217;t seem to get it. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1594416206.712862;s:5:"event";s:10:"check-spam";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[true]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1594411039.245446;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user</wp:meta_key>
      <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1594454020.628732;s:5:"event";s:10:"report-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1594454019]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Architects Don't Decide]]></title>
  <link>https://javax0.wordpress.com/2016/05/04/architects-dont-decide/</link>
  <pubDate>Tue, 03 May 2016 23:00:05 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1400</guid>
  <description/>
  <content:encoded><![CDATA[As pointed out in the article <a href="http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html">A Little Architecture</a> from Robert C. Martin the job of the architect is not

<blockquote>
...to lead a team and make all the important decisions about databases and frameworks and web-servers and all that stuff.
</blockquote>

It is to make

<blockquote>
decisions that a Software Architect makes are the ones that allow you to NOT make the decisions about the database, and the webserver, and the frameworks.
</blockquote>

As the article pointed out juniors have many times different view about the tasks that a senior does than the senior who does it. It is not only the subject of the decision however. This is a bit more. Juniors see the position of an architect as a position of power. He has the right and the power to make decisions. Having the power is always good. You long to have the position of power, don't you. Up to certain age, maturity.

When you get into the position of being an architect you realize that the power is not a privilege. It is a reponsibility. The system the team develops, the architecture, the network, hardware, the operation is not a play field to satisfy your curiosity. It is a professional environment that works based on profit and lost, budget and costs, money, money, money. The decision the architect makes should not be biased by the actual person's interest. This is, by the way, a very common mistake. <em>"Let's use NoSQL because that is so fancy! We have to use big data!"</em>

The actual decision should lead to a solution that meets availability, performance, reliability, scalability, manageability and cost criteria. (Btw: the first six critera should be met, the last one should be at least met and minimized, but that is a different story.)

The actual decisions on the architecture and solutions (finally when unavoidable also about framework and database and other stuff) depends on many things. License structure, license cost, company culture, available developers, deadline/time to market, architecture already in place to name a few. If you consider all the constraints you have to meet you will not have too many choices. There will be compromises and finally you will end up with the only one selection that fits. That one is going to be your decision.

Did you really make a decision?
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1400</wp:post_id>
  <wp:post_date>2016-05-04 00:00:05</wp:post_date>
  <wp:post_date_gmt>2016-05-03 23:00:05</wp:post_date_gmt>
  <wp:post_modified>2016-05-04 15:20:32</wp:post_modified>
  <wp:post_modified_gmt>2016-05-04 14:20:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>architects-dont-decide</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/474RVtJHPMt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22470671868]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6133631202390798336&type=U&a=lorZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10208035142249103";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/727865546859909120";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9841</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.184.144</wp:comment_author_IP>
    <wp:comment_date>2016-05-06 09:54:11</wp:comment_date>
    <wp:comment_date_gmt>2016-05-06 08:54:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It very well may be wrong from a personal point of view, but it is certainly professional.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9833</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462524851]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462524851.6085491180419921875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462524851]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9833</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.ai1.lol</wp:comment_author_url>
    <wp:comment_author_IP>176.7.88.110</wp:comment_author_IP>
    <wp:comment_date>2016-05-04 17:04:08</wp:comment_date>
    <wp:comment_date_gmt>2016-05-04 16:04:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  the operation is not a play field to satisfy your curiosity
</blockquote>

Then You're doing it wrong]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1462377849]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1462377849.173945903778076171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1462377849]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Try and Catch in Golang]]></title>
  <link>https://javax0.wordpress.com/2016/05/25/try-and-catch-in-golang/</link>
  <pubDate>Wed, 25 May 2016 09:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1422</guid>
  <description/>
  <content:encoded><![CDATA[Golang as opposed to Java does not have exceptions, try/catch/finally blocks. It has strict error handling, functions called panic and recover and a statement named defer. It is a totally different approach. Is it better or is the Java approach the superior? (Sorry that I keep comparing it to Java. I am coming from Java world.)

When we handle exceptional cases in Java we enclose the commands into a 'try' block denoting that something may happen that we want to handle later in a 'catch' block. Then we have the 'finally' block that contains all the things that are to be executed no matter what. The problem with this approach is that it separates the commands that belong to the same concern. We want to deal with some file. So we open a file and later, no matter what, we want to close it. When the programmer writes the finally block the file opening is far away somewhere at the start of the method. To remember all the things that we have to do to clean up the actions at the start of the method you have to scroll up to the start of the method where the 'try' block starts.

Okay! I know that your method is too long if you have to scroll back. Your methods follow clean code principles and are not longer than ten lines each including JavaDoc. Even though the issue is still there. It is formulated according to order the execution is expected and not according to the order the logic dictates. The logic says the following: if I open a file, I will want to close it. If I allocate some resource I will want to release it. It is better keeping the concerns together. We are not programing in assembly where you write the mnemonics in the strict order of execution. We define the algorithmic solution in a high level language and the compiler will generate the assembly. Real work has to be done by the brain, mechanical work is for the CPU. These days we have CPUs.

Golang has the command 'defer' for the purpose. You open a file and you mention on the next line that you will want it to be closed some time calling the function you provide. This is the much better approach, which the developers of the Java language also know hence introducing the interface 'closeable' and try-with-resources statement.

Still programmers coming from the Java world begin introduced to Go are longing for exception handling. If you really want you can mimic it in Go. It will not be the same and I do not really get the point why to ruin something that is good to something old and mediocre, but you can write

[code language="java"]
Block{
		Try: func() {
			fmt.Println(&quot;I tried&quot;)
			Throw(&quot;Oh,...sh...&quot;)
		},
		Catch: func(e Exception) {
			fmt.Printf(&quot;Caught %v\n&quot;, e)
		},
		Finally: func() {
			fmt.Println(&quot;Finally...&quot;)
		},
	}.Do()
[/code]

Homework: find out the sample code that is before these lines (Go constructs) that make this possible. Solution is here: https://play.golang.org/p/LXroobH8SM

[code language="java" collapse="true"]
package main

import (
	&quot;fmt&quot;
)

type Block struct {
	Try     func()
	Catch   func(Exception)
	Finally func()
}

type Exception interface{}

func Throw(up Exception) {
	panic(up)
}

func (tcf Block) Do() {
	if tcf.Finally != nil {

		defer tcf.Finally()
	}
	if tcf.Catch != nil {
		defer func() {
			if r := recover(); r != nil {
				tcf.Catch(r)
			}
		}()
	}
	tcf.Try()
}

func main() {
	fmt.Println(&quot;We started&quot;)
	Block{
		Try: func() {
			fmt.Println(&quot;I tried&quot;)
			Throw(&quot;Oh,...sh...&quot;)
		},
		Catch: func(e Exception) {
			fmt.Printf(&quot;Caught %v\n&quot;, e)
		},
		Finally: func() {
			fmt.Println(&quot;Finally...&quot;)
		},
	}.Do()
	fmt.Println(&quot;We went on&quot;)
}

[/code]

See also a recent similar solution at http://hackthology.com/exceptions-for-go-as-a-library.html from <a href="http://hackthology.com/pages/about.html">Tim Henderson</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1422</wp:post_id>
  <wp:post_date>2016-05-25 10:00:00</wp:post_date>
  <wp:post_date_gmt>2016-05-25 09:00:00</wp:post_date_gmt>
  <wp:post_modified>2016-05-25 11:19:32</wp:post_modified>
  <wp:post_modified_gmt>2016-05-25 10:19:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>try-and-catch-in-golang</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e289d253c8f27e1cc3d5a2d7af758727</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/EZX6vcXy2gK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23161670551]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6141161488108306432&type=U&a=6A1t]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10208191847006624";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/735395824293806080";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9942</wp:comment_id>
    <wp:comment_author><![CDATA[Maaartinus]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>178.255.168.75</wp:comment_author_IP>
    <wp:comment_date>2016-05-25 20:45:02</wp:comment_date>
    <wp:comment_date_gmt>2016-05-25 19:45:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting stuff, but without knowing more about golang, I'm a bit lost. Is there something preventing people from ignoring errors? Isn't it the existence of both error return and panic confusing?

Just a remark:

<blockquote>
  <i>The logic says the following: if I open a file, I will want to close it.</i>
</blockquote>

This sounds like Lombok:
@Cleanup InputStream in = new FileInputStream("file");
IMHO pretty unbeatable (though not as flexible as defer).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23373473995]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464209872.5708160400390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464721795]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464205503.4780499935150146484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464227017]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464227017.8003499507904052734375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464721794.13728809356689453125;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464721795.511064052581787109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9977</wp:comment_id>
    <wp:comment_author><![CDATA[Ofux]]></wp:comment_author>
    <wp:comment_author_email>ofux@yopmail.fr</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.58.223.72</wp:comment_author_IP>
    <wp:comment_date>2016-06-03 12:46:41</wp:comment_date>
    <wp:comment_date_gmt>2016-06-03 11:46:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["If a language can be abused it will be abused." Sure, and Go actually tries to limit the possibilities to abuse it as much as possible. Panic is a case where it can be abused and I think the only way to prevent that is to tell loudly to everyone what are the best practices.

In the end I agree, your sentence âIt will not be the same and I do not really get the point why to ruin something that is good to something old and mediocre, but you can writeâ should be enough for a reasonable programmer. However, I don't see any reason to show and explain how to make bad things.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9968</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464954404.0927650928497314453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464954403]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464954404]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23468758122]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9979</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>165.222.185.143</wp:comment_author_IP>
    <wp:comment_date>2016-06-03 14:27:54</wp:comment_date>
    <wp:comment_date_gmt>2016-06-03 13:27:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["I donât see any reason to show and explain how to make bad things."

The damage is already there in form of libraries.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9968</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23471303390]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464960474]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464960474.0411140918731689453125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464960474]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9968</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.155.23</wp:comment_author_IP>
    <wp:comment_date>2016-05-31 20:38:56</wp:comment_date>
    <wp:comment_date_gmt>2016-05-31 19:38:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am not that certain that the only good way in Go handling errors is only error return values. For the purpose Go was intended for it seems like that. However successful programming languages are used by programmers for much wider aim that it was originally meant. For uses we can not fore see we can not certainly state that 'panic'-ing is generally bad.

It generally is a good advice not to abuse a language and follow the recommendations of the language creators until you understand all the details of the language and the implementation better than the implementors. On the other hand any language is as bad as much it can be abused. If a language can be abused it will be abused.

I think that for a reasonable programmer, who can read English the sentence: <i>"It will not be the same and I do not really get the point why to ruin something that is good to something old and mediocre, but you can write"</i> should be enough.

If I explain to you how a firearm works it does not necessarily mean I was telling you to shoot yourself in the head.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9966</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23374306978]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464723536]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464723536.8627378940582275390625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464723536]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9966</wp:comment_id>
    <wp:comment_author><![CDATA[Ofux]]></wp:comment_author>
    <wp:comment_author_email>ofux@yopmail.fr</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.58.223.72</wp:comment_author_IP>
    <wp:comment_date>2016-05-31 09:14:19</wp:comment_date>
    <wp:comment_date_gmt>2016-05-31 08:14:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Defer is indeed far better than try/catch/finally.
I think you should clearly write that the code you give to mimic Java exceptions must NOT be used. It goes against all rules of error handling in Go. Panics should be used only for truly unexpected errors (an IO error when you open a file is definitely not in this case). I find your article good, but I'm a bit afraid that people new to Go think your code is fine while it isn't.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464687140.46463298797607421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23373491384]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464721836]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464721836]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464721836.0440170764923095703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464682460.7075340747833251953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9967</wp:comment_id>
    <wp:comment_author><![CDATA[Ofux]]></wp:comment_author>
    <wp:comment_author_email>ofux@yopmail.fr</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.58.223.72</wp:comment_author_IP>
    <wp:comment_date>2016-05-31 09:26:49</wp:comment_date>
    <wp:comment_date_gmt>2016-05-31 08:26:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can still ignore errors if you want (by discarding the errors returned by a function) but you will have to do that explicitly. In other words, in Go, you need a good reason to ignore an error which is an excellent thing IMHO.

Panic is not confusing because it must be used only for truly unexpected errors (such as diving by zero, or trying to make some operation on a nil reference). All other errors (such as an IO error when you open a file) must be treated by returning error(s) from functions (which is why I don't like at all the code given at the end of this article). As far as you can have multiple returns for a single function in Go, it's quite elegant.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9942</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464687140.572369098663330078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464683210.3163530826568603515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[23373496004]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1464721846]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1464721846]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1464721846.1880779266357421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Microbenchmarking comes to Java 9]]></title>
  <link>https://javax0.wordpress.com/2016/09/11/microbenchmarking-comes-to-java-9/</link>
  <pubDate>Sun, 11 Sep 2016 14:20:13 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1433</guid>
  <description/>
  <content:encoded><![CDATA[<img src="https://d1ldz4te4covpm.cloudfront.net/sites/default/files/imagecache/ppv4_main_book_cover/B05673_MockupCover_Normal_.jpg" align="left" />I have not written article here for a few months and this will also continue with this exception. I plan to return writing around next year March. Explanation at the end of the this article. Wait! Not exactly at the end, because you could just scroll down. It is somewhere towards the end of the article. Just read on!

Three years ago I was <a href="https://javax0.wordpress.com/2013/01/29/does-javac-do-optimization-does-not-seem/">writing about how Java compiler optimizes</a> the code it executes. Or rather how <tt>javac</tt> does not do that and the same time JIT does. I made some benchmarks, some really bad ones as it was mentioned by <a href="https://plus.google.com/+EskoLuontola">Esko Luontola</a>. These benchmarks were meant to show that JIT optimize even before it could gather significant statistical data about the execution of the code.

The article was created in January 2013. and the very first source code upload of <a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a> (Java Microbenchmark Harness) happened two month later. Since that time the harness developed a lot and next year it becomes part of the next release of Java. I have a contract to write a <a href="https://www.packtpub.com/application-development/java-9-programming-example">book</a> about Java 9, and its chapter 5 should cover Java 9 microbenchmarking possibilities, among other things. It is a good reason to start something to play with around JMH.

Before getting into the details how to use JMH and what it is good for, let's talk about a bit microbenchmarking.
<h1>Microbenchmarking</h1>
Microbenchmarking is measuring the performance of some small code fragment. It is rarely used and before starting to do a microbenchmark for real commercial environment we have to think twice. Remember that premature optimization is root of all evil. Some developers created a generalization of this statement saying that optimization itself is root of all evil, which may be true. Especially if we mean microbenchmarking.

Microbenchmarking is a luring tool to optimize something small without knowing if it is worth optimizing that code. When we have a huge application that has several modules, run on several servers how can we be sure that improving some special part of the application drastically improves the performance? Will it pay back in increased revenue that generates so much profit that will cover the cost we burnt into the performance testing and development? I am reluctant to say that you can not know that but only because such a statement would be too broad. Stadistically almost sure that such an optimization including microbenchmarking will not pain off most of the time. It will hurt, you just may not notice it, or even enjoy it, but that is a totally different story.

When to use microbenchmarking? I can see three areas:
<ol>
	<li>You write an article about microbenchmarking.</li>
	<li>You identified the code segment that eats most of the resources in your application and the improvement can be tested by microbenchmarks.</li>
	<li>You can not identify the code segment that will eat most of the resources in an application but you suspect it.</li>
</ol>
The first area is a joke. Or not: you can play around with microbenchmarking to understand how it works and then to understand how Java code works, what runs fast and what does not. Last year <a href="http://blog.takipi.com/java-9-code-tools-a-hands-on-session-with-the-java-microbenchmarking-harness/">Takipi posted</a> an article where they tried to measure the speed of lambdas. Read it, very good article and clearly demonstrates the major advantage of blogging over writing something for the print. Readers commented and pointed out errors and they were corrected in the article.

The second is the usual case. Okay, before a reader, commented corrects me: the second should have been the usual case. The third is when you develop a library and you just do not know all the applications that will use it. In that case you will try to optimize the part that you think is the most crucial for most of the imagined, suspected applications. Even in that case it is better to take some sample applications.
<h1>Pitfalls</h1>
What are the pitfalls of Microbenchmarking? Benchmarking is done as experiment. The first programs I wrote were TI calculator code and I could just count the number of steps the program made to factor two large (10 digits that time) prime numbers. Even that time I was using an old Russian stop watch to measure the time being lazy to calculate the number of steps. Experiment and measurement was easier.

Today you could not calculate the number of steps the CPU makes. There are so many small factors that may change the performance of the application that are out of control of the programmer that it is impossible to make a calculation of the steps. We have the measurement left for us and we gain all the problems with all the measurements.

What is the biggest problem of measurements? We are interested in something, say X and we usually can not measure that. So we measure instead Y and hope that the value of Y and X are coupled together. We want to measure the length of the room, but instead we measure the time it takes for the laser beam to travel from one end to the other. In this case the length X and the time Y are strongly coupled. Many times X and Y only correlate more or less. Most of the times when people do measurement the values X and Y have no relation to each other at all. Still people put their money and more on decisions backed by such measurements. Think about the political elections as an example.

Microbenchmarking is no different. It is hardly ever done well. If you are interested in details and possible pitfalls <a href="https://shipilev.net/#benchmarking">Aleksey Shipilev</a> has a good one hour video. The first question is how to measure the execution time. Small code runs short times and <tt>System.currentTimeMillis()</tt> may just return the same value when the measurement starts and when it ends, because we are still in the same millisecond. Even if the execution is 10ms the error of the measurement is still at least 10% purely because of the quantization of the time as we measure. Luckily there is <tt>System.nanoTime()</tt>. <a href="https://www.youtube.com/watch?v=qY2Vx8-yOsQ">We happy, Vincent?</a>

Not really. <tt>nanoTime()</tt> <em>returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds</em> as the documentation says. What is "current"? When the invocation was made? Or when it was returned? Or sometime between? Select the one you want and you may still fail. That current value could have been the same during the last 1000ns that is all Java implementations should guarantee.

And another caveat before using <tt>nanoTime()</tt> from the documentation: <em>Differences in successive calls that span greater than approximately 292 years (263 nanoseconds) will not correctly compute elapsed time due to numerical overflow.</em>

292 years? Really?

There are other problems as well. When you start up a Java code the first few thousand executions of the code will be interpreted or executed without run-time optimization. JIT has the advantage over compilers of statically compiled languages like Swift, C, C++ or Golang that it can gather run-time information from the execution of the code and when it sees that the compilation it performed last time could have been better based on recent run-time statistics it compiles the code again. The same may be true for the garbage collection that also tries to use statistics to tune its operational parameters. Because of this well written server applications gain a bit of performance over time. They start up a bit slower and then they just become faster. If you restart the server the whole iteration starts again.

If you do micro benchmarks you should care about this behavior. Do you want to measure the performance of the application during warm-up time or how it really executes during operation?

The solution is a micro benchmarking harness that tries to consider all these caveats. The one that gets to Java 9 is JMH.
<h1>What is JMH?</h1>
<em>"JMH is a Java harness for building, running, and analyzing nano/micro/milli/macro benchmarks written in Java and other languages targeting the JVM."</em> (quote from the <a href="http://openjdk.java.net/projects/code-tools/jmh/">official site of JMH</a>)

You can run jmh as a separate project independent from the actual project you measure or you can just store the measurement code in a separate directory. The harness will compile against the production class files and will execute the benchmark. The easiest way, as I see, is to use the Gradle plugin to execute JMH. You store the benchmark code in a directory called <tt>jmh</tt> (the same level as <tt>main</tt> and <tt>test</tt>) and create a <tt>main</tt> that can start the benchmark.

[sourcecode language="java"]
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import java.io.IOException;

public class MicroBenchmark {

public static void main(String... args) throws IOException, RunnerException {
Options opt = new OptionsBuilder()
.include(MicroBenchmark.class.getSimpleName())
.forks(1)
.build();

new Runner(opt).run();
}
[/sourcecode]

There is a nice builder interface for the configuration and a <tt>Runner</tt> class that can execute the benchmarks.
<h1>Playing a bit</h1>
In the book <a href="https://www.packtpub.com/application-development/java-9-programming-example">Java 9 Programming By Example</a> one of the examples is the <a href="https://en.wikipedia.org/wiki/Mastermind_(board_game)">Mastermind game</a>. <a href="https://github.com/j9be/chapter05">Chapter 5</a> is all about solving the game parallel to speed up the guessing. (If you do not know the game, please read it on Wikipedia, I do not want to explain it here, but you will need it to understand the following.)

The normal guessing is simple. There is a secret hidden. The secret is four pegs of four different color out of 6 colors. When we guess we take the possible color variations one after the other and ask the question the table: if this selection is the secret are all answers correct? In other words: can this guess be hidden or is there some contradiction in the answers for some previous answers? If this guess can be the secret then we will give it a try putting the pegs on the table. The answer may be 4/0 (alleluia) or something else. In the latter case we go on searching. This way the 6 color, 4 columns table can be solved in five steps.

For the sake of simplicity and visualization we name the colors with numbers, like <tt>01234456789</tt> (we have ten colors in the jmh benchmark since 6 colors are just no enough) and 6 pegs. The secret we use is <tt>987654</tt> because this is the last guess as we go from <tt>123456</tt>, <tt>123457</tt> and so on.

When I first coded this game in August 1983 on a Swedish school computer (ABC80) in BASIC language each guessing took 20 to 30 seconds on the z80 processor running on 40MHz 6 colors, 4 positions. Today my MacBook Pro can play the whole game using single thread approximately 7 times in a second using 10 colors and 6 pegs. But that is not enough when I have 4 processors in the machine supporting 8 parallel threads.

To speed up the execution I split up the guess space into equal intervals and I started separate guessers each spitting guesses into a blocking queue. The main thread reads from the queue and puts the guesses on the table as they come. There are some post processing that may be needed in case some of the threads create a guess that becomes outdated by the time the main thread tries to use it as a guess but still we expect huge speed up.

Does it really speed up the guessing? That is JMH here for.

To run the benchmark we need some code that actually executes the game

[sourcecode language="java"]
@State(Scope.Benchmark)
public static class ThreadsAndQueueSizes {
@Param(value = {&quot;1&quot;, &quot;4&quot;, &quot;8&quot;, &quot;16&quot;, &quot;32&quot;})
String nrThreads;
@Param(value = { &quot;1&quot;, &quot;10&quot;, &quot;100&quot;, &quot;1000000&quot;})
String queueSize;

}

@Benchmark
@Fork(1)
public void playParallel(ThreadsAndQueueSizes t3qs) throws InterruptedException {
int nrThreads = Integer.valueOf(t3qs.nrThreads);
int queueSize = Integer.valueOf(t3qs.queueSize);
new ParallelGamePlayer(nrThreads, queueSize).play();
}

@Benchmark
@Fork(1)
public void playSimple(){
new SimpleGamePlayer().play();
}
[/sourcecode]

The JMH framework will execute the code several time measuring the time to run with several parameters. The method <tt>playParallel</tt> will be executed to run the algorithm for 1, 4, 5, 10 and 32 threads each with 1, 10, 100 and one million maximum queue length. When the queue is full the individual guessers stop with their guessing until the main thread pulls at least one guess off the queue.

I suspected if we have many threads and we do not limit the length of the queue then the worker threads will fill the queue with initial guesses that are just based on an empty table and thus does not deliver much value. What do we see after almost 15 minutes of execution?

[sourcecode]
Benchmark                    (nrThreads)  (queueSize)   Mode  Cnt   Score   Error  Units
MicroBenchmark.playParallel            1            1  thrpt   20   6.871 Â± 0.720  ops/s
MicroBenchmark.playParallel            1           10  thrpt   20   7.481 Â± 0.463  ops/s
MicroBenchmark.playParallel            1          100  thrpt   20   7.491 Â± 0.577  ops/s
MicroBenchmark.playParallel            1      1000000  thrpt   20   7.667 Â± 0.110  ops/s
MicroBenchmark.playParallel            4            1  thrpt   20  13.786 Â± 0.260  ops/s
MicroBenchmark.playParallel            4           10  thrpt   20  13.407 Â± 0.517  ops/s
MicroBenchmark.playParallel            4          100  thrpt   20  13.251 Â± 0.296  ops/s
MicroBenchmark.playParallel            4      1000000  thrpt   20  11.829 Â± 0.232  ops/s
MicroBenchmark.playParallel            8            1  thrpt   20  14.030 Â± 0.252  ops/s
MicroBenchmark.playParallel            8           10  thrpt   20  13.565 Â± 0.345  ops/s
MicroBenchmark.playParallel            8          100  thrpt   20  12.944 Â± 0.265  ops/s
MicroBenchmark.playParallel            8      1000000  thrpt   20  10.870 Â± 0.388  ops/s
MicroBenchmark.playParallel           16            1  thrpt   20  16.698 Â± 0.364  ops/s
MicroBenchmark.playParallel           16           10  thrpt   20  16.726 Â± 0.288  ops/s
MicroBenchmark.playParallel           16          100  thrpt   20  16.662 Â± 0.202  ops/s
MicroBenchmark.playParallel           16      1000000  thrpt   20  10.139 Â± 0.783  ops/s
MicroBenchmark.playParallel           32            1  thrpt   20  16.109 Â± 0.472  ops/s
MicroBenchmark.playParallel           32           10  thrpt   20  16.598 Â± 0.415  ops/s
MicroBenchmark.playParallel           32          100  thrpt   20  15.883 Â± 0.454  ops/s
MicroBenchmark.playParallel           32      1000000  thrpt   20   6.103 Â± 0.867  ops/s
MicroBenchmark.playSimple            N/A          N/A  thrpt   20   6.354 Â± 0.200  ops/s
[/sourcecode]

(In score the more is the better.) It shows that the best performance we get if we start 16 threads and if we somewhat limit the length of the queue. Running the parallel algorithm on one thread (a mater and a worker) is somewhat slower than the single thread implementation. This seems to be okay: we have the overhead of starting a new thread and communication between the threads. The maximum performance we have is around 16 threads. Since we can have 8 cores in this machine we expected the peek around 8. Why is that?

What happens if we replace the standard secret <tt>987654</tt> (which is boring after a while even for a CPU) with something random?

[sourcecode]
Benchmark                    (nrThreads)  (queueSize)   Mode  Cnt   Score   Error  Units
MicroBenchmark.playParallel            1            1  thrpt   20  12.141 Â± 1.385  ops/s
MicroBenchmark.playParallel            1           10  thrpt   20  12.522 Â± 1.496  ops/s
MicroBenchmark.playParallel            1          100  thrpt   20  12.516 Â± 1.712  ops/s
MicroBenchmark.playParallel            1      1000000  thrpt   20  11.930 Â± 1.188  ops/s
MicroBenchmark.playParallel            4            1  thrpt   20  19.412 Â± 0.877  ops/s
MicroBenchmark.playParallel            4           10  thrpt   20  17.989 Â± 1.248  ops/s
MicroBenchmark.playParallel            4          100  thrpt   20  16.826 Â± 1.703  ops/s
MicroBenchmark.playParallel            4      1000000  thrpt   20  15.814 Â± 0.697  ops/s
MicroBenchmark.playParallel            8            1  thrpt   20  19.733 Â± 0.687  ops/s
MicroBenchmark.playParallel            8           10  thrpt   20  19.356 Â± 1.004  ops/s
MicroBenchmark.playParallel            8          100  thrpt   20  19.571 Â± 0.542  ops/s
MicroBenchmark.playParallel            8      1000000  thrpt   20  12.640 Â± 0.694  ops/s
MicroBenchmark.playParallel           16            1  thrpt   20  16.527 Â± 0.372  ops/s
MicroBenchmark.playParallel           16           10  thrpt   20  19.021 Â± 0.475  ops/s
MicroBenchmark.playParallel           16          100  thrpt   20  18.465 Â± 0.504  ops/s
MicroBenchmark.playParallel           16      1000000  thrpt   20  10.220 Â± 1.043  ops/s
MicroBenchmark.playParallel           32            1  thrpt   20  17.816 Â± 0.468  ops/s
MicroBenchmark.playParallel           32           10  thrpt   20  17.555 Â± 0.465  ops/s
MicroBenchmark.playParallel           32          100  thrpt   20  17.236 Â± 0.605  ops/s
MicroBenchmark.playParallel           32      1000000  thrpt   20   6.861 Â± 1.017  ops/s
[/sourcecode]

The performance increases since we do not need to go though all the possible variations. In case of one thread the increase is double. In case of multiple threads the gain is not that much. And note that this does not speed the code itself up, only measures more realistically using statistical, random secrets. What we can also see that the gain of 16 threads over 8 threads is not significant any more. This is significant only when we select a secret that is towards the end of the variations. Why? From what you have seen here and from the source code available in GitHub you can give an answer to that.
<h1>Summary</h1>
The book <a href="https://www.packtpub.com/application-development/java-9-programming-example"> Java 9 Programming By Example </a> is planned to be released February 2017. But since we are living in an open source world you can get access controlled by the publisher to <tt>1.x.x-SNAPSHOT</tt> versions. Now I told you the preliminary GitHub URL that I use while I develop code for the book and you can also preorder the eBook and give feedback helping me to create a better book.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1433</wp:post_id>
  <wp:post_date>2016-09-11 15:20:13</wp:post_date>
  <wp:post_date_gmt>2016-09-11 14:20:13</wp:post_date_gmt>
  <wp:post_modified>2016-09-17 20:56:58</wp:post_modified>
  <wp:post_modified_gmt>2016-09-17 19:56:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>microbenchmarking-comes-to-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d8b5148f62b1a8eaead6978e216fd6f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e8c8a3b0feb37bf87bf6204596105fb7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/LZA8o3Zokb7]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10209083586619557";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/774975928778657794";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26714191579]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6180741572624203777&type=U&a=GrKO]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10157</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2016-09-12 14:08:41</wp:comment_date>
    <wp:comment_date_gmt>2016-09-12 13:08:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Aw, found a typo: For the <em>shake</em> of simplicity.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[26745559628]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1473685725]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1473685723.7523229122161865234375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1473685723]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10156</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2016-09-12 14:04:35</wp:comment_date>
    <wp:comment_date_gmt>2016-09-12 13:04:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I really like this post. Mostly because it makes clear when to use a microbenchmark: when you know which part of your code you want to speed up, or when you don't know where's the bottleneck.

There's another caveat though: the benchmark results aren't necessarily consistent through different machine architectures. This article from Brian Goetz points out this and several other possible flaws: https://www.ibm.com/developerworks/java/library/j-jtp02225/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1473685478]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1473685477]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1473685477.7879741191864013671875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Final volatile]]></title>
  <link>https://javax0.wordpress.com/2016/09/21/final-volatile/</link>
  <pubDate>Wed, 21 Sep 2016 15:00:40 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1460</guid>
  <description/>
  <content:encoded><![CDATA[I was writing my <a href="https://www.packtpub.com/application-development/java-9-programming-example">book</a> over the weekend and I was looking for some simple example that could demonstrate the real need of <tt>volatile</tt> modifier in multi-thread code. Years ago when I last time demonstrated the multi-thread capability Java was still 32-bit, or at least there was 32-bit Java available. On 32 bits you could concurrently increment long variables and because the lower and upper 32 bits were handled in different processor shift there was a chance that two threads garbled some way the non-volatile variable. Now with Java 9 this is not the case. Now Java is 64-bit and I had to demonstrate the need for a <tt>volatile</tt> on 64-bit before anyone comes up the stupid idea that it was only needed for 32-bit. (I could tell stories, but I try to keep it a professional blog. Not with much success, but still.)
<p>
I was searching stackoverflow and found <a href="http://stackoverflow.com/questions/5816790/the-code-example-which-can-prove-volatile-declare-should-be-used">this page</a> that contains many meaningless, or less than usable answer (which clearly demonstrates that the topic is not simple) but it also contains a sample from <a href="http://stackoverflow.com/users/210216/jed-wesley-smith">Jed Wesley-Smith</a> that inspired my demonstrating code for the <a href="https://www.packtpub.com/application-development/java-9-programming-example">book</a>:

[sourcecode language="java"]
package packt.java9.by.example.thread;

public class VolatileDemonstration implements Runnable {
    private Object o = null;
    private static final Object NON_NULL = new Object();
    @Override
    public void run() {
        while( o == null );
        System.out.println(&quot;o is not null&quot;);
    }
    public static void main(String[] args)
                           throws InterruptedException {
        VolatileDemonstration me = new VolatileDemonstration();
        new Thread(me).start();
        Thread.sleep(1000);
        me.o = NON_NULL;
    }
}
[/sourcecode]

This code will never finish, unless you convert the field <tt>o</tt> volatile. We also need the 1000ms sleep to allow the JIT to optimize the code of the method <tt>run()</tt> after which it never reads the variable <tt>o</tt> ever again. The JIT assumes intra-thread semantics and takes the liberty to optimize the code that way. (<a>Java Language Specification</a> 17.4.7)
<p>
But what happens if you have a field that you can not convert to <tt>volatile</tt>? What? Can't you just write the keyword <tt>volatile</tt> in front of the type <tt>Object</tt>? Perhaps I was giving too much hint in the title of the article...
<p>
A <tt>final</tt> field can not be <tt>volatile</tt>. Of course: a <tt>final</tt> can not change, there is no point to re-read it from the main memory and waste CPU cycles for the synchronization of any change of it between the CPU caches. But that is not true.

<blockquote>Final variables can be changed once.</blockquote>

This is something that novice Java developers tend to forget. When an object is created any <tt>final</tt> field has the zero value. In case of an object this value is <tt>null</tt>. The field has to get its final value until the end of the initialization process, that is until the end of the execution of the constructor (any constructor). Look at the following code:

[sourcecode language="java"]
package packt.java9.by.example.thread;

public class VolatileDemonstration implements Runnable {
    private final Object o;
    private static final Object NON_NULL = new Object();
    @Override
    public void run() {
        while( o == null );
        System.out.println(&quot;o is not null&quot;);
    }

    public VolatileDemonstration() throws InterruptedException {
        new Thread(this).start();
        Thread.sleep(1000);
        this.o = NON_NULL;
    }
}
[/sourcecode]

The constructor starts the new thread, sleeps and then sets the field that can not be <tt>volatile</tt>. What is the solution?

What solution? There is no solution! This is a demonstration code. Just don't write code that does things like this: that is the solution. OK?

<b>Takeaway</b>

What can we learn from this? Not all of the followings can be directly implied from the above, but they are all related to the phenomenon. I could write a longer article leading to any of the followings but it would have only abused your patience.

<em>Juniors</em>

<ul>
	<li>Final fields can be changed once. It is not true that they are not changing never (sic).</li>
	<li>A thread may read the value of a final field once and it may not read it ever again. If the JVM runs for years the thread may keep the value in the thread context in some registry or CPU cache for years as long as it likes.</li>
	<li>Never let <tt>this</tt> escape from the constructor.</li>
	<li>Among other more trivial things the "never let <tt>this</tt> escape from the constructor" also means not to pass it as argument to a method that can be overridden or not under the control of the programmer, who is responsible for the current class.</li>
	<li>Write well behaving code or else you will suffer the slings and arrows of your outrageous program.</li>
</ul>

<em>Seniors</em>

<ul>
	<li>See the takeaways for juniors and teach them.</li>
	<li>You have a nice brain twister code for education.</li>
	<li>Java is not a perfect language allowing such constructs. But do not tell juniors. When they realize it they are already seniors and then it is just too late.</li>
	<li>The solution is a liquid mixture in which the minor component is uniformly distributed within the major component.</li>
</ul>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1460</wp:post_id>
  <wp:post_date>2016-09-21 16:00:40</wp:post_date>
  <wp:post_date_gmt>2016-09-21 15:00:40</wp:post_date_gmt>
  <wp:post_modified>2016-09-19 21:24:31</wp:post_modified>
  <wp:post_modified_gmt>2016-09-19 20:24:31</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>final-volatile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="expert"><![CDATA[expert]]></category>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/7xKnc9j17eX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10209171730103089";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/778612256099610624";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27060078904]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6184377924473360384&type=U&a=g_c4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10439</wp:comment_id>
    <wp:comment_author><![CDATA[shanekelly92]]></wp:comment_author>
    <wp:comment_author_email>shanekelly_92@yahoo.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://javantis.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>86.187.165.154</wp:comment_author_IP>
    <wp:comment_date>2016-12-27 21:25:33</wp:comment_date>
    <wp:comment_date_gmt>2016-12-27 20:25:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good article, volatile is often misunderstood.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>114293138</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482870333.0787999629974365234375;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"shanekelly92";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1485447091]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1482871741]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482871741.881504058837890625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1485447088.1971569061279296875;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1485447092.178721904754638671875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java 9 by Example, My New Book]]></title>
  <link>https://javax0.wordpress.com/2016/10/19/java-9-by-example-my-new-book/</link>
  <pubDate>Wed, 19 Oct 2016 08:43:51 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1478</guid>
  <description/>
  <content:encoded><![CDATA[Sometime during the summer, I decided to write a book on Java programming after being suggested to do so by Packt. Java is a market leader and the number one programming language in the enterprise programming arena, and learning it is a good option for novice programmers. I recommend it to be learned as the main language after you got your fingers burnt with languages that have a simpler ecosystem, such as Python, Delphy, VisualBasic, and so on. Many advocate the death of Java but I do not share their opinion. There may be more modern and fancier languages, but for enterprise computing, Java is still there and will be there, at least for the next 20 years. If you learn Java now, you learn an actively developing, stable, and reliable environment and tool, and you gain significant knowledge that you can convert to "jobs" in the coming decades.

<b>An overview of the book</b>

While designing the book, I decided to address those readers who already have some programming experience and want to learn Java as a main language, but apart from that, the book starts with the basics. Java 9 is especially good to get started since it has a REPL interpreter that compiles the Java code you type in, so you can try the features interactively. Throughout the book, you will see sample programs, first simple ones and then more complex examples, that are explained in detail. We focus not only on the language features, such as module support, functional programming, lambda expressions, and reactive interfaces but also on programming style and program design. Continuously tutoring and coaching junior developers in my everyday work, I have gathered some experience on what is important and yet easily overlooked by beginners, and I have focused on these issues in the book.

The examples include sorting algorithms, explaining bubble and quick short, a game called Mastermind, a sample e-Commerce application, and a simple accounting application. The game, Mastermind, is followed in three chapters: the basic algorithm, a massively parallel algorithm (which is not trivial for this problem), and a web application where you can finally see the colors on the screen.

Finishing the book, the reader will have a comprehensive view of the language and will gain a stable basic knowledge to study further in the special directions he or she chooses.

<img src="https://www.packtpub.com/media/catalog/product/cache/e4d64343b1bc593f1c5348fe05efa4a6/b/0/b05673_cover.png" height="50%" width="50%" alt="Java 9 by Example Book Cover" />

<b>How to get the book</b>

This book is currently work in progress at the moment. You can, however, get an early access eBook from the Packt Website at <a href="https://www.packtpub.com/application-development/java-9-programming-example">https://www.packtpub.com/application-development/java-9-programming-example</a>. Here you can see pre-reviewed drafts of the chapters as they are written, giving you access to content as early as possible. To know more about Early Access click on the below link. <a href="https://www.packtpub.com/books/info/packt/early-access">https://www.packtpub.com/books/info/packt/early-access</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1478</wp:post_id>
  <wp:post_date>2016-10-19 09:43:51</wp:post_date>
  <wp:post_date_gmt>2016-10-19 08:43:51</wp:post_date_gmt>
  <wp:post_modified>2019-10-08 14:20:07</wp:post_modified>
  <wp:post_modified_gmt>2019-10-08 13:20:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-9-by-example-my-new-book</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/dZQiF548hpW]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10209419185569321";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/788661998649159680";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[11]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28001302038]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6194427643304124416&type=U&a=_lte]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10260</wp:comment_id>
    <wp:comment_author><![CDATA[Garai MÃ¡rton]]></wp:comment_author>
    <wp:comment_author_email>garaimarton.mail@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.82.81.150</wp:comment_author_IP>
    <wp:comment_date>2016-10-19 10:01:54</wp:comment_date>
    <wp:comment_date_gmt>2016-10-19 09:01:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Delphi. IMHO novice programmers should burn their fingers with weak typed/untyped language first. Like PHP or JavaScript. Better experience of "I want to draw my castle. Why should I care if it's an object or not?"]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1476867716]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1476867715]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1476867715.65400791168212890625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10388</wp:comment_id>
    <wp:comment_author><![CDATA[Java blogs for experienced programmers | Javarevisited]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://www.javarevisited.co/java-blogs-for-experienced-programmers/</wp:comment_author_url>
    <wp:comment_author_IP>207.174.215.236</wp:comment_author_IP>
    <wp:comment_date>2016-12-07 10:40:40</wp:comment_date>
    <wp:comment_date_gmt>2016-12-07 09:40:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Deep &#8211; Perter Verhas writes only about Java in his blog. He has recently published a new book Java 9 By Example. In his blog lot of excellent posts on Java and especially on Java [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481107725.3458030223846435546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481103640.922359943389892578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1481147001]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481147001.7334001064300537109375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How object initialization works]]></title>
  <link>https://javax0.wordpress.com/2017/03/11/how-object-initialization-works/</link>
  <pubDate>Sat, 11 Mar 2017 08:24:55 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1488</guid>
  <description/>
  <content:encoded><![CDATA[You may got used to my habit writing about something special, non trivial Java feature or usage. This time it will be a little different. At least for the start. This is a video tutorial about object initialization. We have an interface. Then we have an abstract class that implements the interface and then a concrete class that extends the abstract class. They do nothing except writing some strings to the console when they are executed so we can see what order they are executed. They have static initializer blocks, wherever it possible, non static initializer blocks and constructors.

BTW: can you tell, and be honest to yourself: is it allowed to have a static initializer block inside an interface? If you know java very well, but you can not answer that question with absolute certainty it will not hurt to watch this 9 minute tutorial.

And also stay tuned for the second part, when we get back to real javax0 style and let the hell loose.

[youtube https://www.youtube.com/watch?v=ad31vR74bqc&amp;w=854&amp;h=480]

While you wait for the second tutorial here is a puzzle:

<blockquote>How is it possible to have an instance of the <tt>Concrete</tt> class even though calling <tt>new Concrete()</tt> throws 
<tt>Exception in thread "main" java.lang.NoClassDefFoundError: Could not initialize class com.javax0.classinit.Concrete</tt>
</blockquote>

If you could or could not find the answer to the puzzle watch the second part of the tutorial:

[youtube https://youtu.be/Pvcn4i2J5G0&amp;w=854&amp;h=480]

The source code is available from <a href="https://github.com/javax0-tutorials/object-initialization" target="_blank">https://github.com/javax0-tutorials/object-initialization</a>.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1488</wp:post_id>
  <wp:post_date>2017-03-11 09:24:55</wp:post_date>
  <wp:post_date_gmt>2017-03-11 08:24:55</wp:post_date_gmt>
  <wp:post_modified>2017-03-12 00:00:45</wp:post_modified>
  <wp:post_modified_gmt>2017-03-11 23:00:45</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-object-initialization-works</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/YdS7E1GUPnv]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2742672576]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6246244334493057024&type=U&a=mGqo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10210775636439745";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/840478662579376128";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Hacking the IntegerCache in Java 9]]></title>
  <link>https://javax0.wordpress.com/2017/05/03/hacking-the-integercache-in-java-9/</link>
  <pubDate>Wed, 03 May 2017 15:00:53 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1498</guid>
  <description/>
  <content:encoded><![CDATA[Five years ago I published an article in Hungarian about how to alter the IntegerCahe in the JDK. Doing that is essentially hacking the Java run-time and there is no practical advantage unless while you develop the hacking code you get a better understanding how reflection works and how the Integer class is implemented.

The <tt>Integer</tt> class has a private nested class named <tt>IntegerCache</tt> that contains Integer objects for the int values -127 to 128. When the code has to box an <tt>int</tt> to <tt>Integer</tt> and the value is within this range then the run-time uses the cache instead of creating new Integer object. This is done for speed optimization reasons bearing in mind that the int values in programs are many times in this range (think about array indexing).

The side effect of this is that many times using the identity operator to compare two Integer objects may work so long as long the value is in the range. This is typically during unit test. In operational mode, when some of the values get bigger than 128 the code fails.

Hacking the <tt>IntegerCache</tt> using reflection may also lead to mysterious side effects and note that this is something that has its effect on the whole JVM. If a servlet redefines the small <tt>Integer</tt> cached values then all other servlets running in the same Tomcat under the same JVM will suffer.

There are other articles about it on the net from Lukas Eder

https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/

and on the excellent blog site Sitepoint:

https://www.sitepoint.com/10-things-you-didnt-know-about-java/

Now that I started to play around with Java 9 early access version it came to my mind if I can do the same hacking with the new version of Java. Before starting that let's refresh what we did with Java 8.

Lukas in his article displays a sample code, I copy here:

[sourcecode language="java"]
import java.lang.reflect.Field;
import java.util.Random;
 
public class Entropy {
  public static void main(String[] args) 
  throws Exception {
 
    // Extract the IntegerCache through reflection
    Class&lt;?&gt; clazz = Class.forName(
      &quot;java.lang.Integer$IntegerCache&quot;);
    Field field = clazz.getDeclaredField(&quot;cache&quot;);
    field.setAccessible(true);
    Integer[] cache = (Integer[]) field.get(clazz);
 
    // Rewrite the Integer cache
    for (int i = 0; i &lt; cache.length; i++) {
      cache[i] = new Integer(
        new Random().nextInt(cache.length));
    }
 
    // Prove randomness
    for (int i = 0; i &lt; 10; i++) {
      System.out.println((Integer) i);
    }
  }
}
[/sourcecode]

The code gets access to the <tt>IntegerCache</tt> via reflection and then fills the cache with random values. Naughty.

We can try to execute the same code in Java 9. Do not expect much fun though. Java 9 is more serious when somebody tries to violate it.

[sourcecode]
Exception in thread &quot;main&quot; java.lang.reflect.InaccessibleObjectException:
  Unable to make field static final java.lang.Integer[]
  java.lang.Integer$IntegerCache.cache
  accessible: module java.base does not &quot;opens java.lang&quot; to unnamed module @1bc6a36e
[/sourcecode]

We get an exception that did not exist in Java 8. It says that object is not accessible because the module java.base, which is the part of the run-time of the JDK that is automatically imported by each Java program does not 'opens' (sic) the module to the unnamed module. It is thrown from the line where we try to set the field accessible.

The object we could easily access in Java 8 is not accessible any more, because the module system protects it. A code can only access fields, methods, and other things using reflection only if the class is in the same module, or if the  module opens the package for reflective access for the world or for the module that needs the access. This is done in the <tt>module-info.java</tt> module definition file, like

[sourcecode language="java"]
module myModule {
    exports com.javax0.module.demo;
    opens com.javax0.module.demo;
}
[/sourcecode]

The module <tt>java.base</tt> does not open itself for reflective access for us and especially not for the unnamed module, which is the code that we run. If we create a module for our code and name it then the error message will contain the name of that module.

Can we open the module programmatically? There is an <tt>addOpens</tt> method in the <tt>java.lang.reflect.Module</tt> module. Will it work?

Bad news for the hackers that it will not. It can only open a package in a module to another module if that package is already opened for the module calling this method. That way modules can pass on to other modules the right that they already have to access some packages in a reflective way but can not open things that are not open.

But the same time it is a good news. Java 9 is not so easily hackable like Java 8 was. At least this little hole is closed. It seems that Java starts to be professional grade and not to be a toy. Soon the time will come when we can migrate serious programs from RPG and COBOL to Java. (Sorry for the joke.)

<h3>UPDATE</h3>

After the article was republished on <a href="https://dzone.com/articles/hacking-the-integercache-in-java-9">DZONE</a> <a href="https://dzone.com/users/230405/prunge.html">Peter Runge</a> pointed out that the module system in this case still can be neglected using <tt>sun.misc.Unsafe</tt> class. Based on his suggestion the whole hack is here:

[sourcecode language="java"]
public class IntegerHack {

    public static void main(String[] args)
            throws Exception {
        // Extract the IntegerCache through reflection
        Class usf = Class.forName(&quot;sun.misc.Unsafe&quot;);
        Field unsafeField = usf.getDeclaredField(&quot;theUnsafe&quot;);
        unsafeField.setAccessible(true);
        sun.misc.Unsafe unsafe = (sun.misc.Unsafe)unsafeField.get(null);
        Class&lt;?&gt; clazz = Class.forName(&quot;java.lang.Integer$IntegerCache&quot;);
        Field field = clazz.getDeclaredField(&quot;cache&quot;);
        Integer[] cache = (Integer[])unsafe.getObject(unsafe.staticFieldBase(field), unsafe.staticFieldOffset(field));
        // Rewrite the Integer cache
        for (int i = 0; i &lt; cache.length; i++) {
            cache[i] = new Integer(
                    new Random().nextInt(cache.length));
        }

        // Prove randomness
        for (int i = 0; i &lt; 10; i++) {
            System.out.println((Integer) i);
        }
    }
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1498</wp:post_id>
  <wp:post_date>2017-05-03 16:00:53</wp:post_date>
  <wp:post_date_gmt>2017-05-03 15:00:53</wp:post_date_gmt>
  <wp:post_modified>2017-05-05 14:22:29</wp:post_modified>
  <wp:post_modified_gmt>2017-05-05 13:22:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hacking-the-integercache-in-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="expert"><![CDATA[expert]]></category>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_156c8862bf9567b6b65c35fb2dc7a393</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_156c8862bf9567b6b65c35fb2dc7a393</wp:meta_key>
    <wp:meta_value><![CDATA[1493990551]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f32501ab296ec4a34f221a73d973ff44</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_46c548a5fd63ee9bb70a19b0c89bd57b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_538272aeecc75858a5585f34bb156130</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c90e9675cfa2d803f6c9931ab33d3864</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[4659313058]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_538272aeecc75858a5585f34bb156130</wp:meta_key>
    <wp:meta_value><![CDATA[1493824284]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_152323a5341c658bd31ebb29248d7ca2</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_152323a5341c658bd31ebb29248d7ca2</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_152323a5341c658bd31ebb29248d7ca2</wp:meta_key>
    <wp:meta_value><![CDATA[1493824282]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_152323a5341c658bd31ebb29248d7ca2</wp:meta_key>
    <wp:meta_value><![CDATA[1493824282]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_df259901277cb93cd31fef6571bdfb5a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/e6Y751dCK8Y]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_78c4ab4afc4580a565f9708f5a7a9822</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6265553176557162497&type=U&a=R5rS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_78c4ab4afc4580a565f9708f5a7a9822</wp:meta_key>
    <wp:meta_value><![CDATA[1493824285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_41cd2b87a74fef24320ca506c8df18e9</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_41cd2b87a74fef24320ca506c8df18e9</wp:meta_key>
    <wp:meta_value><![CDATA[1493824287]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10211270118121478";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/859787501908762624";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_13f41ba87c73bae5c2f600b2b93c05ab</wp:meta_key>
    <wp:meta_value><![CDATA[<blockquote data-secret="R3En9YwJcc" class="wp-embedded-content"><a href="https://www.sitepoint.com/10-things-you-didnt-know-about-java/">10 Things You Didn&#8217;t Know About Java</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://www.sitepoint.com/10-things-you-didnt-know-about-java/embed/#?secret=R3En9YwJcc" data-secret="R3En9YwJcc" width="584" height="329" title="&#8220;10 Things You Didn&#8217;t Know About Java&#8221; &#8212; SitePoint" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_13f41ba87c73bae5c2f600b2b93c05ab</wp:meta_key>
    <wp:meta_value><![CDATA[1493824288]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fc642a31dfbaa9ed3aecf11cfcffb2aa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2cf1c3693ac9647d35b3cfb8bf0bc1b6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_391188ac107e025e62b9471de106ec5c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b2fa17f5b7d9eb12820cfa2efcec46ec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_33e307a5e7c516267685965da582aab6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e2b7ebc7cf1cd46e616f7e64a04b3cc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_95d988bf7bf8791961e45136984ebda7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51ec7fcedc9fe3e86ccbd32cc94dce3b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_56be7136e2b9cd434fa94d791d88cfe1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0041a10b99bf6028a3dca2a281a1fcb6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a64134fbf24fe486a7e9a519d080147c</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_a64134fbf24fe486a7e9a519d080147c</wp:meta_key>
    <wp:meta_value><![CDATA[1494416581]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4b49dc40ee2e9371f4d8b7bb4001e607</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a73815d9d494218140573374dec16ef4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d05f0720e5aeb72159b90b1dbd8a01b5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bb7cad7fe7795f8bec4a8c98b265fb0e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3eb3153d00b958a849684b598e1629e8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f82c19f200f30e89a681aad56eaedffe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a82ce196e0c435bd02439d9aac549ea4</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_a82ce196e0c435bd02439d9aac549ea4</wp:meta_key>
    <wp:meta_value><![CDATA[1502638588]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e4e5d9600c70d85f4886af70bb461b37</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_acc0ec85ee07989da6c6f5355023a867</wp:meta_key>
    <wp:meta_value><![CDATA[<a href="https://blog.jooq.org/2013/10/17/add-some-entropy-to-your-jvm/">Add Some Entropy to Your&nbsp;JVM</a>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_acc0ec85ee07989da6c6f5355023a867</wp:meta_key>
    <wp:meta_value><![CDATA[1502638761]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_44ffc4b5c91314c111a2341ffa166bc0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_115900c4c2d978e16c54c583dce96d01</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b5ac96f344ce88f3c2a8a127cf9223af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e993e75396e293878377801a0549d7dc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2eaaf46c7f10f1ff205c501550ae4ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5026e1f761fb917cbe9d0c815c13cf5c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_86e51fd2e6c1ae67294124d412242e30</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51e24691567b10fe07bde1baa58c6f03</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cfc56f976d951dca835a0939caeb1261</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_72a28ea07492b304c32c8e06643a8b72</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa3ba22bdb0e1ca60fbf0611294c11c3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10785</wp:comment_id>
    <wp:comment_author><![CDATA[lukaseder]]></wp:comment_author>
    <wp:comment_author_email>lukas.eder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://lukaseder.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.199.5.141</wp:comment_author_IP>
    <wp:comment_date>2017-05-04 13:46:45</wp:comment_date>
    <wp:comment_date_gmt>2017-05-04 12:46:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You really didn't like that I published this hack in my original article, right? ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17895174</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493902005]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493902005.4233219623565673828125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"lukaseder";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1493902005]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10784</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.164</wp:comment_author_IP>
    <wp:comment_date>2017-05-04 11:27:38</wp:comment_date>
    <wp:comment_date_gmt>2017-05-04 10:27:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[http://openjdk.java.net/projects/jigsaw/spec/sotms/
https://www.manning.com/books/the-java-9-module-system
https://blogs.oracle.com/java/module-system-in-jdk-9
https://www.sitepoint.com/tag/java-9/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10782</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1493893658]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493893658]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493893658.740233898162841796875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10814</wp:comment_id>
    <wp:comment_author><![CDATA[airborn]]></wp:comment_author>
    <wp:comment_author_email>jacek1986@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/jacek1986</wp:comment_author_url>
    <wp:comment_author_IP>155.145.208.135</wp:comment_author_IP>
    <wp:comment_date>2017-05-08 13:09:49</wp:comment_date>
    <wp:comment_date_gmt>2017-05-08 12:09:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is the only answer on CodeGolf, that I'm aware, of that uses java and is the best scoring answer https://codegolf.stackexchange.com/questions/28786/write-a-program-that-makes-2-2-5]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>15687943</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494245668]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494245668.6189429759979248046875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1494245668]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494245389.49592494964599609375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"jacek1986";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10786</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.164</wp:comment_author_IP>
    <wp:comment_date>2017-05-04 13:51:11</wp:comment_date>
    <wp:comment_date_gmt>2017-05-04 12:51:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I hated it. I wanted to keep that as a secret for the Hungarian hackers only:

https://tifyty.wordpress.com/2012/07/26/ez-mar-tenyleg-wtf/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10785</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493902271]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493902271.78975391387939453125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1493902271]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10792</wp:comment_id>
    <wp:comment_author><![CDATA[Ð¥Ð°ÑÐ¸Ð¼ IntegerCache Ð² Java 9 &#8211; iRepost]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://irepost.ru/blog/hachim-integercache-v-java-9/</wp:comment_author_url>
    <wp:comment_author_IP>192.145.239.35</wp:comment_author_IP>
    <wp:comment_date>2017-05-06 02:06:28</wp:comment_date>
    <wp:comment_date_gmt>2017-05-06 01:06:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Ð¿ÑÐ¸Ð¼ÐµÑÐ¾Ð¼, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð¿ÑÐ¸Ð²ÐµÐ» Ð² ÑÐ²Ð¾ÐµÐ¹ ÑÑÐ°ÑÑÐµ ÐÐ¸ÑÐµÑ ÐÐ°ÑÐ³Ð°Ñ [1]. Ð§Ð¸ÑÐ°ÑÑ Ð´Ð°Ð»ÑÑÐµ [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494038160.6306359767913818359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494045185.423904895782470703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494045185]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494032789.3364050388336181640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10793</wp:comment_id>
    <wp:comment_author><![CDATA[Ð¥Ð°ÑÐ¸Ð¼ IntegerCache Ð² Java 9 &#8212; Malanris.ru]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://malanris.ru/2017/05/06/%d1%85%d0%b0%d1%87%d0%b8%d0%bc-integercache-%d0%b2-java-9/</wp:comment_author_url>
    <wp:comment_author_IP>37.194.161.129</wp:comment_author_IP>
    <wp:comment_date>2017-05-06 02:11:23</wp:comment_date>
    <wp:comment_date_gmt>2017-05-06 01:11:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Ð¿ÑÐ¸Ð¼ÐµÑÐ¾Ð¼, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð¿ÑÐ¸Ð²ÐµÐ» Ð² ÑÐ²Ð¾ÐµÐ¹ ÑÑÐ°ÑÑÐµ ÐÐ¸ÑÐµÑ ÐÐ°ÑÐ³Ð°Ñ [1]. Ð§Ð¸ÑÐ°ÑÑ Ð´Ð°Ð»ÑÑÐµ â&#013; Ð¥Ð°ÑÐ¸Ð¼ IntegerCache Ð² Java 9&#013; Source: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494038160.6910340785980224609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1494033083.6532878875732421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1494245551]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1494245551.7890369892120361328125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10782</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.235.154.126</wp:comment_author_IP>
    <wp:comment_date>2017-05-04 09:37:54</wp:comment_date>
    <wp:comment_date_gmt>2017-05-04 08:37:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So there is module finally in Java 9. First time I hear it. Thank you!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1493887074]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1493887074]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493887074.5634539127349853515625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11159</wp:comment_id>
    <wp:comment_author><![CDATA[Harold's]]></wp:comment_author>
    <wp:comment_author_email>haroldsanderson@gmx.com</wp:comment_author_email>
    <wp:comment_author_url>http://haroldsanderson.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>172.94.37.146</wp:comment_author_IP>
    <wp:comment_date>2017-06-30 13:41:55</wp:comment_date>
    <wp:comment_date_gmt>2017-06-30 12:41:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[

So there is module finally in Java 9.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>121747321</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1498826517.0043880939483642578125;s:5:"event";s:9:"check-ham";s:4:"user";s:15:"haroldsanderson";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1498826570]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1498826570]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1498826570.297039031982421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11350</wp:comment_id>
    <wp:comment_author><![CDATA[jeffreydhairston]]></wp:comment_author>
    <wp:comment_author_email>jeffreydhairston@gmx.com</wp:comment_author_email>
    <wp:comment_author_url>http://jeffreydhairston.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>65.60.18.177</wp:comment_author_IP>
    <wp:comment_date>2017-08-22 14:05:15</wp:comment_date>
    <wp:comment_date_gmt>2017-08-22 13:05:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[So there is module finally in Java 9.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>123669417</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1503408383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1503408383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1503408383.325315952301025390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1503407116.1495459079742431640625;s:5:"event";s:9:"check-ham";s:4:"user";s:16:"jeffreydhairston";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Who needs Java modules after all ?]]></title>
  <link>https://javax0.wordpress.com/2017/05/19/who-needs-java-modules-after-all/</link>
  <pubDate>Fri, 19 May 2017 15:35:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1508</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://twitter.com/shelajev">Oleg Selajev</a> asked on <a href="https://twitter.com">twitter</a>

<blockquote><a href="https://twitter.com/shelajev/status/865329632685510658">
Jigsaw questions for 1000. I as an X want  JPMS modules. What is X if it's not a platform developer?</a></blockquote>

My answer is that <i>X is a human being (minus platform developers, because that was a condition)</i>. We all need module system to have safer code resulting in more reliable systems resulting in better performance in the business resulting in better economy resulting in human happiness. Perhaps I went a bit too far with the conclusions but the point is that module system is needed by everyone in the industry whether they're aware of it or not. You will get it. First of all we should start with the ob(li)vious answer to the question.


<blockquote>
<a href="https://twitter.com/nipafx">Nicolai Parlog</a> said: <i><a href="https://twitter.com/nipafx/status/865338227506520064">Every library developer whose types are not all public.</a></i>
</blockquote>


Very true. As a library developer I want to design my libraries so that I separate the API. I wan to separate the public interface from the implementation. This is what we, programmers call "encapsulation". This is soooo good to encapsulate. We love to do it! We do it, because it is hilarious! We love it!

On the second thought though we do it because it is a tool to create reliable bug free (he he he) software.

It helps the code developers who <i>use</i> my code that encapsulates the internal state and implementation to write better code. It is a bit like raising children. I as parent disallow certain things that they would do. Eat lots of chocolate, stay up late and so on. And this is for their own good, even though they do not see or understand it at the moment. Later, of course, when they grow up and become parents themselves they will understand and do the same. It is not much different with library developers and library using programmers, except, perhaps, that programmers never grow up.

Similarly I as a library developer need JPMS for the sake of the developers who are going to use my code. My library will not be better or worse just because I encapsulate. (Side note: it will be better, but not because of the lessened number of bugs in it.) I can easily get the implication that I as a library developer want JPMS the least. Who cares if you, dear programmer, shoot off your testicles using my library? It is your responsibility to call only the public API and not some frequently modified internal class and method. Or is it?

Not really. It is also my responsibility to create a library that is easy to use and hard to make mistakes using it. This is what we call usability. This is where JPMS module system comes into the picture. Without JPMS I can document what packages are public and which are implementation specific. The contract between me and the users of the library is that they will not use the privates of my library and for this well behaviour I will keep the public part of the library stable so that they do not need to change their code from release to release. (Btw. has anyone ever realized how literally bloody this name, jPMS is? What the fly? PMS, really? Not to mention seeing currently all the cramps related to it: nomen est omen. It was not a lucky baptism.)

Let's get back on our rail: why do we need module system for that? Developers are disciplined (he he he) people and they do not want to harm themselves. They should not and they will not use internal code of the library. That is not good for them on the long run and they are well aware of that. The catch is the <i>long run</i> thingy. <a href="https://en.wikiquote.org/wiki/John_Maynard_Keynes">In the long run we are all dead.</a> There will be a point during the development, typically a few days before release date, when some of the internal APIs of a library just seem lucrative to be used. In some weird way those internal calls are just exactly what you need. You know that you are not supposed to use them, and there is a good, well-mannered solution, but that needs more time to develop. It is just that with the release date approaching you do not have the time to follow that pattern. Not to mention feeling proud about the "I can do that", "how well I know these tools" thoughts, instead of feeling shame tampering with the parts of the library that are private.

That is where Java Module System comes into the picture. You will not be able to do shortcuts. You will sigh remembering the good old days when Java was open to the whole world whatever there was on the classloader (not to mention FORTRAN programming, am I right or just the contrary I am right?) but you will follow the rules, because it just will not work otherwise.

You think that you are not vulnerable to such vanity as using the internal parts of a library. Here is a test: did you recognize that I used the expression "internal APIs of a library"? If not, then feel ashamed but don't admit it. No need. Java Module System will help to forget things that do not exist, like internal API. Nonsense. API is public. There is no such thing as internal API. The resulting code will be better, easier to maintain, less prone to library upgrades and thus cheaper at the bottom line.

In the long run, when we are all dead our offspring will create better code and having module level encapsulation will be an obvious thing, just like world peace will be that time.

So I need Java Module System, you need it, and everybody else needs it for a better world and for the sake of world peace.

<i>Disclaimer: The author of the article no speaks English as naive language ;-)</i>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1508</wp:post_id>
  <wp:post_date>2017-05-19 16:35:10</wp:post_date>
  <wp:post_date_gmt>2017-05-19 15:35:10</wp:post_date_gmt>
  <wp:post_modified>2017-05-19 16:35:10</wp:post_modified>
  <wp:post_modified_gmt>2017-05-19 15:35:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>who-needs-java-modules-after-all</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/PU1YtYsbdNc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[5221516629]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6271357383138770944&type=U&a=RXSs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10211415141946983";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/865591711870754819";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>10867</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>46.235.154.25</wp:comment_author_IP>
    <wp:comment_date>2017-05-19 16:42:55</wp:comment_date>
    <wp:comment_date_gmt>2017-05-19 15:42:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Am I right that this module system is somewhat similar to what we had in OSGI bundles?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1495527005.4327309131622314453125;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1495527007.5932629108428955078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1495208576]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1495208576.0523509979248046875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1495527007]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10888</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.90</wp:comment_author_IP>
    <wp:comment_date>2017-05-22 10:30:14</wp:comment_date>
    <wp:comment_date_gmt>2017-05-22 09:30:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes and no. Saying either 'yes' or 'no' I'd expect someone to come and argue with me. In some features it is somewhat similar, in other aspects different.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>10867</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1495445416.0181419849395751953125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1495445415]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1495445416]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Process Handling in Java 9]]></title>
  <link>https://javax0.wordpress.com/2017/07/19/process-handling-in-java-9/</link>
  <pubDate>Wed, 19 Jul 2017 15:00:22 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1523</guid>
  <description/>
  <content:encoded><![CDATA[Managing operating system processes in Java was a daunting task all times. The reason for that is the poor tooling and poor API that are available. To be honest that is not without reason: Java was not meant for the purpose. If you wanted to manage OS processes, you had the shell, perl script whatever you wanted. For larger applications that faced tasks that are more complex, you were supposed to program the issue in C or C++.

When you really had to manage processes from Java you had to create operating system dependent code. It was possible, you could query some environment variables and then you could implement different behavior depending on the operating system. This approach works until Java 8 but it has several drawbacks. Testing costs more, development is more complex. As Java became more and more mature and widespread the demand for this type of applications arose. We can clearly see for example that the question <a href="https://stackoverflow.com/questions/6356340/killing-a-process-using-java">https://stackoverflow.com/questions/6356340/killing-a-process-using-java</a> put up on StackOverflow in 2011 had more than hundred thousand of views. Some application and thus some developers need a solution for this problem, which is really a solution and not a workaround.

In this case, providing an API in the JDK is a solution. It will not make process-handling OS independent. The operating systems differ and process handling is an area very much tied to the OS. The system dependent part of the code is, however, moves to the JDK runtime and Java development team tests it and not the applications separately. It eases the burden of testing on their side. In addition, the development becomes cheaper as the API is already there and we do not need to program it separately for BSD, OSX, Linux, and Windows not to mention OpenVMS. Finally, the application may run faster. Again an example. If we needed the list of the running processes then we had to start an external process that dumps the list of the processes to the standard output. The output of this process had to be captured and analyzed as string. Now, with the advent of Java 9, we will have a simple call for that, which is implemented invoking the appropriate operating system call and it does not need the execution of a separate process, nor the parsing of a string output for an information that was already there just not available in Java.
To read about all the details of process handling of Java 9 you can read the documentation currently available on the URL <a href="https://docs.oracle.com/javase/9/docs/api/index.html">https://docs.oracle.com/javase/9/docs/api/index.html</a> or you can soon read the book <strong>Mastering Java 9</strong> from Packt <a href="https://www.packtpub.com/application-development/mastering-java-9">https://www.packtpub.com/application-development/mastering-java-9</a> in which I wrote the chapter about process handling. In this article I will talk about some issues why we need the new class ProcessHandle It may not be that evident for some developers who are not that much experienced with operating system processes and how the operating system works.

<h3>ProcessHandle</h3>

In short an instance of <tt>ProcessHandle</tt> represents an operating system process. All operating systems identify alive processes using PIDs which is a TLA abbreviating Process Identifier. These are small (or not that small) integer numbers. Some operating system could use something else, like names, or some cryptic strings but they do not. There is no benefit and it happens that all of them use numbers to identify processes.

When we program in OO manner we abstract the problem so that it better explains the problem we model. There is a rule, however, that we should not make our model more abstract than the problem itself. That just introduces unnecessary complexity to the application increasing cost. In this case, it seems to be obvious (or rather oblivious) to use <tt>int</tt> to identify a process. If the operating system does not do it more abstract then why should we? Just because in Java everything is an object? (Btw: not true.)

The reason for that is there is no one to one match between PIDs and ProcessHandle instances. Letâs re-read the first two sentences of this section:

<em>ââ¦ ProcessHandle represents an operating system process. All operating systems identify alive processes using PIDs â¦â</em>

There is that little word âaliveâ in the second sentence and believe me that makes a difference. Being alive is very different from being dead, although we do not have a firsthand direct comparison. A ProcessHandle instance may keep a reference to a process that is already wiped off from memory. Imagine the situation that you look at the list of the processes on Linux issuing the â<tt>ps âef</tt>â command and then you see that Tomcat is eating the CPU and consumes ever increasing memory most likely because the application you deployed has a bug looping. You decide to kill the process so you look at the pid displayed and issue the command â<tt>kill -9 666</tt>â if the pid happens to be <tt>666</tt>. By that time, the process has eaten up all the memory it could have from the OS and because you did not configure any swap file on the machine, the JVM disappears without trace. The kill process will complain that there is no process for the defined pid. It may also happen that the operating system has already started a totally different process that happens to have that pid. Has it ever happened? Now you shake your head and that is because it has never happened in your practice. On Linux by default, the maximum number that can be a pid is 32768. When will that ever wrap around? Actually not a long time, but usually not so far so that the pid is reused between issuing the â<tt>ps</tt>â and â<tt>kill</tt>â commands. And what happens if a small embedded system sets the <tt>/proc/sys/kernel/pid_max</tt> smaller. Say much smaller, like 16 that fits four bits? It may not be a big problem when you issue the command interactively because you are there and if the system crashes you can restarts the process or the whole system if needed. You can do the corrective action if you made a âmistakeâ. Java applications are not that intelligent and we should not have the chance even in an embedded system to kill a process we did not want to.

<a href="https://javax0.files.wordpress.com/2017/07/processapi.png"><img src="https://javax0.files.wordpress.com/2017/07/processapi.png" alt="" /> </a>

process handling based on pid

To handle that situation Java has the interface <tt>ProcessHandle</tt>. Instead of pids we have <tt>ProcessHandle</tt>s. If we need the <tt>ProcessHandle </tt>of the currently running process (the JVM) then we can call the static method <tt>ProcessHandle::current</tt> (note that I used the nice Java 8 method handle notation). You can get the pid of the current process calling <tt>getPid()</tt> on that instance of <tt>ProcessHandle</tt> but after a while you will not do it. It is just an old habit wanting the pid of a process. You do not need it when you have the handle.

When you have a process handle, say processHandle you can get a Stream calling <tt>processHandle.children()</tt>. This will list the immediate offspring processes. If you want a âtransitive closureâ, so you want to list not only the children but also the children of children and so on you have to call <tt>processHandle.descendants()</tt>. But what if you are really greedy and want to get a hand(le) on all processes. Then you should call the static method <tt>ProcessHandle::allProcesses</tt>.
Streams are famous for being populated lazy creating the next element only when needed. In case of process list it would lead to interesting results, therefore in this case the dataset backing the stream of processes is a snapshot created when one of the <tt>children()</tt>, <tt>descendants()</tt> or <tt>allProcesses()</tt> was called.
Now we have a handle to a process. What can we do with it?

We can <tt>processHandle.destroy()</tt> it and we can also call <tt>processHandle.destroyForcibly()</tt>. That is what everybody was wanting, as per the cited stack overflow article. We can also check if the process the handle is assigned to is still alive calling <tt>processHandle.isAlive()</tt>. You can also get access to the parent process handle calling <tt>processHandle.parent()</tt>. Note that not all processes have a parent process. One of them never had and any other process may be orphan when the parent process has terminated. For this reason, the return value of this method is <tt>Optional</tt>. Java 9 has new features in the <tt>Optional</tt> class we well, but that is a different story, here we focus on the processes.

If the process is still alive but we want to wait for the termination of the process, we can do it in a modern, asynchronous way. We can get a <tt>CompletableFuture</tt> from the process handle calling <tt>processHandle.onExit()</tt> that will complete when the process terminates. Java 9 has new features in the <tt>CompletableFuture</tt> class as well, but that is a different story, here we focus on the processes. Do I repeat myself?

There is an interface inside the interface <tt>ProcessHandle</tt> called Info. We can get an instance of the information from the process handle calling <tt>processHandle.info()</tt>. Through this instance, we can get access to the arguments as an optional string array, to the command line as an optional string, to the command as a string and to the user, the process belongs to also as an optional string. We can also get information about when the process was started and also about the total CPU usage in form of optional <tt>Instant</tt> and optional <tt>Duration</tt>. These new classes were introduced in Java 8 and Java 9 has new features â¦ Okay, it starts to be boring.

<h3>Summary</h3>

What can we do with all these features? In the book, I mention I created a simple process controlling application. A similar one I had to create around 2006 in perl. It starts processes as described in a configuration file and if any of them fails it restarts. But this is only one example. There are other scenarios where process handling can be handy. You want to fill in forms and convert them to PDF. To do that you start some word processor with command line parameters to do that. The tasks are queueing and they are started one after the other to keep reasonable performance you convert at most a configurable n document in n processes. If a process takes too long you kill it, send a message about it to the person who started the request to your conversion server and schedule it to run during the night or some less busy period.

We can develop such programs in Java without using external shell, python or perl scripts, and it simply makes the project simpler and cheaper.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1523</wp:post_id>
  <wp:post_date>2017-07-19 16:00:22</wp:post_date>
  <wp:post_date_gmt>2017-07-19 15:00:22</wp:post_date_gmt>
  <wp:post_modified>2018-01-03 15:16:40</wp:post_modified>
  <wp:post_modified_gmt>2018-01-03 14:16:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>process-handling-in-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/b8JGTePPZD4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[7254811137]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6293454540251361280&type=U&a=hG0e]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10212037022693613";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/887688871571587073";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11267</wp:comment_id>
    <wp:comment_author><![CDATA[Java Annotated Monthly &#8211; August 2017 | IntelliJ IDEA Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://blog.jetbrains.com/idea/2017/08/java-annotated-monthly-august-2017/</wp:comment_author_url>
    <wp:comment_author_IP>52.17.120.8</wp:comment_author_IP>
    <wp:comment_date>2017-08-02 09:42:44</wp:comment_date>
    <wp:comment_date_gmt>2017-08-02 08:42:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Process Handling in Java 9Â &#8211; updates to the process API in Java 9, well worth being aware of [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1501665899.3701488971710205078125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1501665898]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1501663364.2946579456329345703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11467</wp:comment_id>
    <wp:comment_author><![CDATA[Vinayak A]]></wp:comment_author>
    <wp:comment_author_email>vinayak.akk@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.codenuclear.com/process-api-improvements-java-9/</wp:comment_author_url>
    <wp:comment_author_IP>115.112.143.190</wp:comment_author_IP>
    <wp:comment_date>2017-09-25 06:22:49</wp:comment_date>
    <wp:comment_date_gmt>2017-09-25 05:22:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sir,

Can we restart windows system using process API in java 9?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1506316971.20421600341796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1506372448]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1506372448]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1506372448.167758941650390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1506321939.4913570880889892578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11470</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.157.113</wp:comment_author_IP>
    <wp:comment_date>2017-09-25 21:47:35</wp:comment_date>
    <wp:comment_date_gmt>2017-09-25 20:47:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11467</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1506372455]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1506372455]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1506372455.7498190402984619140625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[What is private in Java 9?]]></title>
  <link>https://javax0.wordpress.com/2017/08/09/what-is-private-in-java-9/</link>
  <pubDate>Wed, 09 Aug 2017 15:00:07 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1536</guid>
  <description/>
  <content:encoded><![CDATA[When doing interviews I experience that most of the candidates do not know what private modifier in Java really means. They know something about it that is enough for every day coding, but far from complete. It is not a problem. Knowing enough is, well... enough. But it is still interesting to know some of the inner working of Java. In some rare cases it may shed light on some details. If nothing else then it is entertaining <tt>.orElse(whyDoYouReadIt)</tt> ?

<small>
By the way: mentioning interviews is a good opportunity to write <a href="http://blogs.tedneward.com/post/when-interviews-fail/">rants</a> even if the statements and implications related to my person are, in my view, false. After all, my person is not important and distancing myself from the fact that it criticizes me I find that article interesting and the conclusions about the interviews are important and actually totally in line with my opinion. 
</small>

This article is to describe some of the Java facts hopefully in a bit more readable way than reading the language standard.

<h1>So what is private?</h1>

<tt>private</tt> is an access modifier in Java. If you have a <tt>private</tt> member (method, field, inner or nested class or a nested interface) of a class it can only be used by code, which is in the same class. The interesting question is: what happens when there are more than one classes that the <tt>private</tt> method is in? How can it be in more than one class? In case there is a class that contains another class and there is a <tt>private</tt> method inside the inner/nested class then it is inside the inner/nested class and also in the top level class.
<p>
<img src="https://javax0.files.wordpress.com/2017/07/java_modifiers_private_scope.png" alt="" />
<p>
Can a private method inside an enclosed class called from the outer class? Can a code inside an enclosed class call a private method in the outer class? The answer is yes in both cases. The sample code

[sourcecode language="java"]
package javax0.package1;

class TopLevelClass {

  void topMethod(){
    NestedClass nc = new NestedClass();
    nc.method();
  }
  
  private int z;

  interface NestedInterface {
    default void method(){
      TopLevelClass tlc = new TopLevelClass();
      tlc.z++;
    }
  }

  static class NestedClass {
    private int k;

    private void method() {
      TopLevelClass tlc = new TopLevelClass();
      k = tlc.z;
    }
  }
}
[/sourcecode]

clearly shows this situation: the nested class <tt>NestedClass</tt> and the nested interface <tt>NestedInterface</tt> both contain code that can access the outer class contained <tt>private</tt> field <tt>z</tt>. Similarly the top level class code can call the private method inside the nested class. The fact that this sample code does not actually perform anything reasonable is not important in this case.

If we compile this single source file we get three class files:

<ol>
	<li><tt>TopLevelClass$NestedClass.class</tt></li>
	<li><tt>TopLevelClass$NestedInterface.class</tt></li>
	<li><tt>TopLevelClass.class</tt></li>
</ol>

That is because the JVM does not know what is top level and what is nested. The JVM does not know anything about nested and top level classes. For JVM a class is just a class. A top level class if you insist. That is mainly because the Java language 1.0 did not have nested and inner classes and the JVM was designed according to that. When inner and nested classes were introduced in Java 1.1 the compilation was modified only instead of the JVM so that the inner and nested classes remained a language feature but not handled by the JVM directly.

How can the top level class access a private method in another class that was nested in the source code, but when it is compiled it is just another "top level" class. They are on the same level. If the accessibility were changed to public then we could also access it from other classes, but we can not. The compiler will not allow any other code in other classes to access the private method and  even if we did some trick to overcome the compiler the generated class fill will make the JVM to throw an exception. Private in Java is private.

What really happens is that the compiler generates special getter and setter methods to get access to the field <tt>z</tt>.
<p><img src="https://javax0.files.wordpress.com/2017/07/toplevelclassdisassembly.png" alt="" /><p>
Such a <em>bridge</em> method is created for every private field or method that is accessed from a different class inside the same top level class. If the private whatever is not accessed from the enclosing class then the method is not generated. If the field is only read then only the getter is generated, if it is only set from outside then only the setter is generated.
<p>
<img src="https://javax0.files.wordpress.com/2017/07/bridges.png" alt="" />
<p>

This is also an interesting failure believing that a private field (or whatever) is accessible <em>only</em> from within the same object. That is the usual way we use these members when we program, but if the code has a reference of another instance of the same type then through that reference we can access the private fields of the other object just as good as we can access "our own" fields. Is this a rare case? You may think because you rarely program it. But in reality it is extremely frequent: the IDE usually generated the code for us and that is why some developer does not think about that. Without this it would hardly be possible to code the <tt>equals(Object other)</tt> method of classes.
<p>
<img src="https://javax0.files.wordpress.com/2017/07/equals.png" alt="" />
<p>

<h1>What about Java 9?</h1>

So far there is nothing specific to Java 9 in this article and these days every Java article should be about Java 9 (or 10 already?).

If we look at access control generally then we have to talk about JPMS, and there are many great articles about that. <a href="https://blog.codefx.org/tag/jpms/">codeFx</a> has a good list of articles about it. <a href="http://blog.joda.org/2017/04/java-9-modules-jpms-basics.html">Stephen Colebourne</a> has nice articles.

Soon you will be able even to buy books about Java module systems from different publishers. I am in a lucky position that I can already read one in draft from Packt as a reviewer and I love it. But JPMS does not change "private" on this level. Still there will be nested classes and inner classes and bridge methods exactly the same way as before.

The little difference is that Java 9 now has private methods inside interfaces. This means that now we should be prepared to have syntethic bridge methods not only in inner and nested classes, but also in interfaces.

<h1>Takeaway ... </h1>

Sometimes the simplest things are not as simple as they seem. After all the whole IT technology, science, engineering is nothing else but a bunch of zeroes and ones. It is just that we have a lot of them. Really a lot. If there was something new to you in this article then it should tell you that there are areas in the Java language and in the JVM that you may be interested to examine a bit more. For example:

<ul>
	<li>What is the difference between a nested and an inner class?</li>
	<li>Can you have a nested interface inside a class and similarly can you have an inner interface inside a class?</li>
	<li>What about classes or interfaces inside an interface? Can you have an inner class in an interface? How about a nested class?</li>
	<li>Can you write a code using reflection that list all the methods a class has? Will it list the synthetic methods? What modifiers will it have?</li>
	<li>When you compile an inner class it will have the compiled name <tt>Outer$Inner.class</tt>, which is a legitimate name. But what happens if there is a <tt>Outer$Inner.java</tt> source file? Figure it out!</li>
	<li>The generated synthetic methods also have legitim names. What happens if you define a method with that name? Is it Java specification or implementation specific what you see?</li>
	<li>How deep can you nest inner and nested classes and/or interfaces? Can a nested class contain an inner class? Can an inner class contain a nested class?</li>
	<li>What is your guess, why there is no symbolic name in the JDK for the synthetic modifier? Why can the actual modifier value be the same as the value for <tt>volatile</tt> fields?</li>
	<li>Can you have a static field, class or method inside a nested class?</li>
</ul>

The answer to those questions and the knowledge is not practical, I know. I have never ever seen any code or project where knowing that an inner class can not have a static field was giving any advantage. On the other hand thinking about these, getting the answers may give you some joy, like solving crosswords if that is your taste and a knowledge that still may be useful aiding to the understanding the technology in a way that we do not recognize. In some situation one person just finds a bug faster than other because she "feels" the technology. That is when you can not tell what was whispering the solution to your ears but something, knowledge like the above did. But it will only if you love to dig into those fine bits of the technology.

Last a trick question, even less practical than those above just for entertainment, if you like:

<h1>Puzzle</h1>

<em>We know that it is not possible to have a static field inside an inner (not nested) class. Is it still possible to have a compiled class file generated by the Java compiler from an inner class that has a static method?</em>


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1536</wp:post_id>
  <wp:post_date>2017-08-09 16:00:07</wp:post_date>
  <wp:post_date_gmt>2017-08-09 15:00:07</wp:post_date_gmt>
  <wp:post_modified>2017-08-11 16:41:20</wp:post_modified>
  <wp:post_modified_gmt>2017-08-11 15:41:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-is-private-in-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/3H1cqcMSzP3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10212227187367611";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/895298745209892865";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[8093697212]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6301064412312670208&type=U&a=AGHR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[New Regex Features in Java 9]]></title>
  <link>https://javax0.wordpress.com/2017/08/16/new-regex-features-in-java-9/</link>
  <pubDate>Wed, 16 Aug 2017 15:00:18 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1574</guid>
  <description/>
  <content:encoded><![CDATA[I recently received my complimentary copy of the book <a href="https://www.packtpub.com/application-development/java-9-regular-expressions">"Java 9 Regular Expressions"</a> from <a href="https://anubhava.wordpress.com/">Anubhava Srivastava</a> published by Packt. The book is a good tutorial and introduction to anyone who wants to learn what regular expressions are and start from scratch. Those who know how to use regex the book may still be interesting to reiterate the knowledge and to deepen into a more complex feature like zero-length assertions, backreferences, and alike.

In this article, I will focus on the regular expression features that are specific to Java 9 and were not available in earlier version of the JDK. There is not many, though.

<h1>Java 9 Regular Expression Module</h1>

The JDK in Java 9 is split up into modules. One could rightfully expect that there is a new module for the regular expression handling packages and classes. Actually, there is none. The module <code>java.base</code> is the default module on which all other modules depend on by default and thus the classes of the exported packages are always available in Java applications. The regular expression package <code>java.util.regex</code> is exported by this module. This makes the development a bit simpler: there is no need to explicitly 'require' a module if we want to use regular expressions in our code. It seems that regular expressions are so essential to Java that it got included in the base module.

<h1>Regular Expression Classes</h1>

The package <code>java.util.regex</code> contains the classes

<ul>
	<li><code>MatchResult</code></li>
	<li><code>Matcher</code></li>
	<li><code>Pattern</code> and</li>
	<li><code>PatternSyntaxException</code></li>
</ul>

The only class that has changed API is <code>Matcher</code>.

<h1>Changes in class Matcher</h1>

The class <code>Matcher</code> adds five new methods. Four of those are overloaded versions of already existing methods. These are:

<ul>
	<li><code>appendReplacement</code></li>
	<li><code>appendTail</code></li>
	<li><code>replaceAll</code></li>
	<li><code>replaceFirst</code></li>
	<li><code>results</code></li>
</ul>

The first four exists in earlier versions and there is only change in the types of the arguments (after all that is what overloading means).

<h1>appendReplacement/Tail</h1>

In case of <code>appendReplacement</code> and <code>appendTail</code> the only difference is that the argument can also be a <code>StringBuilder</code> and not only <code>StringBuffer</code>. Considering that <code>StringBuilder</code> introduced in Java 1.5 something like 13 years ago nobody should say that this is an inconsiderate act.

It is interesting though how the <a href="https://docs.oracle.com/javase/9/docs/api/java/util/regex/Matcher.html">currently online version of the API JDK</a> documents the behaviour of <code>appendReplacement</code> for <code>StringBuilder</code> argument. The older, <code>StringBuffer</code> argumented method explicitly documents that the replacement string may contain named references that will be replaced by the corresponding group. The <code>StringBuilder</code> argumented version misses this. The documentation seems like copy/paste and then edited. The text replaces "buffer" to "builder" and alike and the text documenting the named reference feature is deleted.

I tried the functionality using Java 9 build160 and the outcome is the same for these two method versions. This should not be a surprise since the source code of the two methods is the same, a simple copy/paste in the JDK with the exception of the argument type.

Seems that you can use

[sourcecode language="java"]
    @Test
    public void testAppendReplacement() {

        Pattern p = Pattern.compile(&quot;cat(?&lt;plural&gt;z?s?)&quot;);
        //Pattern p = Pattern.compile(&quot;cat(z?s?)&quot;);
        Matcher m = p.matcher(&quot;one catz two cats in the yard&quot;);
        StringBuilder sb = new StringBuilder();
        while (m.find()) {
            m.appendReplacement(sb, &quot;dog${plural}&quot;);
            //m.appendReplacement(sb, &quot;dog$001&quot;);
        }
        m.appendTail(sb);
        String result = sb.toString();
        assertEquals(&quot;one dogz two dogs in the yard&quot;, result);
    }
[/sourcecode]

both the commented lines or the line above each. The documentation, however speaks only about the numbered references.

<h1>replaceAll/First</h1>

This is also an "old" method that replaces matched groups with some new strings. The only difference between the old version and the new is how the replacement string is provided. In the old version the string was given as a <code>String</code> calculated before the method was invoked. In the new version the string is provided as a <code>Function&lt;MatchResult,String&gt;</code>. This function is invoked for each match result and the replacement string can be calculated on the fly.

Knowing that the class <code>Function</code> was introduced only 3 years ago in Java 8 the new use of it in regular expressions may be a little slap-dash. Or, perhaps ... may be we should see this as a hint that ten years from now, when the class <code>Fuction</code> will be 13 years old, we will still have Java 9?

Lets dig a bit deeper into these two methods. (Actually only to <code>replaceAll</code> because <code>replaceFirst</code> is the same except that it replaces only the first matched group.) I tried to create some not absolutely intricate examples when such a use could be valuable.

The first sample is from the JDK documentation:

[sourcecode language="java"]
    @Test
    public void demoReplaceAllFunction() {
        Pattern pattern = Pattern.compile(&quot;dog&quot;);
        Matcher matcher = pattern.matcher(&quot;zzzdogzzzdogzzz&quot;);
        String result = matcher.replaceAll(mr -&gt; mr.group().toUpperCase());
        assertEquals(&quot;zzzDOGzzzDOGzzz&quot;, result);
    }
[/sourcecode]

It is not too complex and shows the functionality. The use of a lambda expression is absolutely adequate. I can not imagine a simpler way to uppercase the constant string literal "dog". Perhaps only writing "DOG". Okay I am just kidding. But really this example is too simple. It is okay for the documentation where anything more complex would distract the reader from the functionality of the documented method. Really: do not expect less intricate examples in a JavaDoc. It describes how to use the API and not why the API was created an designed that way.

But here and now we will look at some more complex examples. We want to replace in a string the <code>#</code> characters with the numbers 1, 2, 3 and so on. The string contains numbered items and in case we insert a new one into the string we do not want to renumber manually. Sometimes we group two items, in which case we write <code>##</code> and then we just want to skip a serial number for the next <code>#</code>. Since we have a unit test the code describes the functionality better than I can put it into words:

[sourcecode language="java"]
    @Test
    public void countSampleReplaceAllFunction() {
        AtomicInteger counter = new AtomicInteger(0);
        Pattern pattern = Pattern.compile(&quot;#+&quot;);
        Matcher matcher = pattern.matcher(&quot;# first item\n&quot; +
                &quot;# second item\n&quot; +
                &quot;## third and fourth\n&quot; +
                &quot;## item 5 and 6\n&quot; +
                &quot;# item 7&quot;);
        String result = matcher.replaceAll(mr -&gt; &quot;&quot; + counter.addAndGet(mr.group().length()));
        assertEquals(&quot;1 first item\n&quot; +
                &quot;2 second item\n&quot; +
                &quot;4 third and fourth\n&quot; +
                &quot;6 item 5 and 6\n&quot; +
                &quot;7 item 7&quot;, result);
    }
[/sourcecode]

<img src="https://javax0.files.wordpress.com/2017/08/replacealllambda.png" alt="" width="521" height="275" class="size-full wp-image-1593" />

The lambda expression passed to <code>replaceAll</code> gets the counter and calculates the next value. If we used one <code>#</code> then it increases it by 1 if we used two, then it adds two to the counter and so on. Because a lambda expression can not change the value of a variable in the surrounding environment (the variable has to be effectively final) the counter can not be an <code>int</code> or <code>Integer</code> variable. We need an object that holds an int value and can be changed. <code>AtomicInteger</code> is exactly that even if we do not use the atomic feature of it.

The next example goes even further and does some mathematical calculation. It replaces any floating point formatted number in the string to the sine value of it. That way it corrects our sentence since sin(pi) is not even close to pi, which can not be precisely expressed here. It is rather close to zero:

[sourcecode language="java"]
    @Test
    public void calculateSampleReplaceAllFunction() {
        Pattern pattern = Pattern.compile(&quot;\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d{1,2})?&quot;);
        Matcher matcher = pattern.matcher(&quot;The sin(pi) is 3.1415926&quot;);
        String result = matcher.replaceAll(mr -&gt; &quot;&quot; + (Math.sin(Double.parseDouble(mr.group()))));
        assertEquals(&quot;The sin(pi) is 5.3589793170057245E-8&quot;, result);
    }
[/sourcecode]

We will also play around a bit with this calculation for the demonstration of the last method in our list, which is a brand new one in the <code>Matcher</code> class.

<h1>Stream results()</h1>

The new method <code>results()</code> returns a stream of the matching results. To be more precise it returns a <code>Stream</code> of <code>MatchResult</code> objects. In the example below we use it to collect any floating point formatted number from the string and print their sine value comma separated:

[sourcecode language="java"]
    @Test
    public void resultsTest() {
        Pattern pattern = Pattern.compile(&quot;\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d{1,2})?&quot;);
        Matcher matcher = pattern.matcher(&quot;Pi is around 3.1415926 and not 3.2 even in Indiana&quot;);
        String result = String.join(&quot;,&quot;,
                matcher
                        .results()
                        .map(mr -&gt; &quot;&quot; + (Math.sin(Double.parseDouble(mr.group()))))
                        .collect(Collectors.toList()));
        assertEquals(&quot;5.3589793170057245E-8,-0.058374143427580086&quot;, result);
    }
[/sourcecode]

<h1>Summary</h1>

The new regular expression methods introduced in the Java 9 JDK are not essentially different from what was already available. They are neat and handy and in some situation , hey may ease programming. There is nothing that could have not been introduced in the earlier version. This is just the way of Java to make such changes to the JDK slow and well thought. After all that is why we love Java, don't we?

<small>The whole code copy paste from the IDE can be found and downloaded from the following <a href="https://gist.github.com/verhas/7037ecda49b061dc49a857ca468d4c02">gist</a></small>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1574</wp:post_id>
  <wp:post_date>2017-08-16 16:00:18</wp:post_date>
  <wp:post_date_gmt>2017-08-16 15:00:18</wp:post_date_gmt>
  <wp:post_modified>2018-01-03 15:20:31</wp:post_modified>
  <wp:post_modified_gmt>2018-01-03 14:20:31</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-regex-features-in-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <category domain="post_tag" nicename="java9"><![CDATA[java9]]></category>
  <category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
  <category domain="post_tag" nicename="regex"><![CDATA[regex]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/B5X4R5T831N]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10212284072909714";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/897836811233505282";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[8325419614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6303602484426346497&type=U&a=PXz-]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11331</wp:comment_id>
    <wp:comment_author><![CDATA[Andriy Kryvtsun]]></wp:comment_author>
    <wp:comment_author_email>kontiky@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://www.facebook.com/app_scoped_user_id/10153380520813700/</wp:comment_author_url>
    <wp:comment_author_IP>69.141.116.135</wp:comment_author_IP>
    <wp:comment_date>2017-08-18 12:02:24</wp:comment_date>
    <wp:comment_date_gmt>2017-08-18 11:02:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting, why they simply not change signatures of appendReplacement and appendTail using java.lang.Appendable and don't doubling methods count?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8473999574]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1503300523]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1503300523]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1503300523.5985100269317626953125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503054145.4674370288848876953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[facebook]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://graph.facebook.com/v2.9/10153380520813700/picture?type=large&_md5=aad42dc4eafcff00a4590cdd73a773ee]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[10153380520813700]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503058231.2365009784698486328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11379</wp:comment_id>
    <wp:comment_author><![CDATA[This Week in Spring &#8211; August 29th, 2017 | Alexius DIAKOGIANNIS]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://diakogiannis.com/2017/08/this-week-in-spring-august-29th-2017/</wp:comment_author_url>
    <wp:comment_author_IP>46.4.66.56</wp:comment_author_IP>
    <wp:comment_date>2017-08-29 06:36:06</wp:comment_date>
    <wp:comment_date_gmt>2017-08-29 05:36:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I liked this look at the new support for regular expressions in Java 9. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503984966.5993421077728271484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1503991926]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1503989714.3050320148468017578125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1503991926.3107988834381103515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[noException in stream operation]]></title>
  <link>https://javax0.wordpress.com/2017/08/30/noexception-in-stream-operation/</link>
  <pubDate>Wed, 30 Aug 2017 15:00:48 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1616</guid>
  <description/>
  <content:encoded><![CDATA[<em>This article is about some simple coding practice. Nothing really fancy. It is also discussed on <a href="https://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams">StackOverflow</a>.</em>

You just refactored a huge and complex loop to a more readable stream expression forgetting that some of the method calls throw exception. The method containing this code throws this exception, it is declared in the method head. You do not want to deal with this exception on this level. It is cared about on higher levels of the call stack. And you get that annoying error in the code like a splinter under the nail.

Say you want to convert strings to IP addresses.

[sourcecode language="java"]
private static final String[] allowed = {&quot;127.0.0.1&quot;, &quot;::1&quot;};

...

Arrays.stream(allowed)
      .map(InetAddress::getByName)
      .collect(Collectors.toSet());
[/sourcecode]

The problem is that <code>getByName(String host)</code> throws <tt>UnknownHostException</tt>. This is not a <tt>RuntimeException</tt> so it has to be checked but the method <tt>map()</tt> needs a <tt>Function</tt> as an argument and <tt>Function</tt> does not throw any exception. We need a version of <tt>getByName</tt> that does not throw exception (or we need to use a different language that is more lame with exceptions).

[sourcecode language="java"]
Arrays.stream(allowed)
       .map(s -&gt; {
                   try {
                     return InetAddress.getByName(s);
                     } catch (UnknownHostException e) {
                     throw new RuntimeException(e);
                     }
                 }).collect(Collectors.toSet());
[/sourcecode]

This is just more ugly and messier than the original loop was. Could this try/catch whatever thing be put into a utility class and call some lame static method that wraps the actual call? Kind of yes. Import the following method statically:

[sourcecode language="java"]
    public interface ExceptionalSupplier&lt;T&gt; {
        T apply() throws Exception;
    }
...
    public static &lt;T&gt; T lame(ExceptionalSupplier&lt;T&gt; z) {
        try {
            return z.apply();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
[/sourcecode]

After the import you can write

[sourcecode language="java"]
Arrays.stream(allowed)
      .map(s -&gt; lame(() -&gt; InetAddress.getByName(s)))
      .collect(Collectors.toSet());
[/sourcecode]

the catch is that you can not just <tt>lame( ... )</tt> the call. You have to convert it to an exceptional supplier. A functional interface that has the same look-alike as <tt>Supplier</tt> but it allows exceptions.

Still not ideal. (Well, it is Java, so what did you expect?) Okay. It is Java, but it still can be made better. What if instead of converting the expression through a supplier to an expression that is not throwing the exception we could convert the "Function" that throws the exception into one that is not throwing the exception. We need a method that accepts an exceptional function and returns a normal function. That way we can save the <tt>() -&gt;</tt> noise in our code. Readability rulez.

[sourcecode language="java"]
    public interface ExceptionalFunction&lt;T, R&gt; {
        R apply(T r) throws Exception;
    }
...
    public static &lt;T, R&gt; Function&lt;T, R&gt; lame(ExceptionalFunction&lt;T, R&gt; f) {
        return (T r) -&gt; {
            try {
                return f.apply(r);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        };
    }
[/sourcecode]

With that utility the "final" expression will be

[sourcecode language="java"]
Collection&lt;InetAddress&gt; allowedAddresses =
        Arrays.stream(allowed)
              .map(lame(InetAddress::getByName))
              .collect(Collectors.toSet());
[/sourcecode]

The actual utility class in the <a href="https://gist.github.com/verhas/a2ae93fc8ee14746b54df767e54ab9ce">GIST</a> defines a <tt>WrapperException</tt> extending <tt>RuntimeException</tt> so that you can catch the exception somewhere in the method, like

[sourcecode language="java"]
public myMethod() throws IOException {
try{
    ... do whatever here we do ...
   } catch (RuntTimeExceptionWrapper.WrapperException we) {
       throw (IOException) we.getCause();
   }
[/sourcecode]

That way the method will throw the exception but if anywhere there is another <tt>RuntimeException</tt> that will be throwing up uncaught.

This is just a simple, nice and little trick that helps you keep up with Java, which is backward compatible instead of starting development with some other language that is modern, clutter-free and let's you focus more on the functionality you need to code instead of coding techniques.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1616</wp:post_id>
  <wp:post_date>2017-08-30 16:00:48</wp:post_date>
  <wp:post_date_gmt>2017-08-30 15:00:48</wp:post_date_gmt>
  <wp:post_modified>2017-08-30 13:58:14</wp:post_modified>
  <wp:post_modified_gmt>2017-08-30 12:58:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>noexception-in-stream-operation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/SutuFEv8csT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[8786603820]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6308675753374412801&type=U&a=gUHR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10212398203682912";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/902910077186736128";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11391</wp:comment_id>
    <wp:comment_author><![CDATA[Martin]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>178.255.168.75</wp:comment_author_IP>
    <wp:comment_date>2017-08-31 22:37:35</wp:comment_date>
    <wp:comment_date_gmt>2017-08-31 21:37:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Are you saying the checked exceptions are lame, old-fashioned, clutter-full and don't let you focus more on the functionality?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8831949848]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504217771]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504217771]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504217771.108067035675048828125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1504215457.0899379253387451171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11393</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.157.113</wp:comment_author_IP>
    <wp:comment_date>2017-08-31 23:28:23</wp:comment_date>
    <wp:comment_date_gmt>2017-08-31 22:28:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am not alone with that feeling. Many other languages live a happy life, not to mention the programmers of those languages without ever declaring a method throwing an exception. Having to declare the exceptions has benefits and has cost. During the last twenty years of Java it seems that the cost is more than the benefit.

It would be nice to see an article that collects some statistics and compares the costs and the benefits. I doubt it can reasonably be done. But it would be nice to have it anyway. And we won't.

So answering your question: I am not saying that. Which does not necessarily means I am saying the opposite.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11391</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504218503]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504218503.1449680328369140625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8832215123]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504218503]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11394</wp:comment_id>
    <wp:comment_author><![CDATA[Martin]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>178.255.168.75</wp:comment_author_IP>
    <wp:comment_date>2017-09-01 00:22:41</wp:comment_date>
    <wp:comment_date_gmt>2017-08-31 23:22:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're not saying that, but I am. While I love strictness, things like type safety and static analysis, I see hardly any benefits of checked exceptions. The classical examples like "FileNotFoundException -&gt; ask the user" are more than ridiculous. I wonder if there's any program taking advantage of them. Java type system has nothing allowing to parameterize types with checked exceptions, so it all makes no sense. If there was something like Function[IOException]&lt;String, InetAddress%gt; usable in your example, then checked exceptions could make sense. Without it, the question is: Are checked exception more useful then readability of lambdas and everything else?

I used to believe that catching Exception (or even Throwable) is wrong, but I've changed my mind: Sometimes, a special handling for subclasses is needed, but usually you shouldn't do anything (but oftentimes are forced to wrap) and there are places where everything should be caught. Like here: https://github.com/google/guava/issues/2888 Agreed?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11393</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504221762]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1504221763.3809530735015869140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8833356701]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504221764]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11396</wp:comment_id>
    <wp:comment_author><![CDATA[MÃ¡rton]]></wp:comment_author>
    <wp:comment_author_email>garaimarton.mail@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>46.107.193.252</wp:comment_author_IP>
    <wp:comment_date>2017-09-01 18:58:40</wp:comment_date>
    <wp:comment_date_gmt>2017-09-01 17:58:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In thoose cases, when we want to control streams providing multiple data with asynchronity in mind, I always recommend reactive extension (tho in C# the API is much clearer for me). https://github.com/reactive-streams/reactive-streams-jvm this solution also provides
* mandatory non-blocking backpressure
* asynchronously passing elements between components
* etc..
You can define error handling in any step of the composition. Also You can define retry count, timeout.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1504288721.6713259220123291015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8861280912]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1504293738.504683971405029296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504294104]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504294104]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504294104.9886720180511474609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11397</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.157.113</wp:comment_author_IP>
    <wp:comment_date>2017-09-01 20:30:42</wp:comment_date>
    <wp:comment_date_gmt>2017-09-01 19:30:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reactive streams, soon being part of Java JDK by the dawn of Java 9, have their application and Java 8 introduced streams also. There may be some cases when the use may overlap and one can decide which one to apply.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11396</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[8861334860]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1504294242]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1504294242]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1504294242.7197859287261962890625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Split as stream]]></title>
  <link>https://javax0.wordpress.com/2017/11/22/split-as-stream/</link>
  <pubDate>Wed, 22 Nov 2017 15:00:13 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1629</guid>
  <description/>
  <content:encoded><![CDATA[I am preparing a regular expression tutorial update for the company I work for. The original tutorial was created in 2012 and Java has changed a wee bit since then. There are new Java language releases and though the regular expression handling is still not perfect in Java (nb. it still uses non-deterministic FSA) there are some new features. I wrote about some of those in a previous post focusing on the new Java 9 methods. This time however I have to look at all the features that are new since 2012.
<h1>splitAsStream since 1.8</h1>
This way I found <code>splitAsStream</code> in the <code>java.util.regex.Pattern</code> class. It is almost the same as the method <code>split</code> except that what we get back is not an array of <code>String</code> objects but a stream. The simplest implementation would be something like

[sourcecode language="java"]
public Stream&lt;String&gt; splitAsStream(final CharSequence input) {
    return Arrays.stream(p.split(input));
}
[/sourcecode]

I could see many such implementations when a library tried to keep pace with the new winds and support streams. Nothing is simpler then converting the array or the list available from some already existing functionality to a stream.

The solution, however, is sub-par losing the essence of streams: doing only as much work as needed. And this, I mean "doing only as much work as needed" should happen while the stream is processed and not while the developer converts the array or collection returning method to a stream returning one. Streams deliver the results in a lean way, just in time. You see how many expressions we have for being lazy.

The JDK implementation leverages the performance advantages of streams. If you look at the source code you can see immediately that the implementation is slightly more complex than the before mentioned simple solution. Lacking time I could devote to the study of the implementation and perhaps lacking interest, I used another approach to demonstrate that the implementation respects the stream laziness.

The argument to the method is a <code>CharSequence</code> and not a <code>String</code>. <code>CharSequence</code> is an interface implemented by <code>String</code> but we can also implement it. To have a feeling how lazy the stream implementation in this case is I created an implementation of <code>CharSequence</code> that debug prints out the method calls.

[sourcecode language="java"]
class MyCharSequence implements CharSequence {

    private String me;

    MyCharSequence(String me) {
        this.me = me;
    }

    @Override
    public int length() {
        System.out.println(&quot;MCS.length()=&quot; + me.length());
        return me.length();
    }

    @Override
    public char charAt(int index) {
        System.out.println(&quot;MCS.charAt(&quot; + index + &quot;)=&quot; + me.charAt(index));
        return me.charAt(index);
    }

    @Override
    public CharSequence subSequence(int start, int end) {
        System.out.println(&quot;MCS.subSequence(&quot; + start + &quot;,&quot; + end + &quot;)=&quot;
                                              + me.subSequence(start, end));
        return me.subSequence(start, end);
    }
}
[/sourcecode]

Having this class at hand, I could execute the following simple main method:

[sourcecode language="java"]
public static void main(String[] args) {
    Pattern p = Pattern.compile(&quot;[,\\.\\-;]&quot;);
    final CharSequence splitIt =
              new MyCharSequence(&quot;one.two-three,four;five;&quot;);
    p.splitAsStream(splitIt).forEach(System.out::println);
}
[/sourcecode]

The output shows that the implementation is really lazy:

[sourcecode]
MCS.length()=24
MCS.length()=24
MCS.length()=24
MCS.charAt(0)=o
MCS.charAt(1)=n
MCS.charAt(2)=e
MCS.charAt(3)=.
MCS.subSequence(0,3)=one
one
MCS.length()=24
MCS.charAt(4)=t
MCS.charAt(5)=w
MCS.charAt(6)=o
MCS.charAt(7)=-
MCS.subSequence(4,7)=two
two
MCS.length()=24
MCS.charAt(8)=t
MCS.charAt(9)=h
MCS.charAt(10)=r
MCS.charAt(11)=e
MCS.charAt(12)=e
MCS.charAt(13)=,
MCS.subSequence(8,13)=three
three
MCS.length()=24
MCS.charAt(14)=f
MCS.charAt(15)=o
MCS.charAt(16)=u
MCS.charAt(17)=r
MCS.charAt(18)=;
MCS.subSequence(14,18)=four
four
MCS.length()=24
MCS.charAt(19)=f
MCS.charAt(20)=i
MCS.charAt(21)=v
MCS.charAt(22)=e
MCS.charAt(23)=;
MCS.subSequence(19,23)=five
five
MCS.length()=24
[/sourcecode]

The implementation goes ahead and when it finds the first element for the stream, it returns it. We can process the string âoneâ and it processes further characters only when we get back for further elements. Why does it have to call the method length three times at the start? I have no idea. Perhaps it wants to be very sure that the length of the sequence is not magically changes.

<h1>Morale</h1>
This is a good example how a library has to be extended to support streams. It is not a problem if the application just converts the collection or array to a stream in the first version but if analysis shows that the performance pays back the investment then the real stream laziness should be implemented.

<h2>Side note</h2>
The implementation of <code>CharSequence</code> is mutable, but the processing requires that it remains constant otherwise the result is undefined. I can  confirm that.

Next week I will show a possible use of the <code>splitAsStream</code> that makes use of the feature that it does not read further in the character sequence than it is needed.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1629</wp:post_id>
  <wp:post_date>2017-11-22 16:00:13</wp:post_date>
  <wp:post_date_gmt>2017-11-22 15:00:13</wp:post_date_gmt>
  <wp:post_modified>2017-11-16 10:15:37</wp:post_modified>
  <wp:post_modified_gmt>2017-11-16 09:15:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>split-as-stream</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/cQMzpocSppz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11716968136]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6339115459614433280&type=U&a=55-X]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213042743075994";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/933349777181429761";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27572</wp:comment_id>
    <wp:comment_author><![CDATA[Richard]]></wp:comment_author>
    <wp:comment_author_email>richardfearn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/richardfearn</wp:comment_author_url>
    <wp:comment_author_IP>86.142.168.195</wp:comment_author_IP>
    <wp:comment_date>2019-06-04 10:09:34</wp:comment_date>
    <wp:comment_date_gmt>2019-06-04 09:09:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  Why does it have to call the method length three times at the start? I have no idea. Perhaps it wants to be very sure that the length of the sequence is not magically changes.
</blockquote>

Couldn't resist :-D

I couldn't see it calling length three times at the start, even using the original JDK 8 release from 2014. It gets called twice.

The first call to length() is when the Matcher is created (it stores the length of the string). Then length() gets called each time it tries to get the next match - if the current position is the end of the string (current == input.length()), there are no more matches.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>10571615</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559639375.086154;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"richardfearn";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559643813.660911;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"richardfearn";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31516010476]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559716167]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559716167]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559716167.78639;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Split a File as Stream]]></title>
  <link>https://javax0.wordpress.com/2017/11/29/split-a-file-as-stream/</link>
  <pubDate>Wed, 29 Nov 2017 15:00:33 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1643</guid>
  <description/>
  <content:encoded><![CDATA[Last week I discussed that the new (@since 1.8) method <code>splitAsStream</code> in the class <code>Pattern</code> works on the character sequence reading from it only as much as needed by the stream and not running ahead with the pattern matching creating all the possible elements and returning it as a stream. This behavior is the true nature of streams and it is the way it has to be to support high performance applications.

In this article, as I promised last week, I will show a practical application of <code>splitAsStream</code> where it really makes sense to process the stream and not just split the whole string into an array and work on that.

The application as you may have guessed from the title of the article is splitting up a file along some tokens. A file can be represented as a <code>CharSequence</code> so long (or so short) as long it is not longer than 2GB. The limit comes from the fact that the length of a <code>CharSequence</code> is an <code>int</code> value and that is 32-bit in Java. File length is <code>long</code>, which is 64-bit. Since reading from a file is much slower than reading from a string that is already in memory it makes sense to use the laziness of stream handling. All we need is a character sequence implementation that is backed up by a file. If we can have that we can write a program like the following:

[sourcecode language="java"]
    public static void main(String[] args) throws FileNotFoundException {
        Pattern p = Pattern.compile(&quot;[,\\.\\-;]&quot;);
        final CharSequence splitIt = 
            new FileAsCharSequence(
                   new File(&quot;path_to_source\\SplitFileAsStream.java&quot;));
        p.splitAsStream(splitIt).forEach(System.out::println);
    }
[/sourcecode]

This code does not read any part of the file, that is not needed yet, assumes that the implementation <code>FileAsCharSequence</code> is not reading the file greedy. The class <code>FileAsCharSequence</code> implementation can be:

[sourcecode language="java"]
package com.epam.training.regex;

import java.io.*;

public class FileAsCharSequence implements CharSequence {
    private final int length;
    private final StringBuilder buffer = new StringBuilder();
    private final InputStream input;

    public FileAsCharSequence(File file) throws FileNotFoundException {
        if (file.length() &gt; (long) Integer.MAX_VALUE) {
            throw new IllegalArgumentException(&quot;File is too long to handle as character sequence&quot;);
        }
        this.length = (int) file.length();
        this.input = new FileInputStream(file);
    }

    @Override
    public int length() {
        return length;
    }

    @Override
    public char charAt(int index) {
        ensureFilled(index + 1);
        return buffer.charAt(index);
    }


    @Override
    public CharSequence subSequence(int start, int end) {
        ensureFilled(end + 1);
        return buffer.subSequence(start, end);
    }

    private void ensureFilled(int index) {
        if (buffer.length() &lt; index) {
            buffer.ensureCapacity(index);
            final byte[] bytes = new byte[index - buffer.length()];
            try {
                int length = input.read(bytes);
                if (length &lt; bytes.length) {
                    throw new IllegalArgumentException(&quot;File ended unexpected&quot;);
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            try {
                buffer.append(new String(bytes, &quot;utf-8&quot;));
            } catch (UnsupportedEncodingException ignored) {
            }
        }
    }
}
[/sourcecode]

This implementation reads only that many bytes from the file as it is needed for the last, actual method call to <code>charAt</code> or <code>subSequence</code>.

If you are interested you can improve this code to keep only the bytes in memory that are really needed and delete bytes that were already returned to the stream. To know what bytes are not needed a good hint is from the previous article is that the <code>splitAsStream</code> never touches any character that has smaller index than the first (<code>start</code>) argument of the last call to <code>subSequence</code>. However, if you implement the code in a way that it throws the characters away and fail if anyone wants to access a character that was already thrown then it will not truly implement the <code>CharSequence</code> interface, though it still may work well with <code>splitAsStream</code> so long as long the implementation does not change and it starts needed some already passed characters. (Well, I am not sure, but it may also happen in case we use some complex regular expression as a splitting pattern.)

Happy coding!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1643</wp:post_id>
  <wp:post_date>2017-11-29 16:00:33</wp:post_date>
  <wp:post_date_gmt>2017-11-29 15:00:33</wp:post_date_gmt>
  <wp:post_modified>2017-11-16 11:11:49</wp:post_modified>
  <wp:post_modified_gmt>2017-11-16 10:11:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>split-a-file-as-stream</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[11961852708]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/Vket2Lze2o2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6341651992796024832&type=U&a=qbSL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213096299454870";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/935886310832828417";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11836</wp:comment_id>
    <wp:comment_author><![CDATA[rici]]></wp:comment_author>
    <wp:comment_author_email>ricipeti@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.82.100.59</wp:comment_author_IP>
    <wp:comment_date>2017-11-30 11:11:02</wp:comment_date>
    <wp:comment_date_gmt>2017-11-30 10:11:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I know that the main point of the article is stream oriented splitting, and not the FileAsCharSequence implementation. But I am surprised that an experienced developer like you made a mistake regarding InputStream.read(byte[]). You assume that read(byte[]) method fills all the bytes in the array if the stream can provide enough bytes. However, the only guarantee is that it will read at least one byte, and the actually read number of bytes is the return value. So even a FileInputStream implementation is allowed to read less bytes without any error condition, even if it is not at the end of the file. The correct implementation invokes read(byte[] b, int off, int len) method in an iteration until the byte array is filled completely.

This principle of reading less bytes than requested from a file (or network socket) is true for  common operating systems and programming platforms, Beyond Java's InputStream.read you can check the read(2) for Linux or ReadFile for Windows or C#'s Stream.Read, all of them states that they are allowed to read less bytes than requested.

Other possible problem is that the count of bytes in a file is not equal to the count of characters in it when considering multibyte encodings like utf-8. Even if somehow we could know the count of characters in a file, it would cause a problem if the boundaries of the byte[] buffer splits a multibyte encoded character, then it cannot be decoded correctly. The correct implementation would use a CharsetDecoder.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1512149027]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1512149027.2669870853424072265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1512149027]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1512040488.5387990474700927734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1512036663.376347064971923828125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do We Need User Acceptance Test?]]></title>
  <link>https://javax0.wordpress.com/2017/12/20/do-we-need-user-acceptance-test/</link>
  <pubDate>Wed, 20 Dec 2017 15:00:37 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1652</guid>
  <description/>
  <content:encoded><![CDATA[(Betteridge's law of headlines does not apply.)

I was wondering long time why we do UAT. Do not be mistaken. I do not want to say not to do that type of testing. I just did not understand why it is User Acceptance Test. To be more precise I did not understand why it is User. And if it is User then why is it Acceptance?

In this article I will ruminate a bit on this, and by the end I will get to the conclusion that UAT is really UAT.

When we develop professional software, we deliver it to the customer. Not to the User. To the customer. Sometimes these two actors are the same, but that is only a special case. The two roles are different, and in our business model, we should have two stick figures, one for each. We want the customer accepting what we deliver and we want to have the customer to be happy with what we have achieved. It is not the user. We develop software professional from the start until the end and this includes that we are paid for that. Customer is the actor who pays the bill. It is not the user.

The difference is clear in an example when we deliver an administrative software that helps a large bank, insurance company, and mining company to perform the administration with less human resource replacing the manual work with cheaper software labor. In that case the users are the administrators, the customer is the director of the company. The director never ever touches any administrative screen. The director a.k.a. the customer is happy if the users can use the system and the administration goes well. What we really want to achieve is customer satisfaction.

<blockquote>What we need is Customer Satisfaction Assurance Test (CSAT).</blockquote>

The thing is that we cannot do that directly. The same is true with unit tests. We need functional coverage and we do code coverage. The two are not the same, but there is a correlation between the two. The same is true with technical interviews. What we need to know is that the candidate will perform well in the position working for the firm. What we do: we ask simple or complex, but usually annoying and stupid questions and hopelessly hope that the answersâ correctness will correlate with the future performance the company wants. The same is true with stocks, marriage, health... We fail in all of those, though we do our best. That is UAT.

We cannot do CSAT. What we do is UAT, we hope that the result will correlate with customer satisfaction, they will pay our bills, future orders will come, and we will live a financially viable and happy life. What a miserable failure most of the time! Never mind.
This is not generally true, but we can safely assume as a work hypothesis that the
customer is satisfied if the users are okay.

Sometimes there are no users per se, especially in the IoT arena and that is a reason why nobody cares for example security. That is why we are doomed to use shitty IoT applications which put you in a position that may obnoxiously be familiar if you have ever visited a proctologist or gynecologist. However, this is another story. Usually there are users.
We want the users to be happy.

Wait! No! No! And also third time: no! We actually do not mind if the user is happy and it generally is good to have the user happy but we do not explicitly want them to be. We also do not want them not to be. That is not the question. We just do not bother. We want customer satisfaction, which is ad 1. not the user an ad 2. a level less than happy. The customer is satisfied if the business needs are met and business needs can only be met if the users can work with the system. Users will accept a new system only if they can work with it.

<img src="https://javax0.files.wordpress.com/2017/12/uat-pic1.png" alt="" width="625" height="29" class="alignleft size-full wp-image-1668" />

The next question is why do we not want the user to be happy? The aggressive answer would be that it is a different profession. The professional answer is that the PNL analysis does not justify it (PNL= profit &amp; loss). We have a maximum revenue that depends on many factor. Mostly on how good our sales people can promote. (Side note: did you know that thesaurus.com lists the word âpromoteâ as a synonym for âlieâ?) However, this time let us ignore this factor, which is by the way happens to be the most significant revenue factor, but irrelephant from the UAT point of view. We focus on customer happiness only for now. The formula is:

Income = I(user happiness)

This is a monotonically increasing function. The happier the user is the more income we generate. This increase may lag behind the difference of user happiness; it may even be zero, but a happier user never meant less income. Well, maybe if you work as a <a href="https://javax0.wordpress.com/2014/12/24/do-not-work-on-unimportant-projects/">sexton</a>, but that is far from software development.

If the program works faster, the UI is simpler to understand, the functions work seamless then the users are happier and they will love us. On the other side, doing that increases the cost. Faster working usually needs more hardware, simpler UI needs more design and analysis work and many times UI refactoring and these do not come free.

We also have costs that are also dependent on the user happiness level we want to achieve:

Costs = C(user happiness)

The profit in PNL is the difference of the income and the costs. Letâs denote user happiness with UH because this looks more scientific:

P = I (UH) â C(UH)

Both I and C increase with UH. The usual characteristics of these functions is that I increases fast when UH is small. For example when we have a program that has a bug making it unusable them the income is fairly low. I mean zero. Nobody except government agencies will pay for a software that does not work. With a small investment, we can fix the bug, we can get a software that is just usable, and the users accept it. Out income jumped we will get paid.

If we look at the income on the project level this is the maximum we can get. Any further investment to increase user happiness is waste of the shareholders money.

We can also look on a broader scale. We believe that creating better than just usable software will generate further revenue. If the people have a picture of us as quality software provider, it will not hurt us. In that case, the income should be calculated considering the future income amounts with their probability factors and discounting to present value. That is when we feel lost. How can you do that? Sorry, you cannot. This is when science turns to be art. Still it is important to know when you develop software: there are features that you unfold to close the project and get paid, and there are features that you develop in the woeful hope of future income.

<img src="https://javax0.files.wordpress.com/2017/12/uat-pic22.png" alt="" width="561" height="403" class="size-full wp-image-1676" />

As we get further along the line of the user happiness axis calculating the income and cost functions, we will see that the income does not grow any further too rapidly. On the other hand after a while the cost starts to grow quite rapidly. When you have developed the main use cases, the happy path execution of the process works, the most frequently exceptional cases are covered then you have to stop. Nobody should develop a functionality into a mobile billing application that calculates the roaming costs for a phone of a deceased whose phone accidentally was buried with him in the coffin (or with her). Never happens. If ever say the person gets exhumed, moved to another country and the phone still works then in this single special case handling the situation manually or even by means of pigeon mail is cheaper than developing (and maintaining!!!) the software for the special case. (You see: even sextons are not immune of software problems.) When you have a user interface that can perform the most frequent use cases with one click, the less frequent ones with two clicks and some rare use cases with three or more clicks; then there is no bonus to make everything to one click. Enough is enough. 20% of the features will generate 80% of the revenue. <a href="https://en.wikipedia.org/wiki/Pareto_principle">That is pareto.</a>

<h3>Conclusion</h3>

UAT is only one of the procedures that we regularly do. It is industry best practice. Everybody does that so we also do it. The reasoning is bad.

<blockquote>When there is an industry best practice we can follow it, but senior engineers should also know the reason.</blockquote>

In case of UAT we should know that it is not the âuserâ whose happiness and satisfaction is primarily important for us. It is the customer, but one cannot be without the other.

P.S.: When I said âdifferent professionâ, I was implying psychologist. 
















]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1652</wp:post_id>
  <wp:post_date>2017-12-20 16:00:37</wp:post_date>
  <wp:post_date_gmt>2017-12-20 15:00:37</wp:post_date_gmt>
  <wp:post_modified>2017-12-15 15:05:14</wp:post_modified>
  <wp:post_modified_gmt>2017-12-15 14:05:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-we-need-user-acceptance-test</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/BUrLZbj71L8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12716291128]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6349262253581234177&type=U&a=JgQe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213267623977876";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/943496576525393920";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Java 9 Module Services]]></title>
  <link>https://javax0.wordpress.com/2018/01/10/java-9-module-services/</link>
  <pubDate>Wed, 10 Jan 2018 15:00:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1690</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Wiring and Finding</h1>

Java has a <font size="+1"><tt>ServiceLoader</tt></font> class for long time. It was introduced in 1.6 but a similar technology was in use since around Java 1.2. Some software components used it, but the use was not widespread. It can be used to modularize the application (even more) and to provide a mean to extend an application using some kind of plug-ins that the application does not depend on compile time. Also, the configuration of these services is very simple: just put it on the class/module path. We will see the details.

<img src="https://javax0.files.wordpress.com/2018/01/serviceloader1.png" alt="" width="608" height="285" class="alignleft size-full wp-image-1709" />

The service loader can locate implementations of some interfaces. In EE environment there are other methods to configure implementations. In the non-EE environment, Spring became ubiquitous, which has a similar, though not the exact same solution to a similar, but not an exactly same problem. Inversion of Control (IoC) and Dependency Injections (DI) provided by Spring are the solution to the configuration of the wiring of the different components and are the industry best practice how to separate the wiring description/code from the actual implementation of the functionalities that the classes have to perform.

As a matter of fact, Spring also supports the use of the service loader so you can wire an implementation located and instantiated by the service loader. You can find a short and nicely written article about that <a href="https://dzone.com/articles/extensible-libraries-with-serviceloader-and-spring">here</a>.

<font size="+1"><tt>ServiceLoader</tt></font> is more about how to find the implementation before we could inject it into the components that need it. Junior programmers sometimes mistakenly mix the two and it is not without reason: they are strongly related.

<img src="https://javax0.files.wordpress.com/2018/01/iocanddi.png" alt="" width="625" height="487" class="alignleft size-full wp-image-1713" />

Perhaps because of this most of the applications, at least those that I have seen, do not separate the wiring and the finding of the implementation. These applications usually use Spring configuration for both finding and wiring and this is just OK. Although this is a simplification, we should live with and be happy with it. We should not separate the two functions just because we can. Most of the applications do not need to separate these. They are neatly sitting on a simple line of the XML configuration of a Spring application.

<blockquote>We should program on a level of abstraction that is needed but never more abstract.</blockquote>

Yes, this sentence is a paraphrase of a saying that is attributed to Einstein. If you think about it you can also realize that this statement is nothing more than the principle KISS (keep it simple and stupid). The code, not you.

<font size="+1"><tt>ServiceLoader</tt></font> finds the implementation of a certain class. Not all the implementations that may be on the classpath. It finds only those that are âadvertisedâ. (I will tell later what "advertised" means.) A Java program cannot traverse through all the classes that are on the classpath, or can they?

<h1>Browsing the classpath</h1>

<i>This section is a little detour, but it is important to understand why <font size="+1"><tt>ServiceLoader</tt></font> works the way it does, even before we discuss how it does.</i>

A Java code cannot query the classloader to list all the classes that are on the classpath. You may say I lie because Spring does browse the classes and finds automatically the implementation candidates. Spring actually cheats. I will tell you how it does. For now, accept that the classpath cannot be browsed. If you look at the documentation of the class <font size="+1"><tt>ClassLoader</tt></font> you do not find any method that would return the array, stream or collection of the classes. You can get the array of the packages but you cannot get the classes even from the packages.

The reason for it is the level of abstraction how Java handles the classes. The class loader loads the classes into the JVM and the JVM does not care from where. It does not assume that the actual classes are in files. There are a lot of applications that load classes, not from a file. As a matter of fact, most of the applications load some of the classes from some different media. Also your programs, you just may not know it. Have you ever used Spring, Hibernate or some other framework? Most of these frameworks create proxy objects during run-time and the loads these objects from the memory using a special class loader. The class loader cannot tell you if there will ever be a new object created by the framework it supports. The classpath, in this case, is not static. There is even no such thing as classpath for these special class loaders. They find the classes dynamically.

Okay. Well said and described in detail. But then again: how does Spring find the classes? Spring actually makes a bold assumption. It assumes that the class loader is a special one: <font size="+1"><tt>URLClassLoader</tt></font>. (And as <a href="https://blog.codefx.org/about-nicolai-parlog/">Nicolai Parlog</a> writes in his <a href="https://blog.codefx.org/java/java-9-migration-guide/">article</a> it is not true with Java 9 any more.) It works with a classpath that contains URLs and it can return the array of URLs.

<font size="+1"><tt>ServiceLoader</tt></font> does not make such an assumption and as such it does not browse the classes.

<h1>How does ServiceLoader Find a Class</h1>

The ServiceLoader can find and instantiate classes that implement a specific interface. When we call the static method <font size="+1"><tt>ServiceLoader.load(interfaceKlass)</tt></font>, it returns a âlistâ of classes that implement this interface. I used âlistâ between quotes because technically it returns an instance of <font size="+1"><tt>ServiceLoader</tt></font>, which itself implements <font size="+1"><tt>Iterable</tt></font> so we can iterate over the instances of the classes that implement the interface. The iteration is usually done in a <font size="+1"><tt>for</tt></font> loop invoking the method <font size="+1"><tt>load()</tt></font> following the (:) colon.

To successfully find the instances, the JAR files that contain the implementations should have a special file in the directory <font size="+1"><tt>META-INF/service</tt></font> having the fully qualified name of the interface. Yes, the name has dots in it and there is no any specific file name extension, but nevertheless, it has to be a text file. It has to contain the fully qualified name of the class that implements the interface in that JAR file.

The <font size="+1"><tt>ServiceLoader</tt></font> invokes the <font size="+1"><tt>ClassLoader</tt></font> method <font size="+1"><tt>findResources</tt></font> to get the URLs of the files and reads the names of the classes and then it asks the <font size="+1"><tt>ClassLoader</tt></font> again to load those classes. The classes should have a public zero-argument constructor so that the <font size="+1"><tt>ServiceLoader</tt></font> can instantiate each.

Having those files to contain the name of the classes to piggyback the class loading and instantiation using the resource load works, but it is not too elegant.
Java 9, while keeping the annoying <font size="+1"><tt>META-INF/services</tt></font> solution introduced a new approach. With the introduction of Jigsaw, we have modules and modules have module descriptors. A module can define a service that a <font size="+1"><tt>ServiceLoader</tt></font> can load and a module can also specify what services it may need to load via the <font size="+1"><tt>ServiceLoader</tt></font>. This new way the discovery of the implementation of the service interface moves from textual resources to Java code. The pure advantage of it is that coding errors related to wrong names can be identified during compile time, or module load time to make failing code fail faster.

To make things more flexible or just to make them uselessly more complex (future will tell) Java 9 also works if the class is not an implementation of the service interface but does have a <font size="+1"><tt>public static provider()</tt></font> method that returns an instance of the class that implements the interface. (Btw: in this case, the provider class even may implement the service interface if it wants, but it generally is a factory so why would it. Mind SRP.)

<h1>Sample Code</h1>

You can download a multi-module maven project from <a href="https://github.com/verhas/module-test"><font size="+1"><tt>https://github.com/verhas/module-test</tt></font></a>.

This project contains three modules <font size="+1"><tt>Consumer</tt></font>, <font size="+1"><tt>Provider</tt></font> and <font size="+1"><tt>ServiceInterface</tt></font>. The consumer calls the <font size="+1"><tt>ServiceLoader</tt></font> and consumes the service, which is defined by an interface <font size="+1"><tt>javax0.serviceinterface.ServiceInterface</tt></font> in the module <font size="+1"><tt>ServiceInterface</tt></font> and implemented in the module <font size="+1"><tt>Provider</tt></font>. The structure of the code can be seen in the following picture:

<img src="https://javax0.files.wordpress.com/2017/12/modules-in-ide.png" alt="" width="625" height="743" class="alignleft size-full wp-image-1697" />
  
The <font size="+1"><tt>module-info</tt></font> files contain the declarations:

[sourcecode language="java"]
module Provider {
    requires ServiceInterface;
    provides javax0.serviceinterface.ServiceInterface
      with javax0.serviceprovider.Provider;
}

module Consumer {
    requires ServiceInterface;
    uses javax0.serviceinterface.ServiceInterface;
}

module ServiceInterface {
    exports javax0.serviceinterface;
}
[/sourcecode]


<h1>Pitfalls</h1>

Here I will tell you some of the stupid mistakes I made while I created this very simple example so that you can learn from my mistakes instead of repeating the same. First of all, there is a sentence in the Java 9 JDK documentation in the <font size="+1"><tt>ServiceLoader</tt></font> that reads

<i>In addition, if the service is not in the application module, then the module declaration must have a requires directive that specifies the module which exports the service.</i>

I do not know what it wants to say, but what it means to me is not true. Maybe I misinterpret this sentence, which is likely.

Looking at our example the <font size="+1"><tt>Consumer</tt></font> module uses something that implements the <font size="+1"><tt>javax0.serviceinterface.ServiceInterface</tt></font> interface. This something is actually the <font size="+1"><tt>Provider</tt></font> module and the implementation in it, but it is decided only during run time and can be replaced by any other fitting implementation. Thus it needs the interface and thus it has to have the <font size="+1"><tt>requires</tt></font> directive in the module info file requiring the <font size="+1"><tt>ServiceInterface</tt></font> module. <i>It does not have to require the <font size="+1"><tt>Provider</tt></font> module!</i> The <font size="+1"><tt>Provider</tt></font> module similarly depends on the <font size="+1"><tt>ServiceInterface</tt></font> module and has to require it. The <font size="+1"><tt>ServiceInterface</tt></font> module does not require anything. It only exports the package that contains the interface.

<img src="https://javax0.files.wordpress.com/2018/01/modules-sample.png" alt="" width="587" height="284" class="size-full wp-image-1735" />
 
It is also important to note that neither the <font size="+1"><tt>Provider</tt></font> nor the <font size="+1"><tt>Consumer</tt></font> modules are not required to export any package. <font size="+1"><tt>Provider</tt></font> provides the service declared by the interface and implemented by the class named after the <font size="+1"><tt>with</tt></font> keyword in the module info file. It provides this single class for the world and nothing else. To provide only this class it would be redundant to export the package containing it and it would possibly unnecessarily open the classes that may happen in the same package but are module internal. <font size="+1"><tt>Consumer</tt></font> is invoked from the command line using the <font size="+1"><tt>âm</tt></font> option and that also it does not require the module to export any package.
The command like to start the program is

[sourcecode]
java -p Consumer/target/Consumer-1.0.0-SNAPSHOT.jar:
  ServiceInterface/target/ServiceInterface-1.0.0-SNA
  PSHOT.jar:Provider/target/Provider-1.0.0-SNAPSHOT.
  jar -m Consumer/javax0.serviceconsumer.Consumer
[/sourcecode]

and it can be executed after a successful <font size="+1"><tt>mvn</tt></font> install command. Note that the maven compiler plugin has to be at least version 3.6 otherwise, the ServiceInterface-1.0.0-SNAPSHOT.jar will be on the classpath instead of the module path during the compilation and the compilation will fail not finding the <font size="+1"><tt>module-info.class</tt></font> file.

<h1>What is the point</h1>

The <font size="+1"><tt>ServiceLoader</tt></font> can be used when an application is wired with some modules only during run-time. A typical example is an application with plugins. I myself ran into this exercise when I ported <a href="https://github.com/verhas/jScriptBasic">ScriptBasic for Java</a> from Java 7 to Java 9. The BASIC language interpreter can be extended by classes containing public static methods and they have to be annotated as <font size="+1"><tt>BasicFunction</tt></font>. The last version required that the host application embedding the interpreter list all the extension classes calling an API in the code. This is superfluous and not needed. The <font size="+1"><tt>ServiceLoader</tt></font> can locate service implementation for which the interface (<font size="+1"><tt>ClassSetProvider</tt></font>) is defined in the main program, and then the main program can call the service implementations one after the other and register the classes returned in the sets. That way the host application does not need to know anything about the extension classes, it is enough that the extension classes are put on the module path and that each provides the service.

The JDK itself also uses this mechanism to locate loggers. The new Java 9 JDK contains the <font size="+1"><tt>System.LoggerFinder</tt></font> class that can be implemented as a service by any module and if there is an implementation that the <font size="+1"><tt>ServiceLoader</tt></font> can find the method <font size="+1"><tt>System.getLogger()</tt></font> will find that. This way the logging is not tied to the JDK, not tied to a library during compile time. It is enough to provide the logger during run-time and the application, the libraries the application uses and the JDK all will use the same logging facility.

With all these changes in the service loading mechanism, and making it part of the language from being piggy-backed on resource loading one may hope that this type of service discovery will gain momentum and will be used in broader scale as it was used before.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1690</wp:post_id>
  <wp:post_date>2018-01-10 16:00:08</wp:post_date>
  <wp:post_date_gmt>2018-01-10 15:00:08</wp:post_date_gmt>
  <wp:post_modified>2018-01-02 13:11:54</wp:post_modified>
  <wp:post_modified_gmt>2018-01-02 12:11:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-9-module-services</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/9RJpHC69bb1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13434825638]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6356872927949975552&type=U&a=L6ww]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213440886549332";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/951107254069202944";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12027</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>31.10.159.41</wp:comment_author_IP>
    <wp:comment_date>2018-01-22 21:58:42</wp:comment_date>
    <wp:comment_date_gmt>2018-01-22 20:58:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you for the correction. I appreciate it a lot.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12025</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516654722]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516654722.492916107177734375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[13912523191]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516654722]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12025</wp:comment_id>
    <wp:comment_author><![CDATA[Juergen Hoeller]]></wp:comment_author>
    <wp:comment_author_email>jhoeller@pivotal.io</wp:comment_author_email>
    <wp:comment_author_url>https://spring.io/blog</wp:comment_author_url>
    <wp:comment_author_IP>91.142.17.24</wp:comment_author_IP>
    <wp:comment_date>2018-01-22 21:09:30</wp:comment_date>
    <wp:comment_date_gmt>2018-01-22 20:09:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Please note that Spring does <em>not</em> make hard assumptions about URLClassLoader: That particular ClassLoader subtype is only really used as one way of detecting classpath root entries (the other way is the "java.class.path" manifest entry) when asked to scan the entire classpath from the very root downwards. However, in practice, Spring applications typically perform narrow scans from so-called base packages downwards, and all we really need to work there is the standard ClassLoader.getResources(name) method which has to be able to resolve package locations as JarURLConnection or as a common jar URL (which keeps working fine on JDK 9).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[13912468029]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516654613]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516654613]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516654613.149507999420166015625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516651771.1924259662628173828125;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"jhoeller";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12081</wp:comment_id>
    <wp:comment_author><![CDATA[Java 9 Modularity ééµå­æ´ç - Ajoshow]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.ajoshow.com/2018/02/01/java-9-modularity-%e9%97%9c%e9%8d%b5%e5%ad%97%e6%95%b4%e7%90%86/</wp:comment_author_url>
    <wp:comment_author_IP>13.113.89.80</wp:comment_author_IP>
    <wp:comment_date>2018-02-01 16:49:29</wp:comment_date>
    <wp:comment_date_gmt>2018-02-01 15:49:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Java 9 ModuleÂ Services [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1517505184.3479330539703369140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1517514386.9565041065216064453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1517514386]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1517500170.579327106475830078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Raid, backup and archive]]></title>
  <link>https://javax0.wordpress.com/2018/01/18/raid-backup-and-archive/</link>
  <pubDate>Thu, 18 Jan 2018 08:29:08 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1744</guid>
  <description/>
  <content:encoded><![CDATA[This is a short tutorial about the similarities and the differences of redundant storage, backup, and archive functionality. I felt a need to create this short introduction because I realized that many IT professionals do not know the difference between these operations and many times mix them or using the wrong approach for some purpose.

I personally once was the witness of a backup at a Hungarian bank, which was stored on a partition of a raid set disk, which also held the operational data. Raid controller failure happened. Backup was unusable. Technically it was not a backup. A Digital Equipment Corp. engineer was restoring the allocation bits of the raid set for two weeks to restore account data. Although neither the bank, which shall not be named, nor Digital do not exist anymore I am more than convinced that similar backups still do.
<h1>What these methods are</h1>
Redundant storage, backup, and archive copy operational data. They do that aiming more stability in operation. The copied data is stored in a redundant way and in case there is some event that needs data deleted or corrupted previously the copied version is still available. The differences between these data redundancy increasing strategies are
<ul>
	<li>(NEED) the type of event that creates the need for the deleted data</li>
	<li>(CAUSE) the type of event that causes the deletion of the data</li>
	<li>(DISCOVERY) how the data loss or need is recognized</li>
	<li>(HOW) how the actual copy is created and stored</li>
</ul>
<h2><img class="size-full wp-image-1754" src="https://javax0.files.wordpress.com/2018/01/raid.png" alt="" /> Redundant storage</h2>
Redundant storage copies the data online and all the time. (HOW) When there is some change in the data the redundant information is created in some storage media as soon as the hardware and software make it possible. The action of copy is not batched. It is not waiting for a bunch of data to be copied together. It is copied as soon as possible.

The actual implementation is usually some RAID configuration. A RAID configuration two or more same-size disks parallel. In case of two disks, anything written on one is written to the other at the same time. When reading one of the disks is used, which makes reading twice as fast regarding the data transfer assuming that the data transfer bus between the disk and the computer is fast enough. Seek time in case of rotating (non-SSD) disks is not improved.

When there are three or more disks the writing is a bit different. In this situation whenever a bit is changed on one disk then the bit is also changed on the last disk of the RAID set. The RAID controller keeps the bits of the last disk of the set to be the XOR value of the same bits on the other disks. That way the data is "partially copied".

In case of a hardware failure, the RAID solutions usually allow the faulty disk to be replaced without switching off the disk system. The controller will automatically reconstruct the missing data.

(NEED) Redundant storage keeps the data available during normal operation and prevents data loss in case of (CAUSE) hardware failure. All the data is copied all the time and in case there is a failure the data recovery causes a few milliseconds in data access delay. Data redundancy recovery may be longer in the range o few minutes or hours, but the data is available unless there are multiple failures.

(DISCOVERY) The data loss is automatically detected because the redundancy is checked upon every read.
<h2><img class="size-full wp-image-1758" src="https://javax0.files.wordpress.com/2018/01/backup.png" alt="" /> Backup</h2>
(HOW) Backup copies data usually to offline media. The copy is started at regular intervals, like every hour, day or week. When a backup is executed files that changed since the last backup are copied to the backup media. Backup can cover the application data or can cover the whole operating system. Many times operating system is not backed up. When there is a need to restore the information OS is installed fresh from installation media and only the application files are restored from the backup storage. This may require smaller backup storage, faster backup and restore execution.

There are different techniques called full, partial and differential backups. Creating backups without purging old data would infinitely grow the size of the backup media. This would not only cost ever increasing money buying the media but the burden to catalog and keep the old media would also mean a huge operational cost burden. To optimize the costs old backups are deleted with special strategy. As an example, a strategy can require to create a backup every day and delete the backups that are older than one week except those that were created on Monday. Backups older than a month can also be deleted except those that were created on the first Monday of the month and similarly backups older than a year may be deleted except the backup of January and June.

(NEED) The data stored on the backup media is needed if it is discovered that some data was deleted. (CAUSE) The reason for the deletion may be human error or sabotage. A user of the system mistyped the name of a record to be deleted or thought that the data is not needed anymore and later it is realized that it was a mistake. Sabotage is a deliberate action when somebody having access to the system deletes or alters data as a wrongdoing. In either case, the data is ruined by human interaction. It may also be possible that the data is ruined by disaster (flood, fire, earthquake) or some hardware error that causes much more severe damage than a simple disk error.

The backup media itself can also be the target of the sabotage. Disaster can also damage backup media. For this reason, backup is usually stored offline disconnected from the main operating system and many times the media is transferred to a different location.

When data needs to be restored the backup media has to be copied back to the operational components to restore the information that was deleted or altered. The restore process needs to connect the backup media, or a copy of the backup media to the operational components and copy the data back. The connecting is usually a manual process because anything automated can be the target for a sabotage. Because of manual nature of the process restoring a backup is usually a long time. It may be a few minutes, hours or days. Usually the older the backup the more time is needed to get back the operational data.
<h2><img class="size-full wp-image-1759" src="https://javax0.files.wordpress.com/2018/01/archive.png" alt="" /> Archive</h2>
(HOW) The creation of an archive is very similar to the creation of a backup. We copy some of the data to some offline media and we store it for a long time. The archive copy is usually done on data that was not yet archived. Archive this way is kind of incremental usually. (CAUSE) Archive stores data, which is deleted from the system deliberately by the normal operational processes, because it is not needed by the operation. The archive is not aiming to provide a backup source for data that is found to be deleted accidentally. The data stored in the archive is never needed for normal operation. (DISCOVERY/NEED) The archive data is needed for extraordinary operation.

For example, the mobile company does not need the cell information of individual phones for a long time. It is an operation data stored in the HLR and VLR database and this information is not even backed up usually. In case there is data loss getting the actual information is faster gathering it from the GSM network than restoring from a backup being probably fairly outdated (mobile phones move in the meantime). On May 9, 2002, some robbers killed 8 people in the small Hungarian town Mor. A few years later when the investigation got to the point to examine the mobile phone movements in the area the data was not available as operational data but it was available in the archives. Analysing GSM cell data to support the operation of homicide investigation is not a normal operation of a telecom company.

You archive data that you are obligated to store and archive by law, you suspect that you may need for some unforeseeable future purpose. Records that describe the business level operations and transactions are archived usually.
<h1>Comparison</h1>
<img class="size-full wp-image-1761" src="https://javax0.files.wordpress.com/2018/01/raid-backup-archive1.png" alt="" width="625" height="672" />
As you can see from the above one of the method cannot replace the other. They supplement each other and if you do not implement one of them then you can expect that the operation will be sub-par.

The example in the intro explains clearly why redundant storage does not eliminate the need for a backup. Similarly archiving cannot be replaced by an otherwise proper backup solution. The error, in this case, will not face you so harsh and evident because of the long-term nature of the archive. Nevertheless, an archive is not the same as backup.

In some cases, I have seen the use of archive as the source of data backup. This is a forgivable sin only when the data loss has already happened and the archive still has the data you need. On the other hand, the archive does not contain all the operational data, only those that have long-term business relevance.
<h1>Summary</h1>
This is a short introduction to redundant storage, backup, and archive. Do not think that understanding what is written here makes you an expert in any of these topics. Each of the topics is a special expert area with tons of literature to learn and loads of exercises to practice and ace. On the other hand, now you should understand the basic roles of these methods, what they are good for and what they are not good for, as well as you should know the most important differences to avoid the mistakes that others have already committed.

There is no need to repeat old mistakes. Commit new ones!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1744</wp:post_id>
  <wp:post_date>2018-01-18 09:29:08</wp:post_date>
  <wp:post_date_gmt>2018-01-18 08:29:08</wp:post_date_gmt>
  <wp:post_modified>2018-01-19 17:27:54</wp:post_modified>
  <wp:post_modified_gmt>2018-01-19 16:27:54</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>raid-backup-and-archive</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1516264152]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13741925367]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/hMmNM2pThCs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6359672816358477824&type=U&a=_U9J]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213501154856002";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/953907144360853504";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Format the code]]></title>
  <link>https://javax0.wordpress.com/2018/01/24/format-the-code/</link>
  <pubDate>Wed, 24 Jan 2018 15:00:57 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1765</guid>
  <description/>
  <content:encoded><![CDATA[PACKT recently published the book <a href="https://www.packtpub.com/application-development/mastering-java-9" target="_blank" rel="noopener">Mastering Java 9</a> that I co-authored. The author who started to write the book could not finish, and PACKT had to find people who agreed to write some of the chapters. I previously successfully finished <a href="https://www.packtpub.com/application-development/java-9-programming-example" target="_blank">Programming Java 9 by Example</a> and PACKT asked me if I could help. Finally, we wrote the book with Dr. Edward Lavieri.

To my surprise, he used C# bracket placing in the book. That is, the <tt>{</tt> character is placed not on the end of the line but rather at the start of the next line.

[sourcecode language="C"]
if( myCondition )
{
  do something;
}
[/sourcecode]

This is against the usual Java coding convention.

When I started programming C in 1984 I started to use this bracket placement. That time Internet was not reachable and there were no tools to share opinions in such a wide audience like now. It was also not clear how much formatting means when we are coding. What is more, it was not even clear how much readability is important.

Later I learned that the convention in case of C programming usually is to put the <tt>{</tt> character at the end of the line.

[sourcecode language="C"]
if( myCondition ){
  do something;
  }
[/sourcecode]

In case of C, it is not always the case. Some programmer teams use the first bracket placement, while others use the later.

In case of Java, the C# style bracket placement is almost extinct. Perhaps it would be interesting to see a statistics over the sources available on GitHub to see how big percent of the Java code uses this or that.

Why is it interesting? Because

<blockquote>
You should not use C# formatting when you program Java code!
</blockquote>

There are exceptions as always. For example, the company you work for insists on the other coding style. In that case, the company made the bad decision and although it may be okay or even great working for this company, this is certainly a company smell. (See <a href="https://martinfowler.com/bliki/CodeSmell.html" target="_blank">code smell</a>.)

Why should not you use the other style?

Because of readability. Readability is subjective and still, in this case, I dare say that the Java style bracket placement is more readable. Hold your horses before ranting, I will explain.


<blockquote>
Ð§ÑÐ¾ Ð±ÑÐ»Ð¾ ÑÐ°Ð½ÑÑÐµ, ÐºÑÑÐ¸ÑÐ° Ð¸Ð»Ð¸ ÑÐ¹ÑÐ¾?
</blockquote>

For most of you, the above sentence is not readable. I can read it because I grew up in eastern Europe where learning Russian was mandatory. It is also readable for most of the Russian people. They can not only read it, but they can even understand it. For them, it is just as readable as the English sentence

<blockquote>
What was sooner, the chicken or the egg?
</blockquote>

for us.

Readablility depends on what we got used to. Java programmers got used to

[sourcecode language="C"]
                      {
  }
[/sourcecode]

bracket placement. C# programmers use the other style. If we see a code that is formatted differently you may oversee some aspect of the code that you would not skip otherwise. The difference is subtle but still it is there. When you hire Java developers you are more likely to find good Java developers for a reasonable price who use and who are accustomed to the industry standard than one who is accustomed to the C# style.

You can find here and there some who are also fluent in C# as well and can read Cyrillic... ops... C# "characters" but it is less common than pure Java developers.

The bottom line is that the TCO of the code will be lower during the lifetime of code development and maintenance if you follow the industry standards. It is that simple.

P.S.: Buy the books!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1765</wp:post_id>
  <wp:post_date>2018-01-24 16:00:57</wp:post_date>
  <wp:post_date_gmt>2018-01-24 15:00:57</wp:post_date_gmt>
  <wp:post_modified>2018-01-23 17:37:56</wp:post_modified>
  <wp:post_modified_gmt>2018-01-23 16:37:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>format-the-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13984787217]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1516806122]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/T8ywn8X8vEY]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6361946006845734912&type=U&a=tzvT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213557207577285";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/956180336710316032";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12044</wp:comment_id>
    <wp:comment_author><![CDATA[Wyatt U. Carey]]></wp:comment_author>
    <wp:comment_author_email>wyucarey666@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.108.26.126</wp:comment_author_IP>
    <wp:comment_date>2018-01-25 11:55:00</wp:comment_date>
    <wp:comment_date_gmt>2018-01-25 10:55:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Weakest article in a long time, and it shows a prime example of typical inch pincher stuff certain people still like to make a fuzz about.

It blows the "problem" out of proportion by using a really bad analogy/example (instead, e.g., different forms of quotations w/ adjacent punctuation would fit better, and actually underline the insignificance as the impact on the reader is low in both cases).

But I guess every now and then someone has to reheat exhausted topics (for a blog, time filler at a conference, "31 things to boost your xyz" guides) that were hyped, covered and ridden to death &gt; 15 years ago...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516879214]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516879214]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516879214.0197999477386474609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516877702.4418280124664306640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14019767570]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12045</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.175</wp:comment_author_IP>
    <wp:comment_date>2018-01-25 12:22:53</wp:comment_date>
    <wp:comment_date_gmt>2018-01-25 11:22:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree with each and every word of your comment.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12044</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516879373]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516879373.7991330623626708984375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14019835868]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516879373]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12037</wp:comment_id>
    <wp:comment_author><![CDATA[MÃ¡rton Garai]]></wp:comment_author>
    <wp:comment_author_email>garaimarton.mail@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>185.161.72.136</wp:comment_author_IP>
    <wp:comment_date>2018-01-24 17:37:59</wp:comment_date>
    <wp:comment_date_gmt>2018-01-24 16:37:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When reading code, the environment is important. So for example, when You write code into a code base full of 
                    {
}
You should do the same. In books the environment is the "industry standard", but most of the code bases might differ in one or two things. Company standard should be followed.

There are times, when some conventions are not clear. Someone uses space after starting bracket, someone not. These might look smaller problem, but the truth is, it's like switching between English, and Russian all the time. That is much bigger problem, than everyone should follow a rule, that I think is industry standard.

How do we realize there are convention for something? For example in Resharper there are LOTS of configuration, that I haven't even thought of can be standardized. Like different "Force chop compound condition in "if"/"while"/"do" statement". Why would I like to that work differently for "if" or for "while"? In bottom line, there might be standards, that not even recognized.

IMHO some standards are not that important, but some have interesting properties, which must be considered. So when company decides standards, those properties have to be chosen carefully.

https://www.youtube.com/watch?v=ZsHMHukIlJY

In Kevlin Henney's talk He expresses several properties of brace placement, and challenges the status quo of
                            {
}
I like that he search for psychological and logical facts about reading anything. Not advertising status quo for being status quo.

When writing a book we clearly don't have a company. So we can substitute company standard with industry standard. In that matter we should be aware of, that industry standards might change without notice. Like more and more programmer listen to Uncle Bob or Kevlin Henney, and their perspective changes programming style of the majority of programmers. And if You say, that industry standards don't change, I think we are on the verge of change between "always comment Your code" and "comment is a failure of expressing Yourself in method names".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516811879.866301059722900390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[13992478698]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516816431.5467529296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516819394]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516819394]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516819394.24637603759765625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12052</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2018-01-26 15:00:07</wp:comment_date>
    <wp:comment_date_gmt>2018-01-26 14:00:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Tabs or spaces? Both! (not)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516975207]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1516975207.185309886932373046875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14060614618]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516975207]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12053</wp:comment_id>
    <wp:comment_author><![CDATA[MÃ¡rton Garai]]></wp:comment_author>
    <wp:comment_author_email>garaimarton.mail@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>185.161.72.136</wp:comment_author_IP>
    <wp:comment_date>2018-01-26 15:27:25</wp:comment_date>
    <wp:comment_date_gmt>2018-01-26 14:27:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[vim &gt; emacs.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12052</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1516976846]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1516976846]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516976846.20318603515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[14061433549]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Rating Articles]]></title>
  <link>https://javax0.wordpress.com/2018/01/26/rating-acticles/</link>
  <pubDate>Fri, 26 Jan 2018 14:46:07 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1770</guid>
  <description/>
  <content:encoded><![CDATA[My last article was commented as <em>"Weakest article in a long time, and it shows a prime example of typical inch pincher stuff certain people still like to make a fuzz about."</em>

To ease this type of feedback for you I switched on the rating functionality. (I do not know why I did not do that before.)

You can simply click on the stars at the top of the article to express you like or dislike an article. (It is not shown on the opening page, you have to click on the title of the article to get to the article's own page.) This will help me to write better articles and it will also help the other readers to skip articles when they are not that good.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1770</wp:post_id>
  <wp:post_date>2018-01-26 15:46:07</wp:post_date>
  <wp:post_date_gmt>2018-01-26 14:46:07</wp:post_date_gmt>
  <wp:post_modified>2018-01-31 09:36:50</wp:post_modified>
  <wp:post_modified_gmt>2018-01-31 08:36:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rating-acticles</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213574716094987";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/956901092851404800";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14061984696]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1516977967]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/4vm9inht4BA]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6362666769915658241&type=U&a=Clks]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Comparing files in Java]]></title>
  <link>https://javax0.wordpress.com/2018/01/31/comparing-files-in-java/</link>
  <pubDate>Wed, 31 Jan 2018 15:00:55 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1777</guid>
  <description/>
  <content:encoded><![CDATA[I am creating a series of video tutorials for PACKT about network programming in Java. There is a whole section about Java NIO. One sample program is to copy a file via raw socket connection from a client to a server. The client reads the file from the disk, and the server saves the bytes as they arrive, to disk. Because this is a demo, the server and the client are running on the same machine and the file is copied from one directory to the exact same directory but a different name. The proof of the pudding is eating it: the files have to be compared.

The file I wanted to copy was created to contain random bytes. Transferring only text information can leave sometimes some tricky bug lurking in the code. The random file was created using the simple Java class:

[code lang=text]
package packt.java9.network.niodemo;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Random;

public class SampleMaker {
    public static void main(String[] args) throws IOException {
        byte[] buffer = new byte[1024 * 1024 * 10];
        try (FileOutputStream fos = new FileOutputStream(&quot;sample.txt&quot;)) {
            Random random = new Random();
            for (int i = 0; i &lt; 16; i++) {
                random.nextBytes(buffer);
                fos.write(buffer);
            }
        }
    }
}
[/code]

Using IntelliJ comparing files is fairly easy, but since the files are binary and large this approach is not really optimal. I decided to write a short program that will not only signal that the files are different but also where the difference is. The code is extremely simple:

[code lang=text]
package packt.java9.network.niodemo;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class SampleCompare {
    public static void main(String[] args) throws IOException {
        long start = System.nanoTime();
        BufferedInputStream fis1 = new BufferedInputStream(new FileInputStream(&quot;sample.txt&quot;));
        BufferedInputStream fis2 = new BufferedInputStream(new FileInputStream(&quot;sample-copy.txt&quot;));
        int b1 = 0, b2 = 0, pos = 1;
        while (b1 != -1 &amp;&amp; b2 != -1) {
            if (b1 != b2) {
                System.out.println(&quot;Files differ at position &quot; + pos);
            }
            pos++;
            b1 = fis1.read();
            b2 = fis2.read();
        }
        if (b1 != b2) {
            System.out.println(&quot;Files have different length&quot;);
        } else {
            System.out.println(&quot;Files are identical, you can delete one of them.&quot;);
        }
        fis1.close();
        fis2.close();
        long end = System.nanoTime();
        System.out.print(&quot;Execution time: &quot; + (end - start)/1000000 + &quot;ms&quot;);
    }
}
[/code]

The running time comparing the two 160MB files is around 6 seconds on my SSD equipped Mac Book and it does not improve significantly if I specify a large, say 10MB buffer as the second argument to the constructor of <code>BufferedInputStream</code>. (On the other hand, if we do not use the <code>BufferedInputStream</code> then the time is approximately ten times more.) This is acceptable, but if I simply issue a <code>diff sample.txt sample-copy.txt</code> from the command line, then the response is significantly faster, and not 6 seconds. It can be many things, like Java startup time, code interpretation at the start of the <code>while</code> loop, till the JIT compiler thinks it is time to start to work. My hunch is, however, that the code spends most of the time reading the file into the memory. Reading the bytes to the buffer is a complex process. It involves the operating system, the device drivers, the JVM implementation and they move bytes from one place to the other and finally we only compare the bytes, nothing else. It can be done in a simpler way. We can ask the operating system to do it for us and skip most of the Java runtime activities, file buffers, and other glitters.

We can ask the operating system to read the file to memory and then just fetch the bytes one by one from where they are. We do not need a buffer, which belongs to a Java object and consumes heap space. We can use memory mapped files. After all, memory mapped files use Java NIO and that is exactly the topic of the part of the tutorial videos that are currently in the making.

Memory mapped files are read into the memory by the operating system and the bytes are available to the Java program. The memory is allocated by the operating system and it does not consume the heap memory. If the Java code modifies the content of the mapped memory then the operating system writes the change to the disk in an optimized way, when it thinks it is due. This, however, does not mean that the data is lost if the JVM crashes. When the Java code modifies the memory mapped file memory then it modifies a memory that belongs to the operating system and is available and is valid after the JVM stopped. There is no guarantee and 100% protection against power outage and hardware crash, but that is very low level. If anyone is afraid of those then the protection should be on the hardware level that Java has nothing to do anyway. With memory mapped files we can be sure that the data is saved into the disk with certain, very high probability that can only be increased by failure tolerant hardware, clusters, uninterruptible power supplies and so on. These are not Java. If you really have to do something from Java to have the data written to disk then you can call the <code>MappedByteBuffer.force()</code> method that asks the operating system to write the changes to disk. Calling this too often and unnecessarily may hinder the performance though. (Simple because it writes the data to disk and returns only when the operating system says that the data was written.)

Reading and writing data using memory mapped files is usually much faster in case of large files. To have the appropriate performance the machine should have significant memory, otherwise, only part of the file is kept in memory and then the page faults increase. One of the good things is that if the same file is mapped into the memory by two or more different processes then the same memory area is used. That way processes can even communicate with each other.

The comparing application using memory mapped files is the following:

[code lang=text]
package packt.java9.network.niodemo;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

public class MapCompare {
    public static void main(String[] args) throws IOException {
        long start = System.nanoTime();
        FileChannel ch1 = new RandomAccessFile(&quot;sample.txt&quot;, &quot;r&quot;).getChannel();
        FileChannel ch2 = new RandomAccessFile(&quot;sample-copy.txt&quot;, &quot;r&quot;).getChannel();
        if (ch1.size() != ch2.size()) {
            System.out.println(&quot;Files have different length&quot;);
            return;
        }
        long size = ch1.size();
        ByteBuffer m1 = ch1.map(FileChannel.MapMode.READ_ONLY, 0L, size);
        ByteBuffer m2 = ch2.map(FileChannel.MapMode.READ_ONLY, 0L, size);
        for (int pos = 0; pos &lt; size; pos++) {
            if (m1.get(pos) != m2.get(pos)) {
                System.out.println(&quot;Files differ at position &quot; + pos);
                return;
            }
        }
        System.out.println(&quot;Files are identical, you can delete one of them.&quot;);
        long end = System.nanoTime();
        System.out.print(&quot;Execution time: &quot; + (end - start) / 1000000 + &quot;ms&quot;);
    }
}
[/code]

To memory map the files we have to open them first using the <code>RandomAccessFile</code> class and ask for the channel from that object. The channel can be used to create a <code>MappedByteBuffer</code>, which is the representation of the memory area where the file content is loaded. The method <code>map</code> in the example maps the file in read-only mode, from the start of the file to the end of the file. We try to map the whole file. This works only if the file is not larger than 2GB. The start position is <code>long</code> but the size of the area to be mapped is limited by the size of an <code>Integer</code>.

Generally this it... Oh yes, the running time comparing the 160MB random content files is around 1sec.

<h3>UPDATE:</h3>

https://twitter.com/snazy pointed out that the part of the code

[code lang=text]
        for (int pos = 0; pos &lt; size; pos++) {
            if (m1.get(pos) != m2.get(pos)) {
                System.out.println(&quot;Files differ at position &quot; + pos);
                return;
            }
        }
[/code]

can be replaced using the built-in <code>ByteBuffer::mismatch</code> method. The code is simpler, it does exactly what the example code is aiming and it is probably faster.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1777</wp:post_id>
  <wp:post_date>2018-01-31 16:00:55</wp:post_date>
  <wp:post_date_gmt>2018-01-31 15:00:55</wp:post_date_gmt>
  <wp:post_modified>2018-10-14 05:39:28</wp:post_modified>
  <wp:post_modified_gmt>2018-10-14 04:39:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-files-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/f5cZLiu4qNB]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[14231120810]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1517410938]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6364482783762538496&type=U&a=MHJr]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213621242178110";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/958717100884930561";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Java getting back to the browser?]]></title>
  <link>https://javax0.wordpress.com/2018/02/28/java-getting-back-to-the-browser/</link>
  <pubDate>Wed, 28 Feb 2018 15:00:32 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1788</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote><a href="https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines">Betteridge's law of headlines</a> apply.</blockquote>

<h2>Lead-in</h2>

This article talks about WebAssembly and can be read to get the first glimpse of it. At the same time, I articulate my opinion and doubts. The summary is that WebAssembly is an interesting approach and we will see what it will become.

<h1>Java in the Browser, the past</h1>

There was a time when we could run Java applets in the browsers. There were a lot of problems with it, although the idea was not total nonsense. Nobody could tell that the future of browser programmability is not Java. Today we know that JavaScript was the winner and the applet as it is deprecated in Java 9 and is going to be removed from later Java versions. This, however, does not mean that JavaScript is without issues and it is the only and best possible solution for the purpose that a person can imagine.

JavaScript has language problems, there are a lot of WTF included in the language. The largest shortage, in my opinion, is that it is a single language. Developers are different and like different languages. Projects are different best solved by different programming languages. Even Java would not so immensely successful without the JVM infrastructure supported by so many different languages. There are a lot of languages that run on the JVM, even such a crap as ScriptBasic.

Now you can say that the same is true for the JavaScript infrastructure. There are other languages that are compiled to JavaScript. For example, there is TypeScript or there is even Java with the GWT toolkit. JavaScript is a target language, especially with <code>asm.js</code>. But still, it is a high level, object-oriented, memory-managed language. It is nothing like machine code.

Compiling to JavaScript invokes the compiler once, then the JavaScript syntax analyzer, internal bytecode and then the JIT compiler. Isn't it a bit too many compilers till we get to the bits that are fed into the CPU? Why should we download the textual format JavaScript to the browser and compile it into bytecode each time a page is opened? The textual format may be larger, though compression technologies are fairly advanced, and the compilation runs millions of times on the client computer emitting a lot of carbon into the air, where we already have enough, no need for more.

(Derail: Somebody told me that he has an advanced compression algorithm that can compress any file into one bit. There is no issue with the compression. Decompression is problematic though.)

<h1>WebAssembly</h1>

Why can't we have some bytecode based virtual machine in the browser? Something that once the JVM was for the applets. This is something that the <a href="http://webassembly.org/">WebAssembly</a> guys were thinking in 2015. They created WebAssembly.

WebAssembly is a standard program format to be executed in the browser nearly as fast as native code. The original idea was to "complement JavaScript to speed up performance-critical parts of web applications and later on to enable web development in other languages than JavaScript." (<a href="https://en.wikipedia.org/wiki/WebAssembly">WikiPedia</a>)

Today the interpreter runs in  Firefox, Chromium, Google Chrome, Microsoft Edge and in Safari. You can download a binary program to the browser and you can invoke it from JavaScript. There is also some tooling supporting developing programs in "assembly" and also on higher level languages.

<h2>Structure</h2>

The binary web assembly contains blocks. Each block describes some characteristics of the code. I would say that most of the blocks are definition and structure tables and there is one, which is the code itself. There is a block that lists the functions that the code exports, and which can be invoked from JavaScript. Also, there is a block that lists the methods that the code wants to invoke from the JavaScript code.

The assembly code is really assembly. When I started to play with it I had some nostalgic feeling. Working with these hex codes is similar to programming the Sinclair ZX80 in Z80 assembly when we had to convert the code manually to hex on paper and then we had to "POKE" the codes from BASIC to the memory. (If you understand what I am talking about you are seasoned. I wanted to write 'old' but my editor told me that is rude. I am just kidding. I have no editor.)

I will not list all the features of the language. If you are interested, visit the <a href="http://webassembly.org/">WebAssembly</a> page. There is consumable documentation about the binary format.

There are, however, some interesting features that I want to talk about to later express my opinions.

<h3>No Objects</h3>

The WebAssembly VM is not an object-oriented VM. It does not know objects, classes or any similar high-level structures. It really looks like some machine language. It has some primitive types, like i32, i64, f32, f64 and that it is. The compiler that compiles high-level language has to use these.

<h3>No GC</h3>

The memory management is also up to the application. It is assembly. There is no garbage collector. The code works on a (virtually) continuous memory segment that can grow or shrink via a system call and it is totally up to the application to decide which code fragment uses which memory address.

<h3>Two Stacks</h3>

There are two stacks the VM works with. One is the operation stack for arithmetic operations. The other one is the call stack. There are functions that can call each other and return to the caller. The call sequence is stored in a stack. This is a very usual approach. The only shortage is that there is no possibility to mark the call stack and purge it when an exception happens. The only possibility to handle try/catch programming structure is to generate code before and after function calls that check for exception conditions and if the exception is not caught on the caller function level then the code has to return to the higher level caller. This way the exception handling walks through the call stack with the extra generated code around each function call. This slows down not only the exception handling but also the function calls.

<h3>Single Thread</h3>

There is no threading in WebAssembly.

<h2>Support, Tooling</h2>

The fact that most of the browsers support WebAssembly is one half of the bread. There have to be developer tools supporting the concept to have code that can be executed.

There is an <a href="https://en.wikipedia.org/wiki/LLVM">LLVM</a> backed compiler solution so technically any language that is compiled to LLVM should be compilable to WebAssembly and run in the browser. There is a C compiler in the tooling and you can also compile RUST to WebAssembly. There is also a textual format in case you want to program directly in assembly level.

<h2>Security</h2>

Security is at least questionable. First of all, WebAssembly is binary, therefore it is not possible, or at least complex to look at the code and analyze the code. The download of the code does not require channel encryption (TLS) therefore it is vulnerable to MITM attack. Similarly, WebAssembly does not support code signature that would assert that the code was not tampered with since being generated in the (hopefully protected) development environment.

WebAssembly runs in a sandbox, just like JavaScript or like Flash was running. Fairly questionable architecture from the security point of view.

You can read <a href="https://github.com/stevespringett/disable-webassembly">more on the security questions in this article</a>.

<h2>Roadmap</h2>

WebAssembly was developed for to years to reach a Minimal Viable Product (MVP) that can be used as a PoC. There are features, like garbage collection, multi-thread support, exception handling support, SIMD type instructions, DOM access support directly from WebAssembly, which are developed after MVP.

<h1>Present and Future</h1>

I can say after playing like a weekend with WebAssembly that it is an interesting and nice toy. In its current state, it is a toy, nothing more. Without the features planned after MVP, I see only one viable use case: WebAssembly is the perfect tool to deploy malicious mining code on the client machines. In addition to that, any implementation flaw in the engine is a security risk. Note that these security risks come from a browser functionality that gives no value to the average user. You can disable WebAssembly in some of the browsers. It is a little worrisome that it is enabled by default, although it is needed only for early adopters for PoC and not commercial projects. If I were paranoid I would say that the browser vendors, like Google, have a hidden agenda with the WebAssembly engine in the browser.

I am afraid that we see no security issues currently with WebAssembly only because technology is new and IT felons have not learned yet the tools. I am almost certain that the security holes are currently lurking in the current code waiting to be exploited. <a href="https://github.com/stevespringett/disable-webassembly">Disable WebAssembly in your browser till you want to use it.</a> Perhaps in a few years (or decades).

The original aim was to amend JavaScript. With the features after MVP, I strongly believe that WebAssembly will rather aim to replace JavaScript than amend it. There will be a time when we will be able to write applications to run in the browser in Golang, Swift, Java, C, Rust or whatever language we want to. So looking at the question in the title "will Java get back to the browser?" the answer is definitely NO. But some kind of VM technology, JIT, bytecode definitely will sometime in the future.

But not yet.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1788</wp:post_id>
  <wp:post_date>2018-02-28 16:00:32</wp:post_date>
  <wp:post_date_gmt>2018-02-28 15:00:32</wp:post_date_gmt>
  <wp:post_modified>2019-05-05 17:44:08</wp:post_modified>
  <wp:post_modified_gmt>2019-05-05 16:44:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-getting-back-to-the-browser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fbbb46f7ad6d59205d81e05148afb90b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/YPnHrhjSqvV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15234024915]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1519830041]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6374629238573797376&type=U&a=f2JD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10213863695039280";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/968863562692202502";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12204</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2018-02-28 17:29:43</wp:comment_date>
    <wp:comment_date_gmt>2018-02-28 16:29:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Isn't it a huuuge second system effect?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1519835383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519835383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519835383.4623858928680419921875;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12206</wp:comment_id>
    <wp:comment_author><![CDATA[TamÃ¡s Viktor]]></wp:comment_author>
    <wp:comment_author_email>viktor.tamas@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://kodzaj.blog.hu</wp:comment_author_url>
    <wp:comment_author_IP>86.101.158.241</wp:comment_author_IP>
    <wp:comment_date>2018-03-01 13:11:52</wp:comment_date>
    <wp:comment_date_gmt>2018-03-01 12:11:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the post!

I'm not very convinced about some of the security concerns:

Binary format / static code analysis: Most JS code is also transmitted in minimized and obfuscated format which also makes static code analysis harder, so I don't think this makes a difference between WebAssembly and JS.

The sandbox should be reliable and preferably open-sourced, this is how it goes generally in all cases.

Secure transmission and integrity checking requires a general solution for all kinds of content, not just for WebAssembly. And I don't think WebAssembly needs a stronger check, but the general solution should be strong enough. A plain HTML can be also malicious enough, not from the technical point of view but how it deceives users by its content. (For example mimicking a banking page.)

However, I do share the concern about the fact that WebAssembly is switched on by default.
It might contain bugs which are real security holes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1519906314.0122449398040771484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15267212097]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1519908620]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519908620]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519908620.3515551090240478515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12207</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2018-03-01 15:55:44</wp:comment_date>
    <wp:comment_date_gmt>2018-03-01 14:55:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Could you elaborate what you mean?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12204</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519916144]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519916144.418222904205322265625;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15270870071]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1519916144]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12208</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2018-03-01 16:05:24</wp:comment_date>
    <wp:comment_date_gmt>2018-03-01 15:05:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Most JS code is also transmitted in minimized and obfuscated format which also makes static code analysis harder,"

There are different difficulty levels. The first level is that JavaScript is obfuscated by default. It is the nature of JavaScript. Minified code is one level more difficult to read and analyze. Binary is again one step. My opinion is that this last step is a large one.

"Secure transmission and integrity checking" are two different things. Secure transmission ensures that the same code arrives at the browser, which started from the server. Integrity checking (with digital signature) ensures that the module was not tampered with since it was released by the identifiable author (person or org). If, for example, there is a mining functionality in it that was not advertised then the author is legally responsible and it can be proven that they were doing it.

The fact that there is no general solution to this problem does not mean that we should not want a specific solution for a highly risky part of the system. It really is a problem that I can not be sure of the authenticity of the HTML page when I am doing online banking and I have to solely rely on the TLS channel transmission, I do not want to increase my problem to the next level running uncertified binary code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12206</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519916724]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519916724.2055339813232421875;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15271171379]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1519916724]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12213</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2018-03-02 09:48:49</wp:comment_date>
    <wp:comment_date_gmt>2018-03-02 08:48:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The wikipedia gives the following definition: "The second-system effect (also known as second-system syndrome) is the tendency of small, elegant, and successful systems, to be succeeded by over-engineered, bloated systems, due to inflated expectations and overconfidence."

There was the javascript, which looks like a toy language, with no types and no traditional classes, and doesn't support multithreading and mutates quickly.

Later we learned that javascript has several advantages. One of them is small footprint for small scripts. Then, prototypes and dynamic typing lets developers to implement features quickly. The lots of different js versions were mitigated with schims and shivs and jquery. Everybody was happy, except those who maintained legacy js libraries.

And now there's a js alternative. This is basically a bytecode that's supposed to run super-quickly. Computation speed hasn't really been a problem, but they speed it up. And then this super-fast webassembly still doesn't support multithreading. So we got a complicated solution for a no-problem (computation speed), and no solution for an actual problem (single-threaded js prevents devs to fully utilize CPU-s).

Or, maybe, it's just hindsight bias: I'm judging the outcome, but not the decision.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12207</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519980529]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519980529.624703884124755859375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15297637954]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1519980530]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12214</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.31</wp:comment_author_IP>
    <wp:comment_date>2018-03-02 10:01:38</wp:comment_date>
    <wp:comment_date_gmt>2018-03-02 09:01:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["Computation speed hasnât really been a problem"

It was not a problem, only because nobody tried to use it for tasks where it would have been a problem. Write a highly intensive graphics application (a game), some sound or video processing application. Then speed is a problem.

"no solution for an actual problem (single-threaded js prevents devs to fully utilize CPU-s"

Do not judge WebAssembly about this on the MVP (Minimum Viable Product https://en.wikipedia.org/wiki/Minimum_viable_product). After MVP there are plans to support multi-thread, exception handling, garbage collections and so on.

WebAssembly is aiming to be a solution for problems that are not running currently in browsers because JavaScript can not do that. My prediction is that in 5 to 10 years it will scale down to simpler applications as well, where JavaScript currently sufficient and WebAssembly will replace JavaScript.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12207</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1519981298]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1519981299.312408924102783203125;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[15297941136]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1519981300]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Generating Source Code, a Compromise]]></title>
  <link>https://javax0.wordpress.com/2018/05/23/generating-source-code-a-compromise/</link>
  <pubDate>Wed, 23 May 2018 14:00:52 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1824</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Source Code Generation is not Good</h1>

The most important statement in this topic before we would even start to discuss anything else is that source code generation is a suboptimal solution. It may be needed and it may be a viable solution, but whenever source code is generated it could have been done some way better. It is just that the environment, the available tools, developers are not fit for the purpose. Let me give some examples.

When you program Java you use Eclipse, IntelliJ or NetBeans. Each of these IDEs is capable of generating <code>hashCode()</code>. What is wrong with it? The language could provide a declarative description of how to compute the function. The hash code depends on the hash code of the fields and the calculation is fairly standard. Why can't we just define which fields should be taken into account and the language would implicitly provide us with the method? In this case, the language is insufficient for the purpose. I do not say that Java should provide such a feature. Maybe it should, maybe it should not.

In case of setters and getters the case is more prominent. Java needs them and we have to generate them whenever there is a need. Other languages, like C#, Swift or even Groovy support the feature on the language level.

Another example from my practice when I needed several business object classes converted to <tt>Map&lt;String,String&gt;</tt> with a special format. I created some utility classes that listed the fields using reflection and performed the conversion. This solution, however, was rejected during code review. The code was too complex and later teams who will be responsible for the maintenance may not be able to cope with the code. I could have said that they should hire cleverer people, but that costs more money and they wanted code that is cheap to maintain. The solution was to write extremely similar code for each and every business objects class. It could have been generated if there was any tool that could do that and, which could have been part of the build process, which again increases maintenance cost. In this case, the human environment was insufficient.
<small>
Please do not start flame war on this part of the article. This example is partially made up for NDA reasons, and after all it is not the major topic of the article.
</small>

<h1>Navigare Necesse Est</h1>

The above examples clearly depict that source code generation is a must. We may not like it though, but it is a must. The next question is when to generate code, which phase of the development process?

It is fairly obvious that source code can only be generated before the compilation phase. You can generate source code after the compilation phase, but that is like calling a doctor after the patient is dead: no use. We can generate code during the build process, just before the compilation phase or as part of the editing process. Both have advantages and disadvantages.

<h2>Editing Phase Source Code Generation</h2>

When you generate code while you edit the code the code generation does not need to be part of the build process. This means that the rebuild of the code is simpler, there are fewer
potential deviations from the standard build process and thus you are more likely to be able to do it when you work in a restricted enterprise environment. An example is when you use your IntelliJ to generate <code>hashCode()</code>. The generated method is available immediately in the editing environment, and functions like auto-complete will take the generated code into account.

The disadvantage is that the process is triggered manually. The more manual the process is the more room there is for human errors. You create a new field and you forget to update the <code>hashCode()</code> in the class. The generated code also gets into the source code repository that may not be optimal. Source code repository is for the source code and generated source code is not really source-code, is it?

<h2>Build Process Source Code Generation</h2>

When you generate the source code during the build process the code generation tool will certainly rely on the last version of the source code. In our example there will not be any field left out from the <code>hashCode()</code> method.

The disadvantage is that the build process is more complex. Your favorite code generation tool may not be available or allowed in the environment you work in. The tools that can be hooked into the build process usually generate whole files. It is not likely that you will generate a <code>hashCode()</code> method into the middle of a class using a tool that runs on the build server in batch mode. Also, you will not have the generated code in your IDE and you may lose some of the code editing support.

Build time source code generation tools are usually also environment specific. You may have a tool that works for Java but does not work for Rust or Python projects.

There is no clear "one is better than the other" decision. Sometimes build time source code generation is better, other purposes are fit better with edit time source code generation. I created tools like <a href="https://github.com/verhas/fluflu">Fluflu</a> mentioned in my article "<a href="https://javax0.wordpress.com/2014/08/27/named-parameters-in-java/">Named parameters in Java</a>", or <a href="https://github.com/verhas/scriapt">Scriapt</a> Java annotation processing tool described in the article "<a href="https://javax0.wordpress.com/2013/09/11/dont-write-biolerplate-use-scriapt/">Donât write boilerplate, use scriapt</a>". These tools are Java specific and build time executable. They are annotation processors, that hook into the Java compilation process and thus interestingly the IDEs continuous builds also handle them.

<h1>Source Code Generation In-line</h1>

This time I want to write about a Python written tool <a href="https://github.com/verhas/pyama">Pyama</a> that can be used to generate code not only for Java but also for Go, Rust, Markdown or just anything else. It is an editing phase tool and it was designed with editing in mind. The major idea was to automate the part of the editing process that can be automated.

<h2>My Demanding Need</h2>

The demanding need was my editing the new edition of my book <a href="https://www.packtpub.com/application-development/java-9-programming-example">Java 9 Programming by Example</a> published by Packt. The first edition of the book was edited in MS Word and I had to copy paste the source code samples from the IDE. However, book and code development is not a linear work. Sometimes the code was edited and modified after it was copied. It was a huge work to revisit each code sample in the book to see if the latest version is included in the document. I wanted something else, something more automatic. Luckily the second edition that will address Java 11 is edited with a different format that I can convert from Markdown. I edit the text in Markdown and I needed a tool that copies the code samples into the text.

The first idea was to create a tool that converts a <code>.md.pre</code> file that contains markdown and special directives controlling the source code inclusion into <code>.md</code> containing the code snippets. Such a solution, however, would not allow me to see the full rendered document in a Markdown WYIWYG editor. IntelliJ lets me render the markdown document text on the left side of the screen and see the result on the right side, which is a great help when I forget closing a backtick. Thus I decided to create a tool that can copy the snippets into my edited text file. It is also very handy that IntelliJ keeps the file almost all the time saved and reloads it when it is modified on the disk. Therefore I can edit the file in the editor and I can safely edit the file with any external tool. To develop this tool was also a nice Python learning project.

I also wanted to create something that was more general than just fetching snippets from code files and insert them into markdown documents. The outcome was a framework that, by now, has several extensions. One is handling snippets and markdown, others generate Java code (setters, getters, equals, hashCode, constructors, builder methods), handle text macros, execute Python scripts in any code files and so on. These extensions are samples and you can create other extensions with a few lines of Python code. As far as the book writing and Markdown Pyama proved to be an extremely valuable tool.

<h2>Pyama Architecture</h2>

When generating code into already existing source files, it is evident that the unit of editing should be something more granular than a file. We should not overwrite a whole file with something new. The tool has to distinguish between the lines that need to be altered, or rather that are allowed to be altered and those that must not be touched. Pyama introduces the notion of a segment when processing files. The tool splits up the source files it works with into segments. Segments contain lines of the text files. Thus a <a href="https://github.com/verhas/pyama">pyama</a> project works with files, each file contains segments and each segment contains lines. The segments of a file make up the whole file. In other words, there are no lines outside of segments. Pyama reads the contents of the files into the memory and then it invokes configured handlers (Python objects) to do whatever they should with the individual segments. When invoked, a handler works with a single segment. It can collect information from it, it can build up data structures to use later and it can read and modify the lines that are in the segment. This way the code of a handler is extremely simple, because it does nothing else but processes a list of strings and it does not need to care for anything else.

To decide where a segment starts an ends <a href="https://github.com/verhas/pyama">pyama</a> asks the handler objects for regular expressions to identify lines that start and end segments. Different handlers may work with different segments and they may have different start and end patterns.

The segments in all files are processed a few times invoking the handlers in several passes. For example, the snippet reader may collect the code snippets from the configured source files into a snippet store where each snippet is identified with a name. In the next pass, the snippet writer handler looks at segments that start with a line referencing a named snippet and it replaces the lines of the segment with the current version of the collected snippet.

The snippet reader says that each line that contains <code>START SNIPPET</code> starts a new segment and such a segment lasts till a line containing <code>END SNIPPET</code> or till the end of the file. Then the code

[code lang=text]
// START SNIPPET main_java
     System.out.println(&quot;Hello, world!&quot;);
// END SNIPPET
[/code]

will collect a snippet that contains the code sample. The snippet writer manages segments that start with a line that contains <code>USE SNIPPET</code> and the name of the snippet and end with a line containing <code>END SNIPPET</code>. If there is a line in a file that the snippet writer processes that reads

[code lang=text]
USE SNIPPET main_java
     System.out.println(&quot;Hello, outdated string world!&quot;);
END SNIPPET
[/code]

it will replace it with

[code lang=text]
USE SNIPPET main_java
     System.out.println(&quot;Hello, world!&quot;);
END SNIPPET
[/code]

The lines with the <code>USE SNIPPET</code> and <code>END SNIPPET</code> remain in the code, but in most formats, it is possible to hide them into some comment field that the output (HTML renderer, or Java compiler) will ignore.

This is only the tip of the iceberg of this code generation, text processing tool. There are handlers that can number the snippet lines, trim the code, skip certain lines that may not be interesting for the printout, apply regular expression search and replace, or even execute small Python scripts that can create the segment text.

For example the following code

[code lang=text]
/* PYTHON SNIPPET xxx
fields = [&quot;String name&quot;, &quot;String office&quot;, &quot;BigDecimal salary&quot;]
print(&quot;    public void setParameters(&quot;,end=&quot;&quot;)
print(&quot;, &quot;.join(fields), end=&quot;&quot;)
print(&quot;){&quot;)
for field in fields:
    field_name = field.split(&quot; &quot;)[1]
    print(&quot;        this.&quot; + field_name + &quot; = &quot; + field_name + &quot;;&quot;)
print(&quot;        }&quot;)

print(&quot;&quot;&quot;
    public Map getMap(){
        Map retval = new HashMap();\
&quot;&quot;&quot;)
for field in fields:
    field_name = field.split(&quot; &quot;)[1]
    print(&quot;        retval.put(\&quot;&quot;+field_name+&quot;\&quot;, this.&quot;+field_name+&quot;);&quot;)
print(&quot;        return retval;\n        }&quot;)

END SNIPPET*/

public class SimpleBusinessObject {
    //USE SNIPPET ./xxx
    public void setParameters(String name, String office, BigDecimal salary){
        this.name = name;
        this.office = office;
        this.salary = salary;
        }

    public Map getMap(){
        Map retval = new HashMap();
        retval.put(&quot;name&quot;, this.name);
        retval.put(&quot;office&quot;, this.office);
        retval.put(&quot;salary&quot;, this.salary);
        return retval;
        }
    //END SNIPPET
}
[/code]

can easily be changed to contain another field, just adding to the type and the name of the field to the array named fields. In real life examples the source printing code would be in some external file and imported, and probably the generated code would also be more complex than this sample. This code, however, enlightens that with minimal Python knowledge such manual tasks can be automated.

Please feel free to try and use <a href="https://github.com/verhas/pyama">pyama</a> available from GitHub.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1824</wp:post_id>
  <wp:post_date>2018-05-23 15:00:52</wp:post_date>
  <wp:post_date_gmt>2018-05-23 14:00:52</wp:post_date_gmt>
  <wp:post_modified>2018-05-17 16:19:04</wp:post_modified>
  <wp:post_modified_gmt>2018-05-17 15:19:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-source-code-a-compromise</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[development]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[enabled]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/jR1HfZxN53E]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1527084063]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18169895418]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6405054814346100736&type=U&a=Hc8q]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214506278983477";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/999289133335040001";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[DevDays Vilnius 2018]]></title>
  <link>https://javax0.wordpress.com/2018/05/21/devdays-vilnius-2018/</link>
  <pubDate>Mon, 21 May 2018 08:00:54 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1845</guid>
  <description/>
  <content:encoded><![CDATA[Starting today I participate DevDays in Vilnius for the whole week.

Come and see me on May 24, 2018, in Hall 2 at 14:00 and also at 15:55.

I will talk about

14:00 Prevent Hacking with Modules in Java 9 and
15:55 Comparing Golang and Understanding Java Value Types

https://devdays.lt/peter-verhas/

https://devdays.lt/]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1845</wp:post_id>
  <wp:post_date>2018-05-21 09:00:54</wp:post_date>
  <wp:post_date_gmt>2018-05-21 08:00:54</wp:post_date_gmt>
  <wp:post_modified>2018-05-17 16:24:02</wp:post_modified>
  <wp:post_modified_gmt>2018-05-17 15:24:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>devdays-vilnius-2018</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e79b6b4caa728fd025c30383a557e1f9</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_61520c1f3232e789b9ef70a89f406462</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_51990b995a73910b7c26bb47745ddb09</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3b32c620a214a5f1ddf91aefd629788f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1cd55db79cee2c6dd4102ad501fa3cac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1526889700]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18080569053]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb8e0c858c3912cb83540059df3acac0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_224996f48bcc94b3924c9ae4c1d841dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/BeXT9pNk7Ep]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6404239628039176192&type=U&a=Shfz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214492081188541";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/998473947262996481";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_71bcdd5f82d94c153af66ed7dd63c5e1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee6e7665cabbea0d26502e18b1e0399c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0ef4c3c51e09c6ee3f299828a28a0308</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4d7c0679fbbdb39e2e0809d297769e26</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ffd7fc036acd2ca277e194672df138ff</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Prevent Hacking with Modules in Java 9]]></title>
  <link>https://javax0.wordpress.com/2018/05/24/prevent-hacking-with-modules-in-java-9/</link>
  <pubDate>Thu, 24 May 2018 12:00:18 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1849</guid>
  <description/>
  <content:encoded><![CDATA[I start to talk about

<blockquote>
Prevent Hacking with Modules in Java 9

Before Java 9 there was a lot of room to do tricky things mainly using reflection. Some of these possibilities were even considered as security holes. With the advent of Java 9, the module systems close these secret doors in Java runtime library and also allows library developers to do the same for their libraries.
The presentation will demonstrate some shocking and funny examples what you could do using Java 8 and then tries to do the same obviously failing using Java 9.
</blockquote>

right now.

You can look at the slides at https://verhas.github.io/preventHack-J9-devdays2018-peter-verhas/#/]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1849</wp:post_id>
  <wp:post_date>2018-05-24 13:00:18</wp:post_date>
  <wp:post_date_gmt>2018-05-24 12:00:18</wp:post_date_gmt>
  <wp:post_modified>2018-05-17 16:27:50</wp:post_modified>
  <wp:post_modified_gmt>2018-05-17 15:27:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>prevent-hacking-with-modules-in-java-9</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/R1qepLJQ6dV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18205726090]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1527163228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6405386845827448832&type=U&a=HwRx]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214511984846120";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/999621163885178880";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Comparing Golang and understanding Java Value Types]]></title>
  <link>https://javax0.wordpress.com/2018/05/24/comparing-golang-and-understanding-java-value-types/</link>
  <pubDate>Thu, 24 May 2018 13:55:32 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1856</guid>
  <description/>
  <content:encoded><![CDATA[I start to talk about

<blockquote>
Comparing Golang and understanding Java Value Types

The talk compares the memory model of the Go programming language to the memory model of Java. This comparison will help Java developers understand the planned Java 10 feature: Value Types. The talk will describe how these are implemented in Go, and why they so much needed for the Java language. At the end of the presentation, the audience will also understand why Value Types cannot be extended, immutable and passed always by value.
This talk is very lucrative for the audience because it is about Go language as well as a future of the upcoming Java version that is not available yet. Both are a gem for the audience.
</blockquote>

right now.

You can look at the slides at https://github.com/verhas/compare-go-java-devdays2018-peter-verhas]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1856</wp:post_id>
  <wp:post_date>2018-05-24 14:55:32</wp:post_date>
  <wp:post_date_gmt>2018-05-24 13:55:32</wp:post_date_gmt>
  <wp:post_modified>2018-05-20 22:05:04</wp:post_modified>
  <wp:post_modified_gmt>2018-05-20 21:05:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-golang-and-understanding-java-value-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/9d4eRq9EXAu]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1527170242]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18209330620]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6405416271063638016&type=U&a=rXR4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214512582101051";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/999650589800914944";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Comparing Golang and understanding Java Value Types]]></title>
  <link>https://javax0.wordpress.com/2018/05/20/return-to-editingcomparing-golang-and-understanding-java-value-types/</link>
  <pubDate>Sun, 20 May 2018 20:57:10 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1859</guid>
  <description/>
  <content:encoded><![CDATA[Slides and recorded sound of the talk at W-JAX 2018 Mainz conference.

https://youtu.be/9kuHe8iGqk0]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1859</wp:post_id>
  <wp:post_date>2018-05-20 21:57:10</wp:post_date>
  <wp:post_date_gmt>2018-05-20 20:57:10</wp:post_date_gmt>
  <wp:post_modified>2018-05-20 22:05:42</wp:post_modified>
  <wp:post_modified_gmt>2018-05-20 21:05:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>return-to-editingcomparing-golang-and-understanding-java-value-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/VXrG3aC4uEn]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1526849833]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18065676931]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6404072381802962944&type=U&a=kSGM]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214488900069015";}s:7:"twitter";a:1:{i:1340505;s:52:"https://twitter.com/verhas/status/998306711319515136";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Comparing Golang and Understanding Value Types Vilnius DevDays Video]]></title>
  <link>https://javax0.wordpress.com/2018/06/03/comparing-golang-and-understanding-value-types-vilnius-devdays-video/</link>
  <pubDate>Sun, 03 Jun 2018 17:25:26 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1862</guid>
  <description/>
  <content:encoded><![CDATA[I have edited the video I recorded during the conference where I presented Comparing Golang and Understanding Value Types. The conference was DevDays Vilnius, the talk was May 24, 2018. The video shows the slides and, just for the sake of completeness and to increase the enjoyment factor, my slender myself presenting in PIP.

https://youtu.be/wuJOjL8J5sE

I delivered the talk also April, the same year in Mainz at W-JAX and it seems that this talk is doomed. In Mainz, another talk finished sooner and the presenter's wireless mic was on the same frequency as mine. They forgot to switch it off and coming closer to our room the noise of the coffee break mixed with the signal of my mic.

Here in Vilnius, there was a presentation in the room next to my presentation where apparently there was no air conditioning and all doors and mobile walls were kept open all times. The presentation delivered by Sam Bellen was titled "Channel Your Inner Rockstar with the WebAudio API". Don't laugh! It was not funny!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1862</wp:post_id>
  <wp:post_date>2018-06-03 18:25:26</wp:post_date>
  <wp:post_date_gmt>2018-06-03 17:25:26</wp:post_date_gmt>
  <wp:post_modified>2018-06-03 18:25:26</wp:post_modified>
  <wp:post_modified_gmt>2018-06-03 17:25:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-golang-and-understanding-value-types-vilnius-devdays-video</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18565689196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1528046731]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/XMsWcvRj2oc]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6409092527894384640&type=U&a=Wzeq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214583850122707";}s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1003326847743127553";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Nesting Java classes]]></title>
  <link>https://javax0.wordpress.com/2018/08/08/nesting-java-classes/</link>
  <pubDate>Wed, 08 Aug 2018 15:00:46 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1872</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Nested classes and private methods</h1>

When you have a class inside another class they can see each others <code>private</code> methods. It is not well known among Java developers. Many candidates during interviews say that <code>private</code> is a visibility that lets a code see a member if that is in the same class. This is actually true, but it would be more precise to say that there is a class that both the code and the member is in. When we have nested and inner classes it can happen that the <code>private</code> member and the code using it is in the same class and at the same time they are also in different classes.

As an example, if I have two nested classes in a top-level class then the code in one of the nested classes can see a <code>private</code> member of the other nested class.

It starts to be interesting when we look at the generated code. The JVM does not care about classes inside other classes. It deals with JVM "top-level" classes. The compiler will create <code>.class</code> files that will have a name like <code>A$B.class</code> when you have a class named <code>B</code> inside a class <code>A</code>. There is a <code>private</code> method in <code>B</code> callable from <code>A</code> then the JVM sees that the code in <code>A.class</code> calls the method in <code>A$B.class</code>. The JVM checks access control. When we discussed this with juniors somebody suggested that probably the JVM does not care the modifier. That is not true. Try to compile <code>A.java</code> and <code>B.java</code>, two top-level classes with some code in <code>A</code> calling a <code>public</code> method in <code>B</code>. When you have <code>A.class</code> and <code>B.class</code> modify the method in <code>B.java</code> from being <code>public</code> to be <code>private</code> and recompile <code>B</code> t a new <code>B.class</code>. Start the application and you will see that the JVM cares about the access modifiers a lot. Still, you can invoke in the example above from <code>A.class</code> a method in <code>A$B.class</code>.

To resolve this conflict Java generates extra synthetic methods that are inherently package private, call the original private method inside the same class and are callable as far as the JVM access control is considered. On the other hand, the Java compiler will not compile the code if you figure out the name of the generated method and try to call in from the Java source code directly. I wrote about in details more than 4 years ago https://javax0.wordpress.com/2014/02/26/syntethic-and-bridge-methods/.

If you are a seasoned developer then you probably think that this is a weird and revolting hack. Java is so clean, elegant, concise and pure except this hack. And also perhaps the hack of the <code>Integer</code> cache that makes small <code>Integer</code> objects (typical test values) to be equal using the <code>==</code> while larger values are only <code>equals()</code> but not <code>==</code> (typical production values). But other than the synthetic classes and <code>Integer</code> cache hack Java is clean, elegant, concise and pure. (You may get I am a Monty Python fan.)

The reason for this is that nested classes were not part of the original Java, it was added only to version 1.1 The solution was a hack, but there were more important things to do at that time, like introducing JIT compiler, JDBC, RMI, reflection and some other things that we take today for granted. That time the question was not if the solution is nice and clean. Rather the question was if Java will survive at all and be a mainstream programming language or dies and remains a nice try. That time I was still working as a sales rep and coding was only a hobby because coding jobs were scarce in East Europe, they were the mainly boring bookkeeping applications and were low paid. Those were a bit different times, the search engine was named AltaVista, we drank water from the tap and Java had different priorities.

The consequence is that for more than 20 years we are having slightly larger JAR files, slightly slower java execution (unless the JIT optimizes the call chain) and obnoxious warnings in the IDE suggesting that we better have package protected methods in nested classes instead of <code>private</code> when we use it from top-level or other nested classes.

<h1>Nest Hosts</h1>

Now it seems that this 20-year technical debt will be solved. The http://openjdk.java.net/jeps/181 gets into Java 11 and it will solve this issue by introducing a new notion: nest. Currently, the Java bytecode contains some information about the relationship between classes. The JVM has information that a certain class is a nested class of another class and this is not only the name. This information could work for the JVM to decide on whether a piece of code in one class is allowed or is not allowed to access a <code>private</code> member of another class, but the JEP-181 development has something more general. As times changed JVM is not the Java Virtual Machine anymore. Well, yes, it is, at least the name, however, it is a virtual machine that happens to execute bytecode compiled from Java. Or for the matter from some other languages. There are many languages that target the JVM and keeping that in mind the JEP-181 does not want to tie the new access control feature of the JVM to a particular feature of the Java language.

The JEP-181 defines the notion of a <code>NestHost</code> and <code>NestMembers</code> as attributes of a class. The compiler fills these fields and when there is access to a private member of a class from a different class then the JVM access control can check: are the two classes in the same nest or not? If they are in the same nest then the access is allowed, otherwise not. We will have methods added to the reflective access so we can get the list of the classes that are in a nest.

<h1>Simple Nest Example</h1>

Using the

[code lang=text]
$ java -version
java version &quot;11-ea&quot; 2018-09-25
Java(TM) SE Runtime Environment 18.9 (build 11-ea+25)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11-ea+25, mixed mode)
[/code]

version of Java today we can make already experiments. We can create a simple class:

[code lang=text]
package nesttest;
public class NestingHost {
    public static class NestedClass1 {
        private void privateMethod() {
            new NestedClass2().privateMethod();
        }
    }
    public static class NestedClass2 {
        private void privateMethod() {
            new NestedClass1().privateMethod();
        }
    }
}
[/code]

Pretty simple and it does nothing. The private methods call each other. Without this the compiler sees that they simply do nothing and they are not needed and the byte code just does not contain them.
The class to read the nesting information

[code lang=text]
package nesttest;

import java.util.Arrays;
import java.util.stream.Collectors;

public class TestNest {
    public static void main(String[] args) {
        Class host = NestingHost.class.getNestHost();
        Class[] nestlings = NestingHost.class.getNestMembers();
        System.out.println(&quot;Mother bird is: &quot; + host);
        System.out.println(&quot;Nest dwellers are :\n&quot; +
                Arrays.stream(nestlings).map(Class::getName)
                      .collect(Collectors.joining(&quot;\n&quot;)));
    }
}
[/code]

The printout is as expected:

[code lang=text]
Mother bird is: class nesttest.NestingHost
Nest dwellers are :
nesttest.NestingHost
nesttest.NestingHost$NestedClass2
nesttest.NestingHost$NestedClass1
[/code]

Note that the nesting host is also listed among the nest members, though this information should be fairly obvious and redundant. However, such a use may allow some languages to disclose from the access the private members of the nesting host itself and let the access allow only for the nestlings.

<h1>Byte Code</h1>

The compilation using the JDK11 compiler generates the files

<ul>
<li><code>NestingHost$NestedClass1.class</code></li>
<li><code>NestingHost$NestedClass2.class</code></li>
<li><code>NestingHost.class</code></li>
<li><code>TestNest.class</code></li>
</ul>

There is no change. On the other hand if we look at the byte code using the <code>javap</code> decompiler then we will see the following:

[code lang=text]
$ javap -v build/classes/java/main/nesttest/NestingHost\$NestedClass1.class
Classfile .../packt/Fundamentals-of-java-18.9/sources/ch08/bulkorders/build/classes/java/main/nesttest/NestingHost$NestedClass1.class
  Last modified Aug 6, 2018; size 557 bytes
  MD5 checksum 5ce1e0633850dd87bd2793844a102c52
  Compiled from &quot;NestingHost.java&quot;
public class nesttest.NestingHost$NestedClass1
  minor version: 0
  major version: 55
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #5                          // nesttest/NestingHost$NestedClass1
  super_class: #6                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 3
Constant pool:

*** CONSTANT POOL DELETED FROM THE PRINTOUT ***

{
  public nesttest.NestingHost$NestedClass1();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
         4: return
      LineNumberTable:
        line 6: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lnesttest/NestingHost$NestedClass1;
}
SourceFile: &quot;NestingHost.java&quot;
NestHost: class nesttest/NestingHost
InnerClasses:
  public static #13= #5 of #20;           // NestedClass1=class nesttest/NestingHost$NestedClass1 of class nesttest/NestingHost
  public static #23= #2 of #20;           // NestedClass2=class nesttest/NestingHost$NestedClass2 of class nesttest/NestingHost

[/code]

If we compile the same class using the JDK10 compiler, then the disassembles lines are the following:

[code lang=text]
$ javap -v build/classes/java/main/nesttest/NestingHost\$NestedClass1.class
Classfile /C:/Users/peter_verhas/Dropbox/packt/Fundamentals-of-java-18.9/sources/ch08/bulkorders/build/classes/java/main/nesttest/NestingHost$NestedClass1.class
  Last modified Aug 6, 2018; size 722 bytes
  MD5 checksum 8c46ede328a3f0ca265045a5241219e9
  Compiled from &quot;NestingHost.java&quot;
public class nesttest.NestingHost$NestedClass1
  minor version: 0
  major version: 54
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #6                          // nesttest/NestingHost$NestedClass1
  super_class: #7                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 3, attributes: 2
Constant pool:

*** CONSTANT POOL DELETED FROM THE PRINTOUT ***

{
  public nesttest.NestingHost$NestedClass1();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #2                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
         4: return
      LineNumberTable:
        line 6: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lnesttest/NestingHost$NestedClass1;

  static void access$100(nesttest.NestingHost$NestedClass1);
    descriptor: (Lnesttest/NestingHost$NestedClass1;)V
    flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method privateMethod:()V
         4: return
      LineNumberTable:
        line 6: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0    x0   Lnesttest/NestingHost$NestedClass1;
}
SourceFile: &quot;NestingHost.java&quot;
InnerClasses:
  public static #14= #6 of #25;           // NestedClass1=class nesttest/NestingHost$NestedClass1 of class nesttest/NestingHost
  public static #27= #3 of #25;           // NestedClass2=class nesttest/NestingHost$NestedClass2 of class nesttest/NestingHost
[/code]

The Java 10 compiler generates the <code>access$100</code> method. The Java 11 compiler does not. Instead, it has a nesting host field in the class file. We finally got rid of those synthetic methods that were causing surprises when listing all the methods in some framework code reflective.

<h1>Hack the nest</h1>

Let's play a bit cuckoo. We can modify the code a bit so that now it does something:

[code lang=text]
package nesttest;
public class NestingHost {
//    public class NestedClass1 {
//        public void publicMethod() {
//            new NestedClass2().privateMethod(); /* &lt;-- this is line 8 */
//        }
//    }

    public class NestedClass2 {
        private void privateMethod() {
            System.out.println(&quot;hallo&quot;);
        }
    }
}
[/code]

we also create a simple test class

[code lang=text]
package nesttest;

public class HackNest {

    public static void main(String[] args) {
//        var nestling =new NestingHost().new NestedClass1();
//        nestling.publicMethod();
    }
}
[/code]

First, remove all the <code>//</code> from the start of the lines and compile the project. It works like charm and prints out <code>hallo</code>. After this copy the generated classes to a safe place, like the root of the project.

[code lang=text]
$ cp build/classes/java/main/nesttest/NestingHost\$NestedClass1.class .
$ cp build/classes/java/main/nesttest/HackNest.class .
[/code]

Let's compile the project, this time with the comments and after this copy back the two class files from the previous compilation:

[code lang=text]
$ cp HackNest.class build/classes/java/main/nesttest/
$ cp NestingHost\$NestedClass1.class build/classes/java/main/nesttest/
[/code]

Now we have a <code>NestingHost</code> that knows that it has only one nestling: <code>NestedClass2</code>. The test code, however, thinks that there is another nestling <code>NestedClass1</code> and it also has a public method that can be invoked. This way we try to sneak an extra nestling into the nest. If we execute the code then we get an error:

[code lang=text]
$ java -cp build/classes/java/main/ nesttest.HackNest
Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError: Type nesttest.NestingHost$NestedClass1 is not a nest member of nesttest.NestingHost: current type is not listed as a nest member
        at nesttest.NestingHost$NestedClass1.publicMethod(NestingHost.java:8)
        at nesttest.HackNest.main(HackNest.java:7)
[/code]

It is important to recognize from the code that the line, which causes the error is the one where we want to invoke the private method. The Java runtime does the check only at that point and not sooner.

Do we like it or not? Where is the fail-fast principle? Why does the Java runtime start to execute the class and check the nest structure only when it is very much needed? The reason, as many times in the case of Java: backward compatibility. The JVM can check the nest structure consistency when all the classes are loaded. The classes are only loaded when they are used. It would have been possible to change the classloading in Java 11 and load all the nested classes along with the nesting host, but it would break backward compatibility. If nothing else the lazy singleton pattern would break apart and we do not want that. We love singleton, but only when single malt (it is).

<h1>Conclusion</h1>

The JEP-181 is a small change in Java. Most of the developers will not even notice. It is a technical debt eliminated and if the core Java project does not eliminate the technical debt then what should we expect from the average developer?

As the old Latin saying says: "Debitum technica necesse est deletur."

<h1>Update</h1>

Brian Goetz  2018-09-06 on https://dzone.com/articles/nesting-java-classes :
"You theorize that the motivation for the lazy check is compatibility, but there is a much simpler explanation: this is yet another example of Java's pervasive commitment to dynamic linkage.  References to other classes and class members are only checked for validity and accessibility when they are actually needed, such as when a method is called, or a class is extended.  This is just more of the same -- nothing new here."]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1872</wp:post_id>
  <wp:post_date>2018-08-08 16:00:46</wp:post_date>
  <wp:post_date_gmt>2018-08-08 15:00:46</wp:post_date_gmt>
  <wp:post_modified>2018-10-22 16:53:04</wp:post_modified>
  <wp:post_modified_gmt>2018-10-22 15:53:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>nesting-java-classes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1535374674]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/KwKVWnzBwfq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21510542644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6439828161885663232]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1034062474876731393";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Upgrade to Java non-LTS version]]></title>
  <link>https://javax0.wordpress.com/2018/06/07/upgrade-to-java-non-lts-version/</link>
  <pubDate>Thu, 07 Jun 2018 14:58:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1876</guid>
  <description/>
  <content:encoded><![CDATA[There was a bug discovered in Java 9

https://bugs.openjdk.java.net/browse/JDK-8204322

and Richard Warburton tweeted about it

https://twitter.com/RichardWarburto/status/1004258491995967488

If you look at the twitter thread you can see that following this tweet I had some friendly fencing-bout with Nicolai Parlog about upgrading or not upgrading to non-LTS Java versions for commercial production applications (what a Shakespearian dilemma!). Part of the bouts was about misunderstandings as usually when using a limited communication channel. (Just a side note: I know Nicolai irl, he publishes a lot, a nice guy, great Java expert and in case you follow me on the blog, twitter or just in the street you definitely should also follow him, .. better not in the street, that is creepy.)

Since Twitter is a bit short of characters I decided to collect here my thoughts.

<h1>What is the question at all?</h1>

For a lot of people, who use a computer and support themselves, install new software the question is obvious: use the latest version! Why would anyone want to use an outdated version of a software? I do not say that their answer is wrong for the situation they are in, but it is not a rationally calculated decision. You can decide based on rations or based on feelings or even random. Your decision may be sufficiently good, though science says that decisions based on well-established reasoning are usually more reliable and more often sufficiently good than other decisions. That is the reason why there are so many divorces.

The well-established reasonings about the upgrades and when to upgrade consider the cost and the benefit of the upgrade. What costs do we have?

<h1>Costs and benefits</h1>

The first and most obvious cost item of the software upgrade is the installation cost: $latex C_i$.

It may be small but it can also be significant when the organization has several servers. The installation has to be tested. The new version of the software may not be compatible with the previous version from which we upgrade and it has to be tested. Proof of the pudding is eating. The testing should be done on the actual application that we use. For example, we may not care about the bug that falsely calculates an <code>x += value</code> expression if our code never uses the <code>+=</code> operator. The testing cost is $latex C_t$.

The benefit $latex B$, the reason we do the upgrade is that the software runs better and thus it produces more income $latex \Delta I_u$ for the company and/or needs less maintenance cost $latex C_m$.

<p align="center">$latex B = \int_0^T \Delta I_u -  C_m dt$</p>

The summing up should be considered from the time of the installation until the time while the software is used.

<h1>Assumptions, simplifications</h1>

In case of a Java version upgrade, it is extremely difficult to know the $latex \Delta I_u$ and the best estimate is to model it as zero. That essentially leads us to cost reduction. Estimating the cost reduction we usually ignore the short-term effects and consider only the long-term ones. Using Java 9 instead of Java 8 in a short time period rather increases than decreases the support costs. The support people have to learn the small intricacies of the new version and they are likely to make more mistakes shortly after the upgrade. This is essentially a temporary increase that we could consider to be part of the upgrade cost. In real life, if ever these calculations are performed these costs are not identified and do not get an estimated value. Rather they are ignored lessening the detected cost of an upgrade. This is understandable if you consider that these cost estimations are made by IT people and we love the newest versions and we want to upgrade. (As a demonstration read the Twitter thread.)

In the long run, when we consider the $latex T$ in the range of 5 to 10 years the maintenance cost is drastically increasing. A few years ago an old friend of mine was offered a year-long contract to maintain RPG application (not the role-playing game, google it, it eas before COBOL) for 400EUR per hour and he refused saying that the little time he has left he wants to spend with the family. (Old I meant literally in his case.) You cannot find a developer who would joyfully jump on the possibility to maintain a Java 6 application and if they accept they will not be shy to ask the price. You will see the same moue on their face when you mention that time age-old Java 8 or Java 9 version.

That means that the $latex \int_0^T C_m dt$ part is estimated as infinite for large $latex T$ values and zero for small ones. In layman terms, it implies that sooner or later we have to upgrade. Upgrade necesse est. Vivere non est necesse.

What we have left is the cost of the upgrade $latex C_i$.

<h1>Upgrade cost</h1>

When we consider Java long term and non-long term support versions we have to compare the small steps upgrade process and the three stairs jump climbing from one LTS to the next LTS version.
Every upgrade cost has a constant part $latex C_{ic}$. This is the cost of downloading the media, installing on the server, running the tests, managing the meetings, communicating the out-of-service times and so on.

There is another part of the cost that depends on the previous version from which we upgrade, a variable part of the cost $latex C_{iv}$. When you upgrade from Java 8 to Java 9 you have to fight each and every compatibility issue that affects your application. Say this is $latex C_{iv}(J_8,J_9)$. Similarly, you will have $latex C_{iv}(J_9,J_{10})$ and $latex C_{iv}(J_{10},J_{11})$.

The big question is

<p align="center">$latex C_{iv}(J_8,J_9) + C_{iv}(J_9,J_{10}) + C_{iv}(J_{10},J_{11}) + 3 C_{ic} &lt; C_{iv}(J_8,J_{11}) + C_{ic}$</p>

?

It is certain that the variable part of the cost of the upgrade from Java 8 to Java 11 is larger than the same adding up from Java 8 to Java 9 and then from Java 9 to Java 10 and from Java 10 to Java 11. Using the notation for the difference

<p align="center">$latex \Delta C_{iv} =C_{iv}(J_8,J_{11}) - \big(C_{iv}(J_8,J_9) + C_{iv}(J_9,J_{10}) + C_{iv}(J_{10},J_{11})\big)$</p>

the above question becomes simpler and easier to interpret:

<p align="center">$latex 2 C_{ic} &lt; \Delta C_{iv}$</p>

<h1>Interpretation and conclusion</h1>

The calculation mainly is playing around with latex and mathematical expressions, and they result in the obvious: if the constant cost of the upgrade that happens three times in one case versus one time in the other case is bigger than the extra cost of the big leap upgrading from Java 8 to Java 11 then you should not upgrade to the intermediate versions. If you work in a big organization with a lot of meetings, lot of administration, which is needed to keep the organization alive, then you do not upgrade for each an every version. If you are a small company, doing things fast and flexible then you will upgrade.

<h1>Post Scriptum</h1>

Creating the formulas and expressing the calculation in a mathematicized way helps engineers to avoid some mistakes like ignoring some cost that should not be.

Do not think that being small, flexible and fast is always better than big, slow. Both have advantages and disadvantages and both have the place to live in the economy. A small company will never build a railway, a telecom network, or an ocean cruiser. The dinosaurs are extinct but there are whales as well as viruses. You may certainly enjoy more to work for a virus than for a whale.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1876</wp:post_id>
  <wp:post_date>2018-06-07 15:58:17</wp:post_date>
  <wp:post_date_gmt>2018-06-07 14:58:17</wp:post_date_gmt>
  <wp:post_modified>2018-06-07 15:58:17</wp:post_modified>
  <wp:post_modified_gmt>2018-06-07 14:58:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>upgrade-to-java-non-lts-version</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_8701a3b6f366dc926e8aee092dbeb944</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6e9937fa2366f1563e4f0cdbf0456161</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_8701a3b6f366dc926e8aee092dbeb944</wp:meta_key>
    <wp:meta_value><![CDATA[1528374709]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/4i8UMGtgJLy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_601b5119ef90e33c35e127eb35671450</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c21c9b3f5e96781de33f872c181463d5</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_c21c9b3f5e96781de33f872c181463d5</wp:meta_key>
    <wp:meta_value><![CDATA[1528383500]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1528383500]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18710638761]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_cc650044197bb969da904b6d77d9efc6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_519e314c3b2ef5ded22013bbdf7e998c</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_519e314c3b2ef5ded22013bbdf7e998c</wp:meta_key>
    <wp:meta_value><![CDATA[1528383504]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=674424&stype=M&topic=6410505052552785920&type=U&a=GE_h]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_40da5f33b7768293c890c0ffd36d6754</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5cd5c39da2b5c9780289448c202e17f6</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_5cd5c39da2b5c9780289448c202e17f6</wp:meta_key>
    <wp:meta_value><![CDATA[1528383507]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214613000251442";}s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1004739373869490177";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2333dd2f4b2c904534b5a5dcb3a3e52e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6b46bab167aa153d4efa02e66a0756a4</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d4a6de8f72f302f669f881b93b4f6654</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d4a6de8f72f302f669f881b93b4f6654</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_d4a6de8f72f302f669f881b93b4f6654</wp:meta_key>
    <wp:meta_value><![CDATA[1532530854]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_d4a6de8f72f302f669f881b93b4f6654</wp:meta_key>
    <wp:meta_value><![CDATA[1532530854]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_fb0a85d488a410221e1c2ee2a6c683d8</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">&quot;+=&quot; duplicates the first part:<a href="https://t.co/F8wFtBOz7j">https://t.co/F8wFtBOz7j</a><br><br>This looks like a pretty nasty bug actually. The fact that this is Java 9 onwards and only spotted now does make me question how many people are using Java 9 in production and how safe it is to migrate to it.</p>&mdash; Richard Warburtonð¥ (@RichardWarburto) <a href="https://twitter.com/RichardWarburto/status/1004258491995967488?ref_src=twsrc%5Etfw">June 6, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_fb0a85d488a410221e1c2ee2a6c683d8</wp:meta_key>
    <wp:meta_value><![CDATA[1540393281]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12570</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>188.142.228.213</wp:comment_author_IP>
    <wp:comment_date>2018-06-11 16:07:56</wp:comment_date>
    <wp:comment_date_gmt>2018-06-11 15:07:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have a question. This might be ignorant, but I need to know if I'm getting it completely wrong.

So, isn't it a bug that comes with a certain version of openjdk? I mean, a certain version of javac that comes with openjdk. Oracle-s javac doesn't seem to be affected. Using the latest jvm with an older - but still java 9 jdk (javac) also seems to be okay.

So, please tell me gently: what am I missing?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528729677]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528729678.598468;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1528729679]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12577</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2018-06-12 12:34:42</wp:comment_date>
    <wp:comment_date_gmt>2018-06-12 11:34:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Then we should be careful with conclusions like this shows how little java 9 was adopted. This only shows how little openjdk9 was adopted.

Nevertheless, java 9 adoption might be low anyway.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12575</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18882967000]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1528803285]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528803284]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528803284.687453;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12578</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2018-06-12 14:31:57</wp:comment_date>
    <wp:comment_date_gmt>2018-06-12 13:31:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You are absolutely right. Nevertheless, we may safely assume that openjdk9 adoption is proportional with Java 9 adoption. Also, I used the tweet only as an illustration.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12575</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18886295274]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1528810319]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528810318]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528810318.723373;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12576</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.231</wp:comment_author_IP>
    <wp:comment_date>2018-06-12 09:32:10</wp:comment_date>
    <wp:comment_date_gmt>2018-06-12 08:32:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nicolai wrote me a mail:

<blockquote>
  <blockquote>
    &gt;
    I've seen it and want to add an additional cost: The cost to determine
    for any given migration problem in an LTS-to-LTS migration, which Java
    version caused it. Imagine how much easier it is to find a solution
    when googling for "my problem Java 13" as opposed to "my problem". ;)
    &lt;&lt;&lt;
  </blockquote>
</blockquote>

and I cannot argue with him.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18878012569]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1528792332]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528792330]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528792331.501363;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12575</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.231</wp:comment_author_IP>
    <wp:comment_date>2018-06-12 09:30:47</wp:comment_date>
    <wp:comment_date_gmt>2018-06-12 08:30:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Gently: I do not know. I have not investigated the original bug in any way.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12570</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18877978907]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1528792250]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528792248]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528792249.54102;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12585</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>188.142.228.213</wp:comment_author_IP>
    <wp:comment_date>2018-06-13 11:30:58</wp:comment_date>
    <wp:comment_date_gmt>2018-06-13 10:30:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't know this proportion, it
seems to be disproportionate.

Now, that was a lousy two-liner.
So sorry. I didn't mean nitpicking. I just have this machine in my head that sees an implication and then it emulates the possible scenarios.

So, yeah, you're right too: Low openjdk 9 adoption means low oracle jdk 9 adoption. The oracle jdk adoption is higher than that of the openjdk but anyway.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>12578</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1528885860]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1528885860.834479;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[18918481720]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1528885862]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[HTTP/2 Server Push]]></title>
  <link>https://javax0.wordpress.com/2018/07/25/http-2-server-push/</link>
  <pubDate>Wed, 25 Jul 2018 15:00:20 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1916</guid>
  <description/>
  <content:encoded><![CDATA[The new version of the HTTP protocol, HTTP/2 lets the server to push content to the client before the client requests the particular content. There are many other modifications in the protocol if we compare the previous version 1.1 with the new version 2, but in this article, I will focus on the push functionality. I will discuss briefly how it can be used in a servlet, and I will also discuss a bit about how to test and see that it really works at all or not. Before writing this article my original intention was to create a demonstration of HTTP/2 showing how faster the sample page load is with the push than it is without. It is going to be one chapter in my video tutorial that is published by PACKT. During the development of the sample application I faced several problems, I have read some tutorials and debugged the sample code a bit gathering experience. In this article, I share this experience with you. That way this article is a bit more than just a simple introductory tutorial. Nevertheless, it is also a bit longer, so TLDR; if you are impatient.

<h1>HTTP versions</h1>

HTTP/2 is a new version of the HTTP protocol. The protocol had three versions prior to 2. They were 0.9, 1.0 and 1.1. The first one was only an experiment starting in 1991. The first real version was 1.0 released in 1996. This was the version that you probably met if you were using the internet that time and you still remember the Mosaic browser. This version was soon followed by the version 1.1 next year, 1997. The major difference between 1.0 and 1.1 was the <code>Host</code> header field that made it possible to operate several websites on one machine, one server, one IP address, and one port.

<img src="https://raw.githubusercontent.com/verhas/pushbuilder/master/http-versions.png">

<h2>HTTP 1.1</h2>

Both versions 1.0 and 1.1 are extremely simple. The client opens a TCP channel to the server and writes the request into it as a plain text. The request starts with a request line, it is followed by header lines, an empty line and the body of the request. The body may be binary. The response has the same structure except the first line is not a request specific line, but rather a response obviously.

Imho, the simple approach was extremely important these days because it was inevitable to aid the spread and use of the protocol. You can find this type of pattern in the industry in different areas. This is how the world is developing in an agile way. First, you develop something simple that works and then you go on making it more and more complex as the environment requires it to be more powerful longing for more complexity. Making a long-shot and aiming for the complex and perfect solution the first time usually does not work. If you remember the film series Star Wars you know that death stars are never finished and they are razed at the end. But it does not mean that the simple version that we start with has no problems.

<h2>HTTP/1.1 problems</h2>

HTTP/1.1 had a lot of problems. A real Englishman could say it was far from optimal using the network. It was wasting bandwidth. Early times when HTTP was invented a web page was text. Today it is text, CSS, JavaScript, images, sounds, videos and digitized smell, taste, and touch samples not to mention the direct neural stimulation command files. These last content types following videos in this taxative list are still rare but you should be prepared and that is what HTTP/2 is aiming. Preparing for the future. With HTTP/1.1 the browser downloads these resources one after the other in separate TCP channels. The number of the TCP channels the server or for that matter the client can handle is finite, therefore the browsers limit themselves not to open more than four TCP channels. It means that while four content elements for the page is downloading the other elements wait in a queue to be downloaded. If we have some very slow downloading content it may choke the download of the whole web page. You can run experiments with that writing some simple servlet that sends a complex HTML page to the browser and then you let some of the content elements download slow and others fast. Doing it in debug mode using Chrome you will get a nice Gantt chart of the download timings.

The network is also wasted creating a new TCP channel for each new HTTP connection. Creating a TCP channel require an SYN package traveling from the client to the server, then an SYN-ACK from the server to the client and then an ACK from the client to the server again before we can start sending data. In addition to these, the TCP protocol limits itself not to flood a lossy channel with a lot of data that is going to be lost anyway, so it starts slow, sending only a few data packages at the start and increases the speed only when it sees that packages are arriving in good shape and content. Let's just think about that three-way handshake that starts the TCP channel. The network between the client and the server has a certain lag and has a certain bandwidth. The lag is the time needed for a package to travel from the client to the server or the other way around. The bandwidth is the number of bits that can be pushed through the network between the client and the server during a given time (like one second). Imagine a hose that you use to fill buckets. If it is long it may take two or three seconds until the water starts to pour after you opened the tap. If it is narrow filling a bucket can take a minute. In that case, 2-3 seconds at the start is not a big deal, you have to wait a minute anyway. On the other hand, if the hose is wide the water may run in amount filling the bucket in ten seconds. Three seconds delay is 30%. It is significant. Similarly the TCP channel slow-start lag is significant in fast networks, where the bandwidth is abundant. Fortunately, we go in this direction. We get fibers in our homes replacing the 19.2kbps dial-up modems. However, at the same time, HTTP/1.1 lag is an increasing problem.

There is a header field <code>Keep-alive</code> that can tell the server not to close the TCP channel, but rather reuse it for the next HTTP request and this patch on the scar of HTTP/1.1 helps a lot, but not enough. The blocking slow resource problem is still there. There are other problems with HTT/1.1 that HTTP/2 addresses but this, using many TCP channels to download several content pieces to the client from the same server is the main issue related to server push, which is indeed the topic of this article.

<h1>HTTP/2</h1>

HTTP/2 uses a single TCP channel between the server and the client. When the content is downloaded from different servers the client will eventually open separate TCP channels to each server, but for the content pieces that come from the same server, HTTP/2 uses only one TCP channel. Using multiple TCP channels between a certain client and a single server does not speed up the communication, it was only a workaround in HTTP/1.1 to partially mitigate the choking effect of slow resources.

A request and a corresponding response do not use exclusively the TCP channel in HTTP/2. There are frames and the request and the response travels in these frames. If a content piece is created slowly and does not use the channel for some time then other resources can get frames and can travel in the same TCP channel. This is a significant boost of download speed in many cases. The change is also transparent for the browser programs being either JavaScript or WebAssembly. In the case of WebAssembly, the change is extremely simple: WebAssembly does not directly handle XMLHttpRequest, it uses JavaScript implemented and imported functions. In the case of JavaScript, the browser hides the transport complexity. JavaScript network API is just the same as it was before. You request a resource, you get one and you do not need to care if that was traveling in its exclusive TCP channel, mixed into HTTP/2 frames or was sent to you by pigeon post. On the server side, the approach is the same. In case of Java, a servlet application gets a request and creates a response. It is up to the container, the web server and to the client browser how they make it travel through the net.

The only difference, where server application may change is server push. This is a new feature and the new API gives an extra possibility for a server application to initiate a content push to the client.

<h1>When to Push, What to Push?</h1>

The server push typically can be used in a situation when the application prepares some content slowly and the application knows that this is going to be slow and it also knows that there are other resources, typically many small icon images that can be downloaded fast and will be needed by the client. Thus the conditions for the server push are (PRECONDITIONS)

<ul>
<li>the content requested is slow,</li>
<li>the application knows it is going to be slow,</li>
<li>there are other resources that will be needed by the client after this resource was downloaded,</li>
<li>the application knows what these resources are,</li>
<li>these resources can be downloaded fast.</li>
</ul>

https://www.youtube.com/watch?v=a0P1a3SbkRo

In this case, the servlet can initiate one or more push that may deliver the content to the browser while the main content is prepared. When the main content is ready, and the client browser realizes that it needs the extra resources they are already there. If we do not push the resources they will be downloaded only after the original resource was processed when the browser realizes that the extra resources are needed. In a simple example, when the browser sees all the <code>img</code> tags and knows that it needs the icon images to render the page. This is what the above animation tries to show in a simple way.

<h1>How to push</h1>

To initiate a push it is more than simple. The servlet standard 4.0 extends the <code>HttpServletRequest</code> to create a new <code>PushBuilder</code> whenever the servlet calls <code>req.newPushBuilder()</code> on the request object <code>req</code>. The push builder can be used to create a push and then invoking the method <code>push()</code> on it will initiate the sending towards the client. It is as simple as that. The only parameter that you have to set is the path of the resource to be pushed.

[code lang=text]
var builder = req.newPushBuilder();
...
builder.path(s).push();
[/code]

<h1>Sample application</h1>

The sample application to test server push is a servlet that responds with an HTML page that contains one hundred image references in a 10x10 table. Essentially these are small icons from the http://www.flaticon.com website

The first thing the servlet does is to initiate the icon downloads via server push. To do that it creates one push builder and this single object is used to initiate 100 pushes. After that, the servlet goes to sleep. This sleep simulates the slow inner working of the servlet response. A real application in this time would gather the information needed to send the response from the different database, from other services and so on. During this time the server and the client have enough time to download the PNG files. When the response arrives the files are there and the images are displayed instantaneously. At least that is what we expect.

The servlet has a parameter, named <code>push</code> that can be <code>1</code> or <code>0</code>. If this parameter is <code>1</code> the servlet pushes the PNG files to the client, it is <code>0</code> then it is not. This way we can easily compare the speed of the two different behaviors.

[code lang=java]
    public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        final String titleText;
        var builder = req.newPushBuilder();
        var etag = now();
        if (builder == null) {
            titleText = &quot;Good old HTTP/1.1 download&quot;;
        } else {
            var pushRequested = parse(req).get(&quot;push&quot;, 1) == 1;
            if (pushRequested) {
                titleText = &quot;HTTP/2 Push&quot;;
                sendPush(req, builder, etag);
            } else {
                titleText = &quot;HTTP/2 without push&quot;;
            }
        }
        var lag = parse(req).get(&quot;lag&quot;, 5000);
        var delay = parse(req).get(&quot;delay&quot;, 0);
        var sleep = new ThrottleTool.Sleeper();
        sleep.till(lag);
        resp.setContentType(&quot;text/html&quot;);
        sendHtml(req, resp, titleText, etag, delay, sleep);
    }
[/code]

The servlet can also be parametrized with query parameters <code>lag</code> and <code>delay</code>.

<code>lag</code> is the number of milliseconds the servlet sleeps counting from the start of the servlet before it starts to send the HTML page to the client. The default value is 5000, which means that the HTML sending will start 5seconds after the servlet started.

<code>delay</code> is the number of milliseconds the servlet sleeps between each image tags. The default value is zero, that means the servlet sends the HTML as fast as it can send.

For the push, it is interesting how we get the builder object. The line

[code lang=java]
var builder = req.newPushBuilder();
[/code]

returns a new builder object that can also be null. It is null if the environment does not allow push. The simplest case is when the servlet is queried through normal HTTP and not HTTPS. HTTP/2 works only over TLS secure channel and that way if we open the servlet via HTTP it will not be able to push anything.

After this, the method <code>sendPush()</code> sends the push contents as the name implies. Here is the method:

[code lang=java]
    private void sendPush(HttpServletRequest req, PushBuilder builder, long etag) {
        for (var i = 0; i &lt; 10; i++) {
            for (var j = 0; j &lt; 10; j++) {
                var s = imagePath(i, j, req, etag);
                builder.path(s);
                builder.push();
            }
        }
    }
[/code]

The method <code>imagePath()</code> calculates the relative URL for the png based on the indices and this path is specified through the push builder. The builder is finally asked to push the content. This call to <code>push()</code> initiates the push on the server.

The builder is used literally one hundred times in this example. We do not need new builder objects for each push. We can safely reuse the same objects. The only requirement is that we set all the parameters before the next push we need. This is usually only the path.

<h1>Image Server</h1>

The icon images are not directly served by the server in the demo application. The URL for the icon resources is mapped to a servlet that reads the icon PNG from the disk and writes it to the response. The reason for it is twofold. The chronologically first reason is that during the application debugging I needed information when and how the resource is collected and in case the resource is just a plain file that the server directly handles I do not have many possibilities to debug or log anything. The second reason is that the demo needs network throttling. Just as in case of the main HTML resource that waits 5 seconds before it vomits out the HTML text images also need to slow down to show a good demonstration effect. There is a throttling functionality in the debug mode of the browsers. However, it seems that this throttling in Chrome is architecturally between the cache where the pushed resources are temporarily stored and the DOM displaying engine. Implementing throttling on the demo server in our code is certainly at a good place from the experiment point of view and it can not happen that the already pushed and downloaded resource is loading throttled into the screen.

For this reason, the image servlet has two query parameters. <code>imglag</code> is the number of milliseconds the servlet waits after a hit arrives and before it starts to do anything. The default value in case the parameter is missing is 300 milliseconds. The other parameter is <code>imgdelay</code> that specifies the number of milliseconds the server consumes sending the bytes of the image to the client. This is implemented in a way that the server sends each byte individually one after the other and in case the current time is proportionally too soon to serve the next byte then the server sleeps a bit. The default value is 1000, which means that each icon is delivered from the server in approximately 1.3sec. The code itself is not too educational from the server push point of view. You can see it in the GitHub repository https://github.com/verhas/pushbuilder/blob/master/src/main/java/javax0/pushbuilder/demo/ImageServer.java

<h1>PushBuilder methods</h1>

The PushBuilder class has many other methods in case you need to build a request that has some special characteristics. When you initiate the push of a resource you actually define an HTTP request, for which the resource would be the answer. The actual resource is provided by the server. If it is a normal static resource, like an image then the server will pick it up from the file system. If it is some dynamically calculated resource, then the server will start the servlet that is targeted by the request. What the push builder really builds up is a request that stays and is used on the server and the client will actually never issue this request after the resource was already pushed. The setter methods of the class set request attribute, like parameters, headers etc.

<h2><code>method()</code></h2>

You can set the method of the request that the resource is a response to. By default, this is <code>GET</code> and this should be OK most of the time. If the resource is a response to a 
<code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>CONNECT</code>, <code>OPTIONS</code> or <code>TRACE</code>request then we can not push the resource anyway because the HTTP/2 standard does not allow resources of those kinds to be pushed. What remains is the <code>HEAD</code> method that does not seem to be meaningful. I believe that the method <code>method()</code> is in the interface

<ul>
<li>for compatibility reason if ever there will be some new method, </li>
<li>for the sake of some application that uses some proprietary non-standard method</li>
<li>or as a joke (a method called method).</li>
</ul>

<h1><code>sessionId()</code></h1>

This method can be used to set the session id that is usually carried in the <code>JSESSIONID</code> cookie or in a request parameter.

<h1><code>set</code>, <code>add</code> and <code>remove</code> + <code>Header()</code></h1>

You can modify the header of the request using these methods. When you invoke <code>setHeader()</code> the previous value is supposed to be replaced. The <code>addHeader()</code> adds a new header. When you reuse the same object adding the same header again and again may result the same header in the request multiple times. Finally the <code>removeHeader()</code> removes a header.

Note that some tutorials also add the header <code>Content-type</code> and the value in some of the tutorials is <code>image/png</code>. This is erroneous even though it does not do any harm. The headers we set on the push builder are used to request the resource. In our example, the images are not directly accessed by Tomcat, but rather are delivered through a servlet. This servlet reads the content of the PNG file from the disk and sends it to the writer that it acquires from the response object. This servlet will see the headers set in the push builder. If we set the content type to be <code>image/png</code>, it may think that we do are a special kind of stupid sending an HTTP GET request body that is PNG format. Usually, it does not matter, servlets and servers tend to ignore the content type for <code>GET</code> request especially when the content has zero bytes. What format does a non-existent picture have?

<h1><code>get</code> methods</h1>

What you can set on the push builder object you can also get out. You can use these <code>getHeader()</code>, <code>getMethod()</code>, <code>getHeaderNames()</code>, <code>getPath()</code> and so on methods to see what the current value of the values is in the push builder.

<h1>Experiments</h1>

During the experiments, I could not see any difference between HTTP/2 with and without the push. The download using HTTP/2 was inevitably faster than HTTP/1.1, but there was no difference between the push and the non-push version. I used Chrome Version 67.0.3396.99 (Official Build) (64-bit). The browser supports the push functionality but the developer tools do not support the debugging of the push. Pushed contents are displayed as normally downloaded contents. There is some secret internal URL (well, not really a secret since it is published on the net), that will show the actual frames, but it is not too handy. What I could see there finally, that the push itself worked. The images were pushed to the browser while the main HTML page serving servlet was having its 5 seconds sleep, but after that, the browser was just downloading the images again, even if I switched on browser caching.

Since HTTP/2 was started by SPDY protocol and it was pushed by Google (pun indented (again)) I strongly believed that it is my code that does something wrong. Finally, I gave up and fired up a Firefox and here you go, this is what you can see on the screen captures:

https://youtu.be/M2hYl-EEsaM

https://youtu.be/Kj9nZkYCqpc

https://youtu.be/MbmTpq85sLA

<h1>Summary Takeaway</h1>

Server push is an interesting topic and a powerful technology. There are a lot of preconditions to use it (see listed above, search for "PRECONDITIONS"). If these are all met then you can think about implementing it, but you should do experiments with the different network setups, delays and with the different client implementations. If the client implementation is less than optimal then you may end up with a slower download with a push than without one. There is a lot of room for development in the clients. Some of these developments will just mature the way the browsers handle server pushed resource, but I am <strike>almost</strike> sure that soon we will also have JavaScript API that may register call-back functions to be triggered when a push starts so that it will not only be the browser autonomously who can refuse a push stream but also the client-side JavaScript. Keep the eyes and your mind open for the development of HTTP/2.

<h1>References</h1>

<ul>
<li>https://github.com/verhas/pushbuilder source code of the application</li>
<li>http://www.baeldung.com/spring-5-push is good, and simple tutorial</li>
<li>https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/ very low level and detailed experiments and a lot of information about how different browsers implement server push</li>
<li>http://qnimate.com/post-series/http2-complete-tutorial/ if you need a tutorial not only on push but also on http/2</li>
<li>https://www.manning.com/books/http2-in-action Manning book on HTTP/2 in the making currently</li>
<li>https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol</li>
<li>https://en.wikipedia.org/wiki/History_of_the_web_browser</li>
<li>https://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml in case you have not heard about TCP channel build up</li>
<li>https://stackoverflow.com/questions/47089788/call-xmlhttprequest-from-webassembly</li>
<li>https://jcp.org/en/jsr/detail?id=369 the Servlet 4.0 standard</li>
<li>https://tomcat.apache.org/tomcat-9.0-doc/servletapi/javax/servlet/http/PushBuilder.html the Tomcat implementation JavaDoc of PushBuilder. To run the application I used Tomcat 9.0.6 on Windows 10 and also on OSX, where the installation of APR and tomcat native was a tag bit more complex than on Windows.</li>
<li>https://www.flaticon.com/packs/miscellaneous-elements the icons used in the application</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1916</wp:post_id>
  <wp:post_date>2018-07-25 16:00:20</wp:post_date>
  <wp:post_date_gmt>2018-07-25 15:00:20</wp:post_date_gmt>
  <wp:post_modified>2018-07-25 17:46:34</wp:post_modified>
  <wp:post_modified_gmt>2018-07-25 16:46:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>http-2-server-push</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ee6a87bf67e874fd08868fc60a3b3e26</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[20381764276]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1532530851]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/ZM9vccSXaW3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6427900309674213376]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:8:"facebook";a:1:{i:2591943;s:38:"https://facebook.com/10214952769545462";}s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1022134637844418560";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698970</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Creating a Video Tutorial]]></title>
  <link>https://javax0.wordpress.com/2019/10/30/creating-video-tutorial/</link>
  <pubDate>Wed, 30 Oct 2019 14:00:17 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1607</guid>
  <description/>
  <content:encoded><![CDATA[I usually write technical articles here. This article is an exception. I do not know if this is a checked exception or not though. I do not even know if this really is an exception or rather an error or just something throwable. (I am just fooling around with the different Java exception types only because I am such a fun guy and also because this is a Java blog, so it SHOULD, as defined in rfc2119, have some words about Java.)

This article is about how I create video tutorials. I have created a few. Not many. The implication of the amount is that what I tell you here is not the ultima ratio. I am almost sure that in many things I am wrong and I am open to criticism. Just be polite: a few people actually read this blog, including the comments.

I created screen video recording as product documentation when I was running my own company ten years ago. I also created some as a training for my current employer, EPAM, and also for this blog and for PACKT. (Yes, this part of the article is a commercial, please go and subscribe and learn <a href="https://www.packtpub.com/application-development/java-9-new-features-deep-dive-video">Java 9 new features</a> from me listening to <a href="https://www.packtpub.com/application-development/java-9-new-features-deep-dive-video">Java 9 New Features Deep Dive [Video]</a>.)

<h1>Length</h1>

The length of a video should be 5 to 10 minutes. The shorter the better. I was worried at first about not being able to fill these time frames. But it is easy. I usually struggle with the opposite. Sometimes I can not make the video as short as I would like to.

<h1>Presentation</h1>

Many times I create a presentation to highlight what I will talk about during the demonstration. This is important. These visuals help the audience get the content and understand what they can expect in the coming five or ten minutes. In other cases, the presentation itself is the main attraction. I usually use Microsoft PowerPoint simply because that is what I have the most experience with and it is available both on Windows and OSX.

<h1>Screen Recording</h1>

I use OSX and iShowU Instant. I record video in HD format these days and I also use an external monitor attached to my mbp. The recording control is on the built-in display of the mbp, which is a bit higher resolution than HD and the recorded scene is running on the external screen.

I record applications maximized and if possible set to full screen. There is no reason to show the little "minimize, maximize, close" icons or the application frame. This is equally true on OSX, Linux or Windows.

When you do something on the screen do not explain it while doing it. Explain it before and then do it. The reason for that is that this way the keyboard and mouse noise is separated from the talk and can be muted. Also, when you type silently you have the option later while editing the video to speed up the typing. The audience gets bored seeing how the typed letters come up one after the other. You can simply speed it up for a longer typing ten times even. They will see that this is sped up, but that is not a problem unless you want to demonstrate the speed of something.

<h1>Voice Recording</h1>

I live in a little, peaceful Swiss dorf (village). The road is near and the airplanes landing to Kloten (ZRH) just fly above the house, so the voice recording environment is not ideal, but around 10pm it is acceptable. In my former (Budapest) location, I could not record without noise. So the first thing is that you need a very quiet environment. Perhaps this is the most costly investment, but it also serves other purposes: it boosts your sleep, irons your nerves. Peace is invaluable, world peace... you know.

When you consider the noise, do not only rely on your ears. I have a neighbor who is a professional drum player. Switzerland has strict noise regulation and these guys living here mean it: he is using some special drum set that suppresses the sound a lot. I am 52 and it means my hearing started to slowly decay. I would not have noticed that he is playing the drum sometimes till 11pm (which is strictly illegal, you can do the noisy activity until something like 8pm) unless I started recording. The microphone was recording it and I could hear it in the headset attached to the mic.

I also realized through the headset that the table and the chair is a huge source of the noise. PACKT supports content creators (at least they supported me) with some PDFs that give some very practical technical advice and the chair was mentioned there. Table was not. Do not lean on the table when recording. Better yet, do not even touch it.

The second important thing is the microphone. I tried to use the built-in mic of my MacBook Pro, which is exceptionally good for things like Skype, ad-hoc recording, recording a meeting, but not sufficient for tutorial recording. I bought an external microphone for 28CHF but it was not good enough. It was noisy. The one that I finally found is sufficient is a <a href="https://www.zoom-na.com/products/field-video-recording/field-recording/zoom-h2n-handy-recorder">Zoom H2n</a> recorder that also works as a USB microphone.

It stands on my desk on a tripod. I usually put a pillow between the mic and the notebook, so the noise of the vent is dumped and I also moved the external HDD under the table. The pillow thing was coming from one of the PACKT materials and it is a great idea: it works and it is simple. The HDD now stands on the floor on a cork wood base (originally it was some IKEA cooking thing) which is put on top of a thick, folded (multiple times) cloth. Even though the noise of it is almost inaudible I disconnect it when I do the recording. That also prevents a backup firing off while recording eating the CPU off from the screen recorder, which itself is not a CPU hog to my surprise, but that is a different story. Here we talk about the noise (sic) recording. Btw: while recording also disable the network, unless you want to demonstrate something that needs it. You do not want to record notification popups.

While I talk I attach a BOSE Q25 headset directly to the mic and through that I hear my own voice amplified. Because you hear your own voice from inside through your bones when you talk it sounds totally different when you listen to the recording. With the headset, the voice leaving my mouth is amplified and with active noise cancellation, I hear myself more from outside only through the microphone. It helps me to articulate better and also to recognize when my tongue twists.

<h1>Talking</h1>

I had to realize that I have to talk slow. I mean really slow. And as far as I know, most people who record voice run in the same shoe. When you record something, slow down your talk and when you feel that this is ridiculously slow then it probably is just okay.

When your tongue twists or you just realize that you made a mistake in a sentence: do not correct the part like you would do in a live presentation. Stop. Take a breath. Think. Wait 5 seconds or more. Take your time and restart from the start of the last, erroneous sentence. The 5 seconds helps you to think about where to restart from, but this is also something easy to notice on the waveform when the recorded video is edited. If there is a pause in the voice it probably is something to cut off. I also hit the table with my palm, which makes a noise overloading the microphone and is a clearly visible peak on the waveform. You can also clap your hands or use a whistle. May seem ridiculous first.

<h1>Recording face</h1>

You may want to record your face while you talk about some slides. This is good for the audience, it makes your presentation more personal. I use an external webcam for this purpose. Although iShowU Instant can put the video input on the recorded screen as a picture in the picture, I decided to record the video input separately. On OSX I can record simultaneous screen using iShowU and the video input using PhotoBooth. That way both inputs will have the same audio recorded from the same microphone. This helps to put the two videos in sync when editing and then one of the audio (presumably the one from the presentation, as it is the one less sensitive to slipped audio) can be deleted.

This way it is also possible to put the PIP face at different locations although I do not recommend that you move it a lot around. But it can many times be removed from the screen. For example, if you record slides as well as demo code then you can show your talking head on the slides and hide it when showing code demo on the screen.

When you talk you have to face the camera. It is difficult because you want to talk about a slide that is not in the camera. It is on a screen that is just at the side of the camera. The bad news is that the audience will see that you are not looking into their eyes (which is the camera). You HAVE TO look into the camera.

I was told to look at the slide, read it and then look into the camera and say the text again and then cut it off during the editing phase. It did not work. What worked was that I created a teller machine from a cardboard box, picture glass, and black paint. I also bought for something like 5$ a teller application that runs on my iPad and is reflected from the glass, which is set 45 degrees in front of the webcam. It all stands on a tripod on the table.

<h1>Video Background</h1>

I use a curtain behind my chair to have an ambient background. There is nothing wrong with a room in the background, but it may cause some problems.

A clock on the wall will show that you recorded the video in several steps. It will jump back and forth and it is distracting for the audience. It is also bad when some background items, chairs, tables, etc. jump between different cuts of the video.

<h1>Video Editing</h1>

To edit the video I use iMovie. This comes free with the operating system on a mac and has enough functionalities to edit a technical video. Sometimes I feel I lack some features, which are available in professional video editing software products but later I realize that I do not need them.

I value the Kern Burns cropping functionality very much. This was originally invented to show still pictures in a dynamic, moving way in a movie. When doing screen capture I can use this functionality to move the focus to the area of the screen, (usually showing the IDE when programming Java) that is important from the demo point of view.

<h1>Takeaway</h1>

There are many ways of doing tutorial videos, and I cannot tell what will fit your personality, topic, and audience. I wrote down my experience and I hope you can find something useful in it for you.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1607</wp:post_id>
  <wp:post_date>2019-10-30 15:00:17</wp:post_date>
  <wp:post_date_gmt>2019-10-30 14:00:17</wp:post_date_gmt>
  <wp:post_modified>2019-10-29 18:16:02</wp:post_modified>
  <wp:post_modified_gmt>2019-10-29 17:16:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-video-tutorial</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1572444098]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[36897412454]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1189542881708642306";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[JEP 181 incompatibility, nesting classes / 2]]></title>
  <link>https://javax0.wordpress.com/2018/10/24/jep-181-incompatibility/</link>
  <pubDate>Wed, 24 Oct 2018 15:00:27 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1958</guid>
  <description/>
  <content:encoded><![CDATA[JEP 181 is a nest based access control https://openjdk.java.net/jeps/181. It was introduced in Java 11 and it deliberately introduced an incompatibility with previous versions. This is a good example that being compatible with prior versions of Java is not a rule carved into stone but it rather is to keep the consistency and steady development of the language. In this article, I will look at the change through an example that I came across a few years ago and how Java 11 makes life easier and more consistent in this special case.

<blockquote>Java backward compatibility is limited to features and not to behavior</blockquote>

<h1>Original Situation</h1>

A few years ago when I wrote the ScriptBasic for Java interpreter that can be extended with Java methods, so that they are available just as if they were written in BASIC I created some unit tests. The unit test class contained some inner class that had some method in it available for the BASIC code. The inner class was static and private as it had nothing to do with any other classes except the test, however, the class and the methods were still accessible to the test code because they resided in the same class. To my dismay, the methods were not accessible via the BASIC programs. When I tried to call the methods through the BASIC interpreter, which itself was using reflective access I got <code>IllegalAccessException</code>.

To rectify the situation I created the following simple code after a few hours of debugging and learning:

[code lang=java]
package javax0;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ReflThrow {
    private class Nested {
        private void m(){
            System.out.println(&quot;m called&quot;);
        }
    }
    public static void main(String[] args)
            throws NoSuchMethodException,
            InvocationTargetException,
            IllegalAccessException {
        ReflThrow me = new ReflThrow();
        Nested n = me.new Nested();
        n.m();
        Method m = Nested.class.getDeclaredMethod(&quot;m&quot;);
        m.invoke(n);
    }
}
[/code]

If you run this code with Java N where N &lt; 11 then you get something similar to this:

[code lang=text]
m called
Exception in thread &quot;main&quot; java.lang.IllegalAccessException: class ReflThrow cannot access a member of class ReflThrow$Nested with modifiers &quot;private&quot;
    at java.base/jdk.internal.reflect.Reflection.throwIllegalAccessException(Reflection.java:423)
    at java.base/jdk.internal.reflect.Reflection.throwIllegalAccessException(Reflection.java:414)
...
[/code]

It works, however, fine using Java 11 (and presumably it will also work fine with later versions of Java).

<h1>Explanation</h1>

Up to version 11 of Java the JVM did not handle inner and nested classes. All classes in the JVM are top-level classes. The Java compiler creates a specially named top-level class from the inner and nested classes. For example one of the Java compilers may create the class files <code>ReflThrow.class</code> and <code>ReflThrow$Nested.class</code>. Because they are top level classes for the JVM the code in the class <code>ReflThrow</code> cannot invoke the private method <code>m()</code> of <code>Nested</code> when they are two different top-level classes.

On the Java level, however, when these classes are created from a nested structure it is possible. To make it happen the compiler creates an extra synthetic method inside the class <code>Nested</code> that the code in <code>ReflThrow</code> can call and this method already inside <code>Nested</code> calls <code>m()</code>.

The synthetic methods have the modifier <code>SYNTHETIC</code> so that the compiler later knows that other code should not âseeâ those methods. That way invoking the method <code>m()</code> works nicely.
On the other hand, when we try to call the method <code>m()</code> using its name and reflective access the route goes directly through the class boundaries without invoking any synthetic method, and because the method is private to the class it is in, the invocation throws the exception.

Java 11 changes this. The JEP 181 incorporated into the already released Java 11 introduces the notion nest. <i>"Nests allow classes that are logically part of the same code entity, but which are compiled to distinct class files, to access each other's private members without the need for compilers to insert accessibility-broadening bridge methods."</i> It simply means that there are classes which are nests and there are classes which belong to a nest. When the code is generated from Java then the top level class is the nesting class and the classes inside are nested. This structure on the JVM level leaves a lot of room for different language structures and does not put an octroi of a Java structure on the execution environment. The JVM is aimed to be polyglot and it is going to be even "more" polyglot with the introduction of the GraalVM in the future. The JVM using this structure simply sees that two classes are in the same nest, thus they can access each other <code>private</code> methods, fields and other members. This also means that there are no bridge methods with different access restrictions and that way reflection goes through exactly the same access boundaries as the normal Java call.

<h1>Summary / Takeaway</h1>

Java does not change overnight and is mostly backward compatible. Backward compatibility is, however, limited to features and not to behavior. The JEP181 did not, and it never actually intended to reproduce the not absolutely perfect <code>IllegalAccessException</code> throwing behavior of the reflective access to nested classes. This behavior was rather an implementation behavior/bug rather than a language feature and was in Java 11 fixed.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1958</wp:post_id>
  <wp:post_date>2018-10-24 16:00:27</wp:post_date>
  <wp:post_date_gmt>2018-10-24 15:00:27</wp:post_date_gmt>
  <wp:post_modified>2018-10-22 16:49:40</wp:post_modified>
  <wp:post_modified_gmt>2018-10-22 15:49:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jep-181-incompatibility</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23536958378]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1540393277]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/LqynccR36h5]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6460877701308907520]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1055112014526242823";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[var and language design]]></title>
  <link>https://javax0.wordpress.com/2019/03/06/var-and-language-design/</link>
  <pubDate>Wed, 06 Mar 2019 15:00:52 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1977</guid>
  <description/>
  <content:encoded><![CDATA[<h1>What is var in Java</h1>

The <code>var</code> predefined type introduced in Java 10 lets you declared local variables without specifying the type of the variable when you assign a value to the variable. When you assign a value to a variable the type of the expression already defines the type of the variable, thus there is no reason to type the type on the left side of the line again. It is especially good when you have some complex long types with a lot of generics, for example

[code lang=java]
HashMap&lt;String,TreeMap&lt;Integer,String&gt; myMap = mapGenerator();
[/code]

Generic types you could already inherit in prior Java versions but now you can simply type

[code lang=java]
var myMap = mapGenerator();
[/code]

This is simpler, and most of the times more readable than the previous version. The aim of the <code>var</code> is mainly readability. It is important to understand that the variables declared this way will have a type and the introduction of this new predefined type (not a keyword) does not render Java to be a dynamic language. There are a few things that you can do this way that you could not before or you could do it only in a much more verbose way. For example, when you assign an instance of an anonymous class to a variable you can invoke the declared methods in the class through the <code>var</code> declared variables. For example:

[code lang=java]
var m = new Object{ void z(){} }
m.z();
[/code]

you can invoke the method <code>z()</code> but the code

[code lang=java]
Object m = new Object{ void z(){} }
m.z();
[/code]

does not compile. You can do that because anonymous classes actually have a name at their birth, they just lose it when the instance gets assigned to a variable declared to be the type of <code>Object</code>.

There is a little shady part of the <code>var</code> keyword. This way we violate the general rule to instantiate the concrete class but declare the variable to be the interface. This is a general abstraction rule that we usually follow in Java most of the times. When I create a method that returns a <code>HashMap</code> I usually declare the return value to be a <code>Map</code>. That is because <code>HashMap</code> is the implementation of the return value and as such is none of the business of the caller. What I declare in the return type is that I return something that implements the <code>Map</code> interface. The way I do it is my own duty. Similarly, we declare usually the fields in the classes to be of some interface type if possible. The same rule should also be followed by local variables. A few times it helped me a lot when I declared a local variable to be <code>Set</code> but the actual value was <code>TreeSet</code> and then typing the code I faced some error. Then I realized that I was using some of the features that are not <code>Set</code> but <code>SortedSet</code>. It helped me to realize that sorted-ness is important in the special case and that it will also be important for the caller and thus I had to change the return type of the method also to be <code>SortedSet</code>. Note that <code>SortedSet</code> in this example is still an interface and not the implementation class.

With the use of <code>var</code> we lose that and we gain a somewhat simpler source code. It is a trade-off as always. In case of the local variables the use of the variable is close in terms of source code lines to the declaration, therefore the developer can see in a glimpse what is what and what is happening, therefore the "bad" side of this tradeoff is acceptable. The same tradeoff in case of method return values or fields is not acceptable. The use of these class members can be in different classes, different modules. It is not only difficult but it may also be impossible to see all the uses of these values, therefore here we remain in the good old way: declare the type.

<h1>The future of var (just ideas)</h1>

There are cases when you cannot use <code>var</code> even for local variables. Many times we have the following coding pattern:

[code lang=java]
final var variable; // this does not work in Java 11
if ( some condition ) {
    variable = expression_1
    // do something here
} else {
    variable = expression_2
    // do something here
}
[/code]

Here we can not use <code>var</code> because there is no expression assigned to the variable on the declaration itself. The compiler, however, could be extended. From now on what I talk about is not Java as it is now. It is what I imagine how it can be in some future version.

If the structure is simple and the "do something here" is empty, then the structure can be transformed into a ternary operator:

[code lang=java]
final var variable = some condition ? ( expression_1 ) : (expression_2)
[/code]

In this case, we can use the <code>var</code> declaration even if we use an old version of Java, e.g.: Java 11. However, be careful!

[code lang=java]
var h = true ? 1L : 3.3;
[/code]

What will be the actual type of the variable <code>h</code> in this example? <code>Number</code>? The ternary operator has complex and special type coercion rules, which usually do not cause any issue because the two expressions are close to each other. If we let the structure described above use a similar type coercion then the expressions are not that close to each other. As for now, the distance is far enough for Java not to allow the use of the <code>var</code> type definition. My personal opinion is that the <code>var</code> declaration should be extended sometime in the future to allow the above structure but only in the case when the two (or more in case of more complex structure) expressions have exactly the same type. Otherwise, we may end up having an expression that results in an <code>int</code>, another that results in a <code>String</code> and then what will the type of the variable be? Do not peek at the picture before answering!

<img src="https://javax0.files.wordpress.com/2018/10/string-int-coercion.png" alt="" width="504" height="74" class="alignleft size-full wp-image-1972" />

(This great example was given by Nicolai Parlog.)

I can also imagine that in the future we will have something that is similar to Scala <code>val</code>, which is <code>final var</code> in Java 11. I do not like the <code>var</code> vs. <code>val</code> naming though. It is extremely sexy and geekish, but very easy to mistake one for the other. However, if we have a local variable declaration that starts with the <code>final</code> keyword then why do we need the <code>var</code> keyword after that?

Finally, I truly believe that <code>var</code> is a great tool in Java 11, but I also expect that it's role will be extended in the future.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1977</wp:post_id>
  <wp:post_date>2019-03-06 16:00:52</wp:post_date>
  <wp:post_date_gmt>2019-03-06 15:00:52</wp:post_date_gmt>
  <wp:post_modified>2019-03-05 22:55:50</wp:post_modified>
  <wp:post_modified_gmt>2019-03-05 21:55:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>var-and-language-design</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28337450975]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1551884466]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1103309542224470018";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>20879</wp:comment_id>
    <wp:comment_author><![CDATA[tamasrev]]></wp:comment_author>
    <wp:comment_author_email>tamas.rev@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tamasrev.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>193.178.168.100</wp:comment_author_IP>
    <wp:comment_date>2019-03-06 16:08:09</wp:comment_date>
    <wp:comment_date_gmt>2019-03-06 15:08:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Let's write Perl in java!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>42401512</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1551884892]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1551884890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1551884891.386964;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tamasrev";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21283</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.17.163.28</wp:comment_author_IP>
    <wp:comment_date>2019-03-10 00:42:38</wp:comment_date>
    <wp:comment_date_gmt>2019-03-09 23:42:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<blockquote>
  The same rule should also be followed by local variables.
</blockquote>

I rather disagree. Methods should be short and the usual rules matter much less. Sure, things like you describe (SortedSet) may happen, but this is probably very rare. IMHO the advantage of using a verbose generic interface name instead of just var is more than offset by the increased code length. From lengthy declarations, broken lines result and hamper readability even more.

<blockquote>
  ... var is a great tool in Java 11, but I also expect that itâs role will be extended in the future.
</blockquote>

I'd love to see val (while the name is geeky similar, it's better than not having it). Concerning other extensions, I'm rather sceptical, as the cases when var doesn't work are rather rare.

Thank you for the article.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>150283678</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552174958.341549;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552178630.763153;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1552220954]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1552220954]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552220955.058015;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Comparing Golang and Understanding Value Types BaselOne]]></title>
  <link>https://javax0.wordpress.com/2018/10/31/comparing-golang-and-understanding-value-types-baselone/</link>
  <pubDate>Wed, 31 Oct 2018 15:00:01 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1979</guid>
  <description/>
  <content:encoded><![CDATA[Comparing Golang and Understanding Value Types BaselOne Video

I was invited again to deliver my talk comparing Go language with Java and to talk a bit about value types. This time it was in Basel at the BaselOne conference. This one day conference happens once a year in Basel at the MarkHalle. This is a kind of shopping mall close to the railway station. The place is not too posh so you will not feel uncomfortable walking around in the typical developer outfits. At the same time, there are a lot of food places and the conference organizers provided coupons valid for some food. There were three rooms for parallel talks. One of the rooms is actually a cafÃ© and you can really buy coffee before the talk and later listen to the talk while sipping your mocha. The audience was composed mainly of local developers from within Switzerland. The organization of the conference is very much related to the <a href="https://www.jug.ch/">Swiss Java Users' Group</a>. There was no official video recording of the conference but organizers welcomed my recording and gave me permission to publish the video, so here it goes.

I have edited the video I recorded during the conference where I presented Comparing Golang and Understanding Value Types. The video shows the slides and, just for the sake of completeness and to increase the enjoyment factor, my slender myself presenting in PIP.

https://youtu.be/upgfrw6xP6Y

I delivered the talk also in May in Vilnius and before that April, the same year in Mainz at W-JAX. Both of those times the talk was disturbed some external noise. This time we had nothing like that. I almost started to miss it. (not really)

Now that JAX also published the video

https://vimeo.com/jaxtv/review/288743607/ce57328338

You can compare the three, how different the same talk can be. (Seriously, I do not think it is interesting for anyone.) Here is the Vilnius conference video:

https://youtu.be/wuJOjL8J5sE]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1979</wp:post_id>
  <wp:post_date>2018-10-31 16:00:01</wp:post_date>
  <wp:post_date_gmt>2018-10-31 15:00:01</wp:post_date_gmt>
  <wp:post_modified>2018-10-31 08:11:51</wp:post_modified>
  <wp:post_modified_gmt>2018-10-31 07:11:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-golang-and-understanding-value-types-baselone</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2526235c3f6de9fd02fe3313a87afab1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ddab839925e3340e4566fa1b975caf21</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4fda254b67489db078ab136874842e14</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b834d2c8f1e02aaebe4dd6b2e63f3c39</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6463414179922472960]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23779081223]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1540998021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/dgj6SjwMujK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1057648492888375297";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Implementing Basic REST APIs with JAX-RS]]></title>
  <link>https://javax0.wordpress.com/2018/11/29/implementing-basic-rest-apis-with-jax-rs/</link>
  <pubDate>Thu, 29 Nov 2018 09:58:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=1984</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>This is a guest article promoted by PACKT, the publisher I work with to get my books to the readers.</blockquote>

<em>Learn how to implement basic REST APIs with JAX-RS in this article by Mario-Leander Reimer, a chief technologist for QAware GmbH and a senior Java developer and architect with several years of experience in designing complex and large-scale distributed system architectures.</em>

This article will take a look at how to implement a REST resource using basic JAX-RS annotations. You'll implement a REST API to get a list of books so that you'll be able to create new books, get a book by ISBN, update books, and delete a book. The complete code for this book is also available at <a href="https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-Java-EE-8">https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-Java-EE-8</a>.

[caption id="attachment_1985" align="aligncenter" width="660"]<img class="wp-image-1985 size-full" src="https://javax0.files.wordpress.com/2018/11/1.png" alt="" width="660" height="182" /> Conceptual view of this section[/caption]

Youâll create a basic project skeleton and prepare a simple class called <code>BookResource</code> and use this to implement the CRUD REST API for your books. First, you need to annotate your classÂ using proper annotations. Use the <code>@Path</code> annotation to specify the path for your books API, which is <code>"books"</code> and make a <code>@RequestScoped</code> CDI bean.

Now, to implement your business logic, you can use another CDI bean. So, you need to get it injected into this one. This other CDI bean is called <code>bookshelf</code>, and you'll use the CDI <code>@Inject</code> annotation to get a reference to your <code>bookshelf</code>. Next, implement aÂ method to get hold of a list of all books.

What you see here is that you have a <code>books()</code> method, which is <code>@GET</code> annotated, and it produces <code>MediaType.APPLICATION_JSON</code> and returns a JAX-RS response. You can see that you construct a response of <code>ok</code>, which is HTTP <code>200</code>; use <code>bookshelf.findAll()</code> as the body, which is aÂ collectionÂ of books andÂ thenÂ build the response. The <code>BookResource.java</code> file should look as follows:

[code lang=text]
@Path(&quot;books&quot;)
@RequestScoped
public class BookResource {

@Inject
private Bookshelf bookshelf;

@GET
@Produces(MediaType.APPLICATION_JSON)
public Response books() {
return Response.ok(bookshelf.findAll()).build();
}

[/code]

Next, implement a <code>GET</code> message to get a specific book. To do this, you have a <code>@GET</code> annotated method, but this time you have the <code>@Path</code> annotation with the <code>"/{isbn}"</code> parameter. To get hold of the parameter called <code>isbn</code>, use the <code>@PathParam</code> annotation to pass the value. UseÂ bookshelfÂ to find your book by ISBN and return the bookÂ foundÂ using the HTTP status codeÂ 200Â that is, <code>ok</code>:

[code lang=text]
@GET
@Path(&quot;/{isbn}&quot;)
public Response get(@PathParam(&quot;isbn&quot;) String isbn) {
Book book = bookshelf.findByISBN(isbn);
return Response.ok(book).build();
}

[/code]

In order to create something, it's a convention to use HTTP <code>POST</code> as a method. You consume the application JSON and expect the JSON structure of a book. You call <code>bookshelf.create</code> with the <code>book</code> parameter and then use <code>UriBuilder</code> to construct the URI for the just-created <code>book</code>; this is also a convention. Return this URI using <code>Response.created</code>, which matches the HTTP status code <code>201</code>, and call <code>build()</code> to build the final response:

[code lang=text]
@POST
@Consumes(MediaType.APPLICATION_JSON)
public Response create(Book book) {
if (bookshelf.exists(book.getIsbn())) {
return Response.status(Response.Status.CONFLICT).build();
}

bookshelf.create(book);
URI location = UriBuilder.fromResource(BookResource.class)
.path(&quot;/{isbn}&quot;)
.resolveTemplate(&quot;isbn&quot;, book.getIsbn())
.build();
return Response.created(location).build();
}
[/code]

You can implement the update method for an existing book. Again it's a convention to use the HTTP method <code>PUT</code>. Update this by putting in a specific location. Use the <code>@Path</code>Â parameter with a value ofÂ <code>"/{isbn}"</code>. Give a reference to thisÂ <code>isbn</code> here in theÂ <code>update()</code> method parameter, and youÂ have the JSONÂ structureÂ of your book ready.Â UseÂ bookshelf.updateÂ to update the book and in the end, return the status codeÂ ok:

[code lang=text]
@PUT
@Path(&quot;/{isbn}&quot;)
public Response update(@PathParam(&quot;isbn&quot;) String isbn, Book book) {
bookshelf.update(isbn, book);
return Response.ok().build();
}
[/code]

Finally, implement the delete message and use the HTTP method <code>DELETE</code> on the path of an identified ISBN. Using the <code>@PathParam</code> annotation here, call <code>bookshelf.delete()</code> and return <code>ok</code> if everything went well:

[code lang=text]
@DELETE
@Path(&quot;/{isbn}&quot;)
public Response delete(@PathParam(&quot;isbn&quot;) String isbn) {
bookshelf.delete(isbn);
return Response.ok().build();
}

[/code]

This is the CRUD implementation for your book resource. Use a Docker container and the Payara Server micro editionÂ to run everything. Copy your WAR file to the <code>deployments</code> directory and then you're up and running:

[code lang=text]
FROM payara/micro:5-SNAPSHOT

COPY target/library-service.war /opt/payara/deployments
[/code]

See if everything's running on your REST client (Postman). First, get aÂ listÂ of books. As youÂ canÂ see here, this works as expected:

<img class="size-full wp-image-1986 aligncenter" src="https://javax0.files.wordpress.com/2018/11/2.png" alt="" width="399" height="251" />

If you want to create a new book, issue the <code>POST and create new book</code>Â request, and you'll see a status code of <code>OKÂ 200</code>. Get the new book using <code>GET new book</code>; this is the book you just created,Â as shown in the following screenshot:

<img class="size-full wp-image-1987 aligncenter" src="https://javax0.files.wordpress.com/2018/11/3.png" alt="" width="568" height="294" />

Update the book using <code>Update new book</code>,Â and you'll get a status code of <code>OKÂ 200</code>. You can get the updated book using <code>GE new bookT</code>. Get the updated title,Â asÂ shownÂ in theÂ followingÂ screenshot:

<img class="size-full wp-image-1988 aligncenter" src="https://javax0.files.wordpress.com/2018/11/4.png" alt="" width="547" height="287" />

Finally, you can delete the book. When you get the list of books, your newly created book is not a part of it anymore.

<em>If you found this article interesting, you can explore <a href="https://www.amazon.com/Building-RESTful-Web-Services-Java/dp/1789532884">Building RESTful Web Services with Java EE 8</a> to learn the fundamentals of Java EE 8 APIs to build effective web services. <a href="https://india.packtpub.com/in/application-development/building-restful-web-services-java-ee-8">Building RESTful Web Services with Java EE 8</a> also guides you in leveraging the power of asynchronous APIs on the server and client side, and you will learn to use server-sent events (SSEs) for push communication.</em>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1984</wp:post_id>
  <wp:post_date>2018-11-29 10:58:41</wp:post_date>
  <wp:post_date_gmt>2018-11-29 09:58:41</wp:post_date_gmt>
  <wp:post_modified>2018-11-29 10:58:41</wp:post_modified>
  <wp:post_modified_gmt>2018-11-29 09:58:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>implementing-basic-rest-apis-with-jax-rs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="guest"><![CDATA[GUEST]]></category>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1985]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/+PeterVerhas/posts/TFU51oH7eqE]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1543485525]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24770049921]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_7019319</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_7004558</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6473847535302688768]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_3031141</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1068081851569451008";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Get rid of pom XML... almost]]></title>
  <link>https://javax0.wordpress.com/2019/03/13/get-rid-of-pom-xml-almost/</link>
  <pubDate>Wed, 13 Mar 2019 15:00:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2003</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>

POM files are XML formatted files that declaratively describe the build structure of a Java project to be built using Maven. Maintaining the POM XML files of large Java projects is many times cumbersome. XML is verbose and also the structure of the POM requires the maintenance of redundant information. The naming of the artifacts many times is redundant repeating some part of the name in the <code>groupId</code> and in the <code>artifactId</code>. The version of the project should appear in many files in case of a multi-module project. Some of the repetitions can be reduced using properties defined in the parent pom, but you still have to define the parent pom version in each module pom, because you refer to a POM by the artifact coordinates and not just referring to it as "the pom that is there in the parent directory". The parameters of the dependencies and the plugins can be configured in the parent POM in the <code>pluginManagement</code> and <code>dependency</code> management but you still can not get rid of the list of the plugins and dependencies in each and every module POM though they are usually just the same.

You may argue with me because it is also the matter of taste, but for me, POM files in their XML format are just too redundant and hard to read. Maybe I am not meticulous enough but many times I miss some errors in my POM files and have a hard time to fix them.

There are some technologies to support other formats, but they are not widely used. One such approach to get rid of the XML is <a href="https://github.com/takari/polyglot-maven">Poyglot Maven</a>. However, if you look on that Github page at the very first example, which is Ruby format POM you can still see a lot of redundant information, repetitions. This is because Polyglot Maven plugs-into Maven itself and replaces only the XML format to something different but does not help on the redundancy of the POM structure itself.

In this article, I will describe an approach that I found much better than any other solution, where the POM files remain XML for the build process, thus there is no need for any new plugin or change of the build process, but these <code>pom.xml</code> files are generated using the Jamal macro language from the <code>pom.xml.jam</code> file and some extra macro files that are shared by the modules.

<h1>Jamal</h1>

The idea is to use a text-based macro language to generate the XML files from some source file that contains the same information is a reduced format. This is some kind of programming. The macro description is a program that outputs the verbose XML format. When the macro language is powerful enough the source code can be descriptive enough and not too verbose. My choice was Jamal. To be honest, one of the reasons to select Jamal was that it is a macro language that I developed almost 20 years ago using Perl and a half year ago I reimplemented it in Java.

The language itself is very simple. Text and macros are mixed together and the output is the text and the result of the macros. The macros start with the <code>{</code> character or any other string that is configured and end by the corresponding <code>}</code> character or by the string that was configured to be the ending string. Macros can be nested and there is fine control what order the nested macros should be evaluated. There are user-defined and built-in macros. One of the built-in macros is <code>define</code> that is used to define user-defined macros.

An example talks better. Let's have a look at the following <code>test.txt.jam</code> file.

[sourcecode]
{@define GAV(_groupId,_artifactId,_version)=
    {#if |_groupId|&lt;groupId&gt;_groupId&lt;/groupId&gt;}
    {#if |_artifactId|&lt;artifactId&gt;_artifactId&lt;/artifactId&gt;}
    {#if |_version|&lt;version&gt;_version&lt;/version&gt;}
}

{GAV :com.javax0.geci:javageci-parent:1.1.2-SNAPSHOT}
[/sourcecode]

processing it with Jamal we will get

[sourcecode]

    &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
    &lt;artifactId&gt;javageci-parent&lt;/artifactId&gt;
    &lt;version&gt;1.1.2-SNAPSHOT&lt;/version&gt;
[/sourcecode]

I deleted the empty lines manually for typesetting reasons though, but you get a general idea. <code>GAV</code> is defined using the built-in macro <code>define</code>. It has three arguments named <code>_groupId</code>,<code>_artifactId</code> and <code>_version</code>. When the macro is used the format argument names in the body of the macro are replaced with the actual values and replace the user-defined macro in the text. The text of the <code>define</code> built-in macro itself is an empty string. There is a special meaning when to use <code>@</code> and when to use <code>#</code> in front of the built-in macros, but in this article, I cannot get into that level of detail.

The <code>if</code> macros also make it possible to omit <code>groupId</code>, <code>artifactId</code> or <code>version</code>, thus

[sourcecode]
{GAV :com.javax0.geci:javageci-parent:}
[/sourcecode]

also works and will generate

[sourcecode]
    &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
    &lt;artifactId&gt;javageci-parent&lt;/artifactId&gt;
[/sourcecode]

If you feel that still there is a lot of redundancy in the definition of the macros: you are right. This is the simple approach defining <code>GAV</code>, but you can go to the extreme:

[sourcecode]
{#define GAV(_groupId,_artifactId,_version)=
    {@for z in (groupId,artifactId,version)=
        {#if |_z|&lt;z&gt;_z&lt;/z&gt;}
    }
}{GAV :com.javax0.geci:javageci-parent:}
[/sourcecode]

Be warned that this needs an insane level of understanding of macro evaluation order, but as an example, it shows the power. More information on Jamal https://github.com/verhas/jamal

Let's get back to the original topic: how Jamal can be used to maintain POM files.

<h1>Cooking pom to jam</h1>

There can be many ways, which each may be just good. Here I describe the first approach I used for the Java::Geci project. I create a <code>pom.jim</code> file (<code>jim</code> stands for Jamal imported or included files). This contains the definitions of macros, like <code>GAV</code>, <code>dependencies</code>, <code>dependency</code> and many others. You can download this file from the Java::Geci source code repo: https://github.com/verhas/javageci The <code>pom.jim</code> file can be the same for all projects, there is no any project specific in it. There is also a <code>version.jim</code> file that contains the macro that defines at one single place the project version, the version of Java I use in the project and the groupId for the project. When I bump the release number from <code>-SNAPSHOT</code> to the next release or from the release to the next <code>-SNAPSHOT</code> this is the only place where I need to change it and the macro can be used to refer to the project version in the top level POM? but also in the module POMs referring to the parent.

In every directory, where there should a <code>pom.xml</code> file I create a <code>pom.xml.jam</code> file. This file imports the <code>pom.jim</code> file, so the macros defined there can be used in it. As an example the Java::Geci <code>javageci-engine</code> module <code>pom.xml.jam</code> file is the following:

[sourcecode]
{@import ../pom.jim}
{project |jar|
    {GAV ::javageci-engine:{VERSION}}
    {parent :javageci-parent}
    {name|javageci engine}
    {description|Javageci macro library execution engine}

    {@include ../plugins.jim}

    {dependencies#
        {@for MODULE in (api,tools,core)=
            {dependency :com.javax0.geci:javageci-MODULE:}}
        {@for MODULE in (api,engine)=
            {dependency :org.junit.jupiter:junit-jupiter-MODULE:}}
    }
}
[/sourcecode]

I think that this is fairly readable, at least for me it is more readable than the original <code>pom.xml</code> was:

[sourcecode]
&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;artifactId&gt;javageci-engine&lt;/artifactId&gt;
    &lt;version&gt;1.1.1-SNAPSHOT&lt;/version&gt;
    &lt;parent&gt;
        &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
        &lt;artifactId&gt;javageci-parent&lt;/artifactId&gt;
        &lt;version&gt;1.1.1-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;name&gt;javageci engine&lt;/name&gt;
    &lt;description&gt;Javageci macro library execution engine&lt;/description&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
            &lt;artifactId&gt;javageci-api&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
            &lt;artifactId&gt;javageci-tools&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
            &lt;artifactId&gt;javageci-core&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
[/sourcecode]

To start Jamal I can use the Jamal Maven plugin. To do that the easiest way is to have a <code>genpom.xml</code> POM file in the root directory, with the content:

[sourcecode]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.javax0.jamal&lt;/groupId&gt;
    &lt;artifactId&gt;pom.xml_files&lt;/artifactId&gt;
    &lt;version&gt;out_of_pom.xml.jam_files&lt;/version&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.javax0.jamal&lt;/groupId&gt;
                &lt;artifactId&gt;jamal-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.0.2&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;execution&lt;/id&gt;
                        &lt;phase&gt;clean&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;jamal&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;transformFrom&gt;\.jam$&lt;/transformFrom&gt;
                            &lt;transformTo&gt;&lt;/transformTo&gt;
                            &lt;filePattern&gt;.*pom\.xml\.jam$&lt;/filePattern&gt;
                            &lt;exclude&gt;target|\.iml$|\.java$|\.xml$&lt;/exclude&gt;
                            &lt;sourceDirectory&gt;.&lt;/sourceDirectory&gt;
                            &lt;targetDirectory&gt;.&lt;/targetDirectory&gt;
                            &lt;macroOpen&gt;{&lt;/macroOpen&gt;
                            &lt;macroClose&gt;}&lt;/macroClose&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
[/sourcecode]

Having this I can start Maven with the command line <code>mvn -f genpom.xml clear</code>. This not only creates all the POM files but also clears the previous compilation result of the project, which is probably a good idea when the POM file changes. It can also be executed when there is no <code>pom.xml</code> yet in the directory or when the file is not valid due to some bug you may have in the jam cooked POM file. Unfortunately, all recursivity has to end somewhere and it is not feasible, though possible to maintain the <code>genpom.xml</code> as a jam cooked POM file.

<h1>Summary</h1>

What I described is one approach to use a macro language as a source instead of raw editing the <code>pom.xml</code> file. The advantage is the shorter and simpler project definition. The disadvantage is the extra POM generation step, which is manual and not part of the build process. You also lose the possibility to use the Maven release plugin directly since that plugin modifies the POM file. I myself always had problems to use that plugin, but it is probably my error and not that of the plugin. Also, you have to learn a bit Jamal, but that may also be an advantage if you happen to like it. In short: you can give it a try if you fancy. Starting is easy since the tool (Jamal) is published in the central repo, the source and the documentation is on Github, thus all you need is to craft the <code>genpom.xml</code> file, cook some jam and start the plugin.

POM files are not the only source files that can be served with jam. I can easily imagine the use of Jamal macros in the product documentation. All you need is creating a <code>documentationfile.md.jam</code> file as a source file and modify the main POM to run Jamal during the build process converting the <code>.md.jam</code> to the resulting macro processed markdown document. You can also set up a separate POM just like we did in this article in case you want to keep the execution of the conversion strictly manual. You may even have <code>java.jam</code> files in case you want to have a preprocessor for your Java files, but I beg you not to do that. I do not want to burn in eternal flames in hell for giving you Jamal. It is not for that purpose.

There are many other possible uses of Jamal. It is a powerful macro language that is easy to embed into applications and also easy to extend with macros written in Java. Java::Geci also has a 1.0 version module that supports Jamal to ease code generation still lacking some built-in macros that are planned to make it possible to reach out to the Java code structure via reflections. I am also thinking about to develop some simple macros to read Java source files and to include into documentation. When I have some result in those I will write about.

If you have any idea what else this technology could be used for, do not hesitate to contact me.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2003</wp:post_id>
  <wp:post_date>2019-03-13 16:00:59</wp:post_date>
  <wp:post_date_gmt>2019-03-13 15:00:59</wp:post_date_gmt>
  <wp:post_modified>2019-03-13 23:29:30</wp:post_modified>
  <wp:post_modified_gmt>2019-03-13 22:29:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>get-rid-of-pom-xml-almost</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28593847244]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1552489354]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1105846626621509633";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>22327</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-03-15 19:59:00</wp:comment_date>
    <wp:comment_date_gmt>2019-03-15 18:59:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, this article is not about comparing maven and other things. However, I have heard of companies who crafted Java source code using vi and use shell scripts with javac commands in it to compile. Their argument is that way they really know what is happening during compilation and if something does not work then they can rectify it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>22308</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1552676341]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552676341.984534;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1552676342]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>22308</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>93.212.250.214</wp:comment_author_IP>
    <wp:comment_date>2019-03-15 16:52:30</wp:comment_date>
    <wp:comment_date_gmt>2019-03-15 15:52:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I see as the biggest problem with these declarative tools is the difficulty to find out what's wrong when something stops working. I've heard of about ten-people companies having one guy specialized on maven and spending most time with it. That's a shame.

Maybe we should forget them all, provide libraries each doing one simple step (resolve a version conflict, load a dependency, ...) and use our programming skills to assemble them together. When anything goes wrong with this, then we can use everything we've learned as programmers to fix it.

I can't say anything about maven+jamal, as I gave up on maven years ago.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>21980</wp:comment_parent>
    <wp:comment_user_id>150283678</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1552665150]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552665150.805169;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1552665151]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21951</wp:comment_id>
    <wp:comment_author><![CDATA[BorbÃ©ly Viktor]]></wp:comment_author>
    <wp:comment_author_email>borbelyv@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.226.192.30</wp:comment_author_IP>
    <wp:comment_date>2019-03-13 20:16:37</wp:comment_date>
    <wp:comment_date_gmt>2019-03-13 19:16:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, nice article. Did you consider using gradle build files?
Seems much clearer than Pom.xml and Jamal.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1552504598.707038;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1552509559.538386;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1552515680]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1552515680]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552515681.246576;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21980</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-03-13 23:28:45</wp:comment_date>
    <wp:comment_date_gmt>2019-03-13 22:28:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, and Gradle being Groovy based also makes it possible to define variables and alikes. It is programmable and gives you free hand to reduce redundancy wherever you feel fit even in cases that are very much project specific. I see no reason to use Jamal or any other similar macro application in case of Gradle build files. If your Gradle build files are redundant, contain copied code then you have not mastered Gradle and you better do that instead of using any macro language.

Gradle is a heavy tool with its learning curve.

Maven is much more mature and established. I have seen many program factories where Maven is the recommended tool for the very reason that it cannot be programmed the way like Gradle and therefore the chance of unnecessarily complex build files is much smaller. It may also happen that a developer, like me, is experienced with Maven and less so with Gradle and the priority list of to-learn new things puts Gradle much behind other things. Learning and applying Jamal is much simpler than Gradle, especially for me, who made Jamal, which I totally agree is a special case.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>21951</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1552516126]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1552516127.519559;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1552516128]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Converting objects to Map and back]]></title>
  <link>https://javax0.wordpress.com/2019/06/19/converting-objects-to-map-and-back/</link>
  <pubDate>Wed, 19 Jun 2019 15:00:41 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2030</guid>
  <description/>
  <content:encoded><![CDATA[In large enterprise applications sometimes we need to convert data objects to and from <code>Map</code>. Usually, it is an intermediate step to a special serialization. If it is possible to use something standard then it is better to use that, but many times the architecture envisioned by some lead architect, the rigid environment or some similar reason does not make it possible to use JOOQ, Hibernate, Jackson, JAX or something like that. In such a situation, as it happened to me a few years ago, we have to convert the objects to some proprietary format being string or binary and the first step towards that direction is to convert the object to a <code>Map</code>.

Eventually, the conversion is more complex than just

[code lang=java]
Map myMap =  (Map)myObject;
[/code]

because these objects are almost never are maps by their own. What we really need in the conversion is to have a <code>Map</code> where each entry corresponds to a field in the "MyObject" class. The key in the entry is the name of the field, and the value is the actual value of the field possibly converted to a <code>Map</code> itself.

One solution is to use reflection and reflectively read the fields of the object and create the map from it. The other approach is to create a <code>toMap()</code> method in the class that needs to be converted to a <code>Map</code> that simply adds each field to the returned map using the name of the field. This is somewhat faster than the reflection-based solution and the code is much simpler.

When I was facing this problem in a real application a few years ago I was so frustrated writing the primitive but numerous <code>toMap()</code> methods for each data object that I created a simple reflection-based tool that to do it just for any class we wanted. Did it solve the problem? No.

This was a professional environment where not only the functionality matters but also the quality of the code and the quality of my code, judged by my fellow programmers, was not matching. They argued that the reflection-based solution is complex and in case it becomes part of the code base then the later joining average developers will not be able to maintain it. Well, I had to admit that they were correct. In a different situation, I would have said that the developer has to learn reflection and programming in Java on a level that is needed by the code. In this case, however, we were not speaking about a specific person, but rather somebody who comes and joins the team in the future, possibly sometime when we have already left the project. This person was assumed to be an average developer, which seemed to be reasonable as we did not know anything about this person. In that sense, the quality of the code was not good, because it was too complex. The quorum of the developer team decided that maintaining the numerous manually crafted <code>toMap()</code> method was going to be cheaper than finding senior and experienced developers in the future.

To be honest, I was a bit reluctant to accept their decision but I accepted it even though I had the possibility to overrule it based simply on my position in the team. I tend to accept the decisions of the team even if I do not agree with that, but only if I can live with those decisions. If a decision is dangerous, terrible and threatens the future of the project then we have to keep discussing the details until we get to an agreement.

Years later I started to create Java::Geci as a side project that you can download from http://github.com/verhas/javageci

Java::Geci is a code generation tool that runs during the test phase of the Java development life cycle. Code generation in Java::Geci is a "test". It runs the code generation and in case all the generated code stays put then the test was successful. In case anything in the code base changed in a way that causes the code generator to generate different code than before and thus the source code changes then the test fails. When a test fails you have to fix the bug and run build, including tests again. In this case, the test generates the new, by now fixed code, therefore all you have to do is only to run the build again.

When developing the framework I created some simple generators to generate <code>equals()</code> and <code>hashCode()</code>, setters and getters, a delegator generator and finally I could not resist but I created a general purpose <code>toMap()</code> generator. This generator generates code that converts the object to <code>Map</code> just as we discussed before and also the <code>fromMap()</code> that I did not mention before, but fairly obviously also needed.

Java::Geci generators are classes that implement the <code>Generator</code> interface. The <code>Mapper</code> generator does that extending the abstract class <code>AbstractJavaGenerator</code>. This lets the generator to throw any exception easing the life of the generator developer, and also it already looks up the Java class, which was generated from the currently processed source. The generator has access to the actual <code>Class</code> object via the parameter <code>klass</code> and the same time to the source code via the parameter <code>source</code>, which represents the source code and provides methods to create Java code to be inserted into it.

The third parameter <code>global</code> is something like a map holding the configuration parameters that the source code annotation <code>@Geci</code> defines.

[sourcecode language="java"]
package javax0.geci.mapper;

import ...

public class Mapper extends AbstractJavaGenerator {

...

    @Override
    public void process(Source source, Class&lt;?&gt; klass, CompoundParams global)
                                                             throws Exception {
        final var gid = global.get(&quot;id&quot;);
        var segment = source.open(gid);
        generateToMap(source, klass, global);
        generateFromMap(source, klass, global);

        final var factory = global.get(&quot;factory&quot;, &quot;new {{class}}()&quot;);
        final var placeHolders = Map.of(
                &quot;mnemonic&quot;, mnemonic(),
                &quot;generatedBy&quot;, generatedAnnotation.getCanonicalName(),
                &quot;class&quot;, klass.getSimpleName(),
                &quot;factory&quot;, factory,
                &quot;Map&quot;, &quot;java.util.Map&quot;,
                &quot;HashMap&quot;, &quot;java.util.HashMap&quot;
        );
        final var rawContent = segment.getContent();
        try {
            segment.setContent(Format.format(rawContent, placeHolders));
        } catch (BadSyntax badSyntax) {
            throw new IOException(badSyntax);
        }
    }
[/sourcecode]

The generator itself only calls the two methods <code>generateToMap()</code> and <code>generateFromMap()</code>, which generate, as the names imply the <code>toMap()</code> and <code>fromMap()</code> methods into the class.

Both methods use the source generating support provided by the <code>Segment</code> class and they also use the templating provided by <a href="https://github.com/verhas/jamal">Jamal</a>. It is also to note that the fields are collected calling the reflection tools method <code>getAllFieldsSorted()</code> which returns all the field the class has in a definitive order, that does not depend on the actual JVM vendor or version.

[sourcecode language="java"]
    private void generateToMap(Source source, Class&lt;?&gt; klass, CompoundParams global) throws Exception {
        final var fields = GeciReflectionTools.getAllFieldsSorted(klass);
        final var gid = global.get(&quot;id&quot;);
        var segment = source.open(gid);
        segment.write_r(getResourceString(&quot;tomap.jam&quot;));
        for (final var field : fields) {
            final var local = GeciReflectionTools.getParameters(field, mnemonic());
            final var params = new CompoundParams(local, global);
            final var filter = params.get(&quot;filter&quot;, DEFAULTS);
            if (Selector.compile(filter).match(field)) {
                final var name = field.getName();
                if (hasToMap(field.getType())) {
                    segment.write(&quot;map.put(\&quot;%s\&quot;, %s == null ? null : %s.toMap0(cache));&quot;, field2MapKey(name), name, name);
                } else {
                    segment.write(&quot;map.put(\&quot;%s\&quot;,%s);&quot;, field2MapKey(name), name);
                }
            }
        }
        segment.write(&quot;return map;&quot;)
                ._l(&quot;}\n\n&quot;);
    }
[/sourcecode]

The code selects only the fields that are denoted by the <code>filter</code> expression.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2030</wp:post_id>
  <wp:post_date>2019-06-19 16:00:41</wp:post_date>
  <wp:post_date_gmt>2019-06-19 15:00:41</wp:post_date_gmt>
  <wp:post_modified>2019-06-05 10:04:58</wp:post_modified>
  <wp:post_modified_gmt>2019-06-05 09:04:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>converting-objects-to-map-and-back</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31986266482]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1560956643]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1141361006146461704";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28311</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:15</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Converting Objects to Map and Back [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424859.714667;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420015.633917;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546233]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546233.993448;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How to generate source code?]]></title>
  <link>https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/</link>
  <pubDate>Wed, 24 Apr 2019 15:00:21 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2041</guid>
  <description/>
  <content:encoded><![CDATA[In this article, I will talk about the different phases of software development where the source code can be generated programmatically and I will compare the different approaches. I will also describe the architecture and the ideas (the kind of eureka moment) of a specific tool that generates code at a specific phase.

<h1>Manually</h1>

This is the answer to the question set in the title. If there is a possibility for the purpose you have to generate the code manually. I have already written an <a href="https://javax0.wordpress.com/2018/05/23/generating-source-code-a-compromise/">article</a> a year ago about code generation and I have not changed my mind.

<blockquote>You should not generate code unless you really have to.</blockquote>

Weird statement, especially when I promote a FOSS tool that is exactly targeting Java code generation. I know, and still, the statement is that you have to write all the code you can manually. Unfortunately, or for the sake of my little tool, there are enough occasions when manual code generation is not an option, or at least automated code generation seems to be a better option.

<h1>Why to generate manually</h1>

I discussed it already in the referenced article, but here we go again. When the best option is to generate source code then there is something wrong or at least suboptimal in the system.

<img src="https://javax0.files.wordpress.com/2019/04/sub-par.png" alt="" width="240" height="181" class="alignleft size-full wp-image-2044" />

<ul>
<li>the developer creating the code is sub-par,</li>
<li>the programming language is sub-par, or</li>
<li>the environment, some framework is sub-par.</li>
</ul>

Do not feel offended. When I talk about the "sub-par developer" I do not mean You. You are well above the average developer last but not least because you are open and interested in new things proven by the fact that you are reading this article. However, when you write a code you should also consider the average developer Joe or Jane, who will some time in the future maintain your program. And, there is a very specific feature of the average developers: they are not good. They are not bad either, but they, as the name suggests, are average.

<h2>Legend of the sub-par developer</h2>

It may happen to you what has happened to me a few years back. It went like the following.

Solving a problem I created a mini-framework. Not really a framework, like Spring or Hibernate because a single developer cannot develop anything like that. (It does not stop though some of them trying even in a professional environment, which is contradictory as it is not professional.) You need a team. What I created was a single class that was doing some reflection "magic" converting objects to maps and back. Before that, we had <code>toMap()</code> and <code>fromMap()</code> methods in all classes that needed this functionality. They were created and maintained manually.

Luckily I was not alone. I had a team. They told me to scrap the code I wrote, and keep creating the <code>toMap()</code> and <code>fromMap()</code> manually. The reason is that the code has to be maintained by the developers who come after us. And we do not know them as they are not even selected. They may still study at the university or not even born. We know one thing: they will be average developers and the code I created needs a tad more than average skills. On the other hand, maintaining the handcrafted <code>toMap()</code> and <code>fromMap()</code> methods does not require more than the average skill, though the maintenance is error prone. But that is only a cost issue that needs a bit more investment into QA and is significantly less than hiring ace senior developers.

You can imagine my ambivalent feelings as my brilliant code was refused but with a cushion that praised my ego. I have to say, they were right.

<h2>Sub-par framework</h2>

Well, many frameworks are in this sense sub-par. Maybe the expression "sub-par" is not really the best. For example, you generate Java code from a WSDL file. Why does the framework generate source code instead of Java byte-code? There is a good reason.

Generating byte code is complex and need special knowledge. It has a cost associated with it. It needs some byte-code generation library like Byte Buddy, more difficult to debug for the programmer using the code and is a bit JVM version dependent. In case the code is generated as Java source code, even if it is for some later version of Java and the project is using some lagging version the chances are better, that the project can some way downgrade the generated code in case this is Java source than if it is byte code.

<h2>Sub-par language</h2>

Obviously, we are not talking about Java in this case, because Java is the best in the world and there is nothing better. Or is it? If anyone claims about just any programming language that the language is perfect ignore that person. Every language has strength and weaknesses. Java is no different. If you think about the fact that the language was designed more than 20 years ago and according to the development philosophy it kept backward compatibility very strict it simply implies that there should be some areas that are better in other languages.

Think about the <code>equals()</code> and <code>hashCode()</code> methods that are defined in the class <code>Object</code> and can be overridden in any class. There is no much invention overriding any of those. The overridden implementations are fairly standard. In fact, they are so standard that the integrated development environments each support generating code for them. Why should we generate code for them? Why are they not part of the language in some declarative way? Those are questions that should have very good answers because it would really not be a big deal to implement things like that into the language and still they are not. There has to be a good reason, that I am not the best person to write about.

As a summary of this part: if you cannot rely on the manually generated code, you can be sure that something is sub-par. This is not a shame. This is just how our profession generally is. This is how nature goes. There is no ideal solution, we have to live with compromises.

Then the next question is,

<h1>When to generate code?</h1>

Code generation principally can happen:
<img src="https://javax0.files.wordpress.com/2019/04/phases-1.png" alt="" width="625" height="121" class="alignleft size-full wp-image-2054" />

<ul>
<li>(BC) before compilation</li>
<li>(DC) during compilation</li>
<li>(DT) during the test phase</li>
<li>(DCL) during class loading</li>
<li>(DRT) during run-time</li>
</ul>

In the following, we will discuss these different cases.

<h1>(BC) Before compilation</h1>

The conventional phase is before compilation. In that case, the code generator reads some configuration or maybe the source code and generates Java code usually into a specific directory separated from the manual source code.

In this case, the generated source code is not part of the code that gets into the version control system. Code maintenance has to deal with the code generation and it is hardly an option to omit the code generator from the process and go on maintaining the code manually.

The code generator does not have easy access to the Java code structure. If the generated code has to use, extend or supplement in any way the already existing manual code then it has to analyze the Java source. It can be done line by line or using some parser. In either way, this is a task that will be done again by the Java compiler later and also there is a slight chance that the Java compiler and the tool used to parse the code for the code generator may not be 100% compatible.

<h2>(DC) during compilation</h2>

Java makes it possible to create so-called Annotation Processors that are invoked by the compiler. These can generate code during the compilation phase and the compiler will compile the generated classes. That way the code generation is part of the compilation phase.

The code generators running in this phase cannot access the compiled code, but they can access the compiled structure through an API that the Java compiler provides for the annotation processors.

It is possible to generate new classes, but it is not possible to modify the existing source code.

<h2>(DT) during the test phase</h2>

First, it seems to be a bit off. Why would anyone want to execute code generation during the test phase? However, the FOSS I try to "sell" here does exactly that, and I will detail the possibility, the advantages and honestly the disadvantages of code generation in this phase.

<h2>(DCL) during class loading</h2>

It is also possible to modify the code during the class loading. The programs that do this are called Java Agents. They are not real code generators. They work on the byte code level and modify the already compiled code.

<h2>(DRT) during run-time</h2>

Some code generators work during run-time. Many of these applications generate java bytecode directly and load the code into the running application. It is also possible to generate Java source code, compile the code and load the resulting bytes into the JVM.

<h1>Generating Code in Test Phase</h1>

This is the phase when and where Java::Geci (Java GEnerate Code Inline) generates the code. To help you understand how one comes to the weird idea to execute code generation during unit test (when it is already too late: the code is already compiled) let me tell you another story. The story is made up, it never happened, but it does not dwarf the explaining power.

We had a code with several data classes each with several fields. We had to create the <code>equals()</code> and <code>hashCode()</code> methods for each of these classes. This, eventually, meant code redundancy. When the class changed, a field was added or deleted then the methods had to be changed as well. Deleting a field was not a problem: the compiler does not compile an <code>equal()</code> or <code>hashCode()</code> method that refers to a non-existent field. On the other hand, the compiler does not mind such a method that does NOT refer to a new existing field.

From time to time we forgot to update these methods and we tried to invent more and more complex and better ways to counteract the error-prone human coding. The weirdest idea was to create an MD5 value of the field names and have this inserted as a comment into the <code>equals()</code> and <code>hashCode()</code> methods. In case there was a change in the fields then a test could check that the value in the source code is different from the one calculated from the names of the fields and then signal an error: unit test fails. We never implemented it.

The even weirder idea, that turned out not that weird and finally led to Java::Geci is actually to create the expected <code>equals()</code> and <code>hashCode()</code> method test during the test from the fields available via reflection and compare it to the one that was already in the code. If they do not match then they have to be regenerated. However, the code at this point is already regenerated. The only issue is that it is in the memory of the JVM and not in the file that contains the source code. Why just signal an error and tell the programmer to regenerate the code? Why does not the test write back the change? After all, we, humans should tell the computer what to do and not the other way around!

<img src="https://javax0.files.wordpress.com/2019/04/lightbulb.png" alt="" width="36" height="43" class="align-left wp-image-2058" />

And this was the epiphany that led to Java::Geci.

<h1>Java::Geci Architecture</h1>

Java::Geci generates code in the middle of the compilation, deployment, execution life cycle. Java::Geci is started when the unit tests are running during the build phase.

This means that the manual and previously generated code is already compiled and is available for the code generator via reflection.

Executing code generation during the test phase has another advantage. Any code generation that runs later should generate only code, which is orthogonal to the manual code functionality. What does it mean? It has to be orthogonal in the sense that the generated code should not modify or interference in any way with the existing manually created code that could be discovered by the unit tests. The reason for this is that a code generation happening any later phase is already after the unit test execution and thus there is no possibility to test if the generated code effects in any undesired way the behavior of the code.

Generating code during the test has the possibility to test the code as a whole taking the manual as well as the generated code into consideration. The generated code itself should not be tested, per se, (that is the task of the test of the code generator project) but the behavior of the manual code that the programmers wrote may depend on the generated code and thus the execution of the tests may depend on the generated code.

To ensure that all the tests are OK with the generated code, the compilation and the tests should be executed again in case there was any new code generated. To ensure this the code generation is invoked from a test and the test fails in case new code was generated.

To get this correct the code generation in Java::Geci is usually invoked
from a three-line unit test that has the structure:

[code lang=java]
Assertions.assertFalse(...generate(...),&quot;code has changed, recompile!&quot;);
[/code]

The call to <code>generate(...)</code> is a chain of method calls configuring the framework and the generators and when executed the framework decides if the generated code is different or not from the already existing code. It writes Java code back to the source code if the code changed but leaves the code intact in case the generated code has not changed.

The method <code>generate()</code> which is the final call in the chain to the code
generation returns <code>true</code> if any code was changed and written back to
the source code. This will fail the test, but if we run the test again
with the already modified sources then the test should run fine.

This structure has some constraints on the generators:

<ul>
<li>Generators should generate exactly the same code if they are executed on the same source and classes. This is usually not a strong requirement, code generators do not tend to generate random source. Some code generators may want to insert timestamps as a comment in the code: they should not.</li>
<li><p>The generated code becomes part of the source and they are not compile-time artifacts. This is usually the case for all code generators that generate code into already existing class sources. Java::Geci can generate separate files but it was designed mainly for inline code generation (hence the name).</p></li>
<li><p>The generated code has to be saved to the repository and the manual source along with the generated code has to be in a state that does not need further code generation. This ensures that the CI server in the development can work with the original workflow: fetch - compile - test - commit artifacts to the repo. The code generation was already done on the developer machine and the code generator on the CI only ensures that it was really done (or else the test fails).</p></li>
</ul>

<p>Note that the fact that the code is generated on a developer machine
does not violate the rule that the build should be machine independent.
In case there is any machine dependency then the code generation would
result in different code on the CI server and thus the build will break.

<h1>Code Generation API</h1>

The code generator applications should be simple. The framework has to do all the tasks that are the same for most of the code generators, and should provide support or else what is the duty of the framework?

Java::Geci does many things for the code generators:

<ul>
<li>it handles the configuration of the file sets to find the source files</li>
<li>scans the source directories and finds the source code files</li>
<li>reads the files and if the files are Java sources then it helps to find the class that corresponds to the source code</li>
<li>supports reflection calling to help deterministic code generation</li>
<li>unified configuration handling</li>
<li>Java source code generation in different ways</li>
<li>modifies the source files only when changed and write back changes</li>
<li>provide fully functional sample code generators. One of those is a full-fledged Fluent API generator that alone could be a whole project.</li>
<li>supports Jamal templating and code generation.</li>
</ul>

<h1>Summary</h1>

Reading this article you got a picture of how Java::Geci works. You can actually start using it visiting the <a href="https://github.com/verhas/javageci">GitHub Home Page of Java::Geci</a>. I will also deliver a talk about this topic in <a href="https://jax.de/core-java-jvm-languages/code-generation-the-good-parts-why-do-we-generate-source-code-when-we-should-not/">Mainz at the JAX conference</a> Wednesday, May 8, 2019. 18:15 - 19:15

In the coming weeks, I plan to write more articles about the design considerations and actual solutions I followed in Java::Geci.

You are encouraged to contact me, for the code, create tickets follow on Twitter, Linked-in whatnot. It is fun.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2041</wp:post_id>
  <wp:post_date>2019-04-24 16:00:21</wp:post_date>
  <wp:post_date_gmt>2019-04-24 15:00:21</wp:post_date_gmt>
  <wp:post_modified>2019-04-23 19:36:10</wp:post_modified>
  <wp:post_modified_gmt>2019-04-23 18:36:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-generate-souce-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1121066572951498754";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[30108272831]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1556118072]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27575</wp:comment_id>
    <wp:comment_author><![CDATA[Epo Jemba]]></wp:comment_author>
    <wp:comment_author_email>taharqa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>86.195.94.226</wp:comment_author_IP>
    <wp:comment_date>2019-06-04 19:41:37</wp:comment_date>
    <wp:comment_date_gmt>2019-06-04 18:41:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Thank you for this great tool, 
I was looking for such approach. In go, they commonly generate their source code and it works pretty well. Your decision to handle the generation in the test phase is clever as well.

Just one question, sorry if non clear : does Java:Geci handles merging of the source file. I mean around the editor-fold block, does the content is kept ?

<pre><code> ... some manualy modified source ... 
//&lt;editor-fold id="HelloWorld3" methodName = "hiyaNyunad"&gt;
//&lt;/editor-fold&gt;
 ... some manualy modified source ...
</code></pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559673699.896089;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/-WKpX8e5Kjog/AAAAAAAAAAI/AAAAAAAABqY/GeqQbaJFq2U/photo.jpg]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[101176242539238803593]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559678251.568851;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31515921161]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559715893]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559715893]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559715894.138764;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27578</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.21</wp:comment_author_IP>
    <wp:comment_date>2019-06-05 07:27:55</wp:comment_date>
    <wp:comment_date_gmt>2019-06-05 06:27:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes of course. Only the part that is after

[code lang=java]
//&lt;editor-fold id=&quot;HelloWorld3&quot; methodName = &quot;hiyaNyunad&quot;&gt;
[/code]

and before the next

[code lang=java]
//&lt;/editor-fold&gt;
[/code]

is modified. Everything else, the manual code remains intact.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27575</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[0]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559716076]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559716076.919201;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31515981614]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559716077]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28315</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:22</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] How to generate Source Code [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424861.256922;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420022.142702;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546230.745054;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546230]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Handling exceptions functional style]]></title>
  <link>https://javax0.wordpress.com/2019/05/01/handling-exceptions-functional-style/</link>
  <pubDate>Wed, 01 May 2019 15:00:35 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2066</guid>
  <description/>
  <content:encoded><![CDATA[Java supports checked exceptions from the very start. With Java 8 the language element lambda and the RT library modifications supporting stream operations introduced functional programming style to the language. Functional style and exceptions are not really good friends. In this article, I will describe a simple library that handles exceptions somehow similar to how <code>null</code> is handled using <code>Optional</code>.

The library works (after all it is a single Class and some inner classes, but really not many). On the other hand, I am not absolutely sure that using the library will not deteriorate the programming style of the average programmer. It may happen that someone having a hammer sees everything as a nail. A hammer is not a good pedicure tool. Have a look at this library more like an idea and not as a final tool that tells you how to create perfect code handling exceptions.

Also, come and listen to the presentation of Michael Feathers about exceptions May 6, 2019, ZÃ¼rich https://www.jug.ch/html/events/2019/exceptions.html

<h1>Handling Checked Exception</h1>

Checked exceptions have to be declared or caught like a cold. This is a major difference from <code>null</code>. Evaluating an expression can silently be <code>null</code> but it cannot silently throw a checked exception. When the result is <code>null</code> then we may use that to signal that there is no value or we can check that and use a "default" value instead of <code>null</code>. The code pattern doing that is

[code lang="java"]
var x = expression;
if( expression == null ){
  x = default expression that is really never null
}
[/code]

The pattern topology is the same in case the evaluation of the expression can throw a checked exception, although the Java syntax is a bit different:

[code lang="java"]
Type x; // you cannot use 'var' here
try{
  x = expression
}catch(Exception weHardlyEverUseThisValue){
  x = default expression that does not throw exception
}
[/code]

The structure can be more complex if the second expression can also be <code>null</code> or may throw an exception and we need a third expression or even more expressions to evaluate in case the former ones failed. This is especially naughty in case of an exception throwing expression because of the many bracketing

[code lang="java"]
Type x; // you cannot use 'var' here
try{
  try {
    x = expression1
  }catch(Exception e){
  try {
    x = expression2
  }catch(Exception e){
  try {
    x = expression3
  }catch(Exception e){
    x = expression4
  }}}}catch(Exception e){
  x = default expression that does not throw exception
}
[/code]

In the case of <code>null</code> handling, we have <code>Optional</code>. It is not perfect to fix the million dollar problem, which is the name of designing a language having <code>null</code> and also an underestimation, but it makes life a bit better if used well. (And much worse if used in the wrong way, which you are free to say that what I describe in this article is exactly that.)

In the case of <code>null</code> resulting expressions, you can write

[code lang="java"]
var x = Optional.ofNullable(expresssion)
         .orElse(default expression that is nere null);
[/code]

You can also write

[code lang="java"]
var x = Optional.ofNullable(expresssion1)
.or( () -&gt; Optional.ofNullable(expression2))
.or( () -&gt; Optional.ofNullable(expression3))
.or( () -&gt; Optional.ofNullable(expression4))
...
.orElse(default expression that is nere null);
[/code]

when you have many alternatives for the value. But you cannot do the same thing in case the expression throws an exception. Or can you?

<h1>Exceptional</h1>

The library <code>Exceptional</code> (https://github.com/verhas/exceptional)

[code lang="xml"]
&lt;groupId&gt;com.javax0&lt;/groupId&gt;
&lt;artifactId&gt;exceptional&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
[/code]

implements all the methods that are implemented in <code>Optional</code>, one method more and some of the methods a bit differently aiming to be used the same way in case of exceptions as was depicted above for <code>Optional</code> in case of <code>null</code> values.

You can create an <code>Exceptional</code> value using <code>Exceptional.of()</code> or <code>Exceptional.ofNullable()</code>. The important difference is that the argument is not the value but rather a supplier that provides the value. This supplier is not the JDK <code>Supplier</code> because that one cannot throw an exception and that way the whole library would be useless. This supplier has to be <code>Exceptional.ThrowingSupplier</code> which is exactly the same as the JDK <code>Supplier</code> but the method <code>get()</code> may throw an <code>Exception</code>. (Also note that only an <code>Exception</code> and not <code>Throwable</code> which you should only catch as often as you catch a red-hot iron ball using bare hands.)

What you can write in this case is

[code lang="java"]
var x = Exceptional.of(() -&gt; expression) // you CAN use 'var' here
    .orElse(default expression that does not throw exception);
[/code]

It is shorter and shorter is usually more readable. (Or not? That is why APL is so popular? Or is it? What is APL you ask?)

If you have multiple alternatives you can write

[code lang="java"]
var x = Exceptional.of(() -&gt; expression1) // you CAN use 'var' here
    .or(() -&gt; expression2)
    .or(() -&gt; expression3) // these are also ThrowingSupplier expressions
    .or(() -&gt; expression4)
...
    .orElse(default expression that does not throw exception);
[/code]

In case some of the suppliers may result <code>null</code> not only throwing an exception there are <code>ofNullable()</code> and <code>orNullable()</code> variants of the methods. (The <code>orNullable()</code> does not exist in <code>Optional</code> but here it makes sense if the whole library does at all.)

If you are familiar with <code>Optional</code> and use the more advanced methods like <code>ifPresent()</code>, <code>ifPresentOrElse()</code>, <code>orElseThrow()</code>, <code>stream()</code>, <code>map()</code>, <code>flatMap()</code>, <code>filter()</code> then it will not be difficult to use <code>Exceptional</code>. Similar methods with the same name exist in the class. The difference again is that in case the argument for the method in <code>Optional</code> is a <code>Function</code> then it is <code>ThrowingFunction</code> in case of <code>Exceptional</code>. Using that possibility you can write code like

[code lang="java"]
    private int getEvenAfterOdd(int i) throws Exception {
        if( i % 2 == 0 ){
            throw new Exception();
        }
        return 1;
    }

    @Test
    @DisplayName(&quot;some odd example&quot;)
    void testToString() {
        Assertions.assertEquals(&quot;1&quot;,
                Exceptional.of(() -&gt; getEvenAfterOdd(1))
                        .map(i -&gt; getEvenAfterOdd(i+1))
                        .or( () -&gt; getEvenAfterOdd(1))
                .map(i -&gt; i.toString()).orElse(&quot;something&quot;)
        );
    }
[/code]

It is also possible to handle the exceptions in functional expressions like in the following example:

[code lang="java"]
    private int getEvenAfterOdd(int i) throws Exception {
        if (i % 2 == 0) {
            throw new Exception();
        }
        return 1;
    }

    @Test
    void avoidExceptionsForSuppliers() {
        Assertions.assertEquals(14,
                (int) Optional.of(13).map(i -&gt;
                        Exceptional.of(() -&gt; inc(i))
                                .orElse(0)).orElse(15));
    }
[/code]

Last, but not least you can mimic the <code>?.</code> operator of Groovy writing

[code lang="java"]
a.b.c.d.e.f
[/code]

expressions, where all the variables/fields may be <code>null</code> and accessing the next field through them, causes NPE. You can, however, write

[code lang="java"]
var x = Exceptional.ofNullable( () -&gt; a.b.c.d.e.f).orElse(null);
[/code]

<h1>Summary</h1>

Remember what I told you about the hammer. Use with care and for the greater good and other BS.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2066</wp:post_id>
  <wp:post_date>2019-05-01 16:00:35</wp:post_date>
  <wp:post_date_gmt>2019-05-01 15:00:35</wp:post_date_gmt>
  <wp:post_modified>2019-05-13 10:12:09</wp:post_modified>
  <wp:post_modified_gmt>2019-05-13 09:12:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>handling-exceptions-functional-style</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[30352852271]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1556722871]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1123603281899597825";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Creating a Java::Geci generator]]></title>
  <link>https://javax0.wordpress.com/2019/05/08/creating-a-javageci-generator/</link>
  <pubDate>Wed, 08 May 2019 15:00:16 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2077</guid>
  <description/>
  <content:encoded><![CDATA[A few days back I wrote about <a href="https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/">Java::Geci</a> architecture, code generation philosophy and the possible different ways to generate Java source code.

In this article, I will talk about how simple it is to create a generator in Java::Geci.

<h1>Hello, Wold generator</h1>

<h2><code>HelloWorld1</code></h2>

The simplest ever generator is a <code>Hello, World!</code> generator. This will generate a method that prints <code>Hello, World!</code> to the standard output. To create this generator the Java class has to implement the <code>Generator</code> interface. The whole code of the generator is:

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.api.GeciException;
import javax0.geci.api.Generator;
import javax0.geci.api.Source;

public class HelloWorldGenerator1 implements Generator {
    public void process(Source source) {
        try {
            final var segment = source.open(&quot;hello&quot;);
            segment.write_r(&quot;public static void hello(){&quot;);
            segment.write(&quot;System.out.println(\&quot;Hello, World\&quot;);&quot;);
            segment.write_l(&quot;}&quot;);
        } catch (Exception e) {
            throw new GeciException(e);
        }
    }
}
[/code]

This really is the whole generator class. There is no simplification or deleted lines. When the framework finds a file that needs the method <code>hello()</code> then it invokes <code>process()</code>.

The method <code>process ()</code> queries the segment named "hello". This refers to the lines

[code lang=java]
    //&lt;editor-fold id=&quot;hello&quot;&gt;
    //&lt;/editor-fold&gt;
[/code]

in the source code. The <code>segment</code> object can be used to write lines into the code. The method <code>write()</code> writes a line. The method <code>write_r()</code> also writes a line, but it also signals that the lines following this one have to be indented. The opposite is <code>write_l()</code> which signals that already this line and the consecutive lines should be tabbed back to the previous position.

To use the generator we should have a class that needs it. This is

[code lang=java]
package javax0.geci.tutorials.hello;

public class HelloWorld1 {
    //&lt;editor-fold id=&quot;hello&quot;&gt;
    //&lt;/editor-fold&gt;
}
[/code]

We also need a test that will run the code generation every time we compile the code and thus run the unit tests:

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.engine.Geci;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static javax0.geci.api.Source.maven;

public class TestHelloWorld1 {

    @Test
    @DisplayName(&quot;Start code generator for HelloWorld1&quot;)
    void testGenerateCode() throws Exception {
        Assertions.assertFalse(new Geci()
                .only(&quot;^.*/HelloWorld1.java$&quot;)
                .register(new HelloWorldGenerator1()).generate(), Geci.FAILED);
    }
}
[/code]

When the code has executed the file <code>HelloWorld1.java</code> will be modified and will get the lines inserted between the editor folds:

[code lang=java]
package javax0.geci.tutorials.hello;

public class HelloWorld1 {
    //&lt;editor-fold id=&quot;hello&quot;&gt;
    public static void hello(){
        System.out.println(&quot;Hello, World&quot;);
    }
    //&lt;/editor-fold&gt;
}
[/code]

This is an extremely simple example that we can develop a bit further.

<h2><code>HelloWorld2</code></h2>

One thing that is sub-par in the example is that the scope of the generator is limited in the test calling the <code>only()</code> method. It is a much better practice to let the framework scan all the files and select the source files that themselves some way signal that they need the service of the generator. In the case of the "Hello, World!" generator it can be the existence of the <code>hello</code> segment as an editor fold in the source code. If it is there the code needs the method <code>hello()</code>, otherwise it does not. We can implement the second version of our generator that way. We also modify the implementation not simply implementing the interface <code>Generator</code> but rather extending the abstract class <code>AbstractGeneratorEx</code>. The postfix <code>Ex</code> in the name suggests that this class handles exceptions for us. This abstract class implements the method <code>process()</code> and calls the to-be-defined <code>processEx()</code> which has the same signature as <code>process()</code> but it is allowed to throw an exception. If that happens then it is encapsulated in a <code>GeciException</code> just as we did in the first example.

The code will look like the following:

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.api.Source;
import javax0.geci.tools.AbstractGeneratorEx;

import java.io.IOException;

public class HelloWorldGenerator2 extends AbstractGeneratorEx {
    public void processEx(Source source) throws IOException {
        final var segment = source.open(&quot;hello&quot;);
        if (segment != null) {
            segment.write_r(&quot;public static void hello(){&quot;);
            segment.write(&quot;System.out.println(\&quot;Hello, World\&quot;);&quot;);
            segment.write_l(&quot;}&quot;);
        }
    }
}
[/code]

This is even simpler than the first one although it is checking the segment existence. When the code invokes <code>source.open("hello")</code> the method will return <code>null</code> if there is no segment named <code>hello</code> in the source code. The actual code using the second generator is the same as the first one. When we run both tests int the codebase they both generate code, fortunately identical.

The test that invokes the second generator is

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.engine.Geci;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static javax0.geci.api.Source.maven;

public class TestHelloWorld2 {

    @Test
    @DisplayName(&quot;Start code generator for HelloWorld2&quot;)
    void testGenerateCode() throws Exception {
        Assertions.assertFalse(new Geci()
                .register(new HelloWorldGenerator2())
                .generate(), Geci.FAILED);
    }
}
[/code]

Note that this time we did not need to limit the code scanning calling the method <code>only()</code>. Also the documentation of the method <code>only(RegEx x)</code> says that this is in the API of the generator builder as a last resort.

<h2><code>HelloWorld3</code></h2>

The first and the second version of the generator are working on text files and do not use the fact that the code we modify is actually Java. The third version of the generator will rely on this fact and that way it will be possible to create a generator, which can be configured in the class that needs the code generation.

To do that we can extend the abstract class <code>AbstractJavaGenerator</code>. This abstract class finds the class that corresponds to the source code and also reads the configuration encoded in annotations on the class as we will see. The abstract class implementation of <code>processEx()</code> invokes the <code>process(Source source, Class klass, CompoundParams global)</code> only if the source code is a Java file, there is an already compiled class (sorry compiler, we may modify the source code now so there may be a need to recompile) and the class is annotated appropriately.

The generator code is the following:

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.api.Source;
import javax0.geci.tools.AbstractJavaGenerator;
import javax0.geci.tools.CompoundParams;

import java.io.IOException;

public class HelloWorldGenerator3 extends AbstractJavaGenerator {
    public void process(Source source, Class&lt;?&gt; klass, CompoundParams global)
            throws IOException {
        final var segment = source.open(global.get(&quot;id&quot;));
        final var methodName = global.get(&quot;methodName&quot;, &quot;hello&quot;);
        segment.write_r(&quot;public static void %s(){&quot;, methodName);
        segment.write(&quot;System.out.println(\&quot;Hello, World\&quot;);&quot;);
        segment.write_l(&quot;}&quot;);
    }

    public String mnemonic() {
        return &quot;HelloWorld3&quot;;
    }
}
[/code]

The method <code>process()</code> (an overloaded version of the method defined in the interface) gets three arguments. The first one is the very same <code>Source</code> object as in the first example. The second one is the <code>Class</code> that was created from the Java source file we are working on. The third one is the configuration that the framework was reading from the class annotation. This also needs the support of the method <code>mnemonic()</code>. This identifies the name of the generator. It is a string used as a reference in the configuration. It has to be unique.

A Java class that needs itself to be modified by a generator has to be annotated using the <code>Geci</code> annotation. The <code>Geci</code> annotation is defined in the library <code>javax0.geci.annotations.Geci</code>. The code of the source to be extended with the generated code will look like the following:

[code lang=java]
package javax0.geci.tutorials.hello;

import javax0.geci.annotations.Geci;

@Geci(&quot;HelloWorld3 id=&#039;hallo&#039; methodName=&#039;hiya&#039;&quot;)
public class HelloWorld3 {
    //&lt;editor-fold id=&quot;hallo&quot;&gt;
    //&lt;/editor-fold&gt;
}
[/code]

Here there is a bit of a nuisance. Java::Geci is a test phase tool and all the dependencies to it are test dependencies. The exception is the annotations library. This library has to be a normal dependency because the classes that use the code generation are annotated with this annotation and therefore the JVM will look for the annotation class during run time, even though there is no role of the annotation during run-time. For the JVM test execution is just a run-time, there is no difference.

To overcome this Java::Geci lets you use any annotations so long as long the name of the annotation interface is <code>Geci</code> and it has a <code>value</code>, which is a <code>String</code>. This way we can use the third hello world generator the following way:

[code lang=java]
package javax0.geci.tutorials.hello;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@HelloWorld3a.Geci(value = &quot;HelloWorld3 id=&#039;hallo&#039;&quot;, methodName = &quot;hiyaHuya&quot;)
public class HelloWorld3a {
    //&lt;editor-fold id=&quot;hallo&quot;&gt;
    //&lt;/editor-fold&gt;

    @Retention(RetentionPolicy.RUNTIME)
    @interface Geci {
        String value();

        String methodName() default &quot;hello&quot;;
    }
}
[/code]

Note that in the previous example the parameters <code>id</code> and <code>methodName</code> were defined inside the <code>value</code> string (which is the default parameter if you do not define any other parameters in an annotation). In that case, the parameters can easily be misspelled and the IDE does not give you any support for the parameters simply because the IDE does not know anything about the format of the string that configures Java::Geci. On the other hand, if you have your own annotations you are free to define any named parameters. In this example, we defined the method <code>methodName</code> in the interface. Java::Geci is reading the parameters of the annotation as well as parsing the <code>value</code> string for parameters. That way some generators may use their own annotations that help the users with the parameters defined as annotation parameters.

The last version of our third "Hello, World!" application is perhaps the simplest:

[code lang=java]
package javax0.geci.tutorials.hello;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

public class HelloWorld3b {
    //&lt;editor-fold id=&quot;HelloWorld3&quot; methodName = &quot;hiyaNyunad&quot;&gt;
    //&lt;/editor-fold&gt;
}
[/code]

There is no annotation on the class, and there is no comment that would look like an annotation. The only thing that is there an <code>editor-fold</code> segment that has the <code>id</code> <code>HelloWorld3</code>, which is the mnemonic of the generator. If it exists there, the <code>AbstractJavaGenerator</code> realizes that and reads the parameters from there. (Btw: it reads extra parameters that are not present on the annotation even if the annotation is present.) And not only reads the parameters but also calls the concrete implementation, so the code is generated. This approach is the simplest and can be used for code generators that need only one single segment to generate the code into, and when they do not need separate configuration options for the methods and fields that are in the class.

<h1>Summary</h1>

In this article, I described how you can write your own generator and we also delved into how the annotations can be used to configure the class that needs generated code. Note that some of the features discussed in this article may not be in the release version but you can download and build the (b)leading edge version from https://github.com/verhas/javageci.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2077</wp:post_id>
  <wp:post_date>2019-05-08 16:00:16</wp:post_date>
  <wp:post_date_gmt>2019-05-08 15:00:16</wp:post_date_gmt>
  <wp:post_modified>2019-05-03 16:50:12</wp:post_modified>
  <wp:post_modified_gmt>2019-05-03 15:50:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-a-javageci-generator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[30590373993]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1557327653]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1126139920777719809";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27548</wp:comment_id>
    <wp:comment_author><![CDATA[Generating setters and getters using Java::Geci | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/05/29/generating-setters-and-getters-using-javageci/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.118.9</wp:comment_author_IP>
    <wp:comment_date>2019-05-29 16:01:35</wp:comment_date>
    <wp:comment_date_gmt>2019-05-29 15:01:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article , we created very simple hello-world generators to introduce the framework and how to generate [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559142096.506127;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559146881.411154;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559200816]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559200817.190261;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27566</wp:comment_id>
    <wp:comment_author><![CDATA[Producing setters and getters utilizing Java::Geci | Howdy Android - Android World]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.hello-android.com/2019/06/02/producing-setters-and-getters-utilizing-javageci-howdy-android/</wp:comment_author_url>
    <wp:comment_author_IP>23.239.65.122</wp:comment_author_IP>
    <wp:comment_date>2019-06-02 14:07:50</wp:comment_date>
    <wp:comment_date_gmt>2019-06-02 13:07:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the article , we created quite simple hello-world mills to introduce the framework and tips on how to generate [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559480870.912707;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559562553]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559562553.789217;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559485154.193307;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28314</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:20</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Creating a Java::Geci generator [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424860.871504;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420020.305743;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546231]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546231.561695;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Lazy assignment in Java]]></title>
  <link>https://javax0.wordpress.com/2019/05/15/lazy-assignment-in-java/</link>
  <pubDate>Wed, 15 May 2019 14:00:02 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2095</guid>
  <description/>
  <content:encoded><![CDATA[Programmers are inherently lazy, and <i>similis simili gaudet</i>, like when the programs are lazy. Have you ever heard of lazy loading? Or lazy singleton? (I prefer the single malt version, though.) If you are programming in Scala or Kotlin, a JVM language, you can even lazily evaluate expressions.

If you are programming in Scala, you can write:

[code lang="scala"]
lazy val z = &quot;Hello&quot;
[/code]

and the expression will only be evaluated when <code>z</code> is accessed the first time. If you program in Kotlin, you can write something like

[code lang="java"]
val z: String by lazy { &quot;Hello&quot; }
[/code]

and the expression will only be evaluated when <code>z</code> is accessed the first time.

Java does not support that lazy evaluation per se, but being a powerful language, it provides language elements that you can use to have the same result. While Scala and Kotlin give you the fish, Java teaches you to catch your fish. (Let's put a pin in this thought.)

What happens in the background when you code the above lines in Scala or Kotlin is that the expression is not evaluated, and the variable will not hold the result of the expression. Instead, the languages create some virtual "lambda" expressions, a 'supplier' that the code will later use to calculate the expression's value.

We can do that ourselves in Java. We can use a simple class, <code>Lazy</code> that provides the functionality:

[code lang="java"]
public class Lazy implements Supplier {

final private Supplier supplier;
private boolean supplied = false;
private T value;

private Lazy(Supplier supplier) {
this.supplier = supplier;
}

public static  Lazy let(Supplier supplier) {
return new Lazy(supplier);
}

@Override
public T get() {
if (supplied) {
return value;
}
supplied = true;
return value = supplier.get();
}
}
[/code]

The class has the <code>public static</code> method <code>let()</code> that can be used to define a supplier and this supplier is invoked the first time the method <code>get()</code> is invoked. With this class, you can write the above examples as

[code lang="java"]
var z = Lazy.let( () -&gt; &quot;Hello&quot; );
[/code]

By the way, it seems to be even simpler than the Kotlin version. You can use the class from the library:

[code lang="xml"]
&lt;groupId&gt;com.javax0&lt;/groupId&gt;
&lt;artifactId&gt;lazylet&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
[/code]

and then you do not need to copy the code into your project. It is a micro-library that contains only this class with an inner class that makes <code>Lazy</code> usable in a multi-thread environment.

The use is simple as demonstrated in the unit tests:

[code lang="java"]
private static class TestSupport {
int count = 0;

boolean callMe() {
count++;
return true;
}
}

...

final var ts = new TestSupport();
var z = Lazy.let(ts::callMe);
if (false &amp;&amp; z.get()) {
Assertions.fail();
}
Assertions.assertEquals(0, ts.count);
z.get();
Assertions.assertEquals(1, ts.count);
z.get();
Assertions.assertEquals(1, ts.count);
[/code]

To get the multi-thread safe version you can use the code:

[code lang="java"]
final var ts = new TestSupport();
var z = Lazy.sync(ts::callMe);
if (false &amp;&amp; z.get()) {
Assertions.fail();
}
Assertions.assertEquals(0, ts.count);
z.get();
Assertions.assertEquals(1, ts.count);
z.get();
Assertions.assertEquals(1, ts.count);
[/code]

and get a <code>Lazy</code> supplier that multiple threads can use, and it is still guaranteed that the supplier passed as argument is evaluated only once.

<h2>Giving you a fish or teaching you to fish</h2>

I said to put a pin in the note, "While Scala and Kotlin give you the fish, Java teaches you to catch your fish." Here is what I meant by that.

Many programmers write programs without understanding how the programs execute. They program in Java, and they write excellent and working code, but they have no idea how the underlying technology works. They have no idea about the class loaders, garbage collections. Or they do, but they do not know anything about the machine code that the JIT compiler generates. Or they even do that, but they have no idea about the processor caches, different memory types, hardware architecture. Or they know that but have no knowledge about microelectronics and lithography and how the layout of the integrated circuits are, how the electrons move inside the semiconductor, how quantum mechanics determines the non-deterministic inner working of the computer.

I do not say that you have to be a physicist and understand quantum mechanics' intricate details to be a good programmer. I recommend, however, to understand a few layers below your everyday working tools. If you use Kotlin or Scala, it is okay to use the lazy structures they provide. They give a programming abstraction one level higher than what Java provides in this specific case. But it is vital to know how the implementation probably looks like. If you know how to fish, you can buy the packaged fish because you can tell when the fish is good. If you do not know how to fish, you will rely on the mercy of those who give you the fish.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2095</wp:post_id>
  <wp:post_date>2019-05-15 15:00:02</wp:post_date>
  <wp:post_date_gmt>2019-05-15 14:00:02</wp:post_date_gmt>
  <wp:post_modified>2021-02-10 11:56:38</wp:post_modified>
  <wp:post_modified_gmt>2021-02-10 10:56:38</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>lazy-assignment-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1128661652419883008";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1557928881]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[30835293201]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27509</wp:comment_id>
    <wp:comment_author><![CDATA[Lazy task in Java | Hiya Android - Android World]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.hello-android.com/2019/05/19/lazy-task-in-java-hiya-android/</wp:comment_author_url>
    <wp:comment_author_IP>23.239.65.122</wp:comment_author_IP>
    <wp:comment_date>2019-05-19 13:37:36</wp:comment_date>
    <wp:comment_date_gmt>2019-05-19 12:37:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Printed on Hiya Android with permission by Peter Verhas, companion at our JCG program. See the unique article right here: Lazy task in Java [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1558269457.832943;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1558273774.512868;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558351942]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1558351942.696802;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27510</wp:comment_id>
    <wp:comment_author><![CDATA[evik]]></wp:comment_author>
    <wp:comment_author_email>evikgm@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.63.27.7</wp:comment_author_IP>
    <wp:comment_date>2019-05-20 01:03:54</wp:comment_date>
    <wp:comment_date_gmt>2019-05-20 00:03:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I suggested a change and did not imply that it is the only way to go, for me it seemed more flexible.
In case 1 the caller on subsequent calls has no means to tell the difference between a problem and a valid calculation as null might be a valid value.
In case 2 if there are side effects that should happen only once and are repeated because of the exception then it is a design problem.
Case 3 does not allow a chance to recover from an intermittent error (like network problem).

Both case 1 and 3 are closing on the error and does not have the flexibility to recover. If you go with the second variation you can still add some code around to get the more fixed solutions if that is needed.

Btw both Kotlin and Scala implements lazy with retries on exceptions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27504</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558310636]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1558310637.229396;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1558310637]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27501</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.67</wp:comment_author_IP>
    <wp:comment_date>2019-05-17 11:10:46</wp:comment_date>
    <wp:comment_date_gmt>2019-05-17 10:10:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[lorek, I know you from a long time ago. I can assure you, that you are not a bad programmer. If you said that in the field of programming I am more of an expert I accept that. There are other knowledge areas where you excel more. For example quantum mechanics. I am absolutely sure that you know more about the characteristics of the distribution function of the electrons in a covalently binding hydrogen molecule than what I know.

Knowledge and experience in a specific area is not an absolute value.

I am happy that you still keep reading my blogs. By the way, this also shows that you are not a bad programmer. A bad programmer by accident may read some of my articles, but no bad programmer would keep reading them all, and I know you do. Appreciate.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27500</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558087847]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1558087848.012038;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1558087848]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27500</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>168.149.159.6</wp:comment_author_IP>
    <wp:comment_date>2019-05-17 11:02:35</wp:comment_date>
    <wp:comment_date_gmt>2019-05-17 10:02:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am a "fallen physicist" understanding all the layers you mentioned but still feeling under educated and after all a bad programmer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558087355]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1558087355.793118;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1558087355]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27502</wp:comment_id>
    <wp:comment_author><![CDATA[evik]]></wp:comment_author>
    <wp:comment_author_email>evikgm@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.63.27.7</wp:comment_author_IP>
    <wp:comment_date>2019-05-17 16:59:02</wp:comment_date>
    <wp:comment_date_gmt>2019-05-17 15:59:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I am not sure how Kotlin or Scala handles it but in your solution if supplier throws an exception then Lazy starts to return null values instead of trying again. I would suggest to set supplied to true only after getting the result to avoid this.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1558108743.781487;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1558112810.40992;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1558121329]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558121329]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1558121330.562488;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27504</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-05-17 22:02:06</wp:comment_date>
    <wp:comment_date_gmt>2019-05-17 21:02:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, this is a non-defined functionality that can be imagined in many different ways.

<ol>
<li>The current implementation will just return null for all subsequent calls, which makes sense because the value was not set.</li>
<li><p>Your proposed behavior would repeatedly try to call the supplier that will trigger the side effects so many times as many times the method get() is invoked.</p></li>
<li><p>I can also imagine a solution that throws the exception if it happens at the first invocation of the method get() and then it is thrown again if get() is invoked again.</p></li>
</ol>

<p>Why your solution is the only real one and any other behavior a misnomer?</p>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27502</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1558126927]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1558126928.297479;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1558126928]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Box old objects to be autoclosable]]></title>
  <link>https://javax0.wordpress.com/2019/05/22/box-old-objects-to-be-autoclosable/</link>
  <pubDate>Wed, 22 May 2019 14:00:26 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2102</guid>
  <description/>
  <content:encoded><![CDATA[Since Java 7 we can use try-with-resources and have any object automatically closed that implements the <code>Autocloseable</code> interface. If the resource <em>is</em> <code>Autocloseable</code>. Some of the classes need some wrap-up but are not <code>Autocloseable</code>. These are mainly old classes in some legacy framework that still get in our way to make us trip up. Nobody is using Struts any more, but still, there are enough old frameworks that are there lurking in the dark and with which we have to live. I recently had that experience and I was so motivated that I created a simple <code>AutoCloser</code> class.

We may have a legacy class (in the example this is a mocking inner class of the testing class)

[code lang=java]
    public class NotAutoclosable {
        public NotAutoclosable() {
            opened = true;
        }

        public void dispose() {
            opened = false;
        }
    }
[/code]

which is not auto-closeable as the name also implies. It does not implement the <code>Autocloseable</code> interface and it does not have a <code>close()</code> method. It has to be disposed calling the aptly named method <code>dispose()</code>. (The <code>boolean</code> field <code>opened</code> is used to check later in the unit test to assert the correct functioning of the <code>AutoCloser</code> class.)

The use of the class looks as follows:

[code lang=java]
    @Test
    void test() {
        final NotAutoclosable notAu;
        try (final var s = AutoCloser.useResource(new NotAutoclosable())
                .closeWith(sp -&gt; sp.get().dispose())) {
            Assertions.assertTrue(opened);
        }
        Assertions.assertFalse(opened);
    }
[/code]

We create the resource using the constructor of the inner class and we also define a <code>Consumer</code> that will "close" the resource. This consumer will get the same <code>Supplier</code> that is stored in the variable <code>s</code>.

Side note: this functional argument has to be a consumer and cannot be a <code>Runnable</code> using the variable <code>s</code> because that variable is not initialized when the lambda expression is evaluated as a lambda expression. When it is going to be used it will already be defined but that is too late for the Java compiler, it does not trust the programmer that much and usually, it does it with good reason.

The <code>AutoCloser</code> class is the following:

[code lang=java]
public class AutoCloser&lt;T&gt; {

    private final T resource;

    private AutoCloser(T resource) {
        this.resource = resource;
    }

    public static &lt;T&gt; AutoCloser&lt;T&gt; useResource(T resource) {
        return new AutoCloser&lt;&gt;(resource);
    }

    public AutoClosableSupplier closeWith(Consumer&lt;Supplier&lt;T&gt;&gt; closer){
        return new AutoClosableSupplier(closer);
    }

    public class AutoClosableSupplier implements Supplier&lt;T&gt;, AutoCloseable {
        private final Consumer&lt;Supplier&lt;T&gt;&gt; closer;

        private AutoClosableSupplier(Consumer&lt;Supplier&lt;T&gt;&gt; closer) {
            this.closer = closer;
        }

        @Override
        public T get() {
            return resource;
        }

        @Override
        public void close() {
            closer.accept(this);
        }

    }
}
[/code]

The inner <code>AutoClosableSupplier</code> class is used because we do not want the programmer accidentally forget to specify the lambda that will finally close the resource.

This is nothing really serious. It is just a programming style that moves the closing of the resource close to the opening of the resource a bit like the <code>deferred</code> statement in the Go language.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2102</wp:post_id>
  <wp:post_date>2019-05-22 15:00:26</wp:post_date>
  <wp:post_date_gmt>2019-05-22 14:00:26</wp:post_date_gmt>
  <wp:post_modified>2019-05-20 15:02:51</wp:post_modified>
  <wp:post_modified_gmt>2019-05-20 14:02:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>box-old-objects-to-be-autoclosable</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31068259127]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1558533755]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1131198668378451968";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7cf8b41f62952e0944abf3520e75afd8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9ca3005f82da3e8bd1b1186b03f9be9b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27567</wp:comment_id>
    <wp:comment_author><![CDATA[zazzo73]]></wp:comment_author>
    <wp:comment_author_email>stefanofago@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.20.90.33</wp:comment_author_IP>
    <wp:comment_date>2019-06-02 15:08:36</wp:comment_date>
    <wp:comment_date_gmt>2019-06-02 14:08:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ok... Mr. Verhas, I think here we are...
https://github.com/stefanofago73/autocloseable-experiments
I've also put some other ideas inside... but are all experiments ( i need time.. aarrgghhh). I like internal DSL (in recent past I've also made some research about it) and it's really interesting the double-dispatch (we can call it in this way? it seems like a visitor) of your solution... again... sorry for the time you've lost 'cause me and thank you for all ...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27564</wp:comment_parent>
    <wp:comment_user_id>148174939</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559484517.573848;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"zazzo73";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31456336228]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559562499]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559562499]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559562500.511536;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27579</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.21</wp:comment_author_IP>
    <wp:comment_date>2019-06-05 09:14:02</wp:comment_date>
    <wp:comment_date_gmt>2019-06-05 08:14:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had a good look at your code. I saw no major architectural difference between your versions and what I described. I used a simple call chain/fluent API kind of structure to get the resource as well as to force the declaration of the closing function.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27558</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559722443]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559722444.291438;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31518237034]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559722445]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27564</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-06-02 12:36:42</wp:comment_date>
    <wp:comment_date_gmt>2019-06-02 11:36:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I still would love a repository URL that I can clone to my dev machine and look at the code in my IDE. Gists solve the formatting but it is still difficult to download the files one by one and create a project to start up. Thank you very much if you would do that.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31425433086]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559475405]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559475403]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559475404.337433;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27559</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-06-01 15:14:17</wp:comment_date>
    <wp:comment_date_gmt>2019-06-01 14:14:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Btw: when you post code you can use markdown format.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27558</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559398458]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559398458.589814;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31400435692]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559398459]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27561</wp:comment_id>
    <wp:comment_author><![CDATA[zazzo73]]></wp:comment_author>
    <wp:comment_author_email>stefanofago@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.20.90.33</wp:comment_author_IP>
    <wp:comment_date>2019-06-01 15:54:30</wp:comment_date>
    <wp:comment_date_gmt>2019-06-01 14:54:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry! I've not thought about formatting... my fault... Here: https://gist.github.com/stefanofago73 can you find the complete code fragment of both versions... Thank You for All and Have a Nice Week End]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27558</wp:comment_parent>
    <wp:comment_user_id>148174939</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559438537.673189;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559438537]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559433429.535239;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31414202918]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559438537]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559400870.9301;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"zazzo73";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27558</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-06-01 15:13:43</wp:comment_date>
    <wp:comment_date_gmt>2019-06-01 14:13:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It is fairly difficult to follow these examples for two reasons:


They are not complete so when I try to comprehend I have to fill in the missing gaps with my assumptions about what you were thinking when you created the code. It is difficult and likely my assumptions are far from your intention.
The code is coded in an extremely compact way that may be appealing to some, but not professional in the sense that no professional code should be hard to apprehend for a mediocre programmer.


Since this is not a huge effort these days to publish such code into a public repository, could I ask you to create the simplest possible project out of your examples that include unit test samples about the use of the code and post here the repository URL? That will also benefit other readers.

As for now and as far as I can see your example is not radically different from what I described in the article. Your version is less readable for me and the expressiveness of the API is not as strong as a fluent API. Note though, that expressiveness is a very subjective term in this case.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27557</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559398424]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559398425.04601;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31400422999]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559398425]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27557</wp:comment_id>
    <wp:comment_author><![CDATA[zazzo73]]></wp:comment_author>
    <wp:comment_author_email>stefanofago@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.20.90.33</wp:comment_author_IP>
    <wp:comment_date>2019-06-01 14:49:47</wp:comment_date>
    <wp:comment_date_gmt>2019-06-01 13:49:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mr. Verhas,

thx for your posts and your work. I take only a moment for question: what differences can we spot with this version, instead of using a simple wrapper? To be clear, it isn't a critic: I'm only studying the different interpretations of the same problem, summarizing pro/con, nothing more...

I've researched for something similar but I've found two "strange" solutions (my trade-off are related also to have a compact form, code maintenance, and so on...):

DIRTY:

[code lang="java"]
public class AutoCloserDirty {
    public static final &lt;S&gt; AutoCloseable autoclose(S element, Consumer&lt;S&gt; elementInvocation) {
        return ((BiFunction&lt;S, Consumer&lt;S&gt;, AutoCloseable&gt;)
                  (subject, callback) -&gt; () -&gt; callback.accept(subject)).apply(element, elementInvocation));
    }
}
[/code]

...so i can write:

[code lang="java"]
try( AutoCloseable c = autoclose(service, IService::destroy)){
    service.execute(&quot;Hello World!&quot;);
    } catch (Exception e) { 
    e.printStackTrace(); 
    } // dirty for the catch!...
[/code]

LEAN:

[code lang="java"]
public class AutoCloserLean {
    public static final &lt;S&gt; LeanCloseable&lt;S&gt; autoclose(S element, Consumer&lt;S&gt; elementInvocation) {
        return new LeanCloseable&lt;S&gt;(element, elementInvocation);
    }
}// END
[/code]

...where <code>LeanCloseable</code> is something similar to your inner class ...so i can write:

[code lang="java"]
try (LeanCloseable service = autoclose(new Service(), IService::destroy)) { 
    service.get().execute(&quot;Hello World!&quot;); 
    }
[/code]

Thank You for your time!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>148174939</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559396988.229208;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"zazzo73";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31399905109]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559397091]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559397091]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559397092.140756;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Generating setters and getters using Java::Geci]]></title>
  <link>https://javax0.wordpress.com/2019/05/29/generating-setters-and-getters-using-javageci/</link>
  <pubDate>Wed, 29 May 2019 15:00:14 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2117</guid>
  <description/>
  <content:encoded><![CDATA[In the <a href="https://javax0.wordpress.com/2019/05/08/creating-a-javageci-generator/">article </a>, we created very simple hello-world generators to introduce the framework and how to generate generators generally. In this article, we will look at the accessor generator, which is defined in the core module of Java::Geci and which is a commercial grade and not a demo-only generator. Even though the generator is commercial grade, using the services of the framework it has simple code so that it can be represented in an article.

<h1>What does an accessor generator</h1>

Accessors are setters and getters. When a class has many fields and we want to help encapsulation we declare these fields to be <code>private</code> and create setters and getters, a pair for each field that can set the value for the field (the setter) and can get the value of the field (the getter). Note that contrary to what many juniors think creating setters and getters is not encapsulation by itself, but it may be a tool to do proper encapsulation. And the same time note that it also may NOT be a tool for proper encapsulation. You can read more about it in "Joshua Bloch: Effective Java 3rd Edition" Item 16.

Read it with a bit of caution though. The book says that it was updated for Java 9. That version of Java contains the module system. The chapter Item 16 does not mention it and even this edition still says to use private members with setters and getters for public classes, which in case of Java 9 may also mean classes in packages that the module does not export.

Many developers argue that setters and getters are inherently evil and a sign of bad design. Don't make a mistake! They do not advocate to use the raw fields directly. That would even be worse. They argue that you should program with a more object-oriented mindset. In my opinion, they are right and still in my professional practice I have to use a lot of classes maintaining legacy applications using legacy frameworks containing setters, getters, which are needed by the programming tools around the application. Theory is one thing and real life is another. Different integrated development environments and many other tools like generate setters and getters for us unless we forget to execute them when a new field was added.

A setter is a method that has an argument of the same type as the field and returns <code>void</code>. (A.k.a. does not return any value.) The name of the setter, by convention, is <code>set</code> and the name of the field with the first letter capitalized. For the field <code>businessOwner</code> the setter is usually <code>setBusinessOwner</code>. The setter sets the value of the field to that of the argument of the setter.

The getter is also a method which does not have any argument but returns the argument value and hence it has the same return type as the type of the field. The name of the getter, by convention, is <code>get</code> and again the name of the field capitalized. That way the getter will be <code>getBusinessOwner</code>.

In case of <code>boolean</code> or <code>Boolean</code> type fiels the getter may have the <code>is</code> prefix, so <code>isBusinessOwner</code> could also be a valid name in case the field is some boolean type.

An accessor generates setter and getter for all the fields it has to.

<h1>How to generate accessors</h1>

The accessor generator has to generate code for some of the fields of the class. This generator is the ideal candidate for a filtered field generator in Java::Geci. A filtered field generator extends the <code>AbstractFilteredFieldsGenerator</code> class and its <code>process()</code> method is invoked once for each filtered field. The method also gets the <code>Field</code> as a third parameter in addition to the usual <code>Source</code> and <code>CompoundParams</code> parameter that we already saw in the <a href="https://javax0.wordpress.com/2019/05/08/creating-a-javageci-generator/">article a few weeks ago</a>.

The class <code>AbstractFilteredFieldsGenerator</code> uses the configuration parameter <code>filter</code> to filter the fields. That way the selection of which field to take into account is the same for each generator that extends this class and the generators should not care about field filtering: it is done for them.

The major part of the code of the generator is the following:

[code lang=java]
public class Accessor extends AbstractFilteredFieldsGenerator {

    ...

    @Override
    public void process(Source source, Class&lt;?&gt; klass, 
                        CompoundParams params, 
                        Field field) throws Exception {
        final var id = params.get(&quot;id&quot;);
        source.init(id);
        var isFinal = Modifier.isFinal(field.getModifiers());
        var name = field.getName();
        var fieldType = GeciReflectionTools.typeAsString(field);
        var access = check(params.get(&quot;access&quot;, &quot;public&quot;));
        var ucName = cap(name);
        var setter = params.get(&quot;setter&quot;, &quot;set&quot; + ucName);
        var getter = params.get(&quot;getter&quot;, &quot;get&quot; + ucName);
        var only = params.get(&quot;only&quot;);
        try (var segment = source.safeOpen(id)) {
            if (!isFinal &amp;&amp; !&quot;getter&quot;.equals(only)) {
                writeSetter(name, setter, fieldType, access, segment);
            }
            if (!&quot;setter&quot;.equals(only)) {
                writeGetter(name, getter, fieldType, access, segment);
            }
        }
    }
}
[/code]

The code at the place of the ellipsis contains some more methods, which we will look at later. The first call is to get the parameter <code>id</code>. This is a special parameter and in case it is not defined then default <code>params.get("id")</code> returns is the mnemonic of the generator. This is the only parameter that has such a global default value.

The call to <code>source.init(id)</code> ensures that the segment will be treated as "touched" even if the generator does not write anything to that segment. It may happen in some cases and when writing a generator it never hurts calling <code>source.init(id)</code> for any segment that the generator intends to write into.

The code looks at the actual field to check if the field is final. If the field is final then it has to get the value by the time the object is created and after that, no setter can modify it. In this case, only a getter will be created for the field.

The next thing the setter/getter generator needs is the name of the field and also the string representation of the type of the field. The static utility method <code>GeciReflectionTools.typeAsString()</code> is a convenience tool in the framework that provides just that.

The optional configuration parameter <code>access</code> will get into the variable of the same name and it will be used in case the access modifier of the setter and the getter needs to be different from <code>public</code>. The default is <code>public</code> and this is defined as the second argument to the method <code>params.get()</code>. The method <code>check()</code> is part of the generator. It checks that the modifier is correct and prevents in most cases generation of syntax errored code (e.g.: creating setters and getter with access modifier <code>pritected</code>). We will look at that method in a while.

The next thing is the name of the getter and the setter. By default is <code>set/get</code>+ capitalized name of the field, but it can also be defined by the configuration parameter <code>setter</code> and <code>getter</code>. That way you can have <code>isBusinessOwner</code> if that is an absolute need.

The last configuration parameter is the key <code>only</code>. If the code specifies <code>only='setter'</code> or <code>only='getter'</code> then only the setter or only the getter will be generated.

The segment the generator wants to write into is opened in the head of the try-with-resources block and then calls local <code>writeSetter</code> and <code>writeGetter</code> methods. There are two different methods to open a segment from a source object. One is calling <code>open(id)</code>, the other one if <code>safeOpen(id)</code>. The first method will try to open the segment and if the segment with the name is not defined in the class source file then the method will return <code>null</code>. The generator can check the nullity and it has the possibility to use a different segment name if it is programmed so. On the other hand <code>safeOpen()</code> throws a <code>GeciException</code> if the segment cannot be opened. This is the safer version to avoid later null pointer exceptions in the generator. Not nice.

Note that the setter is only written if the field is not final and if the <code>only</code> configuration key was NOT configured to be <code>getter</code> (only).

Let's have a look at these two methods. After all, these are the real core methods of the generators that do actually generate code.

[code lang=java]
    private static void writeGetter(String name, String getterName,
                                    String type, String access, Segment segment) {
        segment.write_r(access + &quot; &quot; + type + &quot; &quot; + getterName + &quot;(){&quot;)
                .write(&quot;return &quot; + name + &quot;;&quot;)
                .write_l(&quot;}&quot;)
                .newline();
    }

    private static void writeSetter(String name, String setterName,
                                    String type, String access, Segment segment) {
        segment.write_r(access + &quot; void &quot; + setterName + &quot;(&quot; +
                type + &quot; &quot; + name + &quot;){&quot;)
                .write(&quot;this.&quot; + name + &quot; = &quot; + name + &quot;;&quot;)
                .write_l(&quot;}&quot;)
                .newline();
    }
[/code]

The methods get the name of the field, the name of the accessor, the type of the field as a string, the access modifier string and the <code>Segment</code> the code has to be written into. The code generators do not write directly into the source files. The segment object provided by the framework is used to send the generated code and the framework inserts the written lines into the source code if that is needed.

The <code>write()</code>, <code>write_l()</code> and <code>write_r()</code> methods of the segment can be used to write code. They work very much like <code>String.format</code> if there are more than one parameters, but they also care about the proper tabulating. When the code invokes <code>write_r()</code> then the segment will remember that the lines following it have to be tabulated four spaces to the right more. When the code calls  <code>write_l()</code> then the segment knows that the tabulation has to be decreased by four characters (even for the actual written line). They also handle multi-line strings so that they all will be properly tabulated.

<blockquote>Generated code should also be readable.</blockquote>

The final non-trivial method is the access modifier check.

[code lang=java]
    private static final Set&lt;String&gt; accessModifiers =
            Set.of(&quot;public&quot;, &quot;private&quot;, &quot;protected&quot;, &quot;package&quot;);
...

    private String check(final String access) {
        if (!access.endsWith(&quot;!&quot;) &amp;&amp; !accessModifiers.contains(access)) {
            throw new GeciException(&quot;&#039;&quot;+access+&quot;&#039; is not a valid access modifier&quot;);
        }
        final String modifiedAccess;
        if( access.endsWith(&quot;!&quot;)){
            modifiedAccess = access.substring(0,access.length()-1);
        }else {
            modifiedAccess = access;
        }
        if( modifiedAccess.equals(&quot;package&quot;)){
            return &quot;&quot;;
        }
        return modifiedAccess;
    }
[/code]

The purpose of this check is to protect the programmer from mistyping the access modifier. It checks that the access modifier is either <code>private</code> (I do not see a real use case for this one though), <code>protected</code>, <code>public</code> or <code>package</code>. The last one is converted to an empty string, as the package protected access is the default for class methods. The same time using the empty string in the configuration to denote package private access is not really readable.

That way if the code is configured <code>pritected</code> including a typo the code generator will throw an exception and refuses to generate code that is known to contain syntax error. On the other hand, the access modifier can also be more complex. In some rare cases, the program may need synchronized getters and setters. We do not try to figure out automatically anything like that checking if the field is volatile or such, because these are border cases. However, the generator provides a possibility to overcome the limited syntax checking and that way just to provide any string as access modifier. If the access modifier string ends with an exclamation mark then it means the programmer using the generator takes full responsibility for the correctness of the access modifier and the generator will use it as it is (without the exclamation mark of course).

What is left are the methods <code>mnemonic</code> and <code>cap</code>:

[code lang=java]
    private static String cap(String s) {
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }

    @Override
    public String mnemonic() {
        return &quot;accessor&quot;;
    }
[/code]

The method <code>mnemonic()</code> is used by the framework to identify the sources that need the service of this generator and also to use it as a default value for the configuration parameter <code>id</code>. All generators should provide this. The other one is <code>cap</code> that capitalizes a string. I will not explain how it works.

<h1>Sample use</h1>

[code lang=java]
@Geci(&quot;accessor filter=&#039;private | protected&#039;&quot;)
public class Contained1 {

    public void callMe() {

    }

    private final String apple = &quot;&quot;;
    @Geci(&quot;accessors only=&#039;setter&#039;&quot;)
    private int birnen;

    int packge;

    @Geci(&quot;accessor access=&#039;package&#039; getter=&#039;isTrue&#039;&quot;)
    protected boolean truth;
    @Geci(&quot;accessor filter=&#039;false&#039;&quot;)
    protected int not_this;

    public Map&lt;String,Set&lt;Map&lt;Integer,Boolean&gt;&gt;&gt; doNothingReally(int a, Map b, Set&lt;Set&gt; set){
        return null;
    }

    //&lt;editor-fold id=&quot;accessor&quot; desc=&quot;setters&quot;&gt;

    //&lt;/editor-fold&gt;

}
[/code]

The class is annotated with the <code>Geci</code> annotation. The parameters is <code>accessor filter='private | protected'</code> that defines the name of the generator to be used on this source file and configures the filter. It says that we need setters and getters for the fields that are private and protected. The logical expression should be read: "filter the field is it is private or protected".

Some of the fields are also annotated. <code>birnen</code> will get only a setter, <code>truth</code> setter and getter will be package protected and the getter will be named <code>isTrue()</code>. The field <code>not_this</code> will not get a setter or getter because the filter expression is overridden in the field annotation and it says: <code>false</code> that will never be <code>true</code>, which is needed to be processed by the generator.

The field <code>apple</code> is not annotated and will be processed according to the class level configuration. It is private therefore it will get accessor and because it is <code>final</code> it will get only a getter.

The code between the

[code lang=text]
    //&lt;editor-fold id=&quot;accessor&quot; desc=&quot;setters&quot;&gt;

    //&lt;/editor-fold&gt;
[/code]

will contain the generated code. (You have to run the code to see it, I did not copy it here.)

<h1>Summary</h1>

In this article, we looked at a generator, which is a real life, commercial grade generator in the Java::Geci framework. Walking through the code we discussed how the code works, but also some other, more general aspects of writing code generators. The next step is to start a project using Java::Geci as a test dependency, use the accessor generator instead of the IDE code generator (which lets you forget to re-execute the setter getter generation) and later, perhaps you can create your own generators for even more complex tasks than just setters and getters.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2117</wp:post_id>
  <wp:post_date>2019-05-29 16:00:14</wp:post_date>
  <wp:post_date_gmt>2019-05-29 15:00:14</wp:post_date_gmt>
  <wp:post_modified>2019-05-17 11:00:05</wp:post_modified>
  <wp:post_modified_gmt>2019-05-17 10:00:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>generating-setters-and-getters-using-javageci</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31301532731]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1133750229558276096";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1559142093]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_672f5f9bb89316327ffd791166a80d89</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8d1ab5681833538900f432576261a90d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27555</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.21</wp:comment_author_IP>
    <wp:comment_date>2019-05-31 09:32:35</wp:comment_date>
    <wp:comment_date_gmt>2019-05-31 08:32:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The selection of the name was on purpose. It is an abbreviation that stands for GEnerate Code Inline.

About the "How about lombok?" have a look at

https://github.com/verhas/javageci/blob/master/FAQ.md

I added a section to the end:

Lombok is a special annotation processor that modifies the abstract
syntax tree (AST) during its execution. There are multiple issues with
such behavior that the project using it should live with. Before
deciding lombok you have to decide if you can and if you want to
live with these:

<ul>
<li>The way Lombok works altering the AST it also modifies the Java
language syntax. In some sense when you code using Lombok you are
programing in a Java language with a Lombok flavor. This may also be
a concern when you want to hire a developer to maintain the code: they
have to know the lombok flavour. It may not be a big deal or it may
be.</li>
<li>The possibility to modify the AST is not part of the guaranteed API
for the annotation processing tools. It means that Lombok may not work
with some implementation of the Java compiler including future
versions.</li>
<li>There is no real source code generated by Lombok. The modified AST is
fed into the compiler. That way debugging may be a bit harder when you
want to put a breakpoint into somewhere the generated code. You can
argue that this is not an issue, because you should not be debugging
generated code. However, where would you put the breakpoint when you
want to stop every time a setter is invoked. It is the body of the
setter even you do not want to debug the setter itself. (See a few
words about delombok later.)</li>
<li>Because there is no generated source code Lombok has to be part of the
whole build process. It has to be available on the developer machine
as well as on the CI server. </li>
<li>You can get rid of lombok. There is a project delombok that generates
the source code for the functionality. This functionality is designed
to get rid of lombok from a project and not to live with it 
continuously. After the code changed it is not trivial to get rid of
the already generated and not needed code and to insert the new code.</li>
<li>Lombok was not designed to be a framework for code generators. You
have the generators that are available and that it mainly it. It is
not impossible to write new generators into the Lombok project but it
is not trivial and, mainly, it was not designed for that purpose.
Java::Geci, on the other hand, is mainly a library/framework that
provides API to write your own generators and the generators
implemented in the <code>core</code> module are there as examples. Yes, we know
that most of the developers will only use these generators, but we
also have the hope that other developers will create generators of
their own. There are already examples in some source code proprietary
projects.</li>
</ul>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27553</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559291557]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559291557.711345;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1559291558]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27553</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>199.247.40.107</wp:comment_author_IP>
    <wp:comment_date>2019-05-30 21:55:58</wp:comment_date>
    <wp:comment_date_gmt>2019-05-30 20:55:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Funny name, I cannot believe it was not on purpose. How about Lombook? https://projectlombok.org/]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559249759.062463;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559254827.374091;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1559290300]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559290300]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559290300.821543;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27570</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>93.212.244.160</wp:comment_author_IP>
    <wp:comment_date>2019-06-03 23:38:07</wp:comment_date>
    <wp:comment_date_gmt>2019-06-03 22:38:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I guess, I should have chosen a different word. It's just that I love Lombok and dislike extensive criticism of it - it's a fantastic tool and IMHO should get more support (with a tiny bit of support from Oracle, it could turn from a hacky solution to a standard tool).

I didn't and don't claim that you had any bad intentions with your comparison. I also see, I haven't read your FAQ carefully enough (breakpoints) and haven't thought far enough (build process).

Thank you for the update. I don't feel a need for forking. I might want to add a sentence like 
"Lombok is a different kind of tool" (but I don't know where I'd fit well) as I can imagine using a source code generator in addition to Lombok (I actually do it already on a tiny project).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>150283678</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559601487]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559601487.880249;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31473183448]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559601488]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28313</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:18</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Generating Getters and Setters using Java::Geci [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424860.483126;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420018.91857;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546231]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546232.37263;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27565</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.79.60.72</wp:comment_author_IP>
    <wp:comment_date>2019-06-02 13:56:07</wp:comment_date>
    <wp:comment_date_gmt>2019-06-02 12:56:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I tend to disagree with you. Even though I updated the FAQ. If you feel that the verbiage is still FUD like, you are welcome to make a fork, modify the FAQ.md and create a pull request. It is <strong>not</strong> my intention to make it FUD like. There is no incentive to "fight against Lombok". The FAQ simply compares the two solutions.

Having that said, factually:


breakpoints: The FAQ does not say it is not possible to put a breakpoint into the generated code. Eclipse can put a breakpoint on a method that does not exist in the source code. The FAQ says: "That way debugging may be a bit harder when you want to put a breakpoint into somewhere the generated code." I think that the fact that the cited StackOverflow article exists proves that it is indeed "harder" to put a breakpoint there.
build process: There can be other reasons that a library available on the development machine is not available on the CI server than just simply forgetting. As a matter of fact, you selected the least likely reason. The real reason can be that corporate policy may not allow Lombok to be part of the ecosystem but at the same time, the same policy provides a bit of wider freedom for the developers what to use on their machines. I know one example of that, where this is the case.


Here is the changed part of the FAQ:

<blockquote>
    * There is no real source code generated by Lombok. The modified AST is
        fed into the compiler. That way debugging may be a bit harder when
        you want to put a breakpoint into somewhere the generated code. You
        can argue that this is not an issue, because you should not be
        debugging generated code. However, where would you put the
        breakpoint when you want to stop every time a setter is invoked? It
        is the body of the setter even you do not want to debug the setter
        itself. (See a few words about delombok later.) Some of the IDEs,
        like Eclipse or IntelliJ let you put a breakpoint on a method
        specifying the class and the name of the method. It is a bit more
        cumbersome than just clicking on the gutter on a specific line.
    * Because there is no generated source code Lombok has to be part of the
        whole build process. It has to be available on the developer machine
        as well as on the CI server. It is hardly ever a problem but in some
        corporate environment the policy may not allow Lombok to be used on
        the CI server but the same time there is larger freedom on the
        developers machine.
</blockquote>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31427063890]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559480169]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559480168]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559480169.180968;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27562</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>79.234.91.82</wp:comment_author_IP>
    <wp:comment_date>2019-06-01 23:33:17</wp:comment_date>
    <wp:comment_date_gmt>2019-06-01 22:33:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry, but the Lombok part of the FAQ sounds more like FUD, please improve it. Sure, Lombok is no substitute for Geci and the other way round.

Invalid points:
- breakpoints: https://stackoverflow.com/a/45357724/581205
- build process: This is only a problem when you're prone to forgetting to add your libraries. What happens when you forget to add e.g., Guava?

Valid but FUD-like formulated:
- Lombok flavor: I guess, there are people out there having problems to understand this flavor, but they most probably don't code in Java. Isn't that flavor just what many wished Java would look like? Especially with getters and setters, it just does what many other languages provide out of the box. 
- There is no real source code generated: Yes, and that's why I prefer it to any other tool. Without the generated boilderplate, my classes are much smaller and it's much easier to navigate. YMMV.
- can get rid of Lombok: Indeed, you can, and you're right that it's a sort of a one way ticket. You can do it regularly as a part of your build process, e.g., when you need the generated code for another tool (I do it in order to see how much boilerplate gets saved).. You can replace the source by the generated code, but that's only meant as the last resort. As long as Lombok works well, you won't do it.

That all said, I think I like Geci, especially the ingenious idea of running as a test.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27555</wp:comment_parent>
    <wp:comment_user_id>150283678</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31414158044]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559433429.641975;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559438378]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559438378]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559438378.942248;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559428397.919713;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27573</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.21</wp:comment_author_IP>
    <wp:comment_date>2019-06-04 14:32:04</wp:comment_date>
    <wp:comment_date_gmt>2019-06-04 13:32:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[May I reflect on your statement

"with a tiny bit of support from Oracle, it could turn from a hacky solution to a standard tool"

although this is very offtopic here since it is my blog I do not mind ;-)

At the same time, Java is not ORACLE's "blog" or product. It is important that this is not ORACLE who decides on different future features. It is a consortium that decides. ORACLE has great influence but is only one player and there is a clear and well-defined procedure who things get decided, sometimes against the will of ORACLE's representatives.

The support that Lombok misses is the API for AST modification. It is a hacky solution that works but it is not a guaranteed feature. The Java process has to vote and accept a guaranteed API. Thus, I think this is not ORACLE.

The other thing with a Lombok-like annotation-processing tool is that it can greatly change the language. It can go so far that you would not be able to tell what the code actually does. It can remove some code from the AST that is in the source and can add arbitrarily. In the case of Lombok, it is bearable. It is moderate and is within a certain limit so that it is a matter of state if you can live with the setters, getters and so on that is NOT in the code. It is a matter of taste.

However, having an AST modifying API defined and extensive support to make such annotation-processing tools easy to make would make the hell loose. In my opinion, this is the main reason why this API, used by Lombok, is not supported. Lombok is a nice playground, not for mission-critical production tools. It can be safely used in some projects. It can even safely be used in some commercial projects, knowing the risks. The advantage of the playground is that it shows in practice what features are valuable in real life and then when this knowledge is established then Java can accommodate the feature into the core language.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>27570</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559655126]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559655126.901865;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31492572938]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559655127]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27574</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.231.21</wp:comment_author_IP>
    <wp:comment_date>2019-06-04 14:34:19</wp:comment_date>
    <wp:comment_date_gmt>2019-06-04 13:34:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I would also like to thank you the comments. They are valuable and comments and feedbacks are the major rewards writing a blog. I would welcome if you could write an article or just a few words about your experiences. Keep your finger on the pulse of the project repo, there are new features every week, trying to keep backward compatibility.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1559655259]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1559655260.498926;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[31492632732]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1559655261]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[A New Era for Determining Equivalence in Java?]]></title>
  <link>https://javax0.wordpress.com/2019/10/23/a-new-era-for-determining-equivalence-in-java/</link>
  <pubDate>Wed, 23 Oct 2019 15:00:11 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2132</guid>
  <description/>
  <content:encoded><![CDATA[A few month ago I read a blog post of the title <a href="http://marxsoftware.blogspot.com/2019/04/new-java-equivalence.html?m=1">"A New Era for Determining Equivalence in Java?"</a> and it was somehow very much in line with what I developed that time in my current liebling side project <a href="https://github.com/verhas/javageci">Java::Geci</a>. I recommend that you pause reding here and read the original article and then return here, even knowing that telling that a sizable percentage of the readers will not come back. The article is about how to implement <code>equals()</code> and <code>hashCode()</code> properly in Java and some food for thoughts about how it should be or rather how it should have been. In this article, I will details these for those who do not read the original articles and I also add my thoughts. Partly how using Java::Geci addresses the problems and towards the end of my article how recursive data structures should be handled in <code>equals()</code> and in <code>hashCode()</code>. (Note that the very day I was reading the article I was also polishing the <a href="https://github.com/verhas/javageci/blob/master/MAPPER.md">mapper</a> generator to handle recursive data structures. It was very much resonating with the problems I was actually fixing.)

If you came back or even did not go away reading the original article and even the referenced JDK letter of <a href="https://github.com/cushon">Liam Miller-Cushon</a> titled "<a href="http://cr.openjdk.java.net/~cushon/amber/equivalence.html">Equivalence</a>" here you can have a short summary from my point of view of the most important statements / learning from those articles:

<ul>
<li>Generating <code>equals()</code> and <code>hashCode()</code> is cumbersome manually.</li>
<li>There is support in the JDK since Java 7, but still the code for the methods is there and has to be maintained.</li>
<li>IDEs can generate code for these methods, but regenerating them is still not an automated process and executing the regeneration manually is a human-error prone maintenance process. (a.k.a. you forget to run the generator)</li>
</ul>

The JDK letter from <a href="https://github.com/cushon">Liam Miller-Cushon</a> titled "<a href="http://cr.openjdk.java.net/~cushon/amber/equivalence.html">Equivalence</a>" lists the tipical errors in the implementation of <code>equals()</code> and <code>hashCode()</code>. It is worth reiterating these in a bit more details. (Some text is quoted verbatim.)

<ul>
<li><em>"Overriding Object.equals(), but not hashCode(). (The contract for Object.hashCode states that if two objects are equal, then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() makes that unlikely to be the case.)"</em> This is a rookie mistake and you may say that you will never commit that. Yes, if you are a senior as a programmer but not yet a senior in your mental capabilities e.g.: forgetting where your dental prostheses are then you will never forget to create <code>hashCode()</code> whenever you create <code>equals()</code>. Note, however, that this is a very short and temporal period in life. Numerous juniors also form the codebase and the lacking <code>hashCode()</code> may always lurk in the deep dark corners of the haystack of the Java code and we have to use all economically viable measures to avoid the non-existence of them.</li>
<li><em>"Equals implementations that unconditionally recurse."</em> This is a common mistake and even seniors many times ignore this possible error. This is hardly ever a problem because the data structures we use are usually not recursive. When they are recursive the careless recursive implementation of the <code>equals()</code> or <code>hashCode()</code> methods may result in an infinite loop, stack overflow, and other inconvenient things. I will talk about this topic towards the end of the article.</li>
<li><em>"Comparing mismatched pairs of fields or getters, e.g.  <code>a == that.a</code> &amp;&amp; <code>b == that.a.</code>"</em> This is a topical typing error and it remains unnoticed very easily like topical -&gt; typical.</li>
<li>Equals implementations that throw a NullPointerException when given a  null argument. (They should return false instead.)</li>
<li>Equals implementations that throw a ClassCastException when given an argument of the wrong type. (They should return false instead.)</li>
<li>Implementing <code>equals()</code> by delegating to <code>hashCode()</code>. (Hashes collide frequently, so this will lead to false positives.)</li>
<li>Considering state in <code>hashCode()</code> that is not tested in the corresponding  <code>equals()</code> method. (Objects that are equal must have the same <code>hashCode()</code>.)</li>
<li><code>equals()</code> and <code>hashCode()</code> implementations that use reference equality or <code>hashCode()</code> for array members. (They likely intended value equality and <code>hashCode()</code>.)</li>
<li>Other bugs (which are out of scope for the proposal): usage errors like comparing two statically different types, or non-local errors with definitions (e.g. overriding equals and changing semantics, breaking substitutability)</li>
</ul>

What can we do to avoid these errors? One possibility is to enhance the language, as the mentioned proposal suggests so that the methods <code>hashCode()</code> and <code>equals()</code> can be described in a declarative way and the actual implementation, which is routine and cumbersome is done by the compiler. This is a bright future, but we have to wait for it. Java is not famous for incorporating ideas promptly. When something is implemented it is maintained for eternity in a backward-compatible manner. Therefore the choice is to implement it fast, possibly in the wrong way and live with it forever. Or wait till the industry is absolutely sure how it has to be implemented in the language and then and only that time implement it. Java is following the second way of development.

This is a shortage in the language that comes from language evolution as I described in the article <a href="https://javax0.wordpress.com/2019/09/18/your-code-is-redundant-live-with-it/">Your Code is Redundant...</a>. A temporal shortage that will be fixed later but as for now, we have to handle this shortage.

One answer to such shortage is code generation and that is where Java::Geci comes into the picture.

Java::Geci is a code generation framework that is very well fitted to create code generators that help reduce code redundancy for domain-specific problems. The code generators run during unit test execution time, which may seem a bit later, as the code was already compiled. This is, however, fixed with the working that the code generating "test" fails if it generated any code and executing the compilation and the tests the second time will not fail anymore.

Side note: This way of working may also be very familiar to any software developer: let's run it again, it may work!

In the case of programming language evolution shortages Java::Geci is just as good, from the technical point of view. There is no technical difference between code generation for domain-specific reasons and code generation for language evolution shortage reason. In the case of language evolution issues, however, it is likely that you will find other code generation tools that also solve the issue. To generate <code>equals()</code> and <code>hashCode()</code> you can use the integrated development environment. There can be nothing simpler than selecting a menu from the IDE and click: "generate equals and hashCode".

This solves all but one of the above problems, assuming that the generated code is well-behaving. That only one problem is that whenever the code is updated it will not run the code generator again to update the generated code. This is something that IDEs can hardly compete with Java::Geci. It is more steps to set up the Java::Geci framework than just clicking a few menu items. You need the test dependency, you have to create a unit test method and you have to annotate the class that needs the generator, or as an alternative, you have to insert an editor-fold block into the code that will contain the generated code. However, after that, you can forget the generator and you do not need to worry about any of the developers in your team forgetting to regenerate the <code>equals()</code> or <code>hashCode()</code> method.

<h1>Takeaway</h1>

<ul>
<li><p>Having the proper <code>equals()</code> and <code>hashCode()</code> methods for a class is not as simple as it seems. Writing them manually is hardly ever the best approach.</p></li>
<li><p>Use come tool that generates them and ensure that the generated code and the code generation does not exhibit any of the above common mistakes.</p></li>
<li><p>If you just need it Q&amp;D then use the IDE menu and generate the methods. On the other hand, if you have a larger codebase, with many developers working on it and it is possible that the code generation may need re-execution then use a tool that automates the execution of the code generation. Example: Java::Geci.</p></li>
<li><p>Use the newest possibe version of the tools, like Java so that you do not lag behind available technology.</p></li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2132</wp:post_id>
  <wp:post_date>2019-10-23 16:00:11</wp:post_date>
  <wp:post_date_gmt>2019-10-23 15:00:11</wp:post_date_gmt>
  <wp:post_modified>2019-10-22 16:13:24</wp:post_modified>
  <wp:post_modified_gmt>2019-10-22 15:13:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-new-era-for-determining-equivalence-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_2591943</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[36651839909]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1571842945]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1187021463485853696";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28388</wp:comment_id>
    <wp:comment_author><![CDATA[Iorek]]></wp:comment_author>
    <wp:comment_author_email>peter.szaszvari@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://petyo61.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.48.203.46</wp:comment_author_IP>
    <wp:comment_date>2019-10-23 17:02:59</wp:comment_date>
    <wp:comment_date_gmt>2019-10-23 16:02:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Lombok? Works fine in my opinion. Generater the code, updates when needed, and integrstes to IDE when needed, but works without it too.
I still could not get used to the name of your library. Whi did you make it so hatd for Hungarians?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>17463056</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1571846581]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1571846580]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571846581.030011;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"petyo61";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28393</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>195.56.119.209</wp:comment_author_IP>
    <wp:comment_date>2019-10-24 10:26:43</wp:comment_date>
    <wp:comment_date_gmt>2019-10-24 09:26:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In IT it is not enough that something works. A professional application should be maintained all the time till the end of the life of the application. Lombok has two major problems:

<ul>
<li>It uses a non-guaranteed API. There is no guarantee that all of a sudden a new version of Java, or just another implementation will continue to work with Lombok. Lombok modifies the AST the compiler builds and this is not a guaranteed feature of the API.</li>
<li><p>Lombok modifies the language. When you use Lombok you need a Java programmer, who also understands the Lombok flavor of the language. It is not a big problem at the moment when there is only one of the kind. But if that technology spreads, how many flavors of Java would you like to have in the industry?</p></li>
</ul>

<p>Java::Geci does not use any undocumented and accidentally available but not guaranteed API. It generates the code into the source, so you program pure Java and not a flavor.

As for the name of the library: it is documented on the project page

https://github.com/verhas/javageci/blob/master/NAME.md</p>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28388</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1571909205]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1571909204]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571909204.954845;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29672</wp:comment_id>
    <wp:comment_author><![CDATA[rupali2]]></wp:comment_author>
    <wp:comment_author_email>wrupali11@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://clinicalsearch315527547.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>42.108.242.182</wp:comment_author_IP>
    <wp:comment_date>2020-09-15 04:19:44</wp:comment_date>
    <wp:comment_date_gmt>2020-09-15 03:19:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you for posting this information which are related to <a href="https://www.clariwell.in/best-java-course-in-pune" rel="nofollow ugc"> Java.</a>. It is very helpful information.Keep up the good work.]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>191051465</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[true]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600139985.307932;s:5:"event";s:10:"check-spam";s:4:"user";s:7:"rupali2";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600139985.349118;s:5:"event";s:20:"status-changed-trash";s:4:"user";s:7:"rupali2";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Extending abstract classes with abstract classes in Java]]></title>
  <link>https://javax0.wordpress.com/2019/06/12/extending-abstract-classes-with-abstract-classes-in-java/</link>
  <pubDate>Wed, 12 Jun 2019 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2144</guid>
  <description/>
  <content:encoded><![CDATA[<h1>The example issue</h1>

When I was creating the Java::Geci abstract class <code>AbstractFieldsGenerator</code> and <code>AbstractFilteredFieldsGenerator</code> I faced a not too complex design issue. I would like to emphasize that this issue and the design may seem obvious for some of you, but during my recent conversation with a junior developer (my son, MihÃ¡ly specifically, who also reviews my articles because his English is way better than mine) I realized that this topic may still be of value.

Anyway. I had these two classes, fields and filtered fields generator. The second class extends the first one

[code lang=java]
abstract class AbstractFilteredFieldsGenerator
                  extends AbstractFieldsGenerator {...
[/code]

adding extra functionality and the same time it should provide the same signature for concrete implementation. What does it mean?

These generators help to generate code for a specific class using reflection. Therefore the input information they work on is a <code>Class</code> object. The fields generator class has an abstract method <code>process()</code>, which is invoked for every field. It is invoked from an implemented method that loops over the fields and does the invocation separately for each. When a concrete class <code>extends AbstractFieldsGenerator</code> and thus implements this abstract method then it will be called. When the same concrete class is changed so that it <code>extends AbstractFilteredFieldsGenerator</code> then the concrete method will be invoked only for the filtered method. I wanted a design so that the ONLY change that was needed in the concrete class is to change the name.

<a href="https://github.com/verhas/abstractchain/raw/master/cextendsAorF-diff.png" target="_blank"><img src="https://github.com/verhas/abstractchain/raw/master/cextendsAorF-diff.png" alt="Diff between the two versions of the concrete class" /></a>

<h1>Abstract <del datetime="2019-06-05T06:54:33+00:00">class</del> problem definition</h1>

The same problem described in a more abstract way: There are two abstract classes <code>A</code> and <code>F</code> so that <code>F extends A</code> and <code>F</code> provides some extra functionality. Both declare the abstract method <code>m()</code> that a concrete class should implement. When the concrete class <code>C</code> declaration is changed from <code>C extends A</code> to <code>C extends F</code> then the invocation of the method <code>m()</code> should change, but there should be no other change in the class <code>C</code>. The method <code>m()</code> is invoked from method <code>p()</code> defined in class <code>A</code>. How to design <code>F</code>?

What is the problem with this?

Extending <code>A</code> can be done in two significantly different ways:

<ul>
<li><code>F</code> overrides <code>m()</code> making it concrete implementing the extra functionality in <code>m()</code> and calls a new abstract method, say <code>mx()</code></li>
<li><code>F</code> overrides the method <code>p()</code> with a version that provides the extra functionality (filtering in the example above) and calls the still abstract method <code>m()</code></li>
</ul>

The first approach does not fulfill the requirement that the signature to be implemented by the concrete class <code>C</code> should remain the same. The second approach throws the already implemented functionality of <code>A</code> to the garbage and reimplements it a bit different way. In practice this is possible, but it definitely is going to be some copy/paste programming. This is problematic, let me not explain why.

<h1>The root of the problem</h1>

In engineering when we face a problem like that, it usually means that the problem or the structure is not well described and the solution is somewhere in a totally different area. In other words, there are some assumptions driving our way of thinking that are false. In this case, the problem is that we assume that the abstract classes provide ONE extension "API" to extend them. Note that the API is not only something that you can invoke. In the case of an abstract class, the API is what you implement when you extend the abstract class. Just as libraries may provide different APIs for different ways to be used (Java 9 HTTP client can <code>send()</code> and also <code>sendAsync()</code>) abstract (and for the matter of fact also non-abstract) classes can also provide different ways to be extended for different purposes.

There is no way to code <code>F</code> reaching our design goal without modifying <code>A</code>. We need a version of <code>A</code> that provides different API to create a concrete implementation and another, not necessarily disjunct/orthogonal one to create a still abstract extension.

The difference between the APIs in this case is that the concrete implementation aims to be at the end of a call-chain while the abstract extension wants to hook on the last but one element of the chain. The implementation of <code>A</code> has to provide API to be hooked on the last but one element of the call-chain. This is already the solution.

<h1>Solution</h1>

We implement the method <code>ma()</code> in the class <code>F</code> and we want <code>p()</code> to call our <code>ma()</code> instead of directly calling <code>m()</code>. Modifying <code>A</code> we can do that. We define <code>ma()</code> in <code>A</code> and we call <code>ma()</code> from <code>p()</code>. The version of <code>ma()</code> implemented in <code>A</code> should call <code>m()</code> without further ado to provide the original "API" for concrete implementations of <code>A</code>. The implementation of <code>ma()</code> in <code>F</code> contains the extra functionality (filtering in the example) and then it calls <code>m()</code>. That way any concrete class can extend either <code>A</code> or <code>F</code> and can implement <code>m()</code> with exactly the same signature. We also avoided copy/paste coding with the exception that calling <code>m()</code> is a code that is the same in the two versions of <code>ma()</code>.

If we want the class <code>F</code> extendable with more abstract classes then the <code>F::ma</code> implementation should not directly call <code>m()</code> but rather a new <code>mf()</code> that calls <code>m()</code>. That way a new abstract class can override <code>mf()</code> giving again new functionality and invoke the abstract <code>m()</code>.

<h1>Takeaway</h1>

<ol>
<li>Programming abstract classes is complex and sometimes it is difficult to have a clear overview of who is calling who and which implementation. You can overcome this challenge if you realize that it may be a complex matter. Document, visualize, discuss whatever way may help you.</li>
<li>When you cannot solve a problem (in the example, how to code <code>F</code>) you should challenge the environment (the class <code>A</code> we implicitly assumed to be unchangeable by the wording of the question: "How to implement <code>F</code>?").</li>
<li>Avoid copy/paste programming. (Pasta contains a lot of CH and makes your code fat, the arteries get clogged and finally, the heart of your application will stop beating.)</li>
<li>Although not detailed in this article, be aware that the deeper the hierarchy of abstraction is the more difficult it is to have a clear overview of who calls whom (see also point number 1).</li>
</ol>

<ul>
<li>Find a sample demo application at https://github.com/verhas/abstractchain</li>
<li>Find the original, a tad more complex application that has this pattern at https://github.com/verhas/javageci</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2144</wp:post_id>
  <wp:post_date>2019-06-12 16:00:00</wp:post_date>
  <wp:post_date_gmt>2019-06-12 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2019-06-05 11:10:38</wp:post_modified>
  <wp:post_modified_gmt>2019-06-05 10:10:38</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>extending-abstract-classes-with-abstract-classes-in-java</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1138823816971468806";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31753565326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1560351728]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Reflection selector expression]]></title>
  <link>https://javax0.wordpress.com/2019/06/05/reflection-selector-expression-2/</link>
  <pubDate>Wed, 05 Jun 2019 14:43:09 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2153</guid>
  <description/>
  <content:encoded><![CDATA[Java::Geci is a code generator that runs during unit test time. If the generated code fits the actual version of the source code then the test does not fail. If there is a need for any modification then the tests modify the source code and fail. For example, there is a new field that needs a setter and getter then the accessor generator will generate the new setter and getter and then it fails. If there is no new field then the generated code is just the one that is already there, no reason to touch the source code: the test that started the generator finishes successfully.

Because Java::Geci generators run as tests, which is run-time and because they need access to the Java code structures for which they generate code Java reflection is key for these generators.

To help the code generators to perform their tasks there are a lot of support methods in the <code>javageci-tools</code> module.

[code lang=text]
com.javax0.geci
javageci-tools
1.1.1

[/code]

In this article, I will write one class in this module: <code>Selector</code> that can help you select a field, method or class based on a logical expression.

<h1>Introduction</h1>

The class <code>javax0.geci.tools.reflection.Selector</code> is a bit like the regular expression class <code>Pattern</code>. You can create an instance invoking the static method <code>compile(String expression)</code>. On the instance, you can invoke <code>match(Object x)</code> where the <code>x</code> object can be either a <code>Field</code> a <code>Method</code> or a <code>Class</code> or something that can be cast of any of those (Let's call these CFoMs). The method <code>match()</code> will return <code>true</code> if <code>x</code> fits the expression that was compiled.

<h1>Selector expression</h1>

The expression is a Java String. It can be as simple as <code>true</code> that will match any CFoM. Similarly <code>false</code> will not match anything. So far trivial. There are other conditions that the expression can contain. <code>public</code>, <code>private</code> <code>volatile</code> and so on can be used to match a CFoM that has any of those modifiers. If you use something like <code>volatile</code> on a CFoM that cannot be volatile (class or method) then you will get IllegalArgumentException.

For classes you can have the following conditions:

<ul>
<li><code>interface</code> when the class is interface</li>
<li><code>primitive</code> when it is a primitive type</li>
<li><code>annotation</code> when it is an annotation</li>
<li><code>anonymous</code></li>
<li><code>array</code></li>
<li><code>enum</code></li>
<li><code>member</code></li>
<li><code>local</code></li>
</ul>

Perhaps you may look up what a member class is and what a local class is. It is never too late to learn a bit of Java. I did not know it was possible to query that a class is a local class in reflection until I developed this tool.

These conditions are simple words. You can also use pattern matching. If you write <code>extends ~ /regex/</code> it will match only classes that extend a class that has a name matching the regular expression <code>regex</code>. You can also match the <code>name</code>, <code>simpleName</code> and <code>canonicalName</code> against a regular expression. In case our CFoM <code>x</code> is a method or field then the return type is checked, except in case of <code>name</code> because they also have a name.

<h1>Conditions</h1>

There are many conditions that can be used, here I list only a subset. The detailed documentation that contains all the words is at https://github.com/verhas/javageci/blob/master/FILTER_EXPRESSIONS.md

Here is an appetizer though:

<code>protected</code>, <code>package</code>, <code>static</code>, <code>public</code>, <code>final</code>, <code>synthetic</code>,
<code>synchronized</code>, <code>native</code>, <code>strict</code>, <code>default</code>, <code>vararg</code>, <code>implements</code>,
<code>overrides</code>, <code>void</code>, <code>transient</code>, <code>volatile</code>, <code>abstract</code>

<h1>Expression Structure</h1>

Checking one single thing would not be too helpful. And also calling the argument of the method <code>compile()</code> to be an "expression" suggests that there is more.

You can combine the conditions to full logical expression. You can create a selector <code>Selector.compile("final | volatile")</code> to match all fields that are kind of thread safe being either <code>final</code> or <code>volatile</code> or both (which is not possible in Java, but the selector expression would not mind). You can also say <code>Selector.compile("public &amp;amp; final &amp;amp; static")</code> to match only those fields that are <code>public</code>, <code>final</code> and <code>static</code>. Or you can <code>Selector.compile("!public &amp;amp; final &amp;amp; static")</code> to match the <code>final</code> and <code>static</code> fields that are <code>private</code>, <code>protected</code> or package private, also as "not public". You can also apply parenthesis and with those, you can build up fairly complex logical expressions.

<h1>Use</h1>

The usage can be any application that heavily relies on reflection. In Java::Geci the expression can be used in the <code>filter</code> parameter of any generator that generates some code for the methods or for the fields of a class. In that case, the <code>filter</code> can select which fields or methods need code generation. For example, the default value for the <code>filter</code> in case of the accessor generator is <code>true</code>: generate setters and getter for all the fields. If you need only setters and getters for the private fields you can specify <code>filter="private"</code>. If you want to exclude also final fields you can write `filter="!final &amp; private". In that case, you will not get a getter for the final fields. (Setters are not generated for final fields by default and at all. The generator is clever.)

Using streams it is extremely easy to write expressions, like

[code lang=text]
Arrays.stream(TestSelector.class.getDeclaredFields())
.filter(Selector.compile(&quot;private &amp; primitive&quot;)::match)
.collect(Collectors.toSet());
[/code]

that will return the set of the fields that are private and primitive. Be aware that in that case, you have some selector compilation overhead (only once for the stream, though) and in some cases, the performance may not be acceptable.

Experiment and see if it suits your needs.

I just forgot to add: You can also extend the selector during run-time calling the <code>selector(String,Function)</code> and/or <code>selectorRe(String,Function)</code> methods.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2153</wp:post_id>
  <wp:post_date>2019-06-05 15:43:09</wp:post_date>
  <wp:post_date_gmt>2019-06-05 14:43:09</wp:post_date_gmt>
  <wp:post_modified>2019-06-05 15:43:09</wp:post_modified>
  <wp:post_modified_gmt>2019-06-05 14:43:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reflection-selector-expression-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[31527829262]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1559745793]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1136282336994168832";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27597</wp:comment_id>
    <wp:comment_author><![CDATA[Reflection selector expression | Howdy Android - Android World]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.hello-android.com/2019/06/08/reflection-selector-expression-howdy-android/</wp:comment_author_url>
    <wp:comment_author_IP>23.239.65.122</wp:comment_author_IP>
    <wp:comment_date>2019-06-08 13:31:25</wp:comment_date>
    <wp:comment_date_gmt>2019-06-08 12:31:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Printed on Howdy Android with permission by Peter Verhas, associate at our JCG program. See the unique article right here: Reflection selector expression [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559997086.115778;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1560000218]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1560000218.45216;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28312</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:17</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Reflection Selector Expression [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424860.100935;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420017.194712;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546232]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546233.182702;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Inject-able only in test?]]></title>
  <link>https://javax0.wordpress.com/2019/06/26/inject-able-only-in-test/</link>
  <pubDate>Wed, 26 Jun 2019 15:00:47 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2159</guid>
  <description/>
  <content:encoded><![CDATA[This article is about some thoughts of test design and testability. Some questions that we discussed with my son, who is a junior Java developer and currently is employed and studies at EPAM Hungary (the same company but a different subsidiary where I work). All the things in this article are good old knowledge, but still, you may find something interesting in it. If you are a junior then because of that. If you are a senior then you can get some ideas on how to explain these things. If neither: sorry.

<h1>Introduction to the problem</h1>

The task they had was some roulette program or some other game simulation code, they had to write. The output of the code was the amount of simulated money lost or won. The simulation used a random number generator. This generator caused a headache when it came to testing. (Yes, you are right: the very basis of the problem was lack of TDD.) The code behaved randomly. Sometimes the simulated player was winning the game, other times it was losing.

<h1>Make it testable: inject mock</h1>

How to make this code testable?

The answer should be fairly obvious: mock the random number generator. Make the use of the source of randomness injected and inject a different non-random source during tests. Randomness is not important during testing and there is no need to test the randomness. We have to believe that the random number generator is good (it is not, it is never good, perhaps good enough, but that is a totally different story) and was tested by its own developers.

<blockquote>Learning #1: Do not test the functionality of your dependency.</blockquote>

We can have a field of type <code>Supplier</code> initialized to something like <code>() -&gt; rnd()</code> lambda and in case of test it is overwritten using a setter.

<h1>Is testable good?</h1>

Now we changed the structure of the class. We opened a new entry to inject a random number generator. Is this okay?

There is no general yes or no answer to that. It depends on the requirements. Programmers like to make their code configurable and more general than they are absolutely needed by the current requirements. The reason that... well... I guess, it is because many times in the past programmers experienced that requirements have changed (no kidding!) and in case the code was prepared for the change then the coding work was easier. This is fair enough reasoning but there are essential flaws in it. The programmers do not know what kind of future requirements may come. Usually, nobody really knows, and everybody has some idea about it.

Programmers usually have the least knowledge. How would they know the future? Business analysts know a bit better, and at the end of the chain, the users and customers know it the best. However, even they do not know the business environment out of their control that may require new features of the program.

Another flaw is that developing of a future requirement now has extra costs that the developers a lot of times do not comprehend.

Practice shows that the result of such 'ahead of time' thinking is usually complex code and flexibility that's hardly ever needed. There is even an acronym for that: <a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a>, "You Aren't Gonna Need It".

So, is implementing that injectability feature a YAGNI? Not at all.

First of all: a code has many different uses. Executing it is only one. An equally important one is the maintenance of the code. If the code cannot be tested, it cannot be reliably used. If the code cannot be tested, it cannot be reliably refactored, extended: maintained.

A functionality that is only needed for testing is like a roof bridge on a house. You do not use it yourself while you live in the house, but without them, it would be hard and expensive to check the chimneys. Nobody questions the need for those roof bridges. They are needed, they are ugly and still, they are there. Without them, the house is not testable.

<blockquote>Learning #2: Testable code usually has better structure.</blockquote>

But that is not the only reason. Generally, when you create a code testable the final structure will usually be more useable as well. That is, probably, because testing is mimicking the use of the code and designing the code testable will drive your thinking towards the usability to be on the first place and implementation to be only on the second place. And, to be honest: nobody really cares about implementation. Usability is the goal, implementation is only the tool to get there.

<h1>Responsibility</h1>

Okay, we got that far: testability is good. But then there is a question about responsibility.

The source of randomness should be hard-wired into the code. The code and the developer of the code are responsible for the randomness. Not because this developer implemented it, but this developer selected the random number generator library. Selecting the underlying libraries is an important task and it has to be done responsibly. If we open a door to alter this selection of implementation for randomness then we lose control over something that is our responsibility. Or don't we?

Yes and no. If you open the API and provide a possibility to inject a dependency then you are not inherently responsible for the functioning of the injected functionality. Still, the users (your customers) will come to you asking for help and support.

"There is a bug!" they complain. Is it because of your code or something in the special injected implementation the user selected?

You essentially have three choices:

<ol>
    <li>You may examine the bugs in each of those cases and tell them when the error is not your bug and help them select a better (or just the default) implementation of the function. It will cost you precious time either paid or unpaid.</li>
    <li>The same time you can also exclude the issue and say: you will not even examine any bug that cannot be reproduced using the standard, default implementation.</li>
    <li>You technically prevent the use of the feature that is there only for the testability.</li>
</ol>

The first approach needs good sales support or else you will end up spending your personal time fixing customers problem instead of spending your paid customer time. Not professional.

The second approach is professional, but customers do not like it.

The third is a technical solution to drive users from #1 to #2.

<blockquote>Learning #3: Think ahead about users' expectations.</blockquote>

Whichever solution you choose the important thing is to do it consciously and not just by accident. Know what your users/customer may come up with and be prepared.

<h1>Prevent production injecting</h1>

When you open the possibility to inject the randomness generator into the code how do you close that door for the production environment if you really must?

The first solution, which I prefer, is not to open it wide in the first place. Use it via the initialized field holding the lambda expression (or some other way) that makes it injectable, but do not implement injection support. Let the field be private (but not <a href="https://dzone.com/articles/final-keyword-and-jvm-memory-impact">final</a>, because that may cause other problems in this situation)  and apply a bit of reflection in the test to alter the content of the private field.

Another solution is to provide a package private setter, or even better an extra constructor to alter/initialize the value of the field and throw an exception if it is used in the production environment. You can check that many different ways:

<ul>
    <li>Invoke `Class.forName()` for a test class that is not on the classpath in the production environment.</li>
    <li>Use `StackWalker` and check that the caller is test code.</li>
</ul>

Why do I prefer the first solution?

<blockquote>Learning #4: Do not use a fancy technical solution just because you can. Boring is usually better.</blockquote>

First of all, because this is the simplest and puts all testing code into the test. The setter or the special constructor in the application code is essentially testing code and the byte codes for them are there in the production code. Test code should be in test classes, production code should be in production classes.

The second reason is that designing functionality that is deliberately different in the production and in the test environment is just against the basic principles of testing. Testing should mimic the production environment as much as economically feasible. How would you know that the code will work properly in the production environment when the test environment is different? You hope. There are many environmental factors already that may alter the behavior in the production environment and let bug manifest there only and silently remaining dormant in the test environment. We do not need extra such things to make our testing even riskier.

<h1>Summary</h1>

There are many more aspects of programming and testing. This article was addressing only a small and specific segment that came up in a discussion. The key learnings also listed in the article:

<ul>
    <li>Test the system under test (SUT) and not the dependencies. Be careful, you may think you are testing the SUT when actually you are testing the functionality of some dependencies. Use stupid and simple mocks.</li>
    <li>Follow TDD. Write the test before and mixed with the functionality development. If you don't because just you don't, then at least think about the tests before and while you write the code. Testable code is usually better (not just for the test).</li>
    <li>Think about how fellow programmers will use your code. Imagine how a mediocre programmer will use your API and produce the interfaces of your code not only for the geniuses like you, who understand your intentions even better than you.</li>
    <li>Do not go for a fancy solution when you are a junior just because you can. Use a boring and simple solution. You will know when you are a senior: when you no longer want to use the fancy solution over the boring one.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2159</wp:post_id>
  <wp:post_date>2019-06-26 16:00:47</wp:post_date>
  <wp:post_date_gmt>2019-06-26 15:00:47</wp:post_date_gmt>
  <wp:post_modified>2019-06-17 20:21:12</wp:post_modified>
  <wp:post_modified_gmt>2019-06-17 19:21:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>inject-able-only-in-test</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[32215714296]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1561561273]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1143897008660520960";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27710</wp:comment_id>
    <wp:comment_author><![CDATA[Inject-able solely in check? | Good day Android - Android World]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.hello-android.com/2019/07/02/inject-able-solely-in-check-good-day-android/</wp:comment_author_url>
    <wp:comment_author_IP>23.239.65.122</wp:comment_author_IP>
    <wp:comment_date>2019-07-02 08:32:28</wp:comment_date>
    <wp:comment_date_gmt>2019-07-02 07:32:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Revealed on Good day Android with permission by Peter Verhas, companion at our JCG program. See the unique article right here: Inject-able solely in check? [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1562052749.799312;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1562057875.445056;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1562338767]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1562338767.885173;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1562338769.652579;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1562338774.746773;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27827</wp:comment_id>
    <wp:comment_author><![CDATA[Kofa]]></wp:comment_author>
    <wp:comment_author_email>kovacs.it@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>31.10.146.102</wp:comment_author_IP>
    <wp:comment_date>2019-07-18 18:22:47</wp:comment_date>
    <wp:comment_date_gmt>2019-07-18 17:22:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I guess with Java 9 you could expose a public, non-configurable interface and a factory that creates a 'properly' configured instance of the non-exposed class (perhaps taking some arguments for the configurable aspects that you want to make available to end users). The factory could be one of your own making, a Spring @Configuration class etc. Without modules, one could use a package-private class and self-discipline, perhaps helped by some build tools (e.g. https://stackoverflow.com/questions/7467756/maven-plugin-to-restrict-specific-packages-from-being-used).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1563475734.616484;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1563470568.816301;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[33017873571]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1563496803]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1563496803]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1563496804.587929;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27701</wp:comment_id>
    <wp:comment_author><![CDATA[Java Testing Weekly 27 / 2019]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.petrikainulainen.net/weekly/java-testing-weekly-27-2019/</wp:comment_author_url>
    <wp:comment_author_IP>31.187.84.41</wp:comment_author_IP>
    <wp:comment_date>2019-07-01 07:24:06</wp:comment_date>
    <wp:comment_date_gmt>2019-07-01 06:24:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Inject-able only in test? is a thought-provoking blog post that describes how you can write tests for a legacy code by replacing the real dependencies with test doubles. Also, this blog post explains why you should do this and helps you to make the required changes to your legacy code. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1561990208]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1561990209.692919;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1561966394.087014;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1561962247.871315;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Java hexadecimal floating point literal]]></title>
  <link>https://javax0.wordpress.com/2019/07/03/java-hexadecimal-floating-point-literal/</link>
  <pubDate>Wed, 03 Jul 2019 15:00:06 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2168</guid>
  <description/>
  <content:encoded><![CDATA[<h1>How I met hexadecimal floating point numbers</h1>

I was developing a new functionality into Java::Geci to make it less prone to code reformatting. The current release of the code will overwrite an otherwise identical code if it was reformatted. It is annoying since it is fairly easy to press the reformatting key shortcut and many projects even require that developers set their editor to automatically format the code upon save. In those cases Java::Geci cannot be used because as soon as the code is reformatted the generator thinks that the code it generates is not the same as the one already in the source file, updates it and signals the change of the code failing the unit tests.

The solution I was crafting compares the Java source files first converting them to a list of lexical elements. That way you can even reformat the code inserting new-lines, spaces, etc. so long as long the code remains the same. To do that I needed a simplified lexical analyzer for Java. Writing a lexical analyzer is not a big deal, I created several for different reasons since I first read the <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">Dragon Book</a> in 1987. The only thing I really needed is the precise definition of what are the string, character, number literals, the keywords and so on. In short: what is the definition of the Java language on the lexical level and how is it processed. Fortunately, there is a precise definition for that, the <a href="https://docs.oracle.com/javase/specs/">Java Language Specification</a>, which is not only precise but also readable and has examples. So I started to read the corresponding chapters.

To my bewilderment, I could see there that there is a possibility in the Java language to express a floating point in hexadecimal. Strange, is it? Since I have not ever seen it, first I thought that this was something new introduced in Java 12 but my investigation showed that it probably was introduced in Java 1.5 That was the very first Java version I really liked but not because of hexadecimal floating points. So this was how I met this beast in the standard face to face. I started to wonder if this beast can be found at all in the wild or is it only something that can be seen captive in the confinements of the text of the JLS. So...

<h1>I put up a vote on Twitter</h1>

<hr />

<img src="https://javax0.files.wordpress.com/2019/06/img_3109.jpg?w=297" alt="" width="297" height="300" class="alignleft size-medium wp-image-2169" />

As you can see nine decent humans answered the question, mostly saying that they have had no idea about this feature.

Probably hexadecimal floating points are the least known and used feature of the Java language right after lambdas and streams (just kidding... hexadecimal floating points are important, no?)

Even though I did some scientific study in the past, I cannot see any use of hexadecimal floating point literals.

<hr />

<h1>What is a floating point number?</h1>

We will get to hexadecimal floating point numbers, but to understand that we have to know first what a floating point number, generally is.

Floating point numbers have a mantissa and exponent. The mantissa has an integer and a fractional part, like <code>iii.ffff</code>. The exponent is an integer number. For example, 31.415926E-1 is a floating point number and an approximation for the ratio of the diameter and the circumference of a circle.

Java internally stores the <code>float</code> numbers on <a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format">32 bit</a> and <code>double</code> number on <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">64 bit</a>. The actual bits are used according to the IEEE 754 standard.

That way the bits store a sign on a single bit, then the exponent on 8 or 11 bits and finally the mantissa on 23 or 52 bits for 32- or 64-bit float/double respectively. The mantissa is a fractional number with a value between 1 and 2. This could be represented with a bit stream, where the first bit means 1, the second means 1/2 and so on. However, because the number is always stored normalized and therefore the number is always between [1 and 2) the first bit is always 1. There is no need to store it. Tus the mantissa is stored so that the most significant bit means 1/2, the next 1/2<sup>2</sup> and so on but when we need the value we add to it 1.

The mantissa is unsigned (hence we have a separate signum bit). The exponent is also unsigned, but the actual number of bitshifts are calculated subtracting 127 or 1023 from the value to get a signed number. It specifies how many bits the mantissa should virtually be shifted to the left or right. Thus when we write <code>31.415926E-1f</code> then the exponent will NOT be -1. That is the decimal format of the number.

The actual value is <code>01000000010010010000111111011010</code>. Breaking it down:

<ul>
<li>0 sign, the number is positive. So far so good.</li>
<li>10000000 128, which means we have to shift the mantissa one bit left (multiply the value by two)</li>
<li>10010010000111111011010 is $latex 4788186/2^23+1 \approx 1.570796251296997$. The hex representation of this bit stream is <tt>0x490FDA</tt></li>
</ul>

And here comes the

<h1>Hexadecimal floating point literal</h1>

We can write the same number in Java as <code>0x0.C90FDAP2f</code>. This is the hexadecimal floating point representation of the same number.

The mantissa <code>0xC9aFDA</code> should be familiar to the hexadecimal representation of the number above <code>0x490FDA</code>. The difference is that the first character is <code>C</code> instead of <code>4</code>. That is the extra one bit, which is always 1 and is not stored in the binary representation. <code>C</code> is <code>1100</code> while the original <code>4</code> is <code>0100</code>. The exponent is the signed decimal representation of the actual bitshifts needed to push the number to the proper position.

The format of the literal is not trivial. First of all, you HAVE TO use the exponent part and the character for the exponent is <code>p</code> or <code>P</code>. This is a major difference from the decimal representation. (UPDATE: If the exponent was optional you could not tell if, for example, <code>0.55</code> is a decimal floating point or a hexadecimal floating point. A hexadecimal number can, by accident, contain only decimal characters and still be hexadecimal.)

After a little bit of thinking it becomes obvious that the exponent cannot be denoted using the conventional <code>e</code> or <code>E</code> since that character is a legitimate hexadecimal digit and it would be ambiguous in case of numbers like <code>0x2e3</code>. Would this be a hexadecimal integer or $latex 2\times 2^3$. It is an integer because we use <code>p</code> and not <code>e</code>.

The reason why the exponent part is mandatory I can only guess. Because developers got used to decimal floating point numbers with  <code>e</code> or <code>E</code> as exponent it would be very easy to misread <code>0xC90F.0e+3</code> as a single floating point number, even though in case of hexadecimal floating point <code>p</code> is required instead of <code>e</code>. If the exponent were not mandatory this example would be a legit sum of a floating point number and an integer. The same time it looks like a single number, and that would not be good.

The other interesting thing is that the exponent is decimal. This is also because some hexadecimal digits were already in use for other purposes. The float and double suffix. In case you want to denote that a literal is a float, you can append the <code>f</code> or <code>F</code> to the end. If you want to denote that this literal is double then you can append <code>d</code> or <code>D</code> to the end. This is the default, so appending <code>D</code> is optional. If the exponent were hexadecimal we would not know if <code>0x32.1P1f</code> is a float literal or a double and having a lot of magnitudes different value. This way, that that exponent is decimal it is a float number $latex (32+1/2)\times 2^1$.

<h1>Java and IEEE 754</h1>

Java implemented the IEEE 754 standard strictly until Java 1.2 This <a href="https://en.wikipedia.org/wiki/IEEE_754">standard</a> defines not only the format of the numbers when stored in memory but also defines rules how calculations should be executed. After the Java release 1.2 (including 1.2) the standard was released to make the implementations more liberal allowing to use more bits to store intermediate results. This was and it still is available on the Intel CPU platforms and it is used heavily in numeric calculations in other languages like FORTRAN. This was a logical step to allow the implementations to use of this higher precision.

The same time to preserve backward compatibility the <code>strictfp</code> modifier was added to the language. When this modifier is used on a class, interface or method the floating point calculations in those codes will strictly follow the IEEE 754 standard.

<h1>Takeaway</h1>

<ul>
<li>There are hexadecimal floating point literals in Java. Remember it and also what <code>strictfp</code> is because somebody may ask you about it on a Java interview. No practical use in enterprise programming.</li>
<li>Do not use them unless it makes the code more readable. I can barely imagine any situation where this would be the case. So, simply put: do not use them just because you can.</li>
<li>Follow me on Twitter <code>@verhas</code> to get notification about new articles. </li>
</ul>

[twitter-follow screen_name='verhas']

I think that is it, nothing more. By the time this article is published, I will probably be swimming across the lake of ZÃ¼rich along with ten thousand people. This is a big event here.

Oh... and yes: if you have ever used hexadecimal floating point literals in Java to make it more readable, please share the knowledge in the comments. I dare say in the name of the readers: we are interested.

UPDATE: Joseph Darcy, (Engineer, OpenJDK developer at Oracle, marathoner, fast walker, occasional photographer, lots of other things.) provided feedback on Twitter. I copied his reply to here as it is absolutely valuable and adds value to this article for the benefit of the reader:

<blockquote>The mapping between decimal strings and particular settings of binary floating-point values is often non-obvious. Hexadecimal floating-point literals provide a straightforward text to binary fp mapping when needed, such as in tests. See https://blogs.oracle.com/darcy/hexadecimal-floating-point-literals</blockquote>

<img src="https://javax0.files.wordpress.com/2019/07/joseph_darcy_on_twitter___the_mapping_between_decimal_strings_and_particular_settings_of_binary_floating-point_values_is_often_non-obvious__hexadecimal_floating-point_literals_provide_a_.png?w=300" alt="" width="300" height="217" class="alignleft size-medium wp-image-2199" />]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2168</wp:post_id>
  <wp:post_date>2019-07-03 16:00:06</wp:post_date>
  <wp:post_date_gmt>2019-07-03 15:00:06</wp:post_date_gmt>
  <wp:post_modified>2019-07-07 07:40:38</wp:post_modified>
  <wp:post_modified_gmt>2019-07-07 06:40:38</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-hexadecimal-floating-point-literal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1146433636062904321";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[32448952322]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1562166052]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d5b7f60c16cf32907d8953be509908bd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c12c4ad1dcc69317d522331773acdb15</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6a3c511e8f2b8c83fa0b23e418a8bc53</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30158</wp:comment_id>
    <wp:comment_author><![CDATA[Babu Kalakrishnan]]></wp:comment_author>
    <wp:comment_author_email>kalakrishnan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>122.171.175.88</wp:comment_author_IP>
    <wp:comment_date>2021-01-22 02:03:34</wp:comment_date>
    <wp:comment_date_gmt>2021-01-22 01:03:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I chanced upon this animal while browsing through the Java library source code for java.util.Random (See line 92 of https://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/Random.java). Had never heard of such a syntax till then, so looked it up in the JLS and voila! there it was in section 3.10.2 !]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1611282239.640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1611684909]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1611684909.892734;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1611277415.768157;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[53935878113]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1611684909]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28085</wp:comment_id>
    <wp:comment_author><![CDATA[mf]]></wp:comment_author>
    <wp:comment_author_email>martin.fabricius@optimax-energy.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>146.0.117.129</wp:comment_author_IP>
    <wp:comment_date>2019-08-22 14:04:24</wp:comment_date>
    <wp:comment_date_gmt>2019-08-22 13:04:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I found an actual usage of this feature: Google Guava uses a HFPL in
com.google.common.hash.Hashing.LinearCongruentialGenerator.nextDouble():673
(see https://github.com/google/guava/blob/64276db0c49df56a609374d4617af88653c24e2b/guava/src/com/google/common/hash/Hashing.java)

In fact not even the Oracle docs have an example of this feature.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[34411518963]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1566479158]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1566479159]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1566479159.631055;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1566479066.310921;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28086</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.225.121</wp:comment_author_IP>
    <wp:comment_date>2019-08-22 14:06:44</wp:comment_date>
    <wp:comment_date_gmt>2019-08-22 13:06:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good catch! Thank you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28085</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[34411548387]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1566479207]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1566479205]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1566479206.287184;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31327</wp:comment_id>
    <wp:comment_author><![CDATA[mf]]></wp:comment_author>
    <wp:comment_author_email>martin.fabricius@optimax-energy.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>146.0.117.129</wp:comment_author_IP>
    <wp:comment_date>2021-11-05 09:15:41</wp:comment_date>
    <wp:comment_date_gmt>2021-11-05 08:15:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Finally in the JDK 15 documentation the hexadecimal floating point literal representations for Double/Float MAX_VALUE and MIN_VALUE were added so at least there are now some actual examples for this syntax:
https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10.2]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28085</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[64997753380]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636104576.114866;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1636116866]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1636116866]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1636116866.547775;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636100142.326776;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>27739</wp:comment_id>
    <wp:comment_author><![CDATA[Martin Grajcar]]></wp:comment_author>
    <wp:comment_author_email>maaartinus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>93.212.240.133</wp:comment_author_IP>
    <wp:comment_date>2019-07-06 17:45:00</wp:comment_date>
    <wp:comment_date_gmt>2019-07-06 16:45:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree that they're of hardly any use, but there's e.g.,

public static final double MIN_VALUE = 0x0.0000000000001P-1022; // 4.9e-324

which can't be reasonably written otherwise. I guess, I used it once for 2**100, where I needed to downscale some crazy numbers in order to avoid overflow (Project Euler, nothing practical).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>150283678</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1562431501]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1562431501.12149;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"maaartinus";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1562431501]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Annotation Handling and JPMS]]></title>
  <link>https://javax0.wordpress.com/2019/07/31/annotation-handling-and-jpms/</link>
  <pubDate>Wed, 31 Jul 2019 15:00:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2203</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
  TLDR; Instead of <code>annotation.getClass().getMethod("value")</code> call
  <code>annotation.annotationType().getMethod("value")</code>.
</blockquote>

(If you do not know what JPMS is, then you are not a Java developer. Stop reading, go ahead buy and read the book of the genius Nicolai Parlog https://www.manning.com/books/the-java-module-system about JPMS and become a Java developer again!)

All Java developers have heard about annotations. Annotations are with us since Java 1.5 (or only 1.6 if you insist). Based on my experience interviewing candidates I feel that most Java developers know how to use annotations. I mean, most developers know that it looks like <code>@Test</code>, or <code>@Override</code> and that they come with Java or with some library and they have to be written in front of a class, method, or variable.

A few developers know that you can also define an annotation in your code using <code>@interface</code> and that your code can do some metaprogramming using the annotation. Even fewer know that annotations can be processed by annotation processors and some of them can be processed during run time.

I could continue but long story short is that annotations are a mystery for most Java developers. If you think I am wrong stating how clueless related to the annotations most of the Java developers are, then consider that the number of programmers, (or coders, generally) was growing exponentially during the last 30 years and Java developers, especially, was doing so during the last 20 years and it is still growing exponentially. The exponential function has this feature: If the number of whatnots is growing exponentially then most of the whatnots are young.
That is the reason why most Java developers are not familiar with annotations.

To be honest, annotation handling is not something simple. It deserves its own article, especially when we want to handle annotations while using module systems.

During the final touches of the release 1.2.0 of the Java::Geci code generation framework I ran into a problem that was caused by my wrong use of annotations and reflection. Then I realized that probably most of the developers who handle annotations using reflection are doing so the same wrong way. There was hardly any clue on the net to help me understand the problem. All I found was a <a href="https://github.com/oracle/graal/issues/1002">GitHub ticket</a> and based on the information there I had to figure out what is really happening.

So let's refresh a bit what annotations are and after that let's have a look at what we may be doing wrong that was okay so far but may cause trouble when JPMS comes into the picture.

<h2>What is an annotation?</h2>

Annotations are interfaces that are declared using the <code>interface</code> keyword preceded with the <code>@</code> character. This makes the annotation usable in the code the way we got used to. Using the name of the annotation interface with the <code>@</code> in front of it (e.g.: @Example). The most frequently used such annotation is <code>@Override</code> that the Java compiler is using during compile time.

Many frameworks use annotations during run-time, others hook into the compilation phase implementing an annotation processor. <a href="https://javax0.wordpress.com/2013/09/11/dont-write-biolerplate-use-scriapt/">I wrote about annotation processors and how to create one.</a> This time we focus on the simpler way: handling annotations during run-time. We do not even implement the annotation interface, which is a rarely used possibility but is complex and hard to do <a href="https://javax0.wordpress.com/2016/03/16/implementing-an-annotation-interface/">as the article describes</a>.

To use an annotation during run-time the annotation has to be available during run-time. By default, the annotations are available only during compile-time and do not get into the generated byte-code. It is a common mistake to forget (I always do) to put the <code>@Retention(RetentionPolicy.RUNTIME)</code> annotation on the annotation interface and then starting to debug why I cannot see my annotation when I access it using reflection.

A simple run-time annotation looks like the following:

<!-- snip Demo -->

[code lang=java]
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Demos.class)
public @interface Demo {
    String value() default &quot;&quot;;
}
[/code]

The annotations have parameters when used on classes, on methods, or on other annotated elements. These parameters are methods in the interface. In the example, there is only one method declared in the interface. It is called <code>value()</code>. This is a special one. This is a kind of default method. If there are no other parameters of an annotation interface, or even if there are but we do not want to use the other parameters and they all have default values then we can write

[code lang=java]
@Demo(&quot;This is the value&quot;)
[/code]

instead of

[code lang=java]
@Demo(value=&quot;This is the value&quot;)
[/code]

If there are other parameters that we need to use then we do not have this shortcut.

As you can see annotations were introduced on top of some existing structure. Interfaces and classes are used to represent annotations and it was not something totally new introduced into Java.

Starting with Java 1.8 there can be multiple annotations of the same type on an annotated element. You could have that feature even before Java 1.8. You could define another annotation, for example

<!-- snip Demos -->

[code lang=java]
@Retention(RetentionPolicy.RUNTIME)
public @interface Demos {
    Demo[] value();
}
[/code]

and then use this wrapper annotation on the annotated element, like

<!-- snip DemoClassNonAbbreviated -->

[code lang=java]
@Demos(value = {
    @Demo(&quot;This is a demo class&quot;),
    @Demo(&quot;This is the second annotation&quot;)})
public class DemoClassNonAbbreviated {
}
[/code]

To ease the tendinitis, caused by excessive typing, Java 1.8 introduced the annotation <code>Repeatable</code> (as you can see on the annotation interface <code>Demo</code>) and that way the above code can be written simply as

<!-- snip DemoClassAbbreviated -->

[code lang=java]
@Demo(&quot;This is a demo class&quot;)
@Demo(&quot;This is the second annotation&quot;)
public class DemoClassAbbreviated {
}
[/code]

<h2>How to read the annotation using reflection</h2>

Now that we know that the annotation is just an interface the next question is how can we get information about them. The methods that deliver the information about the annotations are in the reflection part of the JDK. If we have an element that can have an annotation (e.g. a <code>Class</code>, <code>Method</code> or <code>Field</code> object) then we can call <code>getDeclaredAnnotations()</code> on that element to get all the annotations that the element has or <code>getDeclaredAnnotation()</code> in case we know what annotation we need.

<img src="https://javax0.files.wordpress.com/2019/07/annotationstructure.png" alt="" width="625" height="285" class="aligncenter size-full wp-image-2211" />

The return value is an annotation object (or an annotation array in the first case). Obviously, it is an object because everything is an object in Java (or a primitive, but annotations are anything but primitive). This object is the instance of a class that implements the annotation interface. If we want to know what string the programmer wrote between the parenthesis we should write something like

<!--snip GetValue_01 trim="do"-->

[code lang=java]
final var klass = DemoClass.class;
final var annotation = klass.getDeclaredAnnotation(Demo.class);
final var valueMethod = annotation.getClass().getMethod(&quot;value&quot;);
final var value = valueMethod.invoke(annotation);
Assertions.assertEquals(&quot;This is a demo class&quot;, value);
[/code]

Because value is a method in the interface, certainly implemented by the class that we have access to through one of its instances we can call it reflectively and get back the result, which is <code>"This is a demo class"</code> in this case.

<h2>What is the problem with this approach</h2>

Generally nothing as long as we are not in the realm of JPMS. We get access to the method of the class and invoke it. We could get access to the method of the interface and invoke it on the object but in practice, it is the same. (Or not in case of JPMS.)

I was using this approach in Java::Geci. The framework uses the <code>@Geci</code> annotation to identify which class needs generated code inserted into. It has a fairly complex algorithm to find the annotations because it accepts any annotation that has the name <code>Geci</code> no matter which package it is in and it also accepts any <code>@interface</code> that is annotated with a <code>Geci</code> annotation (it is named <code>Geci</code> or the annotation has an annotation that is <code>Geci</code> recursively).

This complex annotation handling has its reason. The framework is complex so the use can be simple. You can either say:

[code lang=java]
@Geci(&quot;fluent definedBy=&#039;javax0.geci.buildfluent.TestBuildFluentForSourceBuilder::sourceBuilderGrammar&#039;&quot;)
[/code]

or you can have your own annotations and then say

[code lang=java]
@Fluent(definedBy=&quot;javax0.geci.buildfluent.TestBuildFluentForSourceBuilder::sourceBuilderGrammar&quot;)
[/code]

The code was working fine up until Java 11. When the code was executed using Java 11 I got the following error from one of the tests

[code lang=text]
java.lang.reflect.InaccessibleObjectException: 
Unable to make public final java.lang.String com.sun.proxy.jdk.proxy1.$Proxy12.value() 
accessible: module jdk.proxy1 does not 
&quot;exports com.sun.proxy.jdk.proxy1&quot; to module geci.tools
[/code]

(Some line breaks were inserted for readability.)

The protection of JPMS kicks in and it does not allow us to access something in the JDK we are not supposed to. The question is what do we really do and why do we do it?

When doing tests in JPMS we have to add a lot of <code>--add-opens</code> command-line argument to the tests because the test framework wants to access the part of the code using reflection that is not accessible for the library user. But this error code is not about a module that is defined inside Java::Geci.

JPMS protects the libraries from bad use. You can specify which packages contain the classes that are usable from the outside. Other packages even if they contain public interfaces and classes are only available inside the module. This helps module development. Users cannot use the internal classes so you are free to redesign them so long as long the API remains. The file <code>module-info.java</code> declares these packages as

<!--snip moduleinfo-->

[code lang=java]
module javax0.jpms.annotation.demo.use {
    exports javax0.demo.jpms.annotation;
}
[/code]

When a package is exported the classes and interfaces in the package can be accessed directly or via reflection. There is another way to give access to classes and interfaces in a package. This is opening the package. The keyword for this is <code>opens</code>. If the <code>module-info.java</code> only <code>opens</code> the package then this is accessible only via reflection.

The above error message says that the module <code>jdk.proxy1</code> does not include in its <code>module-info.java</code> a line that <code>exports com.sun.proxy.jdk.proxy1</code>. You can try and add an <code>add-exports jdk.proxy1/com.sun.proxy.jdk.proxy1=ALL_UNNAMED</code> but it does not work. I do not know why it does not work, but it does not. And as a matter of fact, it is good that it is not working because the package <code>com.sun.proxy.jdk.proxy1</code> is an internal part of the JDK, like <code>unsafe</code> was, that caused so much headache to Java in the past.

Instead of trying to illegally open the treasure box let's focus on why we wanted to open it in the first place and if we really need to access to that?

What we want to do is get access to the method of the class and invoke it. We can not do that because the JPMS forbids it. Why? Because the Annotation objects class is not <code>Demo.class</code> (which is obvious since it is just an interface). Instead it's a proxy class that implements the <code>Demo</code> interface. That proxy class is internal to the JDK and so we can not call <code>annotation.getClass()</code>.
But why would we access the class of the proxy object, when we want to call the method of our annotation?

Long story short (I mean a few hours of debugging, investigating and understanding instead of mindless stackoverflow copy/paste that nobody does): we must not touch the <code>value()</code> method of the class that implements the annotation interface. We have to use the following code:

<!--snip GetValue_02 trim="do"-->

[code lang=java]
final var klass = DemoClass.class;
final var annotation = klass.getDeclaredAnnotation(Demo.class);
final var valueMethod = annotation.annotationType().getMethod(&quot;value&quot;);
final var value = valueMethod.invoke(annotation);
Assertions.assertEquals(&quot;This is a demo class&quot;, value);
[/code]

or alternatively

[code lang=java]
final var klass = DemoClass.class;
final var annotation = klass.getDeclaredAnnotation(Demo.class);
final var valueMethod = Demo.class.getMethod(&quot;value&quot;);
final var value = valueMethod.invoke(annotation);
Assertions.assertEquals(&quot;This is a demo class&quot;, value);
[/code]

(This is already fixed in Java::Geci 1.2.0) We have the annotation object but instead of asking for the class of it we have to get access to the <code>annotationType()</code>, which is the interface itself that we coded. That is something the module exports and thus we can invoke it.

<small>MihÃ¡ly VerhÃ¡s, my son, who is also a Java developer at EPAM usually reviews my articles. In this case, the "review" was extended and he wrote a non-negligible part of the article.</small>

Dr Heinz M. Kabutz posted recently an article that is about a related matter, worth reading: https://www.javaspecialists.eu/archive/Issue273.html]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2203</wp:post_id>
  <wp:post_date>2019-07-31 16:00:59</wp:post_date>
  <wp:post_date_gmt>2019-07-31 15:00:59</wp:post_date_gmt>
  <wp:post_modified>2019-10-12 09:08:02</wp:post_modified>
  <wp:post_modified_gmt>2019-10-12 08:08:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>annotation-handling-and-jpms</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9ca9e1e79c218fb5601c2c7763cf0a93</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_53201e981abd4f3d54e43e544b6d26f1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1156580915746955266";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[33485390714]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1564585352]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Java Projects: Book Review]]></title>
  <link>https://javax0.wordpress.com/2019/08/21/java-projects-book-review/</link>
  <pubDate>Wed, 21 Aug 2019 15:00:44 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2226</guid>
  <description/>
  <content:encoded><![CDATA[This article is about the book

<blockquote>
  Java Projects Second Edition, by Peter Verhas
</blockquote>

<img src="https://static.packt-cdn.com/products/9781789131895/cover/smaller" alt="" class="aligncenter size-full wp-image-2211" />

that I wrote last year. The aim of such an article is usually to boost the sales of the book. It is no different in this case, but since this is a book that I wrote, and I am the person, who is writing the review it would be extremely awkward to praise the book. So I will not, although I like this book a lot. I think loving your own product, at least at the time when it is ready is a must. You may think about it differently later like I do about the previous edition of the same book, which could have been better. But then again, that is why there is the second edition in addition to the fact that Java developed in the meantime and it became Java 11 from Java 9. But back to the previous thought: you have to love your product when it is finished otherwise you can just throw it away. If you do not like it no-one else will. What is also important that you also have to love your work while you are working on it. And I did and I enjoyed creating this book.

Thus now I will write about the book, what it is, and what I intended it to be. Later in the article, I will also talk about how I was working on the book, some technicalities, and some secrets. (They are not that much of a secret if I publish them here, are they.) But before those, have the URLs here, where you can buy my book at PACKT, or Amazon, etc.

<ul>
<li><a href="https://subscription.packtpub.com/book/application-development/9781789131895">PACKT</a></li>
<li><a href="https://www.amazon.com/Java-Projects-fundamentals-programming-practical-ebook/dp/B07G1B4R8B">Amazon</a></li>
<li><a href="https://www.oreilly.com/library/view/java-projects-/9781789131895/">Safari</a></li>
</ul>

<h1>Intended Audience and Content of the Book</h1>

In agreement with the publisher, I wanted to write a book for those, who want to learn Java but already have some programming experience. I did not want to write about the simple notion of variables, loops, conditional constructs. I wanted to write a book that teaches you Java and a bit of programming. I wanted a book that any PHP, Python, C#, C, C++, Go, etc. programmer fresh out of uni can read and learn some Java programming and they can decide if it is for them or not. I wanted to dedicate the last chapter to non-java programming topics, like what can happen later in your career if you start as a programmer. You can remain a programmer, or become an architect, project manager, devops engineer. There are many possibilities based upon opportunities and interest. This intention was met with less agreement from the publisher side, but they accepted that my hands are the one that hit the keyboard and we got to a compromise. So the last chapter is also about some technical topics, like Java agent, polyglot programming, annotation processing, DSL, SDLC and so on.

<h1>Content of the book</h1>

The book has ten chapters in a bit more than 500 pages.

<ul>
<li>Chapter ONE</li>
</ul>

is how you get started. To start you need to install the Java environment and you have to get familiar with the command line tools. This is a bit cumbersome and in the case of Java, it is more complex than it is with other languages. I have some friends who started to learn Java using this book and struggled with it (not because of the book, but because of the complexity of the task). When you start learning Java you have to be patient at this point and you must have a strong belief that it will work.

<ul>
<li>Chapter TWO</li>
</ul>

is about the supporting tools and about the basic language elements. Even though the book is for those who can already program in some programming language, the text has to describe the basic elements of the language like variables, classes, methods, types, expressions, loops and so on. You can see how complex Java is so that it is already the second chapter we are in and we just start the language.

<ul>
<li>Chapter THREE</li>
</ul>

is where we start programming something more complex than a "Hello, World". The program is a sorting program and we implement not only the simple bubble sort but also quick sort. Along the way, we also touch topics like generics, TDD, unit tests, Java modules. These are advanced topics that originally were planned in later chapters, but I wanted to explain less the language and more programming along with the language.

<ul>
<li>Chapter FOUR </li>
</ul>

is a new program, and brings us new topics. In this chapter, we (I imagine the reader and I) develop the game <a href="https://en.wikipedia.org/wiki/Mastermind_(board_game)">Mastermind</a>. The user, sitting in front of the computer "hides" the pins and the program finds out what is hidden. The same chapter talks about collections, dependency injection, and integration tests.

<ul>
<li>Chapter FIVE</li>
</ul>

is the one I am most proud of. It is about concurrent programming. Many books use an example that scales well. You run it on one processor and it runs. You run it on two processors and it runs twice as fast. In real life usually, tasks are not that independent. So I decided to make the Mastermind game concurrent. This needed some refactoring. Honestly: I did not realize that before I started to write chapter 5 and chapter 4 was already finished. I decided not to rewrite chapter 4 (although that would have been the smaller amount of work), rather I detailed in the chapter the coding decisions and how the code has to be refactored. This is only a part of a chapter that is already about a very complex topic, so do not expect a full-blown refactoring tutorial. If you need a good book about refactoring then read <a href="https://martinfowler.com/books/refactoring.html">Martin Fowler's Refactoring</a> book.

In addition to that, the chapter details most of the concurrent programming tools: wait, notify, locks, queues. The chapter concludes with the introduction of microbenchmarking that shows how faster parallel programs run faster on many CPUs.

<ul>
<li>Chapter SIX</li>
</ul>

is about creating a simple web interface for the program. Because the main topic of the book is Java and not HTML, CSS and JavaScript, the front-end is fairly simple. On the other hand, the chapter focuses on IP, TCP, DNS, HTTP, and even HTTP/2. Then it goes on detailing the C/S architecture, mentions JavaServer Pages (a must is a must) and then we develop the code writing a servlet running with Jetty.

<ul>
<li>Chapter SEVEN</li>
</ul>

uses a new program and here we develop a REST service using Spring MVC, servlet filters, audit logging with AOP and we even discuss how dynamic proxies work.

<ul>
<li>Chapter EIGHT</li>
</ul>

extends the program and touches subjects like annotations, reflection, functional programming and scripting in Java.

<ul>
<li>Chapter NINE</li>
</ul>

is the last coding chapter. Here we create an "accounting" application using reactive interface. It is a bit awkward example but at the time I could not find anything better. Nevertheless, the principles of reactive programming and how to use the new reactive interfaces in Java are described in this chapter.

<ul>
<li>Chapter TEN</li>
</ul>

is the last chapter and that way it is the densest. It talks about topics that all developers should know about but hardly any developer will use. You, probably, will never create a Java agent or an annotation interface. But you should know what they are and that is why they are described here. There are also a few words about polyglot programming, which will be more and more prevalent. The majority of the chapter is about how programming in an enterprise setting works.

<h1>Motivation</h1>

My motivation was to create a programming book that will outlast the current version of Java. A book that teaches whoever reads it a bit of programming and helps them start to become a better programmer. Maybe my frustration meeting a lot of job interview candidates who had no clue in some of the very essential areas but who still thought they were senior developers was also a motivation factor.

<h1>Technicalities</h1>

At the start, I teased that I will tell you some secrets. Here they are.

Packt wanted me to write the book using Microsoft Word or using an online Wordpress based WYSIWYG editor. Wordpress has markup editing possibility, but this was switched off. I asked that they switch it on, but I was refused. So I decided to use Microsoft Word when I created the first edition of the book. The result was disastrous. The code samples copied from the actual source were reformatted during the editing process somewhere in the hands of the editors. Some of the formatting change made the code hard to read. Some of the changes were simply wrong, like removing all the spaces between the word <code>int</code> and the variable name <code>n</code> resulting <code>intn</code>.

When I started the second edition I decided to hack the system. By that time I was practicing a bit with Python and I created the Pyama project that can fetch code fragments from the source directories and it can insert it into Markdown files overriding the old versions. I also created a script that converted the special Wordpress flavor HTML into Markdown and back. The first edition of my book was converted by Packt into this Wordpress format.

When I opened a chapter with the WYSIWYG editor I pressed F12 to get to the debug mode and I used "edit HTML" on the WYSIWYG form to copy the HTML and paste it into a text file. I converted the input HTML to Markdown and I worked on the Markdown version. I like to work in a way that I edit the markup and at the same time, I can see the rendered page. When a chapter was ready I converted it back to HTML and I used the same debug mode to paste the code back. It worked. Packt did not know it.

<h1>Summary</h1>

I believe that I wrote a book, which can be used professionally to learn programming and a bit also Java 11. As I wrote at the start of the first chapter:

<blockquote>It is like going through a path in a forest. You can focus on the gravel of the road but it is pointless. Instead, you can enjoy the view, the trees, the birds, and the environment around you, which is more enjoyable. This book is similar as I won't be focusing only on the language. From time to time, I will cover topics that are close to the road and will give you some overview and directions on where you can go further after you finish this book. I will not only teach you the language but also talk a bit about algorithms, object-oriented programming principles, tools that surround Java development, and how professionals work. This will be mixed with the coding examples that we will follow.</blockquote>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2226</wp:post_id>
  <wp:post_date>2019-08-21 16:00:44</wp:post_date>
  <wp:post_date_gmt>2019-08-21 15:00:44</wp:post_date_gmt>
  <wp:post_modified>2019-08-27 11:08:43</wp:post_modified>
  <wp:post_modified_gmt>2019-08-27 10:08:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-projects-book-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c7b14ea7b4891d99093dc64875ea69f8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e087f57e086edcf296d2fcd8df92749e</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-amazon"><iframe title="Java Projects: Learn the fundamentals of Java 11 programming by building industry grade practical projects, 2nd Edition" type="text/html" width="625" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.com/kp/card?preview=inline&linkCode=kpd&ref_=k4w_oembed_KELxwU2CBpkIKa&asin=B07G1B4R8B&tag=kpembed-20"></iframe></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_e087f57e086edcf296d2fcd8df92749e</wp:meta_key>
    <wp:meta_value><![CDATA[1565941606]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[34372809144]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1566399670]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1164190723509542913";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30319</wp:comment_id>
    <wp:comment_author><![CDATA[savanrajput]]></wp:comment_author>
    <wp:comment_author_email>savanrajput1185@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://technologybookspublication.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>113.193.198.152</wp:comment_author_IP>
    <wp:comment_date>2021-04-27 07:17:30</wp:comment_date>
    <wp:comment_date_gmt>2021-04-27 06:17:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello , your blog is informative and very help full for beginners , thank you for sharing it .]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>203270583</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619504251.737254;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"savanrajput";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619508843.608495;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"savanrajput";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1619896785]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1619896785]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619896786.298316;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[ValueTypes video, must see for juniors]]></title>
  <link>https://javax0.wordpress.com/2019/08/22/valuetypes-video-must-see-for-juniors/</link>
  <pubDate>Thu, 22 Aug 2019 20:26:04 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2249</guid>
  <description/>
  <content:encoded><![CDATA[JAX-TV uploaded the recording of my talk I presented this year in Mainz at W-JAX

https://www.youtube.com/watch?v=vA4ZJpFNLhM

The topic is Java ValueTypes. The talk, however, starts with the topic of how the CPU feels the time. What are the different ratios between the different time intervals when we read something from the CPU cache, memory, SSD or even over the network? This is a knowledge needed to understand the importance of value types.

The talk uses the same metaphor (the CPU as a bureaucrat and the clock as the heartbeat), which I also used in my book. It is very graphic and easy to remember, therefore I think this is a good listen for every junior. Even perhaps for some of the seniors.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2249</wp:post_id>
  <wp:post_date>2019-08-22 21:26:04</wp:post_date>
  <wp:post_date_gmt>2019-08-22 20:26:04</wp:post_date_gmt>
  <wp:post_modified>2019-08-22 21:26:04</wp:post_modified>
  <wp:post_modified_gmt>2019-08-22 20:26:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>valuetypes-video-must-see-for-juniors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1164634887594418176";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1566505568]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[34426204283]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Tools to keep JavaDoc up-to-date]]></title>
  <link>https://javax0.wordpress.com/2019/09/04/keep-javadoc-up-to-date/</link>
  <pubDate>Wed, 04 Sep 2019 14:00:12 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2257</guid>
  <description/>
  <content:encoded><![CDATA[There are many projects where the documentation is not up-to-date. It is easy to forget to change the documentation after the code was changed. The reason is fairly understandable. There is a change in the code, then debug, then hopefully change in the tests (or the other way around in the reverse order if you are more TDD) and then the joy of a new functioning version and the happiness about the new release makes you forget to perform the cumbersome task updating the documentation.

In this article, I will show an example, how to ease the process and ensure that the documentation is at least more up-to-date.

<h1>The tool</h1>

The tool I use in this article is Java::Geci, which is a code generation framework. The original design aim of Java::Geci is to provide a framework in which, it is extremely easy to write code generators that inject code into already existing Java source code or generate new Java source files. Hence the name: GEnerate Code Inline or GEnerate Code, Inject.

What does a code generation support tool do when we talk about documentation?

On the highest level of the framework, the source code is just a text file. Documentation, like JavaDoc, is text. Documentation in the source directory structure, like markdown files, is text. Copying and transforming parts of the text to other location is a special form of code generation. This is exactly what we will do.

<h1>Two uses for documentation</h1>

There are several ways Java::Geci supports documentation. I will describe one of these in this article.

The way is to locate some lines in the unit tests and copy the content after possible transformation into the JavaDoc. I will demonstrate this using a sample from the <code>apache.commons.lang</code> project current master version after release 3.9. This project is fairly well documented although there is room for improvement. This improvement has to be performed with as little human effort as possible. (Not because we are lazy, but rather because the human effort is error-prone.)

<blockquote>It is important to understand that Java::Geci is not a preprocessing tool. The code gets into the actual source code and it gets updated. Java::Geci does not eliminate the redundancy of copy-paste code and text. It manages it and ensures that the code remains copied and created over and over again whenever something inducing change in the result happens.</blockquote>

<h1>How Java::Geci works in general</h1>

If you have already heard about Java::Geci you can skip this chapter. For the others here is the brief structure of the framework.

Java::Geci generates code when the unit tests run. Java::Geci actually runs as one or more unit tests. There is a fluent API to configure the framework. This essentially means that a unit test that runs generators is one single assertion statement that creates a new <code>Geci</code> object, calls the configuration methods and then calls <code>generate()</code>. This method, <code>generate()</code> returns true when it has generated something. If all the code it generated is exactly the same as it was already in the source files then it returns <code>false</code>. Using an <code>Assertion.assertFalse</code> around it will fail the test in case there was any change in the source code. Just run the compilation and the tests again.

The framework collects all the files that were configured to be collected and invokes the configured and registered code generators. The code generators work with abstract <code>Source</code> and <code>Segment</code> objects that represent the source files and the lines in the source files that may be overwritten by generated code. When all the generators have finished their work the framework collects all segments, inserts them into <code>Source</code> objects and if any of them significantly changed then it updates the file.

Finally, the framework returns to the unit test code that started it. The return value is <code>true</code> if there was any source code file updated and <code>false</code> otherwise.

<h1>Examples into JavaDoc</h1>

The JavaDoc example is to automatically include examples into the documentation of the method <code>org.apache.commons.lang3.ClassUtils.getAbbreviatedName()</code> in the Apache Commons Lang3 library. The documentation currently in the <code>master</code> branch is:

[code lang=java]
/**
*

Gets the abbreviated class name from a {@code String}.

*
*

The string passed in is assumed to be a class name - it is not checked.

*
*

The abbreviation algorithm will shorten the class name, usually without
* significant loss of meaning.

*

The abbreviated class name will always include the complete package hierarchy.
* If enough space is available, rightmost sub-packages will be displayed in full
* length.

*
*

**
*
*
*
*
*
&lt;table&gt;&lt;caption&gt;Examples&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;className&lt;/td&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&quot;&quot;&lt;/td&gt;
&lt;td&gt;&quot;java.lang.String&quot;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&quot;j.l.String&quot;&lt;/td&gt;
&lt;td&gt;&quot;java.lang.String&quot;&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&quot;j.lang.String&quot;&lt;/td&gt;
&lt;td&gt;&quot;java.lang.String&quot;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&quot;java.lang.String&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
* @param className the className to get the abbreviated name for, may be {@code null}
* @param len the desired length of the abbreviated name
* @return the abbreviated name or an empty string
* @throws IllegalArgumentException if len &lt;= 0
* @since 3.4
*/
[/code]

The problem we want to solve is to automatize the maintenance of the examples. To do that with Java::Geci we have to do three things:

<ol>
    <li>Add Java::Geci as a dependency to the project</li>
    <li>Create a unit test that runs the framework</li>
    <li>Mark the part in the unit test, which is the source of the information</li>
    <li>replace the manually copied examples text with a Java::Geci `Segment` so that Java::Geci will automatically copy the text from the test there</li>
</ol>

<h2>Dependency</h2>

Java::Geci is in the Maven Central repository. The current release is <code>1.2.0</code>. It has to be added to the project as a test dependency. There is no dependency for the final LANG library just as there is no dependency on JUnit or anything else used for the development. There are two explicit dependencies that have to be added:

[code lang=text]
com.javax0.geci
javageci-docugen
1.2.0
test


com.javax0.geci
javageci-core
1.2.0
test

[/code]

The artifact <code>javageci-docugen</code> contains the document handling generators. The artifact <code>javageci-core</code> contains the core generators. This artifact also bring the <code>javageci-engine</code> and <code>javageci-api</code> artifacts. The engine is the framework itself, the API is, well the API.

<h2>Unit test</h2>

The second change is a new file, <code>org.apache.commons.lang3.docugen.UpdateJavaDocTest</code>. This file is a simple and very conventional Unit tests:

[code lang=java]
/*
* Licensed to the Apache Software Foundation (ASF) ...
*/
package org.apache.commons.lang3.docugen;

import *;

public class UpdateJavaDocTest {

@Test
void testUpdateJavaDocFromUnitTests() throws Exception {
final Geci geci = new Geci();
int i = 0;
Assertions.assertFalse(geci.source(Source.maven())
.register(SnippetCollector.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(SnippetAppender.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(SnippetRegex.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(SnippetTrim.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(SnippetNumberer.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(SnipetLineSkipper.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.register(MarkdownCodeInserter.builder().files(&quot;\\.java$&quot;).phase(i++).build())
.splitHelper(&quot;java&quot;, new MarkdownSegmentSplitHelper())
.comparator((orig, gen) -&gt; !orig.equals(gen))
.generate(),
geci.failed());
}

}
[/code]

What we can see here is huge <code>Assertions.assertFalse</code> call. First, we create a new <code>Geci</code> object and then we tell it where the source files are. Without getting into the details, there are many different ways how the user can specify where the sources are. In this example, we just say that the source files are where they usually are when we use Maven as a build tool.

The next thing we do is that we register the different generators. Generators, especially code generators usually run independent and thus the framework does not guarantee the execution order. In this case, these generators, as we will see later, very much depend on the actions of each other. It is important to have them executed in the correct order. The framework let us achieve this via phases. The generators are asked how many phases they need and in each phase, they are also queried if they need to be invoked or not. Each generator object is created using a builder pattern and in this, each is told which phase it should run. When a generator is configured to run in phase <code>i</code> (calling <code>.phase(i)</code>) then it will tell the framework that it will need at least <code>i</code> phases and for phases <code>1..i-1</code> it will be inactive. This way the configuration guarantees that the generators run in the following order:

<ol>
    <li>SnippetCollector</li>
    <li>SnippetAppender</li>
    <li>SnippetRegex</li>
    <li>SnippetTrim</li>
    <li>SnippetNumberer</li>
    <li>SnipetLineSkipper</li>
    <li>MarkdownCodeInserter</li>
</ol>

Technically all these are generators, but they do not "generate" code. The <code>SnippetCollector</code> collects the snippets from the source files. <code>SnippetAppender</code> can append multiple snippets together, when some sample code needs the text from different parts of the program. <code>SnippetRegex</code> can modify the snippets before using regular expressions and replaceAll functionality (we will see that in this example). <code>SnippetTrim</code> can remove the leading tabs and spaces from the start of the lines. This is important when the code is deeply tabulated. In this case, simply importing the snipped into the documentation could easily push the actual characters off of the printable area on the right side. <code>SnippetNumberer</code> can number snippet lines in case we have some code where the documentation refers to certain lines. <code>SnipetLineSkipper</code> can skip certain lines from the code. For example, you can configure it so that the import statements will be skipped.

Finally, the real "generator" that may alter the source code is <code>MarkdownCodeInserter</code>. It was created to insert the snippets into the Markdown-formatted files, but it works just as well for Java source files when the text needs to be inserted into a JavaDoc part.

The last two but one configuration calls tell the framework to use the <code>MarkdownSegmentSplitHelper</code> and to compare the original lines and those that were created after the code generation using a simple <code>equals</code>. <code>SegmentSplitHelper</code> objects help the framework to find the segments in the source code. In Java files, the segments are usually and by default between

[code lang=java]
//
[/code]

and

[code lang=java]
//
[/code]

lines. This helps to separate the manual and the generated code. The editor-fold is also collapsible in all advanced editor so you can focus on the manually created code.

In this case, however, we insert into segments that are inside JavaDoc comments. These JavaDoc comments more like Markdown than Java in the sense that they may contain some markup but also HTML friendly. Very specifically, they may contain XML comments that will not appear in the output document. The segment start in this case, as defined by the <code>MarkdownSegmentSplitHelper</code> object is between

[code lang=java]
&lt;!-- snip snipName parameters ... --&gt;
[/code]

and

[code lang=java]
&lt;!-- end snip --&gt;
[/code]

lines.

The comparator has to be specified for a very specific reason. The framework has two comparators built-in. One is the default comparator that compares the lines one by one and character by character. This is used for all file types except Java. In the case of Java, there is a special comparator used, which recognizes when only a comment was changed or when the code was only reformatted. In this case, we are changing the content of the comment in a Java file, so we need to tell the framework to use the simple comparator or else it will not relaize we updated anything. (It took 30 minutes to debug why it was not updating the files first.)

The final call is to <code>generate()</code> that starts the whole process.

<h2>Mark the code</h2>

The unit test code that documents this method is <code>org.apache.commons.lang3.ClassUtilsTest.test_getAbbreviatedName_Class()</code>. This should look like the following:

[code lang=java]
@Test
public void test_getAbbreviatedName_Class() {
// snippet test_getAbbreviatedName_Class
assertEquals(&quot;&quot;, ClassUtils.getAbbreviatedName((Class&lt;?&gt;) null, 1));
assertEquals(&quot;j.l.String&quot;, ClassUtils.getAbbreviatedName(String.class, 1));
assertEquals(&quot;j.l.String&quot;, ClassUtils.getAbbreviatedName(String.class, 5));
assertEquals(&quot;j.lang.String&quot;, ClassUtils.getAbbreviatedName(String.class, 13));
assertEquals(&quot;j.lang.String&quot;, ClassUtils.getAbbreviatedName(String.class, 15));
assertEquals(&quot;java.lang.String&quot;, ClassUtils.getAbbreviatedName(String.class, 20));
// end snippet
}
[/code]

I will not present here the original, because the only difference is that the two <code>snippet ...</code> and <code>end snippet</code> lines were inserted. These are the triggers for the <code>SnippetCollector</code> to collect the lines between them and store them in the "snippet store" (nothing mysterious, practically a big hash map).

<h2>Define a segment</h2>

The really interesting part is how the JavaDoc is modified. At the start of the article, I already presented the whole code as it is today. The new version is:

[code lang=java]
/**
* Gets the abbreviated class name from a {@code String}.
*
* The string passed in is assumed to be a class name - it is not checked.
*
* The abbreviation algorithm will shorten the class name, usually without
* significant loss of meaning.
* The abbreviated class name will always include the complete package hierarchy.
* If enough space is available, rightmost sub-packages will be displayed in full
* length.
*
*
*
* you can write manually anything here, the code generator will update it when you start it up
*
&lt;table&gt;&lt;caption&gt;Examples&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;className&lt;/td&gt;
&lt;td&gt;len&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;!-- snip test_getAbbreviatedName_Class regex=&quot;
replace=&#039;/~s*assertEquals~((.*?)~s*,~s*ClassUtils~.getAbbreviatedName~((.*?)~s*,~s*(~d+)~)~);/*
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;{@code $2}&lt;/td&gt;
&lt;td&gt;$3&lt;/td&gt;
&lt;td&gt;{@code $1}&lt;/td&gt;
&lt;/tr&gt;
/&#039; escape=&#039;~&#039;&quot; --&gt;&lt;!-- end snip --&gt;
&lt;/tbody&gt;
&lt;/table&gt;
* @param className the className to get the abbreviated name for, may be {@code null}
* @param len the desired length of the abbreviated name
* @return the abbreviated name or an empty string
* @throws IllegalArgumentException if len &lt;= 0
* @since 3.4
*/
[/code]

The important part is where the lines 15...20 are. (You see, sometimes it is important to number the snippet lines.) The line 15 signals the segment start. The name of the segment is <code>test_getAbbreviatedName_Class</code> and when there is nothing else defines it will also be used as the name of the snippet to insert into. However, before the snippet gets inserted it is transformed by the <code>SnippetRegex</code> generator. It will replace every match of the regular expression

[code lang=text]
\s*assertEquals\((.*?)\s*,\s*ClassUtils\.getAbbreviatedName\((.*?)\s*,\s*(\d+)\)\);
[/code]

with the string

[code lang=text]
*
{@code $2}$3{@code $1}

[/code]

Since these regular expressions are inside a string that is also inside a string we would need <code>\\\\</code> instead of a single <code>\</code>. That would make our regular expressions look awful. Therefore the generator <code>SnippetRegex</code> can be configured to use some other character of our choice, which is less fence-phenomenon prone. In this example, we use the tilde character and it usually works. What it finally results when we run it is:

[code lang=text]
&lt;!-- snip test_getAbbreviatedName_Class regex=&quot;
replace=&#039;/~s*assertEquals~((.*?)~s*,~s*ClassUtils~.getAbbreviatedName~((.*?)~s*,~s*(~d+)~)~);/*
&lt;tr&gt;
&lt;td&gt;{@code $2}&lt;/td&gt;
&lt;td&gt;$3&lt;/td&gt;
&lt;td&gt;{@code $1}&lt;/td&gt;
&lt;/tr&gt;
/&#039; escape=&#039;~&#039;&quot; --&gt;
*
{@code (Class) null}1{@code &quot;&quot;}

*
{@code String.class}1{@code &quot;j.l.String&quot;}

*
{@code String.class}5{@code &quot;j.l.String&quot;}

*
{@code String.class}13{@code &quot;j.lang.String&quot;}

*
{@code String.class}15{@code &quot;j.lang.String&quot;}

*
{@code String.class}20{@code &quot;java.lang.String&quot;}

&lt;!-- end snip --&gt;
[/code]

<h1>Summary / Takeaway</h1>

Document updating can be automatized. At first, it is a bit cumbersome. Instead of copying and reformatting the text the developer has to set up a new unit test, mark the snippet, mark the segment, fabricate the transformation using regular expressions. However, when it is done any update is automatic. It is not possible to forget to update the documentation after the unit tests changed.

This is the same approach that we follow when we create unit tests. At first, it is a bit cumbersome to create unit tests instead of just debugging and running the code in an ad-hoc way and see if it really behaves as we expected, looking at the debugger. However, when it is done any update is automatically checked. It is not possible to forget to check an old functionality when the code affecting that changes.

In my opinion documentation maintenance should be as automatized as testing. Generally: anything that can be automatized in software development has to be automatized to save effort and to reduce the errors.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2257</wp:post_id>
  <wp:post_date>2019-09-04 15:00:12</wp:post_date>
  <wp:post_date_gmt>2019-09-04 14:00:12</wp:post_date_gmt>
  <wp:post_modified>2019-09-18 19:08:29</wp:post_modified>
  <wp:post_modified_gmt>2019-09-18 18:08:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>keep-javadoc-up-to-date</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[34924687115]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1567605637]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1169248860704608256";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28266</wp:comment_id>
    <wp:comment_author><![CDATA[BÃ©la ÃjhÃ¡zi]]></wp:comment_author>
    <wp:comment_author_email>bela.ujhazi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>91.120.28.2</wp:comment_author_IP>
    <wp:comment_date>2019-09-18 08:40:41</wp:comment_date>
    <wp:comment_date_gmt>2019-09-18 07:40:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This tool naming never gets old :D]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[https://lh3.googleusercontent.com/a-/AAuE7mB73DwKvoSymYPu3UM_InZeJ06ij70fIupprEJyQw]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[106940722968992510600]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1568801205]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1568796933.462614;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1568801205]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1568801206.596248;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1568792442.975028;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28267</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>178.197.227.113</wp:comment_author_IP>
    <wp:comment_date>2019-09-18 11:08:53</wp:comment_date>
    <wp:comment_date_gmt>2019-09-18 10:08:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The naming may be a source of fun, but it is not the important point.

Also, the release 1.2.0 has a JVM8 backport that is available in the maven central repo with the same coordinates as the main release replacing the <code>javax0</code> to <code>javax1</code> in the <code>groupId</code>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28266</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1568801335]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1568801335.250099;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1568801334]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28310</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:13</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Keep JavaDoc up-to-date [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424859.33106;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420013.711812;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546234]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546234.805357;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Test coverage decreased and it is good (short, read)]]></title>
  <link>https://javax0.wordpress.com/2019/09/11/test-coverage-decreased-and-it-is-good-short-read/</link>
  <pubDate>Wed, 11 Sep 2019 14:00:30 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2330</guid>
  <description/>
  <content:encoded><![CDATA[Synchronicity concept of Carl Gustav Jung says that events are "meaningful coincidences" if they occur with no causal relationship yet seem to be meaningfully related. Such a thing happened to me recently related to some pull requests. I was working on a FOSS project and I created a pull request that was refused by the CI server with the reason that a pull request that decreases the test coverage level cannot be merged. I knew why the code coverage percentage decreased and I knew that this not only was not bad but actually, it was good. I could convince the maintainers to skip this condition in this case. A few days later a junior developer told me that his pull request was refused in a totally unrelated project with the same reason. He explained to the lead developers why it was OK to decrease the code coverage, but in the end, they asked him to create some new tests. He is junior. Happening the same thing in two consecutive days made me feel that this may be meaningful and perhaps worth writing about it.

But how can that happen that the code coverage decreases and it is good?

Assume that you have a simple program, that has 100 LOC (lines of code). 50 LOC are covered by tests and the other 50 LOC are not. The code coverage is 50%.

You modify the code and refactor a method, which is originally 20 LOC, 100% covered by tests and the result is 10 LOC, 100% covered by the original tests. It is just that the old code was badly designed and redundant (level 5, Programmer induced redundancy). Now the coverage is 100%* 40/90 = 44.44%.

Is this a problem? The sheer number 44.44% by itself is actually a problem, just as well as the 50% before the refactoring was a problem. However, the fact that the code was made simpler and shorter and because of that the coverage decreased is definitely not a problem.

Should you delete this rule from the CI server build process, namely that a pull request must not decrease the relative test code coverage? Certainly not. There are many more cases when a lazy or just not careful enough developer misses some tests than the case that I described above. The decreasing coverage is a good indicator that the pull request may not be of superb quality. There are exceptions though and those have to be handled.

Should you command a junior in case of such a pull request to write some more tests that increase the coverage although totally unrelated to the actual change? I do not know. I certainly would not do that. I would accept the pull request making an exception and then I would ask the junior to create some more tests if that is needed. But these are totally unrelated. On second thought though, it may be a good idea to refuse the pull request. After all, juniors have to be educated not only about coding and programming but also about how the real-life with real-jerk seniors works.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2330</wp:post_id>
  <wp:post_date>2019-09-11 15:00:30</wp:post_date>
  <wp:post_date_gmt>2019-09-11 14:00:30</wp:post_date_gmt>
  <wp:post_modified>2019-09-03 15:57:55</wp:post_modified>
  <wp:post_modified_gmt>2019-09-03 14:57:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-coverage-decreased-and-it-is-good-short-read</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="development"><![CDATA[development]]></category>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <category domain="category" nicename="light"><![CDATA[light]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[35174786867]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1568210439]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1171785633217560576";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Your code is redundant, live with it!]]></title>
  <link>https://javax0.wordpress.com/2019/09/18/your-code-is-redundant-live-with-it/</link>
  <pubDate>Wed, 18 Sep 2019 14:00:35 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2351</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>This article is about necessary and unavoidable code redundancy and discusses a model of code redundancy that helps to understand why source code generators do what they do, why they are needed at all.</blockquote>

<h1>Intro</h1>

The code you write in Java, or for that matter in any other language, is redundant. Not by the definition that says (per Wikipedia page https://en.wikipedia.org/wiki/Redundant_code):

<blockquote>In computer programming, redundant code is source code or compiled code in a computer program that is unnecessary, such as...</blockquote>

Your code may also be redundant this way, but that is a different kind of story than I want to talk here and now. If it is, then fix it, and improve your coding skills. But this probably is not the case because you are a good programmer. The redundancy that is certainly in your code is not necessarily unnecessary. There are different sources of redundancy and some redundancies are necessary, others are unnecessary but unavoidable.

The actual definition of redundancy we need, in this case, is more like the information theory definition of redundancy (per the Wikipedia page https://en.wikipedia.org/wiki/Redundancy_(information_theory))

<blockquote>In Information theory, redundancy measures the fractional difference between the entropy H(X) of an ensemble X, and its maximum possible value log(|A_X|)</blockquote>

UPPPS... DO NOT STOP READING!!!

This is a very precise, but highly unusable definition for us. Luckily the page continues and says:

<blockquote>Informally, it is the amount of wasted âspaceâ used to transmit certain data. Data compression is a way to reduce or eliminate unwanted redundancy.</blockquote>

In other words, some information encoded in some form is redundant if it can be compressed.

For example, downloading and zipping the text of the classical English novel Moby Dick will shrink its size down to 40% of the original text. Doing the same with the source code of Apache Commons Lang we get 20%. It is definitely NOT because of this âcode in a computer program that is unnecessaryâ. This is some other ânecessaryâ redundancy. English and other languages are redundant, programming languages are redundant and this is the way it is.

<blockquote>
If we analyze this kind of redundancy we can see that there are six levels of redundancy. What I will write here about the six layers is not well-known or well-established theory. Feel free to challenge it. 

This model and categorization are useful to establish a way of thinking about code generation when to generate code, why to generate code. After all, I came up with this model when I was thinking about the Java::Geci framework and I was thinking about why I invested a year of hobby time into this when there are so many other code generation tools. This redundancy model kind of gives the correct reason that I was only feeling before.
</blockquote>

<h1>Levels of Redundancy</h1>

Then the next question is if these (English and programming language) are the only reasons for redundancy. The answer is that we can identify six different levels of redundancy including those already mentioned.

<h2>0 Natural</h2>

This is the redundancy of the English language or just any other natural language. This redundancy is natural and we got used to it. The redundancy evolved with the language and it was needed to help the understanding a noisy environment. We do not want to eliminate this redundancy, because if we did we may end up reading some binary code. For most of us, this is not really appealing. This is how human and programmer brain works.

<h2>1 Language</h2>

The programming language is also redundant. It is even more redundant than the natural language it is built on. The extra redundancy is because the number of keywords is very limited. That makes the compression ration from 60% percent up to 80% in the case of Java. Other languages, like Perl, are denser and alas they are less readable. However, this is also a redundancy that we do not want to fight. Decreasing the redundancy coming from the programming language redundancy certainly would decrease readability and thus maintainability.

<h2>2 Structural</h2>

There is another source of redundancy that is already independent of the language. This is the code structure redundancy. For example when we have a method that has one argument then the code fragments that call this method should also use one argument. If the method changes for more arguments then all the places that call the method also have to change. This is a redundancy that comes from the program structure and this is not only something that we do not want to avoid, but it is also not possible to avoid without losing information and that way code structure.

<h2>3 Domain induced</h2>

We talk about domain induced redundancy when the business domain can be described in a clear and concise manner but the programming language does not support such a description. A good example can be a compiler. This example is in a technical domain that most programmers are familiar with. A context-free syntax grammar can be written in a clear and nice form using BNF format. If we create the parser in Java it certainly will be longer. Since the BNF form and the Java code mean the same and the Java code is significantly longer we can be sure that the Java code is redundant from the information theory point of view. That is the reason why we have tools for this example domain, like ANTLR, Yacc and Lex and a few other tools.

Another example is the Fluent API. A fluent API can be programmed implementing several interfaces that guide the programmer through the possible sequences of chained method calls. It is a long and hard to maintain way to code a fluent API. The same time a fluent API grammar can be neatly described with a regular expression because fluent APIs are described by finite-state grammars. The regular expression listing the methods describing alternatives, sequences, optional calls, and repetitions is more readable and shorter and less redundant than the Java implementation of the same. That is the reason why we have tools like Java::Geci Fluent API generators that convert a regular expression of method calls to fluent API implementation.

This is an area where decreasing the redundancy can be desirable and may result in easier to maintain and more readable code.

<h2>4 Language evolution</h2>

Language evolution redundancy is similar to the domain induced redundancy but it is independent of the actual programming domain. The source of this redundancy is a weakness of the programming language. For example, Java does not automatically provide getters and setters for fields. If you look at C# or Swift, they do. If we need them in Java, we have to write the code for it. It is boilerplate code and it is a weakness in the language. Also, in Java, there is no declarative way to define <code>equals()</code> and <code>hashCode()</code> methods. There may be a later version of Java that will provide something for that issue. Looking at past versions of Java it was certainly more redundant to create an anonymous class than writing a lambda expression. Java evolved and this was introduced into the language.

Language evolution is always a sensitive issue. Some languages run fast and introduce new features. Other languages, like Java, are more relaxed or, we can say conservative. As Brian Goetz wrote in response to a tweet that was urging new features:

<em>"It depends.  Would you rather get the wrong feature sooner, but have to live with it forever?"

@BrianGoetz Replying to @joonaslehtinen and @java 10:43 PM Â· Sep 16, 2019</em>

The major difference between domain induced redundancy and language evolution caused redundancy is that while it is impossible to address all programming domains in a general-purpose programming language, the language evolution will certainly eliminate the redundancy enforced by language shortages. While the language evolves we have code generators in the IDEs and in programs like Lombok that address these issues.

<h2>5 Programmer induced</h2>

This kind of redundancy correlates with the classical meaning of code redundancy. This is when the programmer cannot generate good enough code and there are unnecessary and excessive code structures or even copy-paste code in the program. The typical example is the before mentioned "Legend of the sub-par developer". In this case, code generation can be a compromise but it is usually a bad choice. On a high level, from the project manager point of view, it may be okay. They care about the cost of the developers and they may decide to hire only cheaper developers. On the programmer level, on the other hand, this is not acceptable. If you have the choice to generate code or write better code you have to choose the latter. You must learn and develop yourself so that you can develop better code.

<h1>Outro</h1>

... or takeaway.

When I first started to write about the Java::Geci framework, somebody commented "why another code generation tool"? And the question is certainly valid. There are many tools like that as mentioned in the article.

However, if we look at the code redundancy categorization then what we can see is that Java::Geci can be used to manage the Domain Induced redundancy and perhaps the Language Evolution caused redundancy. In the case of the latter, there are many concurrent programs, and Java::Geci cannot compete, for example with the ease of use of the IDE built-in code generation.

There are many generators that address some specific domains and manage the extra redundancy using code generation. Java::Geci is the only one to my knowledge that provides a general framework that makes the domain-specific code generator creation simple.

To recognize that the real use case is for domain-specific generators the above redundancy model helps a lot.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2351</wp:post_id>
  <wp:post_date>2019-09-18 15:00:35</wp:post_date>
  <wp:post_date_gmt>2019-09-18 14:00:35</wp:post_date_gmt>
  <wp:post_modified>2019-09-18 11:06:30</wp:post_modified>
  <wp:post_modified_gmt>2019-09-18 10:06:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>your-code-is-redundant-live-with-it</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[35417837181]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1568815241]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1174322355167989760";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28385</wp:comment_id>
    <wp:comment_author><![CDATA[A New Era for Determining Equivalence in Java? | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/10/23/a-new-era-for-determining-equivalence-in-java/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.88.54</wp:comment_author_IP>
    <wp:comment_date>2019-10-23 16:02:32</wp:comment_date>
    <wp:comment_date_gmt>2019-10-23 15:02:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is a shortage in the language that comes from language evolution as I described in the article Your Code is Redundant&#8230;. A temporal shortage that will be fixed later but as for now, we have to handle this [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1571842952.275768;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1571848308.404829;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1571908697]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1571908697.944562;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28309</wp:comment_id>
    <wp:comment_author><![CDATA[Handling repeated code automatically | Java Deep]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.230</wp:comment_author_IP>
    <wp:comment_date>2019-09-25 15:00:11</wp:comment_date>
    <wp:comment_date_gmt>2019-09-25 14:00:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Your code is redundant, live with it! [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569424858.94352;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1569420011.791437;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1569546235]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1569546235.616052;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Handling repeated code automatically]]></title>
  <link>https://javax0.wordpress.com/2019/09/25/handling-repeated-code-automatically/</link>
  <pubDate>Wed, 25 Sep 2019 14:00:09 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2368</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>In this article I will describe how you can use Java::Geci generator <code>Repeated</code> to overcome the Java language shortage that generics cannot be primitive. The example is a suggested extension of the Apache Commons Lang library.</blockquote>

<h1>Introduction</h1>

When you copy-paste code you do something wrong. At least that is the perception. You have to create your code structure more generalized so that you can use different parameters instead of similar code many times.

This is not always the case. Sometimes you have to repeat some code because the language you use does not (yet) support the functionality that would be required for the problem.

This is too abstract. Let's have a look at a specific example and how we can manage it using the <code>Repeated</code> source generator, which runs inside the Java::Geci framework.

<h1>The problem</h1>

The class <code>org.apache.commons.lang3.Functions</code> in the Apache Commons Lang library defines an inner interface <code>FailableFunction</code>. This is a generic interface defined as

[code lang=java]
    @FunctionalInterface
    public interface FailableFunction&lt;I, O, T extends Throwable&gt; {
        /**
         * Apply the function.
         * @param pInput the input for the function
         * @return the result of the function
         * @throws T if the function fails
         */
        O apply(I pInput) throws T;
    }
[/code]

This is essentially the same as <code>Function&lt;I,O&gt;</code>, which converts an <code>I</code> to an <code>O</code> but since the interface is failable, it can also throw an exception of type <code>T</code>.

The new need is to have

[code lang=java]
    public interface Failable&lt;I&gt;Function&lt;O, T extends Throwable&gt; 
[/code]

itnerfaces for each <code>&lt;I&gt;</code> primitive values. The problem is that the generics cannot be primitive (yet) in Java, and thus we should separate interfaces for each primitive types, as

[code lang=java]
    @FunctionalInterface
    public interface FailableCharFunction&lt;O, T extends Throwable&gt; {
        O apply(char pInput) throws T;
    }
    @FunctionalInterface
    public interface FailableByteFunction&lt;O, T extends Throwable&gt; {
        O apply(byte pInput) throws T;
    }
    @FunctionalInterface
    public interface FailableShortFunction&lt;O, T extends Throwable&gt; {
        O apply(short pInput) throws T;
    }
    @FunctionalInterface
    public interface FailableIntFunction&lt;O, T extends Throwable&gt; {
        O apply(int pInput) throws T;
    }
... and so on ...
[/code]

This is a lot of very similar methods that could easily be described by a template and then been generated by some code generation tool.

<h1>Template handling using Java::Geci</h1>

The Java::Geci framework comes with many off-the-shelf generators. One of them is the powerful <code>Repeated</code> generator, which is exactly for this purpose. If there is a code that has to be repeated with possible parameters then you can define a template, the values and <code>Repeated</code> will generate the code resolving the template parameters.

<h2>Adding dependency to the POM</h2>

The first thing we have to do is to add the Java::Geci dependencies to the <code>pom.xml</code> file. Since Apache Commons Language is still Java 8 based we have to use the Java 8 backport of Java::Geci 1.2.0:

[code lang=xml]
    &lt;dependency&gt;
      &lt;groupId&gt;com.javax1.geci&lt;/groupId&gt;
      &lt;artifactId&gt;javageci-core&lt;/artifactId&gt;
      &lt;version&gt;1.2.0&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
[/code]

Note that the scope of the dependency is <code>test</code>. The generator <code>Repeated</code> can conveniently be used without any Geci annotations that remain in the byte code and thus are compile-time dependencies. As a matter of fact, all of the generators can be used without annotations thus without any compile dependencies that would be an extra dependency for the production. In the case of <code>Repeated</code> this is even easy to do.

<h2>Unit test to run the generator</h2>

The second thing we have to do is to create a unit test that will execute the generator. Java::Geci generators run during the unit test phase, so they can access the already compiled code using reflection as well as the actual source code. In case there is any code generated that is different from what was already there in the source file the test will fail and the build process should be executed again. Since generators are (should be) idempotent the test should not fail the second time.

<blockquote>As I experience, this workflow has an effect on the developer behavior, unfortunately. Run the test/ fails, run again! It is a bad cycle. Sometimes I happen to catch myself re-executing the unit tests when it was not a code generator that failed. However, this is how Java::Geci works.</blockquote>

There are articles about the Java::Geci workflow

<ul>
<li><a href="https://javax0.wordpress.com/2019/09/18/your-code-is-redundant-live-with-it/">Your code is redundant, live with it!</a></li>
<li><a href="https://javax0.wordpress.com/2019/09/04/keep-javadoc-up-to-date/">Keep JavaDoc up-to-date</a></li>
<li><a href="https://javax0.wordpress.com/2019/06/19/converting-objects-to-map-and-back/">Converting Objects to Map and Back</a></li>
<li><a href="https://javax0.wordpress.com/2019/06/05/reflection-selector-expression-2/">Reflection Selector Expression</a></li>
<li><a href="https://javax0.wordpress.com/2019/05/29/generating-setters-and-getters-using-javageci/">Generating Getters and Setters using Java::Geci</a></li>
<li><a href="https://javax0.wordpress.com/2019/05/08/creating-a-javageci-generator/">Creating a Java::Geci generator</a></li>
<li><a href="https://javax0.wordpress.com/2019/04/24/how-to-generate-souce-code/">How to generate Source Code</a></li>
</ul>

so I will not repeat here the overall architecture and how its workflow goes.

The unit tests will be the following:

[code lang=java]
    @Test
    void generatePrimitiveFailables() throws Exception {
        final Geci geci = new Geci();
        Assertions.assertFalse(geci.source(Source.maven().mainSource())
                .only(&quot;Functions&quot;)
                .register(Repeated.builder()
                    .values(&quot;char,byte,short,int,long,float,double,boolean&quot;)
                    .selector(&quot;repeated&quot;)
                    .define((ctx, s) -&gt; ctx.segment().param(&quot;Value&quot;, CaseTools.ucase(s)))
                    .build())
                .generate(),
            geci.failed());
    }
[/code]

The calls <code>source()</code>, <code>register()</code> and <code>only()</code> configure the framework. This configuration tells the framework to use the source files that are in the main Java <code>src</code> directory of the project and to use only the file names <code>"Functions"</code>. The call to <code>register()</code> registers the <code>Repeated</code> generator instance right before we call <code>generate()</code> that starts the code generation.

The generator instance itself is created using the built-in builder that lets us configure the generator. In this case, the call to <code>values()</code> defines the comma-separated list of values with which we want to repeat the template (defined later in the code in a comment). The call to <code>selector()</code> defines the identifier for this code repeated code. A single source file may contain several templates. Each template can be processed with a different list of values and the result will be inserted into different output segments into the source file. In this case there is only one such code generation template, still, it has to be identified with a name and this name has also to be used in the <code>editor-fold</code> section which is the placeholder for the generated code.

The actual use of the name of the generator has two effects. One is that it identifies the editor fold segment and the template. The other one is that the framework will see the editor-fold segment with this identifier and it will recognize that this source file needs the attention of this generator. The other possibility would be to add the <code>@Repeated</code> or <code>@Geci("repeated")</code> annotation to the class.

If the identifier were something else and not <code>repeated</code> then the source code would not be touched by the generator <code>Repeated</code> or we would need another segment identified as <code>repeated</code>, which would not actually be used other than trigger the generator.

The call to <code>define()</code> defines a <code>BiConsumer</code> that gets a context reference and an actual value. In this case, the <code>BiConsumer</code> calculates the capitalized value and puts it into the actual segment parameter set associated with the name <code>Value</code>. The actual value is associated with the name <code>value</code> by default and the <code>BiConsumer</code> passed to the method <code>define()</code> can define and register other parameters. In this case, it will add new values as

[code lang=text]
value       Value

char    --&gt; Char
byte    --&gt; Byte
short   --&gt; Short
int     --&gt; Int
long    --&gt; Long
float   --&gt; Float
double  --&gt; Double
boolean --&gt; Boolean
[/code]

<h2>Source Code</h2>

The third thing is to prepare the template and the output segment in the source file.

The output segment preparation is extremely simple. It is only an editor fold:

[code lang=java]
    //&lt;editor-fold id=&quot;repeated&quot;&gt;
    //&lt;/editor-fold&gt;
[/code]

The generated code will automatically be inserted between the two lines and the editors (Eclipse, IntelliJ or NetBeans) will allow you to close the fold. You do not want to edit this code: it is generated.

The template will look like the following:

[code lang=java]
    /* TEMPLATE repeated
    @FunctionalInterface
    public interface Failable{{Value}}Function&lt;O, T extends Throwable&gt; {
        O apply({{value}} pInput) throws T;
    }
    */
[/code]

The code generator finds the start of the template looking for lines that match the <code>/* TEMPLATE name</code> format and collect the consecutive lines till the end of the comment.

The template uses the mustache template placeholder format, namely the name of the values enclosed between double braces. Double braces are rare in Java.

When we run the unit test it will generate the code that I already listed at the start of the article. (And after that it will fail of course: source code was modified, compile it again.)

<h1>Summary and Takeaway</h1>

The most important takeaway and WARNING: source code generation is a tool that aims to amend shortages of the programming language. Do not use code generations to amend a shortage that is not of the language but rather your experience, skill or knowledge about the language. The easy way to code generation is not an excuse to generate unnecessarily redundant code.

Another takeaway is that it is extremely easy to use this generator in Java. The functionality is comparable to the C preprocessor that Java does not have and for good. Use it when it is needed. Even though the setup of the dependencies and the unit test may be a small overhead later the maintainability usually pays this cost back.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2368</wp:post_id>
  <wp:post_date>2019-09-25 15:00:09</wp:post_date>
  <wp:post_date_gmt>2019-09-25 14:00:09</wp:post_date_gmt>
  <wp:post_modified>2019-09-18 15:37:42</wp:post_modified>
  <wp:post_modified_gmt>2019-09-18 14:37:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>handling-repeated-code-automatically</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1569420010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[35666747885]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1176858936709980160";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Java Record]]></title>
  <link>https://javax0.wordpress.com/2019/10/16/java-record/</link>
  <pubDate>Wed, 16 Oct 2019 14:00:59 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2405</guid>
  <description/>
  <content:encoded><![CDATA[The https://openjdk.java.net/jeps/359 outlines a new Java feature that may/will be implemented in some future versions of Java. The JEP suggests having a new type of "class": record. The sample in the JEP reads as follows:

[code lang=java]
record Range(int lo, int hi) {
  public Range {
    if (lo &gt; hi)  /* referring here to the implicit constructor parameters */
      throw new IllegalArgumentException(String.format(&quot;(%d,%d)&quot;, lo, hi));
  }
}
[/code]

Essentially a record will be a class that intends to have only <code>final</code> fields that are set in the constructor. The JEP as of today also allows any other members that a class has, but essentially a record is a record, pure data and perhaps no functionality at its core. The description of a record is short and to the point and eliminates a lot of boilerplate that we would need to encode such a class in Java 13 or less or whichever version record will be implemented. The above code using conventional Java will look like the following:

[code lang=java]
public class Range {

    final int lo;
    final int hi;

    public Range(int lo, int hi) {
        if (lo &gt; hi)  /* referring here to the implicit constructor parameters */
            throw new IllegalArgumentException(String.format(&quot;(%d,%d)&quot;, lo, hi));
        this.lo = lo;
        this.hi = hi;
    }
}
[/code]

Considering my Java::Geci code generation project this was something that was screaming for a code generator to bridge the gap between today and the day when the new feature will be available on all production platforms.

Thus I started to think about how to develop this generator and I faced a few issues. The Java::Geci framework can only convert a compilable project to another compilable project. It cannot work like some other code generators that convert an incomplete source code, which cannot be compiled without the modifications of the code generator, to a complete version. This is because Java::Geci works during the test phase. To get to the test phase the code has to compile first. This is a well-known trade-off and was a design decision. In most of the cases when Java::Geci is useful this is something easy to cope with. On the other hand, we gain the advantage that the generators do not need configuration management like reading and interpreting property or XML files. They only provide an API and the code invoking them from a test configure the generators through it. The most advantage is that you can even provide call-backs in forms of method references, lambdas or object instances that are invoked by the generators so that these generators can have a totally open structure in some aspects of their working.

Why is this important in this case? The record generation is fairly simple and does not need any complex configuration, as a matter of fact, it does not need any configuration at all. On the other hand, the <code>compilable -&amp;gt; compilable</code> restrictions are affecting it. If you start to create a record using, say Java 8 and Java::Geci then your manual code will look something like this:

[code lang=java]
@Geci(&quot;record&quot;)
public class Range {

    final int lo;
    final int hi;
}
[/code]

This does not compile, because by the time of the first compilation before the code generation starts the default constructor does not initialize the fields. Therefore the fields cannot be <code>final</code>:

[code lang=java]
@Geci(&quot;record&quot;)
public class Range {

    int lo;
    int hi;
}
[/code]

Running the generator we will get

[code lang=java]
package javax0.geci.tests.record;

import javax0.geci.annotations.Geci;

@Geci(&quot;record&quot;)
public final class Range {
    final  int  lo;
    final  int  hi;

    //&lt;editor-fold id=&quot;record&quot;&gt;
    public Range(final int lo, final int hi) {
        this.lo = lo;
        this.hi = hi;
    }

    public int getLo() {
        return lo;
    }

    public int getHi() {
        return hi;
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(lo, hi);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Range that = (Range) o;
        return java.util.Objects.equals(that.lo, lo) &amp;&amp; java.util.Objects.equals(that.hi, hi);
    }
    //&lt;/editor-fold&gt;
}
[/code]

what this generator actually does is that

<ul>
<li>it generates the constructor</li>
<li>converts the class and the fields to <code>final</code> as it is a requirement by the JEP</li>
<li>generates the getters for the fields</li>
<li>generates the <code>equals()</code> and <code>hashCode()</code> methods for the class</li>
</ul>

If the class has a <code>void</code> method that has the same (though case insensitive) name as the class, for example:

[code lang=java]
    public void Range(double hi, long lo) {
        if (lo &gt; hi)  /* referring here to the implicit constructor parameters */
            throw new IllegalArgumentException(String.format(&quot;(%d,%d)&quot;, lo, hi));
    }
[/code]

then the generator will

<ul>
<li>invoke that method from the generated constructor,</li>
<li>modify the argument list of the method to match the current list of fields.</li>
</ul>

[code lang=java]
    public void Range(final int lo, final int hi) {
        if (lo &gt; hi)  /* referring here to the implicit constructor parameters */
            throw new IllegalArgumentException(String.format(&quot;(%d,%d)&quot;, lo, hi));
    }

    //&lt;editor-fold id=&quot;record&quot;&gt;
    public Range(final int lo, final int hi) {
        Range(lo, hi);
        this.lo = lo;
        this.hi = hi;
    }
[/code]

Note that this generation approach tries to behave the possible closest to the actual <code>record</code> as proposed in the JEP and generates code that can be converted to the new syntax as soon as it is available. This is the reason why the validator method has to have the same name as the class. When converting to a real record all that has to be done is to remove the <code>void</code> keyword converting the method to be a constructor, remove the argument list as it will be implicit as defined in the JEP and remove all the generated code between the editor folds (also automatically generated when the generator was executed first).

The modification of the manually entered code is a new feature of Java::Geci that was triggered by the need of the Record generator and was developed to overcome the shortcomings of the <code>compilable -&amp;gt; compilable</code> restriction. How a generator can use this feature that will be available in the next 1.3.0 release of Java::Geci will be detailed in a subsequent article.

Takeaway

The takeaway of this article is that you can use Java records with Java 8, 9, ... even before it becomes available.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2405</wp:post_id>
  <wp:post_date>2019-10-16 15:00:59</wp:post_date>
  <wp:post_date_gmt>2019-10-16 14:00:59</wp:post_date_gmt>
  <wp:post_modified>2019-10-12 20:45:11</wp:post_modified>
  <wp:post_modified_gmt>2019-10-12 19:45:11</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>java-record</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[36406927493]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1571234521]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1184469550341017600";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>29824</wp:comment_id>
    <wp:comment_author><![CDATA[rupali2]]></wp:comment_author>
    <wp:comment_author_email>wrupali11@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://clinicalsearch315527547.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>42.106.126.63</wp:comment_author_IP>
    <wp:comment_date>2020-10-03 16:42:27</wp:comment_date>
    <wp:comment_date_gmt>2020-10-03 15:42:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice blog, Thank you to share such an informative blog with us. For more information about<a href="https://www.clariwell.in/best-java-course-in-pune" rel="nofollow ugc"> java programing </a> visit here :https://www.clariwell.in]]></wp:comment_content>
    <wp:comment_approved>trash</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>191051465</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[true]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1601739748.107594;s:5:"event";s:10:"check-spam";s:4:"user";s:7:"rupali2";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1601739748.145052;s:5:"event";s:20:"status-changed-trash";s:4:"user";s:7:"rupali2";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28361</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url>https://botcompany.de</wp:comment_author_url>
    <wp:comment_author_IP>90.186.63.209</wp:comment_author_IP>
    <wp:comment_date>2019-10-16 15:17:55</wp:comment_date>
    <wp:comment_date_gmt>2019-10-16 14:17:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When they extend Java on the source level nowadays, it's always really late and typically quite restricted. I've had records in my Java source-level extension for years... it's one of the easier parts too. Just crank out the boilerplate and allow user to override whatever they want.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1571235475.401091;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1571235475]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1571235475]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_like_count</wp:meta_key>
      <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Supporting Java 8]]></title>
  <link>https://javax0.wordpress.com/2019/11/06/supporting-java-8/</link>
  <pubDate>Wed, 06 Nov 2019 15:00:45 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2443</guid>
  <description/>
  <content:encoded><![CDATA[Although Java has version 13 released as for now, there are a lot of production installations running with Java 8. As a professional, I develop Java 8 code many times even these days and I have to be happy that this is not Java 6. On the other hand as an open-source developer, I have my liberty to develop my Java code using Java 11, 12 or even 13 if that pleases me. And it does.

On the other hand, though, I want my code to be used. Developing a tool like License3j or Java::Geci, which are kind of libraries releasing Java 11 compatible byte code cuts off all the Java 8 based applications that may use these libraries.

<blockquote>I want the libraries to be available from Java 8.</blockquote>

One solution is to keep two branches parallel in the Git repo and have a Java 11+ and a Java 8 version of the code. This is what I have done for Java::Geci 1.2.0 release. It is cumbersome, error-prone and it is a lot of work. I had this code only because my son, who is also a Java developer starting his career volunteered.

(No, I did not pressure him. He speaks and writes better English than I do, and he regularly reviews these articles fixing my broken languages. If he has different opinion about the pressure, he is free to insert here any note till the closing parenthesis, I will not delete or modify that. NOTE: )

Anything above between the <code>NOTE:</code> and <code>)</code> is his opinion.

The other possibility is to use <a href="https://github.com/bsideup/jabel" rel="noopener" target="_blank">Jabel</a>.

In this article, I will write about how I used Jabel in the project Java::Geci. The documentation of Jabel is short but still complete and it really works like that for simpler projects. For example I really only had to add a few lines to the <code>pom.xml</code> in case of the Licenese3j project. For more complex projects that were developed over a year without thinking about any compromise for Java 8 compatibility, it is a bit more complex.

<h1>About Jabel</h1>

Jabel is an open-source project available from https://github.com/bsideup/jabel. If you have a Java 9+ project source you can configure Jabel to be part of the compilation process. It is an annotation processor that hooks into the compilation process and kind of tricks the compiler to accept the Java 9+ features as they were available for Java 8. The compiler will work and generate Java 8, Jabel does not interfere with the byte code generation, so this is as genuine as it can be out of the Java compiler fresh and warm. It only instructs the compiler not to freak out on Java 9+ features when compiling the code.

The way it works and why it can work is well written on the project's GitHub page. What I wrote above may not even be precise.

<h1>Backport issues</h1>

When creating Java code using Java 9+ features targeting a Java 8 JVM it is not only the byte code version that we should care about. The code executed using the Java 8 JVM will use the Java 8 version of the JDK and in case we happen to use some classes or methods that are not available there then the code will not run. Therefore we have two tasks:

<ul>
<li>Configure the build to use Jabel to produce Java 8 byte-code</li>
<li>eliminate the JDK calls that are not available in Java 8.</li>
</ul>

<h2>Configure Build</h2>

I will not describe here how to configure Jabel to be part of the build using Maven. It is documented on the site and is straightforward.

In the case of Java::Geci I wanted something different. I wanted a Maven project that can be used to create Java 8 as well as Java 11 targets. I wanted this because I wanted Java::Geci to support JPMS just as before and also to create state-of-the-art byte code (class nesting instead of bridge methods for example) for those projects that run on Java 11 or later.

As the first step, I created a profile named <code>JVM8</code>. Jabel is only configured to run only when this profile is active.

This profile also sets the release as

[code lang=text]
&lt;release&gt;8&lt;/release&gt;
[/code]

so the very first time the compiler was freaking out when it saw the <code>module-info.java</code> files. Fortunately, I can exclude files in the POM file in the <code>JVM8</code> profile. I also excluded <code>javax0/geci/log/LoggerJDK9.java</code> and I will talk about that later.

I also tried to use Maven to automatically configure the version number to have the <code>-JVM8</code> postfix if it runs with the <code>JVM8</code> profile but it was not possible. Maven is a versatile tool and can do many things and in case of a simpler project doing that should be the approach. In the case of Java::Geci I could not do that because Java:Geci is a multi-module project.

Multi-module projects refer to each other. At least the child module reference the parent module. The version of the child module may be different from the version of the parent module. It is kind of logical since their evolution and development are not necessarily tied together. However, usually, it is. In projects, like Java::Geci that has seven child modules and each child module has the very same version number as the parent the child modules can inherit all the parameters, dependencies, compiler optionsÂ and so on, from the parent but the version. It cannot inherit the version because it does not know which parent version to inherit it from. It is a catch 22.

The Java::Geci development goes around this problem using the Jamal preprocessor maintaining the eight <code>pom.xml</code> files. Whenever there is a change in the build configuration it has to be edited in one of the <code>pom.xml.jam</code> files or in one of the included <code>*.jim</code> files and then the command line <code>mvn -f genpom.xml clean</code> will regenerate all the new <code>pom.xml</code> files. This also saves some repetitive code as the preprocessed Jamal files are not so verbose as the corresponding XML files. The price for this is that the macros used have to be maintained.

Java::Geci has a <code>version.jim</code> file that contains the version of the project as a macro. When targeting a Java 8 release then the version in this file has to be changed to <code>x.y.z-JVM8</code> and the command <code>mvn -f genpom.xml clean</code> has to be executed. Unfortunately, this is a manual step that I may forget. I may also forget to remove the <code>-JVM8</code> postfix after the Java 8 target was created.

To mitigate the risk of this human error I developed a unit test that checks the version number is coherent with the compilation profile. It identified the compilation profile reading the <code>/javax0/geci/compilation.properties</code> file. This is a resource file in the project filtered by Maven and contains

[code lang=text]
projectVersion=${project.version}
profile=${profile}
[/code]

When the test runs the properties are replaced by the actual values as defined in the project. <code>project.version</code> is the project version. The property <code>profile</code> is defined in the two profiles (default and <code>JVM8</code>) to be the name of the profile.

If the version and the profile do not match the test fails. Following the philosophy of Java::Geci, the test does not just order the programmer to fix the "bug" when the test itself can also fix the bug. It modifies the <code>version.jim</code> file so that it contains the correct version. It does not, however, run the pom file generating Jamal macros.

As a result of this I will get release files with version <code>x.y.z</code> and also <code>x.y.z-JVM8</code> after the second build with some manual editing work.

<h2>Eliminate Java 8+ JDK calls</h2>

<h3>Simple calls</h3>

This is a simple task at first sight. You must not use methods that are not in Java 8 JDK. We could do anything using Java 8 so it is a task that certainly possible.

For example every

[code lang=java]
&quot; &quot;.repeat(tab)
[/code]

has to be eliminated. To do that I created a class <code>JVM8Tools</code> that contain static methods. For example:

[code lang=java]
public static String space(int n){
    final StringBuilder sb = new StringBuilder(/*20 spaces*/&quot;                    &quot;);
    while( sb.length() &lt; n){
        sb.append(sb);
    }
    return sb.substring(0,n).toString();
}
[/code]

is defined there and using this method I can write

[code lang=java]
space(tab)
[/code]

instead of the invocation of <code>String::repeat</code> method. This part was easy.

<h3>Mimicking <code>getNestHost</code></h3>

What was a bit more difficult is to implement the <code>getNestHost()</code> method. There is no such thing in Java 8, but the selector expressions included in the Tools module of Java::Geci lets you use expressions, like

[code lang=java]
Selector.compile(&quot;nestHost -&gt; (!null &amp; simpleName ~ /^Map/)&quot;).match(Map.Entry.class)
[/code]

to check that the class <code>Entry</code> is declared inside <code>Map</code>, which it trivially is. It makes sense to use this expression even in Java 8 environment someone chooses to do so and I did not want to perform amputation dropping this feature from Java::Geci. It had to be implemented.

The implementation checks the actual run-time and in case the method is there in the JDK then it calls that via reflection. In other cases, it mimics the functionality using the name of the class and trying to find the <code>$</code> character that separates the inner and the enclosing class name. This may lead to false results in the extremely rare case when there are multiple instances of the same class structures loaded using different class loaders. I think that a tool, like Java::Geci can live with it, it barely happens while executing unit tests.

There is also a speed drawback calling the method <code>Class#getNestHost</code> reflectively. I decide to fix it if there will be real demand.

<h3>Logging support</h3>

The last issue was logging. Java 9 introduced a logging facade that is highly recommended to be used by the libraries. Logging is a long-standing problem in the Java environment. The problem is not that there is not any. Quite the opposite. There are too many. There is Apache Commons Logging, Log4j, Logback, the JDK built-in java util logging. A standalone application can select the logging framework it uses, but in case a library uses a different one then it is difficult if not impossible to funnel the different log messages into the same stream.

Java 9 thus introduced a new facade that a library can use to send out its logs and the applications can channel the output through the facade to whatever logging framework they want. Java::Geci uses this facade and provides logging API for the generators through it. In case the JVM8 environment this is not possible. In that case Java::Geci channels the log messages into the standard Java logger. To do that there is a new interface <code>LoggerJDK</code> implemented by two classes <code>LoggerJVM8</code> and <code>LoggerJDK9</code>. The source code for the latter is excluded from the compilation in case the target is Java 8.

The actual logger tries to get the <code>javax0.geci.log.LoggerJDK9#factory</code> via reflection. If it is there, then it is possible to use the Java 9 logging. If it is not there then the logger falls back to with the factory to <code>javax0.geci.log.LoggerJVM8#factory</code>. That way only the logger factory is called via reflection, which happens only once for every logger. Logging itself is streamlined and uses the target logging without any reflection, thus without speed impediment.

<h1>Takeaway</h1>

It is possible to support Java 8 in most of the library project without unacceptable compromise. We can create two different binaries from the same source that support the two different versions in a way that the version supporting Java 9 and later does not "suffer" from the old byte code. There are certain compromises. You must avoid calling Java 9+ API and in case there is an absolute need, you have top provide a fall-back and you can provide a reflection-based run-time detection solution.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2443</wp:post_id>
  <wp:post_date>2019-11-06 16:00:45</wp:post_date>
  <wp:post_date_gmt>2019-11-06 15:00:45</wp:post_date_gmt>
  <wp:post_modified>2019-11-03 21:53:45</wp:post_modified>
  <wp:post_modified_gmt>2019-11-03 20:53:45</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>supporting-java-8</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[37142697122]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1573052497]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1192094694941036545";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Repeated code]]></title>
  <link>https://javax0.wordpress.com/2019/11/27/repeated-code/</link>
  <pubDate>Wed, 27 Nov 2019 15:00:20 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2462</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>

It is usually not good to have copy/paste code in our Java application but sometimes it is unavoidable. For example the project License3j provides a method <code>isXXX</code> in the <code>Feature</code> class for each <code>XXX</code> type it supports. In that case, we can do no better than write

[code lang=java]
    public boolean isBinary() {
        return type == Type.BINARY;
    }

    public boolean isString() {
        return type == Type.STRING;
    }

    public boolean isByte() {
        return type == Type.BYTE;
    }

    public boolean isShort() {
        return type == Type.SHORT;
    }

and so on

[/code]

for each and every feature type the application supports. And there are some types there: Binary, String, Byte, Short, Int, Long, Float, Double, BigInteger, BigDecimal, Date, UUID. It is not only a boring task to type all the very similar methods, but it is also error-prone. A very few humans are good at doing such a repetitive task. To avoid that we can use the Java::Geci framework and as the simplest solution we can use the generator Iterate.

<h1>POM dependency</h1>

To use the generator we have to add the dependency

[code lang=xml]
&lt;dependency&gt;
    &lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
    &lt;artifactId&gt;javageci-core&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
    &lt;version&gt;1.4.0&lt;/version&gt;
&lt;/dependency&gt;
[/code]

The library is executed only during when the tests run, therefore the use of it does not imply any extra dependency. Whoever wants to use the library License3j does not need to use Java::Geci. This is only a development tool used in <code>test</code> scope.

<h1>Unit Test running it</h1>

The dependency will not run by itself. After all the dependency is not a program. It is a bunch of class files packaged into a JAR to be available on the classpath. We have to execute the generator and it has to be done through the framework creating a unit test:

[code lang=java]
    @Test
    @DisplayName(&quot;run Iterate on the sources&quot;)
    void runIterate() throws IOException {
        Geci geci = new Geci();
        Assertions.assertFalse(
            geci.register(Iterate.builder()
                              .define(ctx -&gt; ctx.segment().param(&quot;TYPE&quot;, ctx.segment().getParam(&quot;Type&quot;).orElse(&quot;&quot;).toUpperCase()))
                              .build())
                .generate()
            , geci.failed()
        );
    }
[/code]

It creates a <code>Geci</code> object, instantiates the generator using a builder and then invokes <code>generate()</code> on the configured framework Geci object. The <code>define()</code> call seems a bit cryptic as for now. We will shed light on that later.

<h1>Source Code Preparation</h1>

The final step before executing the build is to define a template and the values to insert into the template. Instead of writing all the methods all we have to do is to write a template and an editor fold segment:

[code lang=java]
    /* TEMPLATE
    LOOP Type=Binary|String|Byte|Short|Int|Long|Float|Double|BigInteger|BigDecimal|Date|UUID
    public boolean is{{Type}}() {
        return type == Type.{{TYPE}};
    }

     */
    //&lt;editor-fold id=&quot;iterate&quot;&gt;
    //&lt;/editor-fold&gt;
[/code]

When we execute the generator through the framework it will evaluate the template for each value of the placeholder <code>Type</code> and it will replace each <code>{{Type}}</code> with the actual value. The resulting code will be inserted into the editor-fold segment with the <code>id</code> "iterate".

Looking at the template you can see that there is a placeholder <code>{{TYPE}}</code>, which is not defined in the list. This is where the unite test <code>define()</code> comes into the picture. It defines a consumer that consumes a context and using that context it reads the actual value of <code>Type</code>, creates the uppercased version of the value and assigns it to the segment parameter named <code>TYPE</code>.

Generally, that is it. There are other functionalities using the generator, like defining multiple values per iteration assigned to different placeholders, escaping or skipping lines and so on. About those here is an excerpt from the documentation that you can read up-to-date and full az https://github.com/verhas/javageci/blob/master/ITERATE.adoc

<h1>Documentation Excerpt</h1>

In the Java source files where you want to use the generator you have to annotate the class with the annotation <code>@Geci("iterate")</code>. You can also use the <code>@Iterate</code> annotation instead, which is defined in the <code>javageci-core-annotations</code> module. This will instruct the Geci framework that you want to use the <code>iterate</code> generator in the given class.

<h2><code>TEMPLATE</code></h2>

A template starts after a line that is <code>/\*TEMPLATE</code> or <code>TEMPLATE</code>. There can be spaces before and after and between the <code>/*</code> and the word <code>TEMPLATE</code> but there should not be anything else on the line. When the generator sees such a line it starts to collect the following lines as the content of the template.

The end of the template is signaled by a line that has <code>*/</code> on it and nothing else (except spaces).

The content of the template can contain parameters between <code>{{</code> and <code>}}</code> characters similarly as it is used by the mustache template program. (The generator is not using mustache, template handling is simpler.)

<h2><code>LOOP</code></h2>

While collecting the lines of the template some of the lines are recognized as parameter definitions for the template. These lines do not get into the trunk of the template. (Command names on these lines are always capital.)

As you could see in the introduction the line

[code lang=text]
    LOOP type=int|long|short
[/code]

is not part of the template text. It instructs the generator to iterate through the types and set the parameter <code>{{type}}</code> in the text to <code>int</code> first, <code>long</code> the second and <code>short</code> the last. That way you can iterate over multiple values of a single parameter.

A more complex template may need more than one parameter. In that case, you can list them in the <code>LOOP</code> line as

[code lang=text]
    LOOP type,var=int,aInt|long,aLong|short,aShort
[/code]

This will tell the generator to set the parameter <code>{{type}}</code> the same way as before for the three iterations but the same time also set the parameter <code>{{var}}</code> to <code>aInt</code> in the first loop, to <code>aLong</code> in the second loop and <code>aShort</code> in the last loop.

If the list of the values is too long it is possible to split the list into multiple <code>LOOP</code> lines. In this case, however, the variables have to be repeated in the second, third and so on <code>LOOP</code> lines. Their order may be different, but if there is a variable undefined in some of the <code>LOOP</code> lines then the placeholder referring to it will be resolved and remains in the <code>{{placeholder}}</code> form.

The above example can also be written

[code lang=text]
    LOOP type,var=int,aInt
    LOOP var,type=aLong,long
    LOOP type,var=short,aShort
[/code]

and it will result in the same values as the above <code>LOOP</code> repeated here:

[code lang=text]
    LOOP type,var=int,aInt|long,aLong|short,aShort
[/code]

<h2>Default <code>editor-fold</code></h2>

The templates are processed from the start of the file towards the end and the code generated is also prepared in this order. The content of the generated code will be inserted into the <code>editor-fold</code> segment that follows the template directly. Although this way the <code>id</code> of the
<code>editor-fold</code> segment is not really interesting you must specify a unique <code>id</code> for each segment. This is a restriction of the the Java::Geci framework.

<h2>Advanced Use</h2>

<h3><code>EDITOR-FOLD-ID</code></h3>

It may happen that you have multiple templates looping over different values and you want the result to go into the same <code>editor-fold</code> segment. It is possible using the <code>EDITOR_FOLD_ID</code>.

In the following example

[code lang=text]
package javax0.geci.iterate.sutclasses;

public class IterateOverMultipleValues {
    /* TEMPLATE
    {{type}} get_{{type}}Value(){
      {{type}} {{variable}} = 0;
      return {{variable}};
    }

    LOOP type,variable=int,i|long,l|short,s
    EDITOR-FOLD-ID getters
     */
    //
            // nothing gets here
    //

    //
    int get_intValue(){
      int i = 0;
      return i;
    }

    long get_longValue(){
      long l = 0;
      return l;
    }

    short get_shortValue(){
      short s = 0;
      return s;
    }

    //
}
[/code]

the generated code gets into the <code>editor-fold</code> that has the <code>id</code> name <code>getters</code> even though this is not the one that follows the template definition.

Use this feature to send the generated code into a single segment from multiple iterating templates. Usually, it is a good practice to keep the template and the segment together.

<h3><code>ESCAPE</code> and <code>SKIP</code></h3>

The end of the template is signaled by a line that is <code>*/</code>. This is essentially the end of a comment. What happens if you want to include a comment, like a JavaDoc into the template. You can write the <code>*/</code> characters at the end of the comment lines that still have some characters in it. This solution is not elegant and it essentially is a workaround.

To have a line that is exactly a comment closing or just any line that would be interpreted by the template processing, like a <code>LOOP</code> line you should have a line containing nothing else but an <code>ESCAPE</code> on the previous line. This will tell the template processing to include the next line into the template text and continue the normal processing on the line after.

Similarly, you can have a line <code>SKIP</code> to ignore the following line altogether. Using these two commands you can include anything into a template.

An example shows how you can include a JavaDoc comment into the template:

[code lang=text]
package javax0.geci.iterate.sutclasses;

public class SkippedLines {
    /* TEMPLATE
    /**
     * A simple zero getter serving as a test example
     * @return zero in the type {{type}}
    ESCAPE
     */
    // SKIP
    /*
    {{type}} get_{{type}}Value(){
      {{type}} {{variable}} = 0;
      return {{variable}};
    }
    LOOP type,variable=int,i|long,l|short,s
    EDITOR-FOLD-ID getters
     */
    //
    /**
     * A simple zero getter serving as a test example
     * @return zero in the type int
     */
    int get_intValue(){
      int i = 0;
      return i;
    }
    /**
     * A simple zero getter serving as a test example
     * @return zero in the type long
     */
    long get_longValue(){
      long l = 0;
      return l;
    }
    /**
     * A simple zero getter serving as a test example
     * @return zero in the type short
     */
    short get_shortValue(){
      short s = 0;
      return s;
    }
    //
}
[/code]

The template starts with the comment and a comment can actually contain any other comment starting. Java comments are not nested. The end of the template is, however the line that contains the <code>*/</code> string. We want this line to be part of the template thus we precede it with the line <code>ESCAPE</code> so it will not be interpreted as the end of the template. On the other hand, for Java, this ends the comment. To continue the template we have to get "back" into comment mode since we do not want the Java compiler to process the template as code. (Last but not least because the template using placeholders is probably not a syntactically correct Java code fragment.) We need a new <code>/*</code> line, which we do not want to get into the template. This line is, therefore, preceded with a line containing <code>// SKIP</code>. (Skip lines can have optional <code>//</code> before the command.)

The result you can see in the generated code. All methods have the proper JavaDoc documentation.

<h3><code>SEP1</code> and <code>SEP2</code></h3>

Looping over the values you have to separate the names of the placeholders with <code>,</code> and  <code>|</code> the list of the values. For example, the sample above contains

[code lang=text]
    LOOP type,variable=int,i|long,l|short,s
[/code]

two placeholder names <code>type</code> and <code>variable</code> and three values for each. Placeholders do not need to contain special characters and it is the best if they are standard identifiers. The values, however, may contain a comma or a vertical bar. In that case, you can redefine the string (not only a single character) that the template <code>LOOP</code> command can use instead of the single character strings <code>,</code> and <code>|</code>.

For example the line

[code lang=text]
    SEP1 /
[/code]

says that the names and the values should be separated by <code>/</code> instead of only one and

[code lang=text]
    SEP2 &amp;
[/code]

the list of the values should be separated by one character <code>&amp;amp;</code> string. The <code>SEP1</code> and <code>SEP2</code> will have effect only if they precede the <code>LOOP</code> command and they are effective only for the template they are used in. Following the above commands, the <code>LOOP</code> example would look like

[code lang=text]
    LOOP type/variable=int/i&amp;long/l&amp;short/s
[/code]

That way there is nothing to prevent us to add another value list

[code lang=text]
    LOOP type/variable=int/i&amp;long/l&amp;short/s&amp;byte,int/z
[/code]

which eventually will result in a syntax error with the example template, but demonstrates the point redefining the name and the value list separators.

<h2>Configuration</h2>

The generator is implemented the configuration tools supported by the Geci framework and all the parameters are configurable. You can redefine the regular expressions that match the template start, end, skip and so on lines in the unit test where the generator object is created, in the annotation of the class or in the editor-fold parameters.

<h1>Takeaway</h1>

The iterate generator is an extremely easy to use generator to create code that is repetitive. This is also the major danger: you should be strong enough to find a better solution and use it only when it is the best solution.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2462</wp:post_id>
  <wp:post_date>2019-11-27 16:00:20</wp:post_date>
  <wp:post_date_gmt>2019-11-27 15:00:20</wp:post_date_gmt>
  <wp:post_modified>2019-12-10 09:34:09</wp:post_modified>
  <wp:post_modified_gmt>2019-12-10 08:34:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>repeated-code</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1199704534144172034";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[37860377361]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1574866825]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75dad02461f4fbbb4a77645cbe8ebfae</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_75dad02461f4fbbb4a77645cbe8ebfae</wp:meta_key>
    <wp:meta_value><![CDATA[1577726512]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[JDK14 instanceof EA issue]]></title>
  <link>https://javax0.wordpress.com/2020/01/01/jdk14-instanceof-ea-issue/</link>
  <pubDate>Wed, 01 Jan 2020 15:00:57 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2479</guid>
  <description/>
  <content:encoded><![CDATA[Tagir Valeev recently had a tweet about the preview feature of the soon coming JDK14 release of Java:

<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/Java14?src=hash&amp;ref_src=twsrc%5Etfw">#Java14</a> pattern matching brings name shadowing to the next level of craziness. Here I add or remove the `final` modifier for the `FLAG` field, which is accessed only in unreachable `if` branch. This actually changes the program semantics! <a href="https://twitter.com/hashtag/ProgrammingIsFun?src=hash&amp;ref_src=twsrc%5Etfw">#ProgrammingIsFun</a>. <a href="https://t.co/UToRY3mpW9">pic.twitter.com/UToRY3mpW9</a></p>â Tagir Valeev (@tagir_valeev) <a href="https://twitter.com/tagir_valeev/status/1210431331332689920?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote>

<a href="https://platform.twitter.com/widgets.js">https://platform.twitter.com/widgets.js</a>

The issue is that there is a planned and in the EA release already available new feature of Java that introduces pattern variables and the current version of the proposed new standard leaves room for some really spooky coding issue.

Following the tweet, the details were discussed in detail enough to understand the actual problem. In this article, however, I will summarize what all this is about so that you do not need to dig yourself through the tweets and the standards.

<h1>What is a pattern variable</h1>

Before getting into the deep detail of the issue outlines in the tweet above, let's discuss a bit, what a pattern variable is. (Maybe a bit sloppy, more explanatory than precise and complete, but here it comes.)

Programming many times we need to check the type of some objects. The operator <code>instanceof</code> does that for us. A typical sample code can be something like this:

[code lang=java]
// HOW THIS IS TODAY, JAVA &lt; 14

Object z = &quot;alma&quot;;
if (!(z instanceof String)){
    throw new IllegalArgumentException();
}
System.out.println(((String)z).length());
[/code]

In real life, the variable <code>z</code> may come from somewhere else, in which case it is not so obvious that this <em>is</em> a string. When we want to print out the length of the string using <code>println</code> we already know that the object referenced by <code>z</code> is a string. The compiler, on the other hand, does not.We have to cast the variable to a <code>String</code> and then we can use the <code>length()</code> method. Other languages do it better. Ideally, I could write:

[code lang=java]
// HOW IT WOULD BE THE SIMPLEST

Object z = "alma";
if (!(z instanceof String)){
    throw new IllegalArgumentException();
}
System.out.println(z.length());
[/code]

That is not the Java way and also that is not the way JDK14 simplifies this programming pattern. Instead, the proposed feature introduces a new syntax for the <code>instanceof</code> operator that introduces a new variable: a <em>pattern variable</em>.

To make a long story short, the above example will look the following:

[code lang=java]
// HOW IT IS IN JDK14-EA / OpenJDK (build 14-ea+28-1366)

Object z = "alma";
if (!(z instanceof String s)){
    throw new IllegalArgumentException();
}
System.out.println(s.length());
[/code]

It introduces a new variable <code>s</code> that is in scope only when the referenced object is a <code>String</code>. A simpler version of the code without the exception throwing part would be

[code lang=java]
Object z = "alma";
if (z instanceof String s){
    // we have here 's' and it is a String
    System.out.println(s.length());
}

// we do not have 's' here
[/code]

When the condition is true, the object is a string thus we have 's'. If the condition is false then we jump over the then_statement, and there we do not have 's' as we do not have a string. 's' is available in the code which only runs when the object is a string. That way the variable scope of a pattern variable is determined and constrained not only by the syntactical scope of the variable but also by the possible control flow. Only the control flow that can be analyzed with certainty is taken into account.

Such control-flow analysis is not unparalleled in the Java compiler. A Java program will not compile, for example, if there is an unreachable code that the compiler can detect.

So far it seems to be simple and we are all happy to get the new feature in Java 14.

<h1>The JSL14 standard</h1>

The precise scope calculation is defined in the JLS14 (Java Language Specification 14) standard. At the time of this article, the spec is only available as a preview.

http://cr.openjdk.java.net/~gbierman/jep305/jep305-20191021/specs/patterns-instanceof-jls.html#jls-6.3.2.2

As the execution flow of a Java program can be controlled by many different language-constructs the scope of a pattern variable is defined for each of these structures. There are separate sections for the different logical operators that evaluate short-circuit, 'if' statement, 'while' statement and so on. I do not want to discuss the different cases extensively. I will focus here only on the case of the 'if' statement without the 'else' part. The standard cited above says:

<blockquote><em>The following rules apply to a statement `if (e) S` (14.9.1):

* A pattern variable introduced by e when true is definitely matched at `S`.

It is a compile-time error if any pattern variable introduced by `e` when true is already in scope at `S`.

* `V` is introduced by `if (e) S` if and only if `V` is introduced by `e` when `false` and `S` cannot complete normally.

It is a compile-time error if any pattern variable introduced by the `if` statement is already in scope.</em></blockquote>

The interesting part is the "cannot complete normally". A good example of this is our example above: we create a so-called guarding <code>if</code> statement. When the variable <code>z</code> is not a <code>String</code> then we throw an exception, return or do something else that will always prevent the execution to reach the code after the <code>if</code> statement when the variable is not a <code>String</code>.

In the case of a <code>throw</code> or <code>return</code> statement, it is usually very straightforward and easy to see that the code "cannot complete normally". In case of an infinite loop, this is not always so evident.

<h1>The Problem</h1>

Let's have a look at the following code fragment:

[code lang=java]
private static boolean FLAG = true;
static String variable = "Hello from field";

public static void main() {
    Object z = "Hello from pattern matching";
    if (!(z instanceof String variable)){
        while (FLAG) {
            System.out.println("We are in an endless loop");
        }
    }
    System.out.println(variable);
}
[/code]

In this case, we have a loop, which is infinite or not. It depends on the other part of the code that may alter the value of the class field <code>FLAG</code> from <code>true</code> to <code>false</code>. This part of the code "can complete normally".

If we modify the above code just a little making the field <code>FLAG</code> to be <code>final</code>, as

[code lang=java]
private static final boolean FLAG = true;
static String variable = "Hello from field";

public static void main() {
    Object z = "Hello from pattern matching";
    if (!(z instanceof String variable)){
        while (FLAG) {
            System.out.println("We are in an endless loop");
        }
    }
    System.out.println(variable);
}
[/code]

then the compiler will see that the loop is infinite and cannot complete normally. The program will print out <code>Hello from field</code> in the first case, and it will print <code>Hello from pattern matching</code>. The pattern <code>variable</code> in the second case hides the field <code>variable</code> because of the scope of the pattern variable is extended to the commands following the <code>if</code> statement because the then-part cannot complete normally.

This is really a problem with this preview feature as it is. The readability of the code, in this case, is very questionable. The scope of the pattern variable and if it is hiding a field or not depends on the <code>final</code> modifier of the field, which is not there. When we look at some code the actual execution and the result of the code should be simple and should not really depend on some code that is far away and may skip our attention reading the code locally.

This is not the only situation in Java that has this anomaly. You can have a class named <code>String</code> for example in your codebase. The code of the classes, which are in the same package will use that class when they refer to the type <code>String</code>. If we delete the <code>String</code> class from the user code then the meaning of the <code>String</code> type becomes <code>java.lang.String</code>. The actual meaning of the code depends on some other code that is "far".

This second example, however, is a hack and it is not likely that a Java programmer who has not lost their mind names a class <code>String</code> (seriously https://github.com/verhas/jScriptBasic/blob/master/src/main/java/com/scriptbasic/classification/String.java?) or some other name that also exists in the JDK in the <code>java.lang</code> package. Maybe it is pure luck, maybe it was well considered during the decision making to avoid the mandatory import of the classes from the <code>java.lang</code> package. This is history.

The variable name shadowing and the situation above is, on the other hand, does not seem to be so weird and something that surely will not accidentally happen in some Java code.

Fortunately, this is only a preview feature. It will be in the JDK14 as it is, but as a preview feature it is only available when the javac compiler and the java execution uses the <code>--enable-preview</code> flag and the preview feature may change in the future in an incompatible way.

<h1>Solution</h1>

I cannot tell how it will change. I cannot even tell that it will change at all. It is only my personal opinion that it would be very sad if it remained like that. With this feature, Java would be a better language so long as long we count how brilliantly and readable a seasoned Java programmer can program. But it will worse if we look at how a non-seasoned, fresh junior can fuck the code up. In my humble opinion, this second is the more important and Java has a very strong point in this. Java is not a hacker language, and you should be very desperate to write a very unreadable code. I would not like it changing.

After having said that we can look at the technical possibilities. One is to abandon the feature, which would not really be a good solution. It would not actually be a solution.

Another possibility is to limit the scope of the pattern variables to the <code>then</code> statement or to the <code>else</code> statement.

https://twitter.com/jmichaelras/status/1210480245465329664

That way we do not rely on the "cannot complete normally" feature of the code. The <code>else</code> guarantees that the <code>else</code> branch is executed only when the condition of the <code>if</code> statement is <code>false</code>. This will make the solution less elegant.

Again another possibility is to forbid for the pattern variables to shadow any field variable. It would solve the problem outlined above but would introduce a different one. With this restriction, it could happen that an existing class with methods and pattern variable <code>V</code> stops compiling when we introduce a new field variable named <code>V</code>. At least this issue is compile-time and not some code that is buggy during run-time.

<blockquote>I rather have 100 compile time error than one run-time error.</blockquote>

Still another possibility is to abandon the pattern variable and just to use the original variable with extended type information where the current preview solution uses the pattern variable. Kotlin fans would love this solution. This would also elegantly eliminate the shadowing issue because the local variable already shadows (or does not) the field variable. The drawback of this solution is that the variable type re-scoped would have different types in different places in the code. Let's have a look at the following code:

[code lang=java]
package javax0.jdk14.instanceof0;

public class Sample2 {
    public static class A {
        public static void m(){
            System.out.println("A");
        }
    }
    public static class B extends A {
        public static void m(){
            System.out.println("B");
        }
    }
    public static void main(String[] args) {
        A a = new B();
        if( a instanceof B b){
            b.m();
        }
        a.m();
    }
}
[/code]

This code will print out <code>B</code> then <code>A</code> because the call to <code>b.m()</code> is the same as <code>B.m()</code> based on the declared type of the variable <code>b</code> and the same way <code>a.m()</code> is the same as <code>A.m()</code> based on the declared type of the variable <code>a</code>. Omitting the pattern variable and using the original variable could make confusion:

[code lang=java]
// NOT ACTUAL CODE
    public static void main(String[] args) {
        A a = new B();
        if( a instanceof B){
            a.m();
        }
        a.m();
    }
[/code]

Would <code>a.m()</code> call different methods on different lines?

As you can see there is no known good or best solution to this issue... except one. Call your representative in the JDK "parliament" and tell them that it is not good that way. (Psst: they already know it from the original tweet.)

<h1>Takeaway</h1>

This is a special article because this is not about some well established Java feature or some good programming tool or style, pattern, methodology. We discussed a preview feature. A preview feature that, perhaps, proves why we need preview features in Java.

Use the latest LTS version for long-running commercial projects that will need long term support from you.

Use the latest released Java version for your experiments and opensource projects and be prepared to support older Java versions if the users need it.

Do not use the preview features in your projects or be prepared to have a new release from your code in case they change in the next Java releases when they become non-preview but normal features.

Experiment with the pre-view features to embrace them and to have a kind of muscle memory when they become real features. And also to give feedback to the Java community in case you feel they are not really perfect.

Be part of the community!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2479</wp:post_id>
  <wp:post_date>2020-01-01 16:00:57</wp:post_date>
  <wp:post_date_gmt>2020-01-01 15:00:57</wp:post_date_gmt>
  <wp:post_modified>2019-12-30 20:07:24</wp:post_modified>
  <wp:post_modified_gmt>2019-12-30 19:07:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jdk14-instanceof-ea-issue</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a3fb36f08c75b239631f4c408f0498e</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_87545f72d05af09769755f8b25fca3a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b9f7b8a42a7ed837b37220c1f190b2f4</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_b9f7b8a42a7ed837b37220c1f190b2f4</wp:meta_key>
    <wp:meta_value><![CDATA[1577726256]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_630f9948ef5b08ebf786927bcc06e116</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_75dad02461f4fbbb4a77645cbe8ebfae</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_75dad02461f4fbbb4a77645cbe8ebfae</wp:meta_key>
    <wp:meta_value><![CDATA[1577726389]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d385b61734b70bd4d275b1c0e3ae244c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e295245bc5a63c5a1ce4d9de5fe9a0e0</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="420" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_e295245bc5a63c5a1ce4d9de5fe9a0e0</wp:meta_key>
    <wp:meta_value><![CDATA[1577891020]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[39062768601]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1577891021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1212388934732390400";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_61f0e58d260901d8e915e9ab77a82343</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_61f0e58d260901d8e915e9ab77a82343</wp:meta_key>
    <wp:meta_value><![CDATA[1577891023]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c68d36211aa1b813b2427930f47f0360</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_3f9ba81dd75af32b2787f764a1b65258</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_3f9ba81dd75af32b2787f764a1b65258</wp:meta_key>
    <wp:meta_value><![CDATA[1589384292]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_25b55cb724f0f7a8c984856779f924ac</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_bd1c5d9a1a3b262207e4f06e3f739f82</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_bd1c5d9a1a3b262207e4f06e3f739f82</wp:meta_key>
    <wp:meta_value><![CDATA[1603296573]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_48531df1380f2a1cdfda3474f5453c73</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2d3c251d3242886a04142a37fd873761</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">personally, I would prefer that binding variable scope would only apply to explicitly declared else blocks, and not an implicit like in this case.</p>&mdash; Michael Rasmussen (@jmichaelras) <a href="https://twitter.com/jmichaelras/status/1210480245465329664?ref_src=twsrc%5Etfw">December 27, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_2d3c251d3242886a04142a37fd873761</wp:meta_key>
    <wp:meta_value><![CDATA[1610050718]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a3ce8feabd9f57b0e53125345bae9484</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28699</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.78.199.96</wp:comment_author_IP>
    <wp:comment_date>2020-01-15 20:49:18</wp:comment_date>
    <wp:comment_date_gmt>2020-01-15 19:49:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And now spelling out the name you attract even more people googling the name of the company...

:-| Sorry.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>28698</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1579117759]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1579117760.001636;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1579117760]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>28698</wp:comment_id>
    <wp:comment_author><![CDATA[Meh.]]></wp:comment_author>
    <wp:comment_author_email>noemail@noemail.gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>173.27.151.54</wp:comment_author_IP>
    <wp:comment_date>2020-01-15 20:06:43</wp:comment_date>
    <wp:comment_date_gmt>2020-01-15 19:06:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Might want to change your headliner to spell out what you mean by "EA" because 99.99% of the readers following links from elsewhere are going to wonder what Electronic Arts has to do JDK14.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1579117665.970786;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1579117665]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1579117665]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1579115204.237322;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30070</wp:comment_id>
    <wp:comment_author><![CDATA[Solomon Ucko]]></wp:comment_author>
    <wp:comment_author_email>solly.ucko@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://sollyucko.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>96.255.209.36</wp:comment_author_IP>
    <wp:comment_date>2020-12-08 04:55:45</wp:comment_date>
    <wp:comment_date_gmt>2020-12-08 03:55:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[What about disallowing the case where the variable isn't actually bound anywhere, so it errors rather than silently using the variable from the outer scope, or something like that?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>102638496</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1607404330.160575;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"sollyucko";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1607399746.191888;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"sollyucko";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[53145968463]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1610050717]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1610050717]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1610050717.828166;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29189</wp:comment_id>
    <wp:comment_author><![CDATA[Stefan Reich]]></wp:comment_author>
    <wp:comment_author_email>stefan.reich.maker.of.eye@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url>https://botcompany.de</wp:comment_author_url>
    <wp:comment_author_IP>90.186.71.198</wp:comment_author_IP>
    <wp:comment_date>2020-05-13 16:38:10</wp:comment_date>
    <wp:comment_date_gmt>2020-05-13 15:38:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I made a similar construct in my Java extension which looks simply like this:

[code lang=text]
if (z cast String) print(z.length());
[/code]

Which transpiles to:

[code lang=text]
if (z instanceof String) print(((String) z).length());
[/code]

No new identifier needed, so no scope problem.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1589384291]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589384291.290282;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1589384291]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[All you wanted to know about Throwable]]></title>
  <link>https://javax0.wordpress.com/2020/05/13/all-you-wanted-to-know-about-throwable/</link>
  <pubDate>Wed, 13 May 2020 15:00:52 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2532</guid>
  <description/>
  <content:encoded><![CDATA[This article is a tutorial about exceptions. But not the usual one. There are many of those that tell you what exceptions are for, how you can throw one, catch one, the difference between checked and runtime exceptions, and so on. There is no need for another. It would also be boring for you. If not, then go and read one of those and come back when you have learned what they teach. This article starts where those tutorials end. We dive a bit deeper into Java exceptions, what you can do with them, what you should do with them, and what features they have that you may not have heard about. If <code>setStackTrace()</code>, <code>getCause()</code> and <code>getSuppressed()</code> are the methods you eat for breakfast then you can skip this article. But if not, and you want to know a bit about these, then go on. This article is long. It took a long time to write, and it will take a long time to read. It is needed.

<h2>Introduction</h2>

In this article, we will talk about exceptions and what we can and should do with Java exceptions. The simplest case is to throw one and then catch it, but there are more complex situations, like setting a cause or suppressed exceptions. We will look at these possibilities, and a bit more. To discover the possibilities we will develop a simple application and step-by-step we will create four versions developing the application further and further using more and more exception handling possibilities. The source code is available in the repository:

https://github.com/verhas/BLOG/tree/master/exception_no_stack

The different versions are in different Java packages. Some classes that did not change in the different versions are one package higher, and they are not versioned.

<ul>
<li>The first version <code>v1</code> simply throws en exception, and it is not handled by the application. The test code expects the test setup to throw the exception. This version is the baseline to demonstrate why we need more complex solutions. We will experience that there is not enough information in the exception to see where the actual issue has happened.</li>
<li><p>The second version <code>v2</code> catches the exception at higher levels and throws a new exception with more information about the exceptional case, and the new exception has the original one embedded as cause. This approach gives enough information to track the location of the issue, but it can even be enhanced so that it is easier to read and recognize the actual problem.</p></li>
<li><p>The third version <code>v3</code> will demonstrate how we can modify the creation of the new exceptions so that the stack trace of the higher level exceptions will not point to the location where the original exception was caught, but rather where the original exception was thrown.</p></li>
<li><p>Finally, the fourth version <code>v4</code> will demonstrate how we can suppress expressions when it is possible to go on with the processing in case of en exceptional case even if the operation cannot be finished successfully. This "going further" makes it possible to have an exception at the end that collects the information about all discovered exceptional cases and not only the first occurrence.</p></li>
</ul>

<p>If you look at the code, you will also find there the original text of this article, and the setup that helps to maintain the code snippets copying them into the article from the source keeping all of them up-to-date. The tool that does it for us is Java::Geci.

<h2>Sample Application</h2>

We use exceptions to handle something that is outside of the normal flow of the program. When an exception is thrown the normal flow of the program is interrupted, and the execution stops dumping the exception to some output. These exceptions can also be caught using the <code>try</code> and <code>catch</code> command pair built into the language.

[code lang=java]
    try {
        ... some code ...
        ... even calling methods
                      several level deep     ...
        ...    where exception may be thrown ...
      }catch(SomeException e){
        ... code having access to the exception object &#039;e&#039;
            and doing someting with it (handling) ....
      }
[/code]

The exception itself is an object in Java and can contain a lot of information. When we catch an exception in our code, we have access to the exception object, and the code can act upon the exceptional situation also having access to the parameters that the exception object is carrying. It is possible to implement our own exceptions extending the Java
<code>java.lang.Throwable</code> class or some of the classes that directly, or transitively extend <code>Throwable</code>. (Usually, we extend the class <code>Exception</code>.) Our own implementation can hold many parameters that describe the nature of the exceptional situation. We use object fields for the purpose.

Although there is no limit for the data an exception can carry, it usually does not contain more than a message and the stack trace. There is room - as defined in the class <code>Throwable</code> - for other parameters, like the exception that was causing the current one (<code>getCause()</code>), or an array of suppressed exceptions (<code>getSuppressed()</code>). They are rarely used, presumably because developers are not aware of these features and because most cases are simple and do not need these possibilities. We will have a look at these possibilities in this article so that you will not belong to the group of ignorant developers who do not use these methods only because they are not aware of them.

We have a sample application. It is a bit more than just throwing, catching, and handling an exception in the <code>catch</code> branch that lets the code to continue. That is simple and is explained in the tutorial you have read when learning to program in Java the first time.

Our sample application will be a bit more complex. We will list the files in a directory, read the lines, and count the number of <code>wtf</code> strings. This way we automate the code review process quality measurement (joking). It is said that the code quality is reverse proportional to the number of the WTFs during the code review.

The solution contains

<ul>
<li>a <code>FileLister</code> that can list the files,</li>
<li>a <code>FileReader</code> that can read a file,</li>
<li>a <code>LineWtfCounter</code> that will count the <code>wtf</code>s in a single line,</li>
<li>a <code>FileWtfCounter</code> that will use the previous class to count all the <code>wtf</code>s in the whole file listing the lines, and finally,</li>
<li>a <code>ProjectWtfCounter</code> that counts the <code>wtf</code>s in the whole project using the file level counter, listing all the files.</li>
</ul>

<h3>Version 1, throw and catch</h3>

The application functionality is fairly simple and because we focus on the exception handling the implementation is also trivial. For example, the file listing class is as simple as the following:

<!-- snip FileLister trim="to=0"-->

[code lang=java]
package javax0.blog.demo.throwable;

import java.util.List;

public class FileLister {

    public FileLister() {
    }

    public List&lt;String&gt; list() {
        return List.of(&quot;a.txt&quot;, &quot;b.txt&quot;, &quot;c.txt&quot;);
    }
}
[/code]

We have three files in the file system, <code>a.txt</code>, <code>b.txt</code>, and <code>c.txt</code>. This is a mock, of course, but in this case, we do not need anything more complex to demonstrate the exception handling. Similarly, the <code>FileReader</code> is also a kind of mock implementation that serves demonstration purposes only:

<!-- snip FileReader_v1 -->

[code lang=java]
package javax0.blog.demo.throwable.v1;

import java.util.List;

public class FileReader {
    final String fileName;

    public FileReader(String fileName) {
        this.fileName = fileName;
    }

    public List&lt;String&gt; list() {
        if (fileName.equals(&quot;a.txt&quot;)) {
            return List.of(&quot;wtf wtf&quot;, &quot;wtf something&quot;, &quot;nothing&quot;);
        }
        if (fileName.equals(&quot;b.txt&quot;)) {
            return List.of(&quot;wtf wtf wtf&quot;, &quot;wtf something wtf&quot;, &quot;nothing wtf&quot;);
        }
        if (fileName.equals(&quot;c.txt&quot;)) {
            return List.of(&quot;wtf wtf wtf&quot;, &quot;wtf something wtf&quot;, &quot;nothing wtf&quot;, &quot;&quot;);
        }
        throw new RuntimeException(&quot;File is not found: &quot;+ fileName);
    }

}
[/code]

The counter, which counts the number of <code>wtf</code> occurrences in a line is

<!-- snip LineWtfCounter skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v1;

public class LineWtfCounter {
    private final String line;

    public LineWtfCounter(String line) {
        this.line = line;
    }

    public static final String WTF = &quot;wtf&quot;;
    public static final int WTF_LEN = WTF.length();

    public int count() {
        if (line.length() == 0) {
            throw new LineEmpty();
        }
        // the actual lines are removed from the documentation snippet
    }

}

[/code]

To save space and focus on our topic the snippet does not display the actual logic (was automatically removed by Java::Geci). The reader can create a code that actually counts the number of <code>wtf</code> substrings in a string, or else simply "wtf". Even if the reader cannot write such a code it is available from the repository mentioned at the start of the article.

<hr />

The logic in our application says that this is an exceptional situation if one of the lines in the file has zero length. In that case, we throw an exception.

<hr />

Usually, such a situation does not verify to be an exception, and I acknowledge that this is a bit contrived example, but we needed something simple. If the length of the line is zero then we throw a <code>LineEmpty</code> exception. (We do not list the code of <code>LineEmpty</code> exception. It is in the code repo, and it is simple, nothing special. It extends <code>RuntimeException</code>, no need to declare where we throw it.) If you look at the mock implementation of <code>FileReader</code> then you can see that we planted an empty line in the file <code>c.txt</code>.

The counter on the file level using the line level counter is the following:

<!-- snip FileWtfCounter_v1  skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v1;

public class FileWtfCounter {
    // fileReader injection is omitted for brevity
    public int count() {
        final var lines = fileReader.list();
        int sum = 0;
        for (final var line : lines) {
            sum += new LineWtfCounter(line).count();
        }
        return sum;
    }

}

[/code]

(Again, some trivial lines are skipped from the printout.)

This is the first version of the application. It does not have any special exception handling. It just sums up the values that the line counters return and in case there is an exception on the lower level, in the line <code>wtf</code> counter then this will automatically propagate up. We do not handle that exception in any way on this level.

The project level counter is very similar. It uses the file counter and sums up the results.

<!-- snip ProjectWftCounter_v1   skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v1;

import javax0.blog.demo.throwable.FileLister;

public class ProjectWftCounter {
    // fileLister injection is omitted for brevity
    public int count() {
        final var fileNames = fileLister.list();
        int sum = 0;
        for (final var fileName : fileNames) {
            sum += new FileWtfCounter(new FileReader(fileName)).count();
        }
        return sum;
    }
}

[/code]

We test it using the simple test code:

<!-- snip TestWtfCounter_v1 -->

[code lang=java]
package javax0.blog.demo.throwable.v1;

import javax0.blog.demo.throwable.FileLister;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;

public class TestWtfCounter {

    @Test
    @DisplayName(&quot;Throws up for a zero length line&quot;)
    void testThrowing() {
        Throwable thrown = catchThrowable(() -&gt;
                new ProjectWftCounter(new FileLister())
                        .count());
        assertThat(thrown).isInstanceOf(LineEmpty.class);
        thrown.printStackTrace();
    }

}

[/code]

A unit test usually should not have a stack trace print. In this case we have it to demonstrate what is thrown. The stack trace in the error will show us the error as the following:

[code lang=text]
javax0.blog.demo.throwable.v1.LineEmpty: There is a zero length line
    at javax0.blog.demo.throwable.v1.LineWtfCounter.count(LineWtfCounter.java:18)
    at javax0.blog.demo.throwable.v1.FileWtfCounter.count(FileWtfCounter.java:19)
    at javax0.blog.demo.throwable.v1.ProjectWftCounter.count(ProjectWftCounter.java:22)
    at javax0.blog.demo.throwable.v1.TestWtfCounter.lambda$testThrowing$0(TestWtfCounter.java:18)
    at org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
    ...
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
[/code]

There is a little problem with this exception. When we use this code it does not tell us anything about the actual file and line that is problematic. We have to examine all the files and all the lines if there is an empty one. It is not too difficult to write an application for that, but we do not want to work instead of the programmer who created the application. When there is an exception we expect the exception to give us enough information to successfully tackle the situation. The application has to tell me which file and which line is faulty.

<h3>Version 2, setting cause</h3>

To provide the information in the exception we have to gather it and insert it into the exception. This is what we do in the second version of the application.

The exception in the first version does not contain the name of the file, or the line number because the code does not put it there. The code has a good reason to do that. The code at the location of the exception throwing does not have the information and thus it cannot insert into the exception what it does not have.

A lucrative approach could be to pass this information along with the other parameters so that when an exception happens the code can insert this information into the exception. I do not recommend that approach. If you look at the source codes I published on GitHub you may find examples of this practice. I am not proud of them, and I am sorry.
Generally, I recommend that the exception handling should not interfere with the main data flow of the application. It has to be separated as it is a separate concern.

The solution is to handle the exception on several levels, on each level adding the information, which is available at the actual level. To do that we modify the classes <code>FileWtfCounter</code> and <code>ProjectWftCounter</code>.

The code of <code>ProjectWftCounter</code> becomes the following:

<!-- snip FileWtfCounter_v2 skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v2;

public class FileWtfCounter {
    // some lines deleted ...
    public int count() {
        final var lines = fileReader.list();
        int sum = 0;
        int lineNr = 1;
        for (final var line : lines) {
            try {
                sum += new LineWtfCounter(line).count();
            }catch(LineEmpty le){
                throw new NumberedLineEmpty(lineNr,le);
            }
            lineNr ++;
        }
        return sum;
    }

}
[/code]

The code catches the exception that signals the empty line and throws a new one, which already has a parameter: the serial number of the line.

The code for this exception is not so trivial as in the case of <code>LineEmpty</code>, thus it is listed here:

<!-- snip NumberedLineEmpty_v2 -->

[code lang=java]
package javax0.blog.demo.throwable.v2;

public class NumberedLineEmpty extends LineEmpty {
    final protected int lineNr;

    public NumberedLineEmpty(int lineNr, LineEmpty cause) {
        super(cause);
        this.lineNr = lineNr;
    }

    @Override
    public String getMessage() {
        return &quot;line &quot; + lineNr + &quot;. has zero length&quot;;
    }
}
[/code]

We store the line number in an <code>int</code> field, which is <code>final</code>. We do it because

<ul>
<li>use <code>final</code> variables if possible</li>
<li>use primitives over objects if possible</li>
<li>store the information in its original form as long as possible so that the use of it is not limited</li>
</ul>

The first two criteria are general. The last one is special in this case, although it is not specific to exception handling. When we are handling exceptions, however, it is very lucrative to just generate a message that contains the line number instead of complicating the structure of the exception class. After all, the reasoning that we will never
use the exception for anything else than printing it to the screen is valid. Or not? It depends. First of all, never say never. Second thought: if we encode the line number into the message then it is certain that we will not ever use it for anything else than printing it to the user. That is because we cannot use it for anything else. We limit ourselves. The today programmer limits the future programmer to do something meaningful with the data.

You may argue that <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">this is YAGNI</a>. We should care about storing the line number as an integer when we want to use it and caring about it at the very moment is too early and is just a waste of time. You are right! At the same time, the person who is creating the extra field and the <code>getMessage()</code> method that calculates the text version of the exception information is also right. Sometimes there is a very thin line between YAGNI and careful and good style programming. YAGNI is to avoid complex code that later you will not need (except that when you create it, you think that you will need). In this example, I have the opinion that the above exception with that one extra <code>int</code> field is not "complex".

We have a similar code on the "project" level, where we handle all the files. The code of <code>ProjectWftCounter</code> will be

<!-- snip ProjectWftCounter_v2 skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v2;

import javax0.blog.demo.throwable.FileLister;

public class ProjectWftCounter {
    // some lines deleted ...
    public int count() {
        final var fileNames = fileLister.list();
        int sum = 0;
        for (final var fileName : fileNames) {
            try {
                sum += new FileWtfCounter(new FileReader(fileName)).count();
            } catch (NumberedLineEmpty nle) {
                throw new FileNumberedLineEmpty(fileName, nle);
            }
        }
        return sum;
    }
}
[/code]

Here we know the name of the file and thus we can extend the information adding it to the exception.

The exception <code>FileNumberedLineEmpty</code> is also similar to the code of <code>NumberedLineEmpty</code>. Here is the code of <code>FileNumberedLineEmpty</code>:

<!-- snip FileNumberedLineEmpty_v2 -->

[code lang=java]
package javax0.blog.demo.throwable.v2;

public class FileNumberedLineEmpty extends NumberedLineEmpty {
    final protected String fileName;

    public FileNumberedLineEmpty(String fileName, NumberedLineEmpty cause) {
        super(cause.lineNr, cause);
        this.fileName = fileName;
    }

    @Override
    public String getMessage() {
        return fileName + &quot;:&quot; + lineNr + &quot; is empty&quot;;
    }
}
[/code]

At this moment I would draw your focus to the fact that the exceptions that we created are also in inheritance hierarchy. They extend the other as the information we gather and store is extended, thus:

[code lang=text]
FileNumberedLineEmpty - extends -&gt; NumberedLineEmpty - extends -&gt; LineEmpty
[/code]

If the code using these methods expects and tries to handle a <code>LineEmpty</code> exception then it can do even if we throw a more detailed and specialized exception. If a code wants to use the extra information then it, eventually, has to know that the actual instance is not <code>LineEmpty</code> rather something more specialized as <code>NumberedLineEmpty</code> or <code>FileNumberedLineEmpty</code>. However, if it only wants to print it out, get the message then it is absolutely fine to handle the exception as an instance of <code>LineEmpty</code>. Even doing so the message will contain the extra information in human-readable form thanks to OO programming polymorphism.

The proof of the pudding is in the eating. We can run our code with the simple test. The test code is the same as it was in the previous version  with the only exception that the expected exception type is <code>FileNumberedLineEmpty</code> instead of <code>LineEmpty</code>. The printout, however, is interesting:

[code lang=text]
javax0.blog.demo.throwable.v2.FileNumberedLineEmpty: c.txt:4 is empty
    at javax0.blog.demo.throwable.v2.ProjectWftCounter.count(ProjectWftCounter.java:22)
    at javax0.blog.demo.throwable.v2.TestWtfCounter.lambda$testThrowing$0(TestWtfCounter.java:17)
    at org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
...
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: javax0.blog.demo.throwable.v2.NumberedLineEmpty: line 4. has zero length
    at javax0.blog.demo.throwable.v2.FileWtfCounter.count(FileWtfCounter.java:21)
    at javax0.blog.demo.throwable.v2.ProjectWftCounter.count(ProjectWftCounter.java:20)
    ... 68 more
Caused by: javax0.blog.demo.throwable.v2.LineEmpty: There is a zero length line
    at javax0.blog.demo.throwable.v2.LineWtfCounter.count(LineWtfCounter.java:15)
    at javax0.blog.demo.throwable.v2.FileWtfCounter.count(FileWtfCounter.java:19)
    ... 69 more
[/code]

We can be happy with this result as we immediately see that the file, which is causing the problem is <code>c.txt</code> and the fourth line is the one, which is the culprit. On the other hand, we cannot be happy when we want to have a look at the code that was throwing the exception. Sometime in the future, we may not remember why a line must not have zero length. In that case, we want to look at the code. There we will only see that an exception is caught and rethrown. Luckily there is the cause, but it is actually three steps till we get to the code that is the real problem at <code>LineWtfCounter.java:15</code>.

Will anyone ever be interested in the code that is catching and rethrowing an exception? Maybe yes. Maybe no. In our case, we decide that there will not be anyone interested in that code and instead of handling a long chain of exception listing the causation of the guilty we change the stack trace of the exception that we throw to that of the causing
exception.

<h3>Version 3, setting the stack trace</h3>

In this version, we only change the code of the two exceptions: <code>NumberedLineEmpty</code> and <code>FileNumberedLineEmpty</code>. Now they not only extend one the other and the other one <code>LineEmpty</code> but they also set their own stack trace to the value that the causing exception was holding.

Here is the new version of <code>NumberedLineEmpty</code>:

<!-- snip NumberedLineEmpty_v3 skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v3;

public class NumberedLineEmpty extends LineEmpty {
    final protected int lineNr;

    public NumberedLineEmpty(int lineNr, LineEmpty cause) {
        super(cause);
        this.setStackTrace(cause.getStackTrace());
        this.lineNr = lineNr;
    }

    // getMessage() same as in v2

    @Override
    public Throwable fillInStackTrace() {
        return this;
    }
}
[/code]

Here is the new version of <code>FileNumberedLineEmpty</code>:

<!-- snip FileNumberedLineEmpty_v3 skip="do"-->

[code lang=java]
package javax0.blog.demo.throwable.v3;

public class FileNumberedLineEmpty extends NumberedLineEmpty {
    final protected String fileName;

    public FileNumberedLineEmpty(String fileName, NumberedLineEmpty cause) {
        super(cause.lineNr, cause);
        this.setStackTrace(cause.getStackTrace());
        this.fileName = fileName;
    }

    // getMessage(), same as in v2

    @Override
    public Throwable fillInStackTrace() {
        return this;
    }
}
[/code]

There is a public <code>setStackTrace()</code> method that can be used to set the stack trace of an exception. The interesting thing is that this method is really <code>public</code> and not protected. The fact that this method is <code>public</code> means that the stack trace of any exception can be set from outside. Doing that is (probably) against encapsulation rules.
Nevertheless, it is there and if it is there then we can use it to set the stack trace of the exception to be the same as it is that of the causing exception.

There is another interesting piece of code in these exception classes. This is the public <code>fillInStackTrace()</code> method. If we implement this, like the above then we can save the time the exception spends during the object construction collecting its own original stack trace that we replace and throw away anyway.

When we create a new exception the constructor calls a native method to fill in the stack trace. If you look at the default constructor of the class <code>java.lang.Throwable</code> you can see that actually this is all it does (Java 14 OpenJDK):

[code lang=java]
public Throwable() {
    fillInStackTrace();
}
[/code]

The method <code>fillInStackTrace()</code> is not native but this is the method that actually invokes the native <code>fillInStackTrace(int)</code> method that does the work. Here is how it is done:

[code lang=java]
public synchronized Throwable fillInStackTrace() {
    if (stackTrace != null ||
        backtrace != null /* Out of protocol state */ ) {
        fillInStackTrace(0);
        stackTrace = UNASSIGNED_STACK;
    }
    return this;
}
[/code]

There is some "magic" in it, how it sets the field <code>stackTrace</code> but that is not really important as for now. It is important, however, to note that the method <code>fillInStackTrace()</code> is <code>public</code>. This means that it can be overridden. (For that, <code>protected</code> would have been enough, but <code>public</code> is even more permitting.)

We also set the causing exception, which, in this case will have the same stack trace. Running the test (similar to the previous tests that we listed only one of), we get the stack print out:

[code lang=text]
javax0.blog.demo.throwable.v3.FileNumberedLineEmpty: c.txt:4 is empty
    at javax0.blog.demo.throwable.v3.LineWtfCounter.count(LineWtfCounter.java:15)
    at javax0.blog.demo.throwable.v3.FileWtfCounter.count(FileWtfCounter.java:16)
    at javax0.blog.demo.throwable.v3.ProjectWftCounter.count(ProjectWftCounter.java:19)
    at javax0.blog.demo.throwable.v3.TestWtfCounter.lambda$testThrowing$0(TestWtfCounter.java:17)
    at org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
...
    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: javax0.blog.demo.throwable.v3.NumberedLineEmpty: line 4. has zero length
    ... 71 more
Caused by: javax0.blog.demo.throwable.v3.LineEmpty: There is a zero length line
    ... 71 more
[/code]

It should be no surprise that we have a <code>FileNumberedLineEmpty</code> with a stack trace that starts on a code line <code>LineWtfCounter.java:15</code> that does not throw that exception. When we see this there can be some debate about:

<ul>
<li>Why do we need the causing exceptions attached to the original when we overwrite the stack trace? (We do not.)</li>
<li>Is this a clean solution? It may be confusing that the stack trace originates from a line that does not throw that exception. </li>
</ul>

Let's answer these concerns with, yes, they are needed for the demonstration purpose, and in a real application every programmer may decide if they want to use a solution like that.

Is this the best solution we can get? Probably no, because, as I promised, we have a fourth version of the application.

<h3>Version 4, suppressing exceptions</h3>

When we created the mock <code>FileReader</code> we were optimistic a lot. We assumed that there is only one line that has zero length. What if there are more than one lines like that? In that case, the application stops at the first one. The user fixes the error either adding some characters to the line, so that this is not an empty one, or deleting it altogether so that this is not a line anymore. Then the user runs the application again to get the second location in the exception. If there are many such lines to correct then this process can be cumbersome. You can also imagine that the code in a real application may run for long minutes let alone for hours. To execute the application just to get the next location of the problem is a waste of human time, waste of CPU clock, energy, and thus clean oxygen generating CO2 unnecessarily.

What we can do is, alter the application so that it goes on processing when there is an empty line, and it throws an exception listing all the lines that were empty and discovered during the process only after all the files and all the lines were processed. There are two ways. One is to create some data structure and store the information in there and at the end of the processing, the application can have a look at that and throw an exception if there is any information about some empty lines there. The other one is to use the structures provided by the exception classes to store the information.

The advantage is to use the structures provided by the exception classes are

<ul>
<li>the structure is already there and there is no need to reinvent the wheel,</li></ul></p>
<li><p>it is well-designed by many seasoned developers and used for decades, probably is the right structure,</p></li>
<li><p>the structure is general enough to accommodate other types of exceptions, not only those that we have currently, and the data structure does not need any change.</p></li>


<p>Let's discuss the last bullet point a bit. It may happen that later we decide that lines that contain <code>WTF</code> all capital are also exceptional and should throw an exception. In that case, we may need to modify our data structures that store these error cases if we decided to craft these structures by hand. If we use the suppressed exceptions of the Throwable class then there is nothing extra to do. There is an exception, we catch it (as you will see in the example soon), store it, and then attach it at the end of the summary exception as a suppressed exception. Is it YAGNI that we think about this future possibility when it is extremely unlikely that this demo application will ever be extended? Yes, and no, and generally it does not matter. YAGNI is usually a problem when you devote time and effort to develop something too early. It is an extra cost in the development and later in the maintenance. When we are just using something simpler that is already there then it is not YAGNI to use it. It is simply clever and knowledgable about the tool we use.

Let's have a look at the modified <code>FileReader</code> that this time already returns many empty lines in many files:

<!-- snip FileReader_v4 -->

[code lang=java]
package javax0.blog.demo.throwable.v4;

import java.io.FileNotFoundException;
import java.util.List;

public class FileReader {
    final String fileName;

    public FileReader(String fileName) {
        this.fileName = fileName;
    }

    public List&lt;String&gt; list() {
        if (fileName.equals(&quot;a.txt&quot;)) {
            return List.of(&quot;wtf wtf&quot;, &quot;wtf something&quot;, &quot;&quot;, &quot;nothing&quot;);
        }
        if (fileName.equals(&quot;b.txt&quot;)) {
            return List.of(&quot;wtf wtf wtf&quot;, &quot;&quot;, &quot;wtf something wtf&quot;, &quot;nothing wtf&quot;, &quot;&quot;);
        }
        if (fileName.equals(&quot;c.txt&quot;)) {
            return List.of(&quot;wtf wtf wtf&quot;, &quot;&quot;, &quot;wtf something wtf&quot;, &quot;nothing wtf&quot;, &quot;&quot;);
        }
        throw new RuntimeException(&quot;File is not found: &quot;+ fileName);
    }

}
[/code]

Now all three files contain lines that are empty. We do not need to modify the <code>LineWtfCounter</code> counter. When there is an empty line, we throw an exception. On this level, there is no way to suppress this exception. We cannot collect here any exception list. We focus on one single line that may be empty.

The case is different in <code>FileWtfCounter</code>:

<!-- snip FileWtfCounter_v4 -->

[code lang=java]
package javax0.blog.demo.throwable.v4;

public class FileWtfCounter {
    private final FileReader fileReader;

    public FileWtfCounter(FileReader fileReader) {
        this.fileReader = fileReader;
    }

    public int count() {
        final var lines = fileReader.list();
        NumberedLinesAreEmpty exceptionCollector = null;
        int sum = 0;
        int lineNr = 1;
        for (final var line : lines) {
            try {
                sum += new LineWtfCounter(line).count();
            }catch(LineEmpty le){
                final var nle = new NumberedLineEmpty(lineNr,le);
                if( exceptionCollector == null ){
                    exceptionCollector = new NumberedLinesAreEmpty();
                }
                exceptionCollector.addSuppressed(nle);
            }
            lineNr ++;
        }
        if( exceptionCollector != null ){
            throw exceptionCollector;
        }
        return sum;
    }

}
[/code]

When we catch a <code>LineEmpty</code> exception we store it in an aggregate exception referenced by the local variable <code>exceptionCollector</code>. If there is not <code>exceptionCollector</code> then we create one before adding the caught exception to it to avoid NPE. At the end of the processing when we processed all the lines we may have many exceptions added to the summary exception <code>exceptionCollector</code>. If it exists then we throw this one.

Similarly, the <code>ProjectWftCounter</code> collects all the exceptions that are thrown by the different <code>FileWtfCounter</code> instances and at the end of the processing it throws the summary exception as you can see in the following code lines:

<!-- snip ProjectWftCounter_v4 -->

[code lang=java]
package javax0.blog.demo.throwable.v4;

import javax0.blog.demo.throwable.FileLister;

public class ProjectWftCounter {

    private final FileLister fileLister;

    public ProjectWftCounter(FileLister fileLister) {
        this.fileLister = fileLister;
    }


    public int count() {
        final var fileNames = fileLister.list();
        FileNumberedLinesAreEmpty exceptionCollector = null;
        int sum = 0;
        for (final var fileName : fileNames) {
            try {
                sum += new FileWtfCounter(new FileReader(fileName)).count();
            } catch (NumberedLinesAreEmpty nle) {
                if( exceptionCollector == null ){
                    exceptionCollector = new FileNumberedLinesAreEmpty();
                }
                exceptionCollector.addSuppressed(nle);
            }
        }
        if( exceptionCollector != null ){
            throw exceptionCollector;
        }
        return sum;
    }
}
[/code]

Now that we have collected all the problematic lines into a huge exception structure we get a stack trace that we deserve:

[code lang=text]
javax0.blog.demo.throwable.v4.FileNumberedLinesAreEmpty: There are empty lines
    at javax0.blog.demo.throwable.v4.ProjectWftCounter.count(ProjectWftCounter.java:24)
    at javax0.blog.demo.throwable.v4.TestWtfCounter.lambda$testThrowing$0(TestWtfCounter.java:17)
    at org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
    at org.assertj.core.api.AssertionsForClassTypes.catchThrowable(AssertionsForClassTypes.java:750)
    at org.assertj.core.api.Assertions.catchThrowable(Assertions.java:1179)
    at javax0.blog.demo.throwable.v4.TestWtfCounter.testThrowing(TestWtfCounter.java:15)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.base/java.lang.reflect.Method.invoke(Method.java:564)
    at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)
    at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
    at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
    at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
    at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:205)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:201)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
    at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
    at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)
    at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
    at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
    Suppressed: javax0.blog.demo.throwable.v4.NumberedLinesAreEmpty
        at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:22)
        at javax0.blog.demo.throwable.v4.ProjectWftCounter.count(ProjectWftCounter.java:21)
        ... 68 more
        Suppressed: javax0.blog.demo.throwable.v4.NumberedLineEmpty: line 3.
            at javax0.blog.demo.throwable.v4.LineWtfCounter.count(LineWtfCounter.java:15)
            at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:18)
            ... 69 more
        Caused by: javax0.blog.demo.throwable.v4.LineEmpty: There is a zero length line
    Suppressed: javax0.blog.demo.throwable.v4.NumberedLinesAreEmpty
        at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:22)
        at javax0.blog.demo.throwable.v4.ProjectWftCounter.count(ProjectWftCounter.java:21)
        ... 68 more
        Suppressed: javax0.blog.demo.throwable.v4.NumberedLineEmpty: line 2.
            at javax0.blog.demo.throwable.v4.LineWtfCounter.count(LineWtfCounter.java:15)
            at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:18)
            ... 69 more
        Caused by: javax0.blog.demo.throwable.v4.LineEmpty: There is a zero length line
        Suppressed: javax0.blog.demo.throwable.v4.NumberedLineEmpty: line 5.
            at javax0.blog.demo.throwable.v4.LineWtfCounter.count(LineWtfCounter.java:15)
            at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:18)
            ... 69 more
        Caused by: javax0.blog.demo.throwable.v4.LineEmpty: There is a zero length line
    Suppressed: javax0.blog.demo.throwable.v4.NumberedLinesAreEmpty
        at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:22)
        at javax0.blog.demo.throwable.v4.ProjectWftCounter.count(ProjectWftCounter.java:21)
        ... 68 more
        Suppressed: javax0.blog.demo.throwable.v4.NumberedLineEmpty: line 2.
            at javax0.blog.demo.throwable.v4.LineWtfCounter.count(LineWtfCounter.java:15)
            at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:18)
            ... 69 more
        Caused by: javax0.blog.demo.throwable.v4.LineEmpty: There is a zero length line
        Suppressed: javax0.blog.demo.throwable.v4.NumberedLineEmpty: line 5.
            at javax0.blog.demo.throwable.v4.LineWtfCounter.count(LineWtfCounter.java:15)
            at javax0.blog.demo.throwable.v4.FileWtfCounter.count(FileWtfCounter.java:18)
            ... 69 more
        Caused by: javax0.blog.demo.throwable.v4.LineEmpty: There is a zero length line
[/code]

This time I did not delete any line to make you feel the weight of it on your shoulder. Now you may start to think if it was really worth using the exception structure instead of some neat, slim special-purpose data structure that contains only the very information that we need. If you start to think that, <a href="https://youtube.com/watch?v=Ow0lr63y4Mw">then stop it</a>. Don't do it. The problem, if any, is not that we have too much information. The problem is the way we represent it. To overcome it the solution is not to throw out the baby with the bathwater... the excess information but rather to represent it in a more readable way. If the application rarely meets many empty lines, then reading through the stack trace may not be an unbearable burden for the user. If it is a frequent problem, and you want to be nice to your users (customers, who pay your bills) then, perhaps, a nice exception structure printer is a nice solution.

We actually have one for you in the project

<code>javax0.blog.demo.throwable.v4.ExceptionStructurePrettyPrinter</code>

that you can use and even modify at your will. With this the printout of the previous "horrendous" stack trace will print out as:

[code lang=text]
FileNumberedLinesAreEmpty(&quot;There are empty lines&quot;)
    Suppressed: NumberedLineEmpty(&quot;line 3.&quot;)
      Caused by:LineEmpty(&quot;There is a zero length line&quot;)
    Suppressed: NumberedLineEmpty(&quot;line 2.&quot;)
      Caused by:LineEmpty(&quot;There is a zero length line&quot;)
    Suppressed: NumberedLineEmpty(&quot;line 5.&quot;)
      Caused by:LineEmpty(&quot;There is a zero length line&quot;)
    Suppressed: NumberedLineEmpty(&quot;line 2.&quot;)
      Caused by:LineEmpty(&quot;There is a zero length line&quot;)
    Suppressed: NumberedLineEmpty(&quot;line 5.&quot;)
      Caused by:LineEmpty(&quot;There is a zero length line&quot;)
[/code]

With this, we got to the end of the exercise. We stepped through the steps from <code>v1</code> simply throwing and catching and exception, <code>v2</code> setting causing exceptions matryoshka style, <code>v3</code> altering the stack trace of the embedding exception, and finally <code>v4</code> storing all the suppressed exceptions that we collected during our process. What you can do now is download the project, play around with it, examine the stack traces, modify the code, and so on. Or read on, we have some extra info about exceptions that are rarely discussed by basic level tutorials, and it is also worth reading the final takeaway section.

<h2>Other things to know about exceptions</h2>

In this section, we will tell you some information that is not well known and is usually missing from the basic Java tutorials that talk about exceptions.

<h3>There is no such thing as checked exception in the JVM</h3>

Checked exceptions cannot be thrown from a Java method unless the method declaration explicitly says that this may happen. The interesting thing is that the notion of checked exceptions is not known for the JVM. This is something handled by the Java compiler, but when the code gets into the JVM there is no check about that.

[code lang=text]
Throwable (checked) &lt;-- Exception (checked) &lt;-- RuntimeException (unchecked)
                                            &lt;-- Other Exceptions (checked)
                    &lt;-- Error (unchecked)
[/code]

The structure of the exception classes is as described above. The root class for the exceptions is the <code>Throwable</code>. Any object that is an instance of a class, which extends directly or indirectly the <code>Throwable</code> class can be thrown. The root class <code>Throwable</code> is checked, thus if an instance of it is thrown from a method, then it has to be declared.
If any class extends this class directly and is thrown from a method then, again it has to be declared. Except if the object is also an instance of <code>RuntimeException</code> or <code>Error</code>. In that case the exception or error is not checked and can be thrown without declaring on the throwing method.

The idea of checked exception is controversial. There are advantages of its use but there are many languages that do not have the notion of it. This is the reason why the JVM does not enforce the declaration of checked exceptions. If it did it would not be possible reasonably to generate JVM code from languages that do not require exceptions declared and want to interoperate with the Java exceptions. Checked exceptions also cause a lot of headaches when we are using streams in Java.

It is possible to overcome of checked exceptions. A method created with some hack, or simply in a JVM language other than Java can throw a checked exception even if the method does not declare the exception to be thrown. The hacky way uses a simple <code>static</code> utility method, as listed in the following code snippet:

<!-- snip SneakyThrower-->

[code lang=java]
package javax0.blog.demo.throwable.sneaky;

public class SneakyThrower {
    public static &lt;E extends Throwable&gt; E throwSneaky(Throwable e) throws E {
        throw (E) e;
    }
}
[/code]

When a code throws a checked exception, for example <code>Exception</code> then passing it to <code>throwSneaky()</code> will fool the compiler. The compiler will look at the declaration of the static method and cannot decide if the <code>Throwable</code> it throws is checked or not. That way it will not require the declaration of the exception in the throwing method.

The use of this method is very simple and is demonstrated with the following unit test code:

<!-- snip SneakyThrowTest-->

[code lang=java]
package javax0.blog.demo.throwable.sneaky;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static javax0.blog.demo.throwable.sneaky.SneakyThrower.throwSneaky;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;

public class TestSneaky {

    @DisplayName(&quot;Can throw checked exception without declaring it&quot;)
    @Test
    void canThrowChecked() {
        class FlameThrower {
            void throwExceptionDeclared() throws Exception {
                throw new Exception();
            }

            void throwExceptionSecretly() {
                throwSneaky(new Exception());
            }
        }
        final var sut = new FlameThrower();
        assertThat(catchThrowable(() -&gt; sut.throwExceptionDeclared())).isInstanceOf(Exception.class);
        assertThat(catchThrowable(() -&gt; sut.throwExceptionSecretly())).isInstanceOf(Exception.class);
    }

    int doesNotReturn(){
        throw throwSneaky(new Exception());
        // no need for a return command
    }

}
[/code]

The two methods <code>throwExceptionDeclared()</code> and <code>throwExceptionSecretly()</code> demonstrate the difference between normal and sneaky throwing.

The method <code>throwSneaky()</code> never returns, and it still has a declared return value. The reason for that is to allow the pattern that can be seen in the method <code>doesNotReturn()</code> towards the end of the text code. We know that the method <code>throwSneaky()</code> never returns, but the compiler does not know. If we simply call it then the compiler will still require some return statement in our method. In more complex code flow it may complain about uninitialized variables. On the other hand if we "throw" the return value in the code then it gives the compiler a hint about the execution flow. The actual throwing on this level will never happen actually, but it does not matter.

<h3>Never catch <code>Throwable</code>, <code>...Error</code> or <code>COVID</code></h3>

When we catch an exception we can catch checked exception, <code>RuntimeException</code> or just anything that is <code>Throwable</code>. However, there are other things that are <code>Throwable</code> but are not exceptions and are also not checked. These are errors.

Story:

I do a lot of technical interviews where candidates come and answer my questions. I have a lot of reservations and bad feelings about this. I do not like to play "God". On the other hand, I enjoy a lot when I meet clever people, even if they are not fit for a given work position. I usually try to conduct the interviews that the value from it is not only the evaluation of the candidate but also something that the candidate can learn about Java, the profession, or just about themselves. There is a coding task that can be solved using a loop, but it lures inexperienced developers to have a solution that is recursive. Many of the developers who create the recursive solution realize that there is no exit condition in their code for some type of the input parameters. (Unless there is because they do it in the clever way. However, when they are experienced enough, they do not go for the recursive solution instead of a simple loop. So when it is a recursive solution they almost never have an exit condition.) What will happen if we run that code with an input parameter that never ends the recursive loop? We get a <code>StackOverflowException</code>. Under the pressure and stress of the interview, many of them craft some code that catches this exception. This is problematic. This is a trap!

Why is it a trap? Because the code will not ever throw a <code>StackOverflowException</code>. There is no such thing in the JDK as <code>StackOverflowException</code>. It is <code>StackOverflowError</code>. It is not an exception, and the rule is that

<blockquote>
  YOUR CODE MUST NEVER CATCH AN ERROR
</blockquote>

The <code>StackOverflowError</code> (not exception) extends the class <code>VirtualMachineError</code> which says in the JavaDoc:

<blockquote>
  Thrown to indicate that the Java Virtual Machine is broken
</blockquote>

When something is broken you can glue it together, mend, fix, but you can never make it unbroken. If you catch a <code>Throwable</code> which is also an instance of <code>Error</code> then the code executing in the <code>catch</code> part is run in a broken VM. What can happen there? Anything and the continuation of the execution may not be reliable.

Never catch an <code>Error</code>!

<h2>Summary and Takeaway</h2>

In this article we discussed exceptions, specifically:

<ul>
<li>how to throw meaningful exceptions by adding information when it becomes available,</li></ul></p>
<li><p>how to replace the stack trace of an exception with <code>setTrackTrace()</code> when it makes sense,</p></li>
<li><p>how to collect exceptions with <code>addSuppressed()</code> when your application can throw exceptions multiple times We also discussed some interesting bits about how the JVM does not know about checked exceptions and why you should never catch an <code>Error</code>.</p></li>


<p>Don't just (re)throw exceptions when they happen. Think about why and how they happen and handle them appropriately.

Use the information in this article to make your code exceptional ;-)

(Code and article were reviewed and proofread by Mihaly Verhas. He also wrote the takeaway section including the last
sentence.)</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2532</wp:post_id>
  <wp:post_date>2020-05-13 16:00:52</wp:post_date>
  <wp:post_date_gmt>2020-05-13 15:00:52</wp:post_date_gmt>
  <wp:post_modified>2020-05-12 13:28:25</wp:post_modified>
  <wp:post_modified_gmt>2020-05-12 12:28:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>all-you-wanted-to-know-about-throwable</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1589382260]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_862e3d49c41f2ecc4e504b4a358bd0c1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d1d012efeb748d5bfe3a5cd253772eb2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9f7e9458bbebba1b60109d3559fd7d2d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_538b3f0a95bc7f68983d133ed52d89b3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[44192699551]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1260586679389368323";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e0f964717ca582cd90e1e0459d20703f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_734f53db4eb906042b3a7481056b6fec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b569a0910c12feef47b8ce8ce20dc8de</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b569a0910c12feef47b8ce8ce20dc8de</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>29204</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>78.131.46.81</wp:comment_author_IP>
    <wp:comment_date>2020-05-17 08:51:43</wp:comment_date>
    <wp:comment_date_gmt>2020-05-17 07:51:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That is something you did not want to know.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>29200</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1589701904]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589701905.493107;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1589701906]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>29200</wp:comment_id>
    <wp:comment_author><![CDATA[SV]]></wp:comment_author>
    <wp:comment_author_email>viktor.peter.sipos@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.218.101.84</wp:comment_author_IP>
    <wp:comment_date>2020-05-16 19:29:47</wp:comment_date>
    <wp:comment_date_gmt>2020-05-16 18:29:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Peter,

What about my 2 favourites?

[code lang="java"]
 Unsafe unsafe = (Unsafe) f.get(null);
 unsafe.throwException(new MyException());
[/code]
[code lang="java"]
class Exception extends RuntimeException {}
[/code]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589653788.759136;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1589653831]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1589653831]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1589653832.347448;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Start a Java app without installing it]]></title>
  <link>https://javax0.wordpress.com/2020/10/21/start-a-java-app-without-installing-it/</link>
  <pubDate>Wed, 21 Oct 2020 16:09:27 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2546</guid>
  <description/>
  <content:encoded><![CDATA[This article describes how you can use JShell to download and execute a Java application. It will eliminate the need for the installation of the application.

<h2>Do not install, just run!</h2>

The first obstacle that you have to overcome to make people use your app is the installation. You want people to use the app, try it out. To do that, they first have to install it. At least they have to download it and type in a command line to start it up. If your program is excellent and valuable for the users, they will use it after this step. They will see that it works and can do what it is supposed to do. Before the installation, however, this is a bit different. Users will install the program if they really, really need it. Installation is undoubtedly an entry threshold.

<h2>Jamal as Example</h2>

My example is Jamal that you can download at https://github.com/verhas/jamal. I wrote the first version twenty years ago, and I named it Jamal. The name stands for Just Another Macro language, which I intended to be sarcastic. I thought it was sarcastic because it was so much more different than any other text macro applications. It seems the name was not interpreted as sarcastic but rather literally. Users saw it really as "just another" and it did not become widespread. A few people bothered to install it.
Now I have a Java version, which is even more versatile and powerful than the previous version. However, if you wanted to use it, you had to install it and start it up with a relatively complex <code>java -cp ...</code> command line. My first attempt to overcome this was to create a Maven plugin. A maven plugin executes without installing it. If you have installed Maven, all you need to run a plugin is a Maven command line. A kind of complex one, though. Or it would help if you had a <code>pom.xml</code>.

I also created the Maven plugin version because I used Jamal to maintain the <code>pom.xml</code> files with Jamal preprocessed. That way, as you can see in an earlier article, I can write

[code lang=text]
{dependencyManagement|{dependencies|
    {@for MODULE in (testsupport,api,core,tools,engine,extensions)={dependency :com.javax0.jamal:jamal-MODULE:{VERSION}}}
    {@for MODULE in (api,engine,params)={dependency :org.junit.jupiter:junit-jupiter-MODULE:5.2.0:test}}
    }}
[/code]

instead of a much longer and redundant XML fragment. This source, <code>pom.xml.jam</code> is then converted to <code>pom.xml</code>, and Maven runs fine.

The solution can still be better because many people do not use Maven. Jamal is not a Maven dependent tool.

I also use a different project to <code>*.md.jam</code> files to edit my next book. A book, as a project, does not require Maven. This book is not a Java book. I happen to have Maven on my machine, but the project does not need that.

There is no reason to require installed Maven as a precondition.

There is one precondition that I have to require, and that is an installed Java JDK. I cannot skip that because Jamal is written in Java.

You can also miss this precondition if you have docker, but then you need docker.

However, if you have the JDK installed (at least Java 9), you can quickly start a JShell. JShell executes the Java code from some input file that you specify on the command line. If you want to start Jamal, then the command is:

[code lang=text]
jshell https://git.io/jamal
[/code]

The command file is on GitHub, and JShell can download it from there. This command file downloads the JAR files needed to run Jamal, and then it starts Jamal in a separate process.

The actual script splits into separate parts, and the <code>jamal.jsh</code> content is

[code lang=text]
/open scripts/version.jsh
/open scripts/jarfetcher.jsh
/open scripts/executor.jsh
/open scripts/optionloader.jsh
/open scripts/defaultoptions.jsh

download(&quot;01engine/jamal-engine&quot;)
download(&quot;02api/jamal-api&quot;)
download(&quot;03tools/jamal-tools&quot;)
download(&quot;04core/jamal-core&quot;)
download(&quot;08cmd/jamal-cmd&quot;)

loadOptions()

for(String jarUrl:extraJars){
    LOCAL_CACHE.mkdirs();
    downloadUrl(jarUrl,LOCAL_CACHE);
    }

execute()

/exit
[/code]

As you can see, the JShell commands and the Java snippets are mixed. The script loads other scripts using the JShell <code>/open</code> command. These snippets define the method <code>download()</code>, <code>loadOption()</code> and <code>downloadUrl()</code>.

The script <code>version.jsh</code> defines the global variable <code>VERSION</code>:

[code lang=text]
String VERSION=&quot;1.2.0&quot;;
[/code]

<h2>Downloading and Caching the Program</h2>

The next script, <code>jarfetcher.jsh</code> is a bit more complicated. As of now, it is 100 lines. If you want to look at the whole code, it is available on GitHub. You can calculate the URL from the argument of the <code>/open</code> statement and from the URL above used to start Jamal.

The core functionality implemented in this script is the one that downloads the JAR files. This is the following:

[code lang=text]
void downloadUrl(String urlString,File cacheRootDirectory) throws IOException {
    final URL url = new URL(urlString);
    File jar = new File(cacheRootDirectory.getAbsolutePath() + &quot;/&quot; + getFile(url));
    classPath.add(jar.getAbsolutePath());
    if (jar.exists()) {
        return;
    }
    System.out.println(&quot;downloading &quot; + url);
    System.out.println(&quot;saving to file &quot; + jar.getAbsolutePath());
    HttpURLConnection con = (HttpURLConnection) url.openConnection();
    con.setRequestMethod(&quot;GET&quot;);
    con.setConnectTimeout(CONNECT_TIMEOUT);
    con.setReadTimeout(READ_TIMEOUT);
    con.setInstanceFollowRedirects(true);
    final int status = con.getResponseCode();
    if (status != 200) {
        throw new IOException(&quot;GET url &#039;&quot; + url.toString() + &quot;&#039; returned &quot; + status);
    }
    InputStream is = con.getInputStream();
    try (OutputStream outStream = new FileOutputStream(jar)) {
        byte[] buffer = new byte[8 * 1024];
        int bytesRead;
        while ((bytesRead = is.read(buffer)) != -1) {
            outStream.write(buffer, 0, bytesRead);
        }
    }
}
[/code]

The method caches the downloaded files into a directory. Environment variables can configure the directory. The default location is <code>~/.jamal/cache/.jar/</code>.

If the file exists, then it does not download it again. The code assumes that the files we are using are released JAR files that do not ever change. If this file was never downloaded before, it downloads the file and stores it in the cache directory.

<h2>Executing the macro processor</h2>

When all the files are there, then the script executed Jamal. It is coded in the <code>executor.jsh</code>. The method <code>execute.jsh</code> contains the following method:

[code lang=text]
void execute() throws IOException, InterruptedException {
    ProcessBuilder builder = new ProcessBuilder();
    String sep = System.getProperty(&quot;path.separator&quot;);
    String cp = String.join(sep,classPath);
    List&lt;String&gt; arguments = new ArrayList&lt;&gt;();
    arguments.addAll(List.of(&quot;java&quot;, &quot;-cp&quot;, cp, &quot;javax0.jamal.cmd.JamalMain&quot;));
    arguments.addAll(commandLineOptions.entrySet().stream().map(e -&gt; &quot;&quot; + e.getKey() + &quot;=&quot; + e.getValue()).collect( Collectors.toSet()));
    System.out.println(&quot;EXECUTING&quot;);
    for( String a : arguments){
        System.out.println(a);
    }
    builder.command(arguments.toArray(String[]::new))
        .directory(new File(&quot;.&quot;));
    Process process = builder.start();
    process.getInputStream().transferTo(System.out);
    int exitCode = process.waitFor();
}
[/code]

As you can see, this script is using the standard Java <code>ProcessBuilder</code> to create a new process and then executes Jamal in it.

<h2>Extra details</h2>

The actual operation is a bit more complex. Many options can control Jamal. In the Maven plugin version, these options are in the <code>pom.xml</code> file. The command-line version uses, eventually, command-line options. JShell does not handle command-line options that would pass to the executing JShell engine. There are some tricks, like using system properties or environment variables. I find those cumbersome and tricky to use. You usually execute Jamal using the same configuration in a single project. The best way is to have the options in a file. The Jamal startup JShell script reads the file <code>./jamal.options</code>. The file has a simple <code>key value</code> format. It can contain values for the command line options as keys and extra <code>jar</code> and <code>cp</code> keys. Jamal is extensible. Extra classes on the classpath may contain macro implementations in Java, and they are used from the text files. Every <code>jar</code> defines a URL from where a JAR file downloads. The <code>cp</code> key defines local files to be added to the classpath.

These files are project-specific; therefore, these will cache in the current working directory. The cache directory will be <code>./.jamal/cache/.jar/</code>.

If the <code>jamal.options</code> file does not exist, then the script's first execution will create. The auto-created file will contain the default values and also some documentation.

<h2>Summary</h2>

A Java application can start without downloading it first using JShell. The startup JShell script can be located on the net and downloaded on the fly. It can also fetch other scripts, and you can mix the Java snippets with JShell commands. I recommend having some caching strategy for the JAR files to avoid repetitive downloads. The JShell script can start your application in a new process. You cannot pass command line parameters to a JShell script, but you can use an options file or something else.

Happy scripting.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2546</wp:post_id>
  <wp:post_date>2020-10-21 17:09:27</wp:post_date>
  <wp:post_date_gmt>2020-10-21 16:09:27</wp:post_date_gmt>
  <wp:post_modified>2020-10-26 10:16:19</wp:post_modified>
  <wp:post_modified_gmt>2020-10-26 09:16:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>start-a-java-app-without-installing-it</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_oembed_734f53db4eb906042b3a7481056b6fec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[50180292906]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1603296570]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1318947532018515970";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Unit testing private methods]]></title>
  <link>https://javax0.wordpress.com/2021/02/10/unit-testing-private-methods/</link>
  <pubDate>Wed, 10 Feb 2021 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2561</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>
In this article, I will contemplate the testing of private methods in unit tests. After that, I will propose a way or pattern to do it, if you must. Finally, I will show how you can generate this pattern automatically.

And yes, I will also write a takeaway section to know what you have read.
<h1>Test or not to Test Private Methods</h1>
Unit testing is usually not black-box testing. It is debatable if it ought to be or not. Practice shows that it rarely is. When we equip the tested unit with different mocks, we play around with the implementation and not the defined functionality that a black-box test should only deal with.

After setting up and injecting the mock objects, we invoke the tested methods, and these methods are usually public. In other words, the invocation of the tested system is more like a black-box test. You can say that the test setup is not a black-box test, but the actual test is.

The advantage of black-box testing is that it does not need to change if the tested module changes' internal working. If the functionality changes, it is another story. It is easier to refactor, optimize, simplify, beautify your code if there are clean unit tests that do not depend on the implementation. If the unit tests depend on the implementation, then you cannot reliably refactor your code. As soon as you change the implementation, the test has to follow the change.

I do not particularly appreciate when the unit test cannot be black-box, but there are cases when it is unavoidable. An unusual and frequent case is when we want to test a private method. If you want to, or even God forgive, have to test a private method, it is a code smell. The method may be simple, and you can achieve the coverage of its functionality by invoking only the public API of the tested unit. You do not have to test the private method, and if you do not have to, you must not want.

Another possibility is that that the private method is so complicated that it deserves its own test. In that case, the functionality deserves a separate utility class.

Still, there is a third possibility. After all the contemplating, we decide that the private method remains inside the unit, and we want to test it.

It is a small, insignificant problem that you cannot invoke from outside, and the test is inevitably out of the unit. Some developers remove the <code>private</code> modifier changing the access level from private to "test-private".

No kidding! After more than 500 technical interviews over the past ten years, I have heard many things. I regret that I did not start recording these. As I heard a few times, one of these lovely things: "test private" as a terminology instead of package-private. Two or three candidates out of the 500 said that the accessibility is test private when there is no access modifier in front of the class member. It means they said that the member can also be accessible from the unit tests. From other classes in the same package? Not so sure.

What this story suggests is that many developers struggle to test private methods. I have also seen this in many other projects.

I am not too fond of this approach because we weaken the access protection of a class member to ease testing.

A different approach is when the tests use reflection to access the class members. There are two issues with this approach. One is the suboptimal performance. The other is the bloated code. The fact that the access to the class members via reflection is slower than the direct access is usually not significant. We are talking about tests. If the test execution needs significant time, then the tests are wrong, or the project is large or has some particular testing need. Even in these cases, the reason for the slow speed is usually not the reflective access.

The bloated code, on the other hand, hinders readability. It is also cumbersome to write every time things like

[sourcecode language="java"]
Field f = sut.getClass().getDeclaredField("counter");
f.setAccessible(true);
f.set(sut, z);
[/sourcecode]

when we want to set a private field, or

[sourcecode language="java"]
Method m = sut.getClass().getDeclaredMethod("increment");
m.setAccessible(true);
m.invoke(sut);
[/sourcecode]

when we want to invoke a private method. The maintenance of such tests is also questionable. If the name of the method or field changes, the test has to follow. There is no significant risk of forgetting because the test will fail, but still, it is a manual editing functionality. Most of the IDEs support renaming. Whenever I rename a method or field, the IDE renames all the references to it. Not when the reference is part of a string.

There is no real solution to this issue, except when you write code that does not need the testing of private methods and fields. Still, some approaches have advantages.
<h1>Doing it with a Style</h1>
One approach is to declare a <code>private</code> <code>static</code> delegating inner class with the same name as the tested class. This class has to implement the same methods as the original tested class, and these implementations should delegate to the original methods. The class also has to implement setters and getters to all the fields.

If we instantiate this class instead of the original one, then we can invoke any method or set any field without reflective access in the test code. The inner class hides the reflective access.

The reason to name the class with the same simple name as the tested class is that the tests do not need to change this way. If a test has a code that instantiated the tested class calling <code>new Sut()</code> and now we start to have an inner class named <code>Sut</code>, then the constructor all of a sudden will refer to the inner class.

Let's see an example. The following class is a simple example that has one public method and a private one. The complexity of the methods barely reaches the level that would rectify extensive testing, but this makes it suitable for demonstration purposes.

[sourcecode language="java"]
public class SystemUnderTest {

private int counter = 0;

public int count(int z) {
while (z &gt; 0) {
z--;
increment();
}
return counter;
}

private void increment(){
counter++;
}

}
[/sourcecode]

This file, along with the other samples, can be found in full at https://github.com/verhas/javageci/tree/1.6.1/javageci-jamal/src/test/java/javax0/geci/jamal/sample

The test itself is also very simple:

[sourcecode language="java"]
@Test
void testCounter() throws Exception {
final var sut = new SystemUnderTest();
sut.setCounter(0);
sut.increment();
Assertions.assertEquals(1, sut.getCounter());
}
[/sourcecode]

The only problem with this solution that the system under test does not contain the setter, and the method <code>increment()</code> is private. The code, as it is now, does not compile. We have to provide an implementation of the delegating <code>static</code> inner class named <code>SystemUnderTest</code>.

The following code shows an implementation of this class, which I created manually.

[sourcecode language="java"]
private static class SystemUnderTest {
private javax0.geci.jamal.sample.SystemUnderTest sut = new javax0.geci.jamal.sample.SystemUnderTest();

private void setCounter(int z) throws NoSuchFieldException, IllegalAccessException {
Field f = sut.getClass().getDeclaredField("counter");
f.setAccessible(true);
f.set(sut, z);
}

private int getCounter() throws NoSuchFieldException, IllegalAccessException {
Field f = sut.getClass().getDeclaredField("counter");
f.setAccessible(true);
return (int) f.get(sut);
}

private void increment() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
Method m = sut.getClass().getDeclaredMethod("increment");
m.setAccessible(true);
m.invoke(sut);
}

private int count(int z) {
return sut.count(z);
}
}
[/sourcecode]

It is already an achievement because we could separate the messy reflective access from the test code. The test, this way, is more readable. Since we cannot avoid the reflective code, it will not get better than this as per the readability. The other issue, maintainability, however, can still be improved.
<h1>Doing it Automated</h1>
Creating the delegating inner class is relatively straightforward. It does not need much innovation. If you specify the task precisely, any cheaply hired junior could create the inner class. It is so simple that even a program can create it. It does not need the human brain.

If you tried to write a Java program from scratch that generates this code, it would be, well, not simple. Fortunately (ha ha ha), we have Java::Geci, and even more, we have the Jamal module. Jav::Geci is a code generation framework that you can use to generate Java code. The framework contains readily available code generators, but it is also open and pluggable, providing a clean API for new code generators. It does all the tasks needed for most of the code generators and lets the code generator program focus on its core business.

Code generation.

For simpler applications, when the code generation is straightforward and does not need a lot of algorithm implementation, the module Jamal can be used. Jamal is a text-based templating language, which can be extended with Java classes implementing macros. The Java::Geci Jamal module includes a code generator that parses the source files and looks for code that has the following structure:

[sourcecode language="java"]

/*!Jamal

TEMPLATE

*/

CODE HERE

//__END__
[/sourcecode]

When it sees one, it evaluates the code that is written on the lines TEMPLATE using Jamal, and then it replaces the lines of CODE HERE with the result. It generates code, and if there was a generated code but is stale, it updates the code.

The code generation runs during the test execution time, which has advantages and disadvantages.

One disadvantage is that the empty code or stale code should also compile. The compilation should not depend on the up-to-date-ness of the generated code. In practice, we usually (well, not usually, rather always) can cope with it.

The advantage is that the code generation can access the Java code structures via reflection. That way, for example, the code generators can get a list of all declared fields or methods and can generate some delegating methods for them.

The Jamal module contains Java classes implementing macros that can do that. The fact that you can express the generation of the unit test delegating inner class as Jamal macros shows the tool's power. On the other hand, I have to note that this task is somewhere at the edge of the tool's complexity. Nevertheless, I decided to use this task as a sample because generating setter and getters is boring. I also want to avoid lazy readers asking me why to have another setter/getter generator, as it happened at some conferences where I talked about Java::Geci. Setter and getter generator is not a good example, as it does not show you the advantage. You can do that with the IDE or using Lombok or some other tool. Perhaps after reading this article, you can try and implement the setter/getter generation using Jamal just for fun and to practice.

The previous code snippets were from the class <code>ManualTestSystemUnderTest</code>. This class contains the manually created delegating inner class. I created this class for demonstration purposes. The other testing class, <code>GeneratedTestSystemUnderTest</code> contains the generated sample code. We will look at the code in this file and how Java::Geci generates it automatically.

Before looking at the code, however, I have to make two notes:
<ul>
 	<li>The example code uses a simplified version of the macros. These macros do not cover all the possible causes.</li>
 	<li>On the other hand, the code includes all the macros in the source file. Professional code does not need to have these macros in the source. All they need is an import from a resource file and then the invocation of a single macro. Two lines. The macros generating the delegating inner class are defined in a resource file. It is written once, you do not need to write them all the time. I will show you at the end of this article how it is invoked.</li>
</ul>
Let's have a look at the class <code>GeneratedTestSystemUnderTest</code>! This class contains the following Jamal template in a Java comment:

[sourcecode]
/*!jamal
{%@import res:geci.jim%}\
{%beginCode SystemUnderTest proxy generated%}
private static class SystemUnderTest {
private javax0.geci.jamal.sample.SystemUnderTest sut = new javax0.geci.jamal.sample.SystemUnderTest();
{%!#for ($name,$type,$args) in
({%#methods
{%class javax0.geci.jamal.sample.SystemUnderTest%}
{%selector private %}
{%format/$name|$type|$args%}
%}) =
{%@options skipForEmpty%}
private $type $name({%`@argList $args%}) throws Exception {
Method m = sut.getClass().getDeclaredMethod("$name"{%`#classList ,$args%});
m.setAccessible(true);
m.invoke(sut{%`#callArgs ,$args%});
}
%}
{%!#for ($name,$type,$args) in
({%#methods
{%class javax0.geci.jamal.sample.SystemUnderTest%}
{%selector/ !private &amp; declaringClass -&gt; ( ! canonicalName ~ /java.lang.Object/ )%}
{%format/$name|$type|$args%}
%}) =
{%@options skipForEmpty%}
private $type $name({%`@argList $args%}) {
{%`#ifNotVoid $type return %}sut.$name({%`#callArgs $args%});
}
%}
{%!#for ($name,$type) in
({%#fields
{%class javax0.geci.jamal.sample.SystemUnderTest%}
{%selector/ private %}
{%format/$name|$type%}
%}) =
{%@options skipForEmpty%}
private void {%setter=$name%}($type $name) throws Exception {
Field f = sut.getClass().getDeclaredField("$name");
f.setAccessible(true);
f.set(sut,$name);
}

private $type {%getter/$name/$type%}() throws Exception {
Field f = sut.getClass().getDeclaredField("$name");
f.setAccessible(true);
return ($type)f.get(sut);
}
%}
{%!#for ($name,$type) in
({%#fields
{%class javax0.geci.jamal.sample.SystemUnderTest%}
{%selector/ !private %}
{%format/$name|$type%}
%}) =
{%@options skipForEmpty%}
private void {%setter/$name%}($type $name) {
sut.$name = $name;
}

private $type {%getter/$name/$type%}() {
return sut.$name;
}
%}
}
{%endCode%}
*/
[/sourcecode]

In this code the macro start string is <code>{%</code> and the macro closing string is <code>%}</code>. It is the default setting when Java::Geci starts Jamal to process a source file. This way, the macro enhanced template can freely contain standalone <code>{</code> and <code>}</code> characters, which is very common in Java. Macros implemented as Java code use the <code>@</code> or the <code>#</code> character in front of the macro name. If there is no such character in front of the macro name, then the macro is user-defined from a <code>@define ...</code> macro.

The text of the template contains three parts:
<ol>
 	<li>the start of the code,</li>
 	<li>four loops, and</li>
 	<li>the end of the generated code in the template (this is just a closing <code>}</code> character).</li>
</ol>
The start of the template

[sourcecode]
{%@import res:geci.jim%}\
{%beginCode SystemUnderTest proxy generated%}
private static class SystemUnderTest {
private javax0.geci.jamal.sample.SystemUnderTest sut = new javax0.geci.jamal.sample.SystemUnderTest();
[/sourcecode]

imports the macro definitions from the resource file <code>geci.jim</code>. The file itself is part of the library. If you have the dependency on the classpath when the code generator and the Jamal processor runs, you can import the definition from this resource file. The macro definitions in this file are simple Jamal macros defined as text. You can have a look at them at the URL

https://github.com/verhas/javageci/blob/1.6.1/javageci-jamal/src/main/resources/geci.jim

The next line uses the <code>beginCode</code> user-defined macro, which is defined in <code>geci.jim</code> as the following:

[sourcecode]
{%@define beginCode(:x)=//&lt;editor-fold desc=":x"&gt;%}
[/sourcecode]

When this macro is used it will result the start of an editor fold that helps to keep the generated code non-intrusive when the file is opened in the IDE. When this macro is evaluated, it will be

[sourcecode language="java"]
//&lt;editor-fold desc="SystemUnderTest proxy generated"&gt;
[/sourcecode]

The next two lines start the <code>private</code> <code>static</code> inner class. It is just plain text; there is no macro in it.

Now we get to the four loops that generate proxy codes for
<ol>
 	<li>Delegating proxy methods for the <code>private</code> methods of the tested class.</li>
 	<li>Delegating proxy methods for the non-private methods declared in the class or inherited, except those inherited from the <code>Object</code> class.</li>
 	<li>Setter and getter methods for the <code>private</code> fields of the tested class.</li>
 	<li>Setter and getter methods for the non-private fields of the tested class.</li>
</ol>
Since these are very similar, I will discuss here only the first in detail.

[sourcecode language="java"]
{%!#for ($name,$type,$args) in
({%#methods
{%class javax0.geci.jamal.sample.SystemUnderTest%}
{%selector private %}
{%format/$name|$type|$args%}
%}) =
{%@options skipForEmpty%}
private $type $name({%`@argList $args%}) throws Exception {
Method m = sut.getClass().getDeclaredMethod("$name"{%`#classList ,$args%});
m.setAccessible(true);
m.invoke(sut{%`#callArgs ,$args%});
}
%}
[/sourcecode]

The loop is constructed using a <code>for</code> macro, a Java-implemented, built-in macro of Jamal from the core package. This macro is always available for any Jamal processing. This macro iterates through a comma-separated list and repeats its contents for each list element replacing the loop variables with the actual values. There can be more than one loop variable. In such a case, like in our example, the actual value is split up along the <code>|</code> characters. The comma used as a list separator, and the values separator <code>|</code> can be redefined. In the above case, the <code>for</code> loop uses three-loop variables, <code>$name</code>, <code>$type`, and</code>$args<code>. The start with a</code>$` sign has no significance. Any string can be used as a loop variable.

The list of values is between the <code>()</code> characters after the <code>in</code> keyword. This list is the result of the evaluation of the <code>methods</code> built-in macro. This macro is implemented in Java and is part of the Java::Geci Jamal module. It is not a generally available Jamal macro, but when we run the code generation of Java::Geci, this JAR file is on the classpath, and thus this macro is available.

The <code>methods</code> macro lists the methods of a class.

The class name is taken from the user-defined macro <code>$class</code>, which can be defined using the user-defined macro <code>class</code>. The listing also considers a selector expression that can be used to filter out some of the methods. It is also provided in a user-defined macro, and there is also a helper macro in <code>geci.jim</code> to define it, named <code>selector</code>. In the example above, the selector expression is <code>private</code>, which will select only the private methods.

When the list is collected, the macro <code>methods</code> must convert it to a comma-separated list. To do that, it uses a formatting string that can contain placeholders. In our case, the placeholders are <code>$name</code>, <code>$type</code>, and <code>$args</code>. Every element in the list for the <code>for</code> loop will contain these three strings for the listed methods separated by two <code>|</code> characters as indicated by the format string.

The part after the <code>=</code> sign in the for loop is repeated for each method. It will declare a <code>private</code> method that invokes the same method of the tested method. To do that, it uses the help of the Java::Geci Jamal module provided built-in macros <code>argList</code>, <code>classList</code>, and <code>callArgs</code>. These help generating code that declares the arguments, lists the classes of the argument types or lists the arguments for the actual call.

Since this is just an article and not a full-blown documentation of Java::Geci and Jamal, I skip some details. For example, why the macro <code>for</code> uses the <code>#</code> character in front of it instead of <code>@</code>, why there is a backtick character in front of the macros in the loop's body, and why the for loop uses a <code>!</code> character. These details control the macro evaluation order. The list of the methods needs to be created before the <code>for</code> loop starts because it requires the method list. On the other hand, the macros in the loop's body have to be evaluated after the loop generated the text for every listed method.

Also, note that this implementation is for demonstration purposes only. It simplifies the problem and does not cover all the corner cases. For example, it will generate a setter for a <code>final</code> field.

If you want to use this code generation, you can use the macro <code>proxy(KLASS)</code> defined in the resource file <code>res:unittestproxy.jim</code>.

You can have a look at the class UnitTestWithGeneratedUnitTestProxy, which is a tad more complex than the sample and tests these macros. The start of the generated code is the following:

[sourcecode]
/*!jamal
{%@import res:unittestproxy.jim%}\

{%beginCode SystemUnderTest proxy generated%}
{%proxy javax0.geci.jamal.unittestproxy.TestSystemUnderTest%}
{%endCode%}
*/
[/sourcecode]

It merely imports the <code>res:unittestproxy.jim</code> file, which imports <code>geci.jim</code> and then uses the macro <code>proxy</code> to generate all the needed code covering all the corner cases.

If you want to use the code generator in your code, you have to do two things:

A. Include the dependency in your <code>pom.xml</code> file:

[sourcecode language="xml"]
&lt;dependency&gt;
&lt;groupId&gt;com.javax0.geci&lt;/groupId&gt;
&lt;artifactId&gt;javageci-jamal&lt;/artifactId&gt;
&lt;version&gt;1.6.1&lt;/version&gt;
&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
[/sourcecode]

B. Create a small unit test that runs the code generator:

[sourcecode language="java"]
@Test
@DisplayName("run the Jamal generator")
public void testRunJamalGenerator() throws Exception {
Geci geci = new Geci();
Assertions.assertFalse(
geci.register(new JamalGenerator())
.generate()
, geci.failed()
);
}
[/sourcecode]

The generator runs during the unit test. During the test run, it has access to the structure of the Java code via reflection. The Jamal macros like <code>methods</code>, <code>fields</code> can query the different classes and provide the list of the methods and fields. The test fails if there was any new code generated. It only happens when the code generator runs the first time or when the tested system has changed. In this case, the test fails because the compiled code during the execution is not the final one. In such a case, start Maven again, and the second time the compilation already runs fine. Do not forget to commit the changed code. There is no risk of failing to update the generated code, like in IDE provided code generation that you have to invoke manually.
<h1>Takeaway</h1>
What you should remember from this article:
<ul>
 	<li>Try not to test private methods. If you feel the need, you did something wrong. Probably. Possibly not.</li>
 	<li>If you test private methods arrange the reflective code into a private static class that delegates the call to the original class. This will remove the implementation of the reflective access from the test and the test remains what it has to be: functionality test.</li>
 	<li>If you are a lazy person, and as a good programmer you have to be, use a Java::Geci and Jamal to generate these inner classes for your tests.</li>
 	<li>Master Java::Geci and Jamal and use them to generate code for your other, specific needs.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2561</wp:post_id>
  <wp:post_date>2021-02-10 16:00:00</wp:post_date>
  <wp:post_date_gmt>2021-02-10 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-09 12:42:16</wp:post_modified>
  <wp:post_modified_gmt>2021-02-09 11:42:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>unit-testing-private-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="expert"><![CDATA[expert]]></category>
  <category domain="post_tag" nicename="jamal"><![CDATA[jamal]]></category>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0aa0b4bfb563f821976e93efc0cbd1fd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7482c74b623d1378ec1375ab9a3f6c41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6a7eca149e1e3f78bc7fe35759dfefa6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa11deb808998b2ee0a000ac01973bcf</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[54587929272]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7bdef570652a20cef059d996a67e8445</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1359517522765246467";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1612969211]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30214</wp:comment_id>
    <wp:comment_author><![CDATA[Unit testing private methods | Java Code Geeks | World Best News]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://worldbestnews.info/unit-testing-private-methods-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>209.159.146.10</wp:comment_author_IP>
    <wp:comment_date>2021-02-18 15:08:48</wp:comment_date>
    <wp:comment_date_gmt>2021-02-18 14:08:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Unit testing private methods [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1613669545]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1613669546.506464;s:5:"event";s:10:"report-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user</wp:meta_key>
      <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[true]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1613657329.501937;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1613662321.579881;s:5:"event";s:10:"check-spam";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Automate Technical Documentation using Jamal]]></title>
  <link>https://javax0.wordpress.com/2021/02/17/automate-technical-documentation-using-jamal/</link>
  <pubDate>Wed, 17 Feb 2021 15:00:51 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2590</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>

Writing good technical documentation is an art.

<blockquote> An art is the expression or application of human creative skill and imagination, ... to be appreciated primarily for their beauty or emotional power. </blockquote>

But every art, like sculpting, has a craft part. You need chisels, hammers to form the sculpture out of the blob of marble. You need to learn the craft to master the art. Technical documentation writing is similar.

Writing sentences that are easy to read, entertaining for the reader is the art part. Fixing typos and grammatical errors is more like a craft. Making the documentation precise, to the point, and well structured is also the craft part. Crafts can be learned and aided with the right tool.

In technical documentation writing, the tools help address those tasks that are often performed manually though they could be automated. In this article, I will write about a tool that helps in that manner and which I used successfully to write documentation, many articles -- also this one --and books.

<h1>What can be automated</h1>

Many things can be automated for technical document writing. I tried to gather a list from my experience, but it may not be complete. The list is the following:

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/tasks.svg" />

<ul>
<li>Eliminate manual text repetition.</li>
<li><p>Transclude information from the documented system.</p></li>
<li><p>Checks internal consistency of the documentation.</p></li>
<li><p>Check the consistency of the documentation with the documented system.</p></li>
</ul>

<p>In the following, I will talk shortly about these tasks, and then I will explain the tool that I use to address these.

<h2>DRY in Documentation</h2>

The DRY (Don't Repeat Yourself) is a fundamental and old principle in programming. If there are the same lines in the source, they should be singled out, moving the common code into a separate method, class, or other coding structure. Copy/Paste programming is evil and must not be done. It does not mean that there is no repeated code in the compiled binary code. Code generators are free to repeat code if they think that is better than in some way eliminating it. One famous example is when a short loop is extended, and the code is repeated instead of creating a binary looping construct. It may consume more memory, but at the same time, optimization may find it faster.

The same should happen when you write the documentation. Except, you do not have methods or classes in the documents. You can reorganize your document into smaller sections, and then you can refer to the areas. It may have an impact on the readability. If the reader has to turn the pages instead of linear reading, comprehending the document becomes challenging. Using non-printed, non-linear documentation, a.k.a. hypertext eases a bit the page-turning, but the reader still can get mentally lost in the maze of the non-linear documentation. The ideal solution would be to have documentation, which is linear and contains all the interesting text for the particular user, reading it in the order as they want to read it.

Eventually, it is impossible. With today's technology, you cannot create a document that contains precisely what the reader wants to read at the very moment and changes for each reader and even for each reading. The best approach we have is repeating some of the text in the documentation. Some readers may find it boring, while others will just get what they need. Your document "source" should be DRY, and the repeating of the text, the copy-paste operation has to be automated. The advantage is: any change in the text is consistently propagated to every occurrence of the text.

<h2>Information Transclusion</h2>

A living document has to follow the change of the system it documents. In the case of software, this can partially be automated. A lot of data that may need to be included in the document is available in the source code. For example, the current version of the application, a numeric value, may be included in the documentation at different locations. Updating it to the latest version manually is almost always some error. Sooner or later, one or more references may skip the update and become stale. The solution is partial when we use the technique that eliminates DRY. We define the version in the document in one place, and it will be referred to in other places. It still needs that one place to be updated. Fetching the version number from the source code automatically is one level more automation.

Usage samples are also an excellent example for transclusion. When the usage samples are automatically fetched from the unit tests, they are guaranteed to run during the test execution.

<h2>Internal Consistency</h2>

Ensuring internal consistency of the document can also be automated to some level. It is such an essential factor that many documentation systems support it related to cross-references. The examples can be various.

You may create a document with use cases. In the use cases, you use actors in the description. A document management system can ensure that all the actors used in the document are also defined. A similar check can be done for abbreviations and other things. Consistency, if it can be formally defined, can be checked by automated tools.

<h2>External Consistency</h2>

Just as well as the different parts of the document should be consistent and without contradiction, the documentation should also be consistent with the system it documents. It is similar to transcluding information from the source. The difference is that the information, in this case, is mainly existence only. For example, you reference a file, a directory, a method in a Java class. A tool can check that the directory, file, or method exists; it was not renamed nor deleted. Similarly, other consistency checks can be programmed.

<h1>Document Writing is Programming</h1>

There may be some other cases where some automation may come into the picture. The general approach, however, should be to manage the document similar to the program source. Technical documents need maintenance. Documents have a source, and they should be structured. One change in the documented system should be followed by a single change in the document. Every other occurrence in the output should be created automatically.

It is very much similar to programming. The programmers write source code in a high-level programming language, and the compiler generates the machine code. Sometimes the compilation process is a long chain involving many tools. Programming in machine code is an art of the past. The advantages of using a high-level language fairly compensate for the extra effort using the compiler chain.

In technical documentation, the advantages, at least in the short run, are not so appealing. Creating a document using some WYSIWYG editor is easy as opposed to programming in assembly. It is easy to lure the technical writer to avoid some extra work at the start and avoid the document source code creation.

A work to be done tomorrow is always cheaper today than the avoidable work of now.

The same will not be true tomorrow. Creating the more complex but less redundant documentation source almost always payback, especially if we consider document quality coming from consistency and up-to-date-ness.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/cost.svg" />

<h1>The Tool: Java Macro Language</h1>

In the rest of this article, I will describe a tool that can automate document management tasks. The tool is the Java version of the text processor Jamal. Originally the name was standing for Just Another Macro Language, and it was created in the late 1990-ies in Perl. A few years ago, I rewrote the implementation in Java, with the original functionality enhanced. Since the application is based on Java, it is now named Java Macro Language, abbreviated as Jamal.

The basic concept of Jamal is that the input text containing free text and macros mixed is processed. The output is a text with all the macros executed and evaluated. The syntax of the macros is free. The only requirement is that each of them starts and ends with a specific string. The start and end string can be defined when the macro processor is initialized. It can also be changed on the fly in the input text. When I document Java programs, then I usually use <code>{%</code> as start string and <code>%}</code> as end string. That way, a simple macro definition will be

[sourcecode language="text"]
{%@define lastUpdated=2021-02-17 16:00%}
[/sourcecode]

Later you can refer to this macro as

[sourcecode language="text"]
{%lastUpdated%}
[/sourcecode]

and it will be replaced by the value <code>2021-02-17 16:00</code> for each use.

Jamal distinguishes user-defined and built-in macros. The example above, named <code>lastUpdated</code> is a user-defined macro, as it is defined in the input text. The macro defining it, named <code>define</code> is built-in. It is implemented as a Java class implementing the Jamal <code>Macro</code> interface. The built-in, Java implemented macros are provided in JAR files, in libraries. The core package contains the essential macros, like <code>define</code>, <code>import</code>, <code>begin</code>, <code>end</code>, <code>options</code>, <code>comment</code>, and a few others. These macros are not task-specific. They are needed generally.

Other libraries, like the <code>jamal-snippet</code> library, contain macros that support some specific task. The mentioned <code>jamal-snippet</code> library supports document management.

<h2>Snippet Handling, Transclude</h2>

The original idea of the snippets is not new. The basic approach to use the source code as part of the documentation originates from D. Knuth with Web and Tangle as early as 1984. https://en.wikipedia.org/wiki/CWEB Creating a program that contains the documentation and the execution code did not become popular as it needed a lot of extra work from the developers and an additional compilation step. The current trend includes the documentation into the source code as a comment. In the case of Java programs, this is JavaDoc. It is also a trend to use unit tests as a form of documentation.

The two are separate, and both lack the aspect that the other provides. JavaDoc does not show sample use unless someone copies some sample code into it manually. The unit test does not contain a proper explanation unless someone copies fragments or the whole from the JavaDoc to the unit test comments. JavaDoc is converted to navigable HTML pages. Unit tests are source code. Although the best documentation is the source code, it would be nice to have a better, more document-like format.

When we talk about snippets, then we copy code fragments automatically into the documentation. In practice, the documentation format is Asciidoc or MarkDown these days. Both formats allow code samples in the document.

using Jamal, the snippets can be marked in the Java source code or any other source code with

[sourcecode language="text"]
    snippet snippetName
    end snippet
[/sourcecode]

lines. The <code>snippetName</code> should be replaced by a unique name that identifies the snippet, and all the lines between the <code>snippet</code> and <code>end snippet</code> lines will be the snippet itself. The snippets are gathered using the <code>{%@snip:collect directory%}</code> macro. Here <code>directory</code> is either a directory or a single file. The collection process reads each file and collects the snippets. After this the snippets can be referenced using the <code>{%@snip snippetName%}</code> macro. When Jamal runs, the macro is replaced with the actual value of the snippet. It ensures that the code sample in the documentation is up-to-date.

Other macros can trim the content, replace some strings in the samples, number the lines, skip some lines, and so on. With these, you can include any code sample.

Snippets are suitable for code samples, but not only for code samples. As JavaDoc is included in the source code, some parts of the documentation can also be included in the code as comments.

For example, the implementation of the macro <code>directory</code> contains the following lines:

[sourcecode language="java"]
    // snippet dirMacroFormatPlaceholders
    &quot;$name&quot;, name, // gives the name of the directory as was specified on the macro
    &quot;$absolutePath&quot;, dir.getAbsolutePath(), // gives the name of the directory as was specified on the macro
    &quot;$parent&quot;, dir.getParent() // the parent directory
).and(
    &quot;$canonicalPath&quot;, dir::getCanonicalPath // the canonical path
    //end snippet
[/sourcecode]

These lines list the different placeholders and their values that the built-in template handler knows. The documentation includes this snippet with the following lines:

[sourcecode language="java"]
{%@define replace=|^.*?&quot;(.*?)&quot;|* `$1`!|!.*?//||%}
{%@define pattern=\)\.and\(%}
{%#replaceLines{%#killLines{%@snip dirMacroFormatPlaceholders %}%}%}
[/sourcecode]

(Note: the actual version is a bit more complicated, as you will see later.) It inserts the content of the snippet evaluating the <code>snip</code> macro. The content of the sippet is then passed to the macro <code>killLines</code>. This macro will delete all the lines that match the regular expression defined in the macro <code>pattern</code>. The result is still further modified by the <code>replaceLines</code> macro. It executes the Java String <code>replaceAll()</code> method on each line with the arguments defined in the macro <code>replace</code>. The final result, inserted into the output is:

[sourcecode language="java"]
* `$name` gives the name of the file as was specified on the macro
* `$absolutePath` the absolute path to the file
* `$parent` the parent directory where the file is
* `$canonicalPath` the canonical path
[/sourcecode]

This way, the document is much easier to maintain. The documentation of the parameters is along with the code, and that way, it is harder to forget to update the documentation. Also, the name of the placeholder is taken directly from the source code. Even if the developer makes a typo naming the placeholder in the example above, the documentation will contain the name as it is in the code and the characters it has to be used.

Snippets can come from other sources, not only from file snippet fragments. The built-in macro <code>snip:xml</code> reads a while XML file and assigns it to a macro name. This macro is similar to the built-in core macro <code>define</code>. It also defines a user-defined macro. In this case, however, the macro is not a constant string with argument placeholders as those defined, calling the macro <code>define</code>. In this case, the content is a whole parsed XML file, and the one argument the macro can and should have when invoked must be an XPath. As you can guess, the result of the macro call is the value in the XML found by the XPath.

As an example, the module documentation <code>README.adoc.jam</code> for <code>jamal-plantuml</code> contains the following lines close to the start of the file:

[sourcecode language="java"]
{%@snip:xml pom=pom.xml%}\
{%#define PLANTUML_VERSION={%pom /project/dependencies/dependency/artifactId[text()=&quot;plantuml&quot;]/following-sibling::version/text()%}%}\
{%#define VERSION={%pom /project/version/text()%}%}\
[/sourcecode]

It reads the <code>pom.xml</code> file of the macro and defines the <code>PLANTUML_VERSION</code> and <code>VERSION</code> macros to hold the current version of the used PlantUml library and the version of the project, respectively. Later in the documentation, both <code>{%PLANTUML_VERSION%}</code> and <code>{%VERSION%}</code> can be used and will be replaced in the output with the up-to-date version.

We have seen that snippet texts can be fetched from arbitrary source files and XML files. In addition to that, snippets can also be defined in <code>.properties</code> files (even XML format properties file) and can also be defined as a macro. The snippet definition as a macro using the <code>snip:define</code> built-in has a particular use that we will discuss later with the <code>snip:update</code> macro.

<h2>File, Directory, Class, Method =&gt; Consistency</h2>

The macros <code>file</code>, <code>directory</code>, <code>java:class</code>, and <code>java:method</code> are macros that can keep the code consistent with the system. These macros add barely any formatting to the output; therefore, their use needs discipline. They check that the argument file, directory, class, or method exists. If the entity does not exist, then the macro throws an exception. If the entity was renamed, moved, or deleted, the documentation has to be updated, or else it does not compile.

The use of the macros <code>file</code> and <code>directory</code> is straightforward. They check the existence of the file and directory specified as the argument. The name can either be absolute or relative to the input document.

Checking the existence of a class or method is not that straightforward. It needs a Java environment that has the class on the classpath. It is recommended to invoke Jamal from a unit test to convert the document from the input to output. This article is also written using Jamal as a preprocessor, and it is converted from a unit test of the module <code>jamal-snippet</code> using the following code:

[sourcecode language="java"]
private static void generateDoc(final String directory, final String fileName, final String ext) throws Exception {
    final var in = FileTools.getInput(directory + &quot;/&quot; + fileName + &quot;.&quot; + ext + &quot;.jam&quot;);
    final var processor = new Processor(&quot;{%&quot;, &quot;%}&quot;);
    final var result = processor.process(in);
    FileTools.writeFileContent(directory + &quot;/&quot; + fileName + &quot;.&quot; + ext, result);
}

@Test
void convertSnippetArticle() throws Exception {
    generateDoc(&quot;.&quot;, &quot;ARTICLE&quot;, &quot;wp&quot;);
}
[/sourcecode]

During the unit test's execution, the classes of the documented system are on the classpath or on the module path, and that way, these macros, <code>java:class</code> and <code>java:method</code> work.

<h2>Updating the Input</h2>

The <code>jamal-snippet</code> library has a particular macro, <code>snip:update</code>, which does something exceptional.

Built-in macro implementations get the part of the input, which is between the opening and closing string. It is the part of the input that they are supposed to work on. What they get is the input object containing not only the character but also a position coordinate. This coordinate contains the file name and the line/column position of the input in the file. Some macros use this coordinate to report the position of some error. Other macros, like <code>include</code> or <code>import</code>, use the file name to calculate the imported or included file path relative to the one that contains the macro.

The macro <code>snip:update</code> uses the file name to access the file and modify it physically. The macro scans the file and looks for lines that look like

[sourcecode language="java"]
{%@snip id
   ...
%}
[/sourcecode]

When the lines with that pattern are found, then the lines between the first and last line, practically the lines denoted with <code>...</code> above, are replaced with the snippet's actual content. It will help the maintenance of the input document. When you write the document, it is easier to see the actual snippet and not only the reference to the snippet. It is also easier to debug the line killing, character replacement, and other snippet formatting transformations.

The macro <code>snip</code> is not disturbed by these lines. The syntax of the <code>snip</code> macro is like <code>snip id ... anything treated as a comment...</code> to allow this particular use case.

The invocation of the macro updating of the input should occur at the end of the document when all snippets are already defined. It is also essential to save the input to the version control before converting. The use of this possibility makes it possible to include into the document the formatted snippets. It is done, for example, in the documentation of the macro <code>directory</code>. The sample presented before was a simplified one. Here you can see the real one making use of updates.

[sourcecode language="java"]
{%#snip:define dirMacroFormatPlaceholdersFormatted=
{%#replaceLines{%#killLines{%@snip dirMacroFormatPlaceholders %}%}%}%}

{%@snip dirMacroFormatPlaceholdersFormatted
* `$name` gives the name of the directory as was specified on the macro
* `$absolutePath` gives the name of the directory as was specified on the macro
* `$parent` the parent directory
* `$canonicalPath` the canonical path
%}
[/sourcecode]

This structure includes the snippet  <code>dirMacroFormatPlaceholders</code> and converts enclosing it into macros <code>killLines</code> and <code>replaceLines</code>. The final formatted result, however, does not get directly into the output. It is assigned to a new snippet using the macro <code>snip:define</code>. The name of the new snippet is <code>dirMacroFormatPlaceholdersFormatted</code>.

After this, when this new, already formatted snippet is defined, it is referenced using the <code>snip</code> macro to be included in the output. When the macro <code>snip:update</code> is used at the end of the file, this second use of the <code>snip</code> macro is updated, and the formatted lines are inserted there, as you can see.

The first use of the macro <code>snip</code> is not updated because there are extra characters before using the macro. Also, there are extra characters after the snippet identifier.

<h2>Creating Diagrams</h2>

Using diagrams are very important in the documentation. As the saying goes, a picture is worth a thousand words, especially if your readers are non-native and do not even know a thousand words. An excellent tool to create diagrams is PlantUml. The source for the diagrams in this tool is a text that describes the UML diagram structurally. A simple sequence diagram can look like the following:

[sourcecode language="java"]
@startuml
Aladdin -&gt; Jasmine : I love you
Jasmine -&gt; Rajah : Aladdin loves me
Rajah --&gt; Aladdin : wtf buddy?
@enduml
[/sourcecode]

sample.svg

Putting this text into the macro

[sourcecode language="text"]
{%@plantuml sample.svg
Aladdin -&gt; Jasmine : I love you
Jasmine -&gt; Rajah : Aladdin loves me
Rajah --&gt; Aladdin : wtf buddy?
%}
[/sourcecode]

will create the image, and it can then be referenced in the document to get

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/sample.svg" />

PlantUml is a widely used tool, and it has integration with many document processors. That way, it is integrated with Markdown and Asciidoc as well. Using Jamal as a preprocessor instead of the PlantUml direct integration has a few advantages, however.

You do not need to have the integration for PlantUml installed on the environment where the document rendering executes. You do not have it, for example, on GitHub or GitLab. Using Jamal, the PlantUml processing is done in your local environment, and after that, you just have a standard Markdown, Asciidoc, or whatever format you use. For example, this document uses WordPress markup, which does not have PlantUml integration, but it does not matter. The source named <code>ARTICLE.wp.jam</code> is processed by Jamal generating <code>ARTICLE.wp</code>, and it has everything it needs. Pictures are generated.

The Jamal preprocessing has other advantages. In this article, as an example, the text of the UML diagram appears three times. Once when I display for the example of how a UML digram is defined in PlantUml. The second time when I show how it is integrated using a Jamal macro. The third time it appears as an image.

The source input contains it only once before the first use. The user-defined macro, named <code>alilove</code>, contains the actual UML, and the latter only references this macro to get the same text. If there is a need to update the structure, it must be done only in one place.

Another advantage is that the macros can access the running Java environment. It is already used when we check the existence and the naming of specific classes and methods. I also plan to extend the PlantUml integration with macros that can leverage the Java environment when we document our code. Running the conversion of the Jamal input during the unit tests reflection can get access to the classes. Using those, I plan to develop macros that need only the listing of the classes you want to be shown on a class diagram. The macro will discover all the relations between the classes and create a UML source to be converted to a diagram using PlantUml. Should your class structure change, the diagrams will also change automatically.

<h1>Summary and Takeaway</h1>

You should approach technical documentation like programming. Document writers should maintain document source code and compile the document from the source code.

You should automate document content management as much as possible. Use automated tools to transclude information from the documented system. Use automated tools to check the consistency of the documentation. Document everything close to the system documented. Use automated tools to integrate your document source.

Give it a try and use Jamal.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2590</wp:post_id>
  <wp:post_date>2021-02-17 16:00:51</wp:post_date>
  <wp:post_date_gmt>2021-02-17 15:00:51</wp:post_date_gmt>
  <wp:post_modified>2021-02-13 15:29:27</wp:post_modified>
  <wp:post_modified_gmt>2021-02-13 14:29:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>automate-technical-documentation-using-jamal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_21575439</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[54909705868]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1613574118]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1362054689852821509";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>30322</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>85.0.100.51</wp:comment_author_IP>
    <wp:comment_date>2021-04-27 16:01:29</wp:comment_date>
    <wp:comment_date_gmt>2021-04-27 15:01:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jamal is both A and B.

In my experience the advantage is not that it speeds up the editing process of the source, rather than it simplifies the maintenance afterwards and provides a better cohesion between the different document parts and between the documentation and the documented system. For example having a parameter in the Java code assigned to <code>static final</code> field it is possible to get the value into the documentation using a macro. When the value changes you do not need to manually update the documentation. The macro will automatically fetch the value either using a pattern matching and sucking the value out of the source or using Java reflection.

Jamal is a text to text converter and it is not interested in formatting. You can have ASCIIDOC format document and work with Jamal. There are some processors that extend ASCIIDOC so you can use, for example plantUML. That is great and it is practically the same as Jamal plantUML support as far as the result is concerned: you will have plantUML pictures in your output and the plantUML source is inside your documentation and not in a separate file. But Jamal is not limited to ASCIIDOC. With a few macros you can tune it to include plantUML the same way into Markdown, or Wordpress formatted documents or whatnot. So long as long the output is text you can handle it with Jamal even of the output format does not natively support plantUML as an example.

PlantUML is one example, but there can be other examples what you want to integrate your documentation with. What do you do if you want to fetch something from a databe and insert into your documentation? What if you have to get it from the network and you also need a transformation? The convention way is to write a separate program that collects the information, transforms it and then you can some way include into your document. The flow is the same with Jamal, but the processor supports you with external modules. You can read an XML file. You can read properties files. You can read Yaml files using macros and insert the data from those into your document. If that is not enough you can write small JShell, Ruby, ScriptBasic or Groovy scripts that can fetch, convert and present data for the document. If all fails you can even write macros in Java and you do not need to manage all the file nagdling, temporary data storage and so on. It is all managed by Jamal and you can select the approach that fits you the best.

Jamal also support JavaDoc implementing a Doclet and a Taglet. That way you can include into your JavaDoc document samples from your unit tests. After all unit tests are documentation. If that is not your desire you can also transform the unit test sample code using regular expression search and replace commands rendering a series of "Assertions.assertEquals..." to HTML tables to display sample values. Or you can even write some simple scripts if regular expressions are not enough to transform the sample code to sample data.

Whenever you change the unit test extending the text data or modifying it the JavaDoc will automatically change.

These are only the features that already exist and tested and documented. The roadmap includes many morepossibilities.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1619535691]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1619535690]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619535690.783381;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>30227</wp:comment_id>
    <wp:comment_author><![CDATA[ODI]]></wp:comment_author>
    <wp:comment_author_email>istvan.danyi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>84.236.99.78</wp:comment_author_IP>
    <wp:comment_date>2021-02-26 18:50:52</wp:comment_date>
    <wp:comment_date_gmt>2021-02-26 17:50:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sounds great to have new tool supporting documentation activities. It has a very much needs. In order to understand properly, I have been thinking a lot what kind of tool JAMAL really is. Two main categories came up to my mind:
A) content creator - to speed up editing the raw text content
B) content source assembler - to collect of different sources and build up the final publication result

However, for both categories there are several existent candidates, so the next thought was about new features JAMAL provides compared to them. For exmaple, some years ago, I came across 'Asciidoc FX' (https://asciidocfx.com/) which is a very powerful asciidoc-based content editor with realtime WYSWYG capabilities. I liked it. It is very cool stuff. (Also has a function to include plantUML source.) As another example let me suggest to check the site builder 'Antora' (https://docs.antora.org/) which also relies on asciidoc source files. BTW, has JAMAL got an own defined language? Asciidoc (https://docs.asciidoctor.org/asciidoc/latest/) could be such a way. To sum up, I would say a toolset combining Asciidoc FX with Antora can support all the use cases you have described. And even if not, there is a chance to contribute with a new feature. :-)

Anyway, I totally agree with you that documentation should handle like a source code. There are a lot of commmon in procedures such version management, building/compiling (=publishing), visualizing track changes, "running" (=rendering interactive content). Unfortunately toolchains and practice are not so matured yet. Hope, some time or other DevOps CI/CD pipelines will always handle publishing of complete SW documentations as well.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>39100303</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1614361853.291036;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"odi76";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1619531479]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1619531480]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619531480.712699;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1614365825.34646;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"odi76";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Creating a JUnit 5 ExecutionCondition]]></title>
  <link>https://javax0.wordpress.com/2021/05/04/creating-a-junit-5-executioncondition/</link>
  <pubDate>Tue, 04 May 2021 10:58:14 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2599</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Introduction</h1>

https://youtu.be/z9NL_Il0AQI

JUnit 5 has a lot of underutilized features. Developers have learned how to use JUnit 4, and they utilize the same feature set when using JUnit5. The sexy <code>DisplayName</code> annotation is used more and more, but the majority of the new features developers skip. In this article, I describe a particular situation I was facing and how I solved the issue by creating a custom <code>ExecutionCondition</code>.

<h1>My Special Testing Need</h1>

I am developing Jamal, which is a general-purpose transpiler, text macro language. It converts from an input text to an output text, resolving and executing macros in the text. Sometimes macros can be overcomplicated, and it may not be trivial why the output is what we get. The first approach to this issue is not to use overcomplicated structures, but this is not how developers work. Good developers tend to use the tools they have in their hands to the total capacity.

In the case of Jamal, it needs debugging. Jamal supported debugging for a long time, dumping each atomic step into an XML file that the developer can later examine. It is, however, not as effective as interactive debugging.

To support interactive debugging, I developed a debugger interface into release 1.7.4 accompanied by a Rest.js client application. Jamal starts in debug mode if it sees an environment variable <code>JAMAL_DEBUG</code> or system property <code>JAMAL_DEBUG_SYS</code>. When this variable is defined, Jamal pauses whenever it starts processing a new input and listening on a port configured by the variable. It goes on with processing only when it gets a command through the TCP channel.

The important thing for this article is: Jamal pauses and starts to listen on a TCP port in this mode.

The big question is, how to debug the debugger? The obvious answer is: Start Jamal in debug mode in a JVM started in debug mode. The easiest way in IntelliJ is to start it from a JUnit test by clicking on the debug button. So I had the test:

[code lang=java]
@Test
@DisplayName(&quot;Used to debug the debugger UI&quot;)
void testDebugger() throws Exception {
    System.setProperty(Debugger.JAMAL_DEBUG_SYS, &quot;http:8081?cors=*&quot;);
    TestThat.theInput(
        &quot;hahÃ³Ã³Ã³\n&quot;.repeat(2) +
            &quot;{@define a=1}{@define b(x)=x2x}{b{a}}&quot;
    ).results(&quot;hahÃ³Ã³Ã³\n&quot; +
        &quot;hahÃ³Ã³Ã³\n&quot; +
        &quot;121&quot;);
    System.clearProperty(Debugger.JAMAL_DEBUG_SYS);
}
[/code]

You have to <code>//@Test</code> the code before committing to your repo. Forgetting that will break the build because when it starts, it pauses and waits. I forget to comment out the annotation because I am such a forgetful person. Maybe age, maybe something else. However, my experience is that every developer has age, and every developer forgets to comment out such a thing. I needed something that realizes that the test is started from IntelliJ and lets it run but aborts it otherwise.

<h1>How to Recognize it is IntelliJ?</h1>

When you run a unit test from IntelliJ, IntelliJ will invoke your code from IntelliJ. Not directly. It goes through a few method calls in the stack, but there should be some class that belongs to IntelliJ towards the top of the stack. If the method and the class belong to IntelliJ, then the name of the class should undoubtedly have something specific in it we can check. Generally, this is the idea.

No specifications guarantee it. The name of the classes IntelliJ uses may change from time to time. Like Maven or Gradle, a different execution environment can also use some class names that may be similar to that of IntelliJ. But this is a solution that eventually works. No guarantee, but as for now, it works.

[code lang=java]
boolean isIntelliJStarted = false;
final var st = new Exception().getStackTrace();
for (final var s : st) {
    if (s.getClassName().contains(&quot;Idea&quot;)) {
        isIntelliJStarted = true;
        break;
    }
}
[/code]

The selection of the string <code>Idea</code> to check is more or less arbitrary. It is a string that is not likely to happen in the stack trace of some other application, and at the same time, there is only a tiny chance that it disappears from later IntelliJ versions. It is also to note that creating the stack trace this way is time-consuming. When the code runs from IntelliJ, it is not a problem at all. The time it needs is way less than a fraction of a second, and the next step I have to do after I started the application is opening a browser and the debugger web page. By the time I am finished with that, Java could have analyzed the stack trace a few million times. I, as a human, am much slower than the stack trace gathering.

When the code runs on the CI/CD or Maven on the command line, the delay is considerable. It is not tremendous or really significant, but it should be considered. It adds to the compile time.

I would not use such a solution in a performance-sensitive production code.

<h1>Separation of Concern</h1>

I could insert this code into the test and return it from the test if it is not executed from IntelliJ. I did that as a first try, but I was aware that this is not an amicable solution. To make a decision separating the environments is not the responsibility of the test.

I was sure that JUnit 5 has a better solution for this. I asked <code>@RealityInUse</code> (Twitter handle) to help me. I was in a lucky situation because we share an office, which happens to be our living room during the pandemic. He is an active contributor of JUnit Pioneer https://junit-pioneer.org project of ``@nipafx`, he knows a lot about JUnit 5 extensions. (And he is my son.)

He told me that what I needed was an <code>ExecutionCondition</code>.

<code>ExecutionCondition</code> is an interface. It defines one single method with a direct signature:

[code lang=java]
ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext ctx);
[/code]

The implementation should have a method overriding this interface method, and after doing the above stack examination, it has to

[code lang=java]
return isIntelliJStarted ?
    ConditionEvaluationResult.enabled(&quot;started from IntelliJ&quot;) :
    ConditionEvaluationResult.disabled(&quot;not started from IntelliJ&quot;);
[/code]

It is almost all the work to be done. There is one little thing left: tell JUnit to use this condition for this test.

To do that, we created an abjectly named annotation: <code>@IntelliJOnly</code>. With this, the class we developed was the following (without imports):

[code lang=java]
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@ExtendWith(IntelliJOnly.IntelliJOnlyCondition.class)
public @interface IntelliJOnly {

    class IntelliJOnlyCondition implements ExecutionCondition {
        @Override
        public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {
            final Method method = context.getRequiredTestMethod();
            final var annotation = method.getDeclaredAnnotation(IntelliJOnly.class);
            if (annotation == null) {
                throw new ExtensionConfigurationException(&quot;Could not find @&quot; + IntelliJOnly.class + &quot; annotation on the method &quot; + method);
            }
            boolean isIntelliJStarted = false;
            final var st = new Exception().getStackTrace();
            for (final var s : st) {
                if (s.getClassName().contains(&quot;Idea&quot;)) {
                    isIntelliJStarted = true;
                    break;
                }
            }
            return isIntelliJStarted ? ConditionEvaluationResult.enabled(&quot;started from IntelliJ&quot;) : ConditionEvaluationResult.disabled(&quot;not started from IntelliJ&quot;);
        }
    }
}
[/code]

The test with this annotation is the following:

[code lang=java]
@Test
@DisplayName(&quot;Used to debug the debugger UI&quot;)
@IntelliJOnly
void testDebugger() throws Exception {
    System.setProperty(Debugger.JAMAL_DEBUG_SYS, &quot;http:8081?cors=*&quot;);
    TestThat.theInput(
        &quot;hahÃ³Ã³Ã³\n&quot;.repeat(2) +
            &quot;{@define a=1}{@define b(x)=x2x}{b{a}}&quot;
    ).results(&quot;hahÃ³Ã³Ã³\n&quot; +
        &quot;hahÃ³Ã³Ã³\n&quot; +
        &quot;121&quot;);
    System.clearProperty(Debugger.JAMAL_DEBUG_SYS);
}
[/code]

<h1>Notes</h1>

The implementation of the condition checks that the test method is annotated by <code>@IntelliJOnly</code>. The annotation may not be there if the user (developer using the annotation) makes some mistake, invokes the condition in the wrong way. This extra check may save a few surprises for the developer using this condition.

<h1>Summary</h1>

In this article, I described a situation that needed conditional test execution with a particular condition. After that, I described how the condition could be evaluated. Finally, we created a JUnit 5 execution condition to separate the Hamletian "run or not to run" dilemma from the test code.

As a takeaway, you should remember that JUnit is way better than JUnit 4. Utilizing only the features, which were already available in version 4, is a waste of resources. Your tests can be much simpler, more expressive, and easier to maintain if you learn and utilize the programming features of JUnit 5. Do!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2599</wp:post_id>
  <wp:post_date>2021-05-04 11:58:14</wp:post_date>
  <wp:post_date_gmt>2021-05-04 10:58:14</wp:post_date_gmt>
  <wp:post_modified>2021-05-04 12:32:14</wp:post_modified>
  <wp:post_modified_gmt>2021-05-04 11:32:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-a-junit-5-executioncondition</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[31131067]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1620125898]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57949826146]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1389534848302428169";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_1340507</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Why and how to do technical interviews?]]></title>
  <link>https://javax0.wordpress.com/2021/09/22/why-and-how-do-to-do-technical-interviews/</link>
  <pubDate>Wed, 22 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2612</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I<em>t is a personal blog. The views and opinions expressed in this article are those of the author. They do not represent people, institutions, or organizations that the author may or may not be associated with in a professional or a personal capacity. All information is provided on an as-is basis.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Technology companies are growing and need new personnel. In addition, there is natural attrition in the companies. In a highly competitive market, people are leaving for various reasons, and these needs also have to be met through hiring new employees. Therefore, searching for, selecting, and hiring new co-workers are always a must - it is a standard business for every company.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Companies usually conduct interviews to assess and select their future colleagues from the pool of aspiring candidates. Even though it is the standard practice, there are a lot of controversies with this approach. You can see many social media posts about harmful practices, wrong questions, and ill-treatment of the candidate. One infamous example was when Google asked candidates in their interviews to estimate the number of golf balls that could fit in a bus.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most of the people having a voice on social media express their opinion that this was total misuse. I tend to see some merit in using such questions, but, as often, personal opinions are irrelevant. So instead of starting a debate about this particular question or similar questionable practices, I will focus on the purpose and the practical approaches we apply when conducting interviews.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I mainly rely on the experiences I gained when completing interviews on behalf of my current employer, but I believe there is nothing company-specific in this article.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I write 'we', I refer to the whole industry or at least to a large group of companies that follow good practice and not specifically to my employer.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What is the purpose of conducting interviews?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Any company could hire a candidate without any prior filtering, but this could cost them a lot. Suppose the candidate does not fit the company or meet the criteria to be successful in a position. In that case, the company would have to pay the salary for the probation period, colleagues guiding the new hire during the onboarding process would invest significant time and effort, and other resources, like office space, infrastructure, heating, network, and so on, that also costs money. It is not a good practice for a company.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, the money the company loses is not the main issue. Companies have profit and loss, and you can consider the cost of selecting the right candidate as an investment. The highest cost is not monetary, and it is not on the company side. The candidate is the one who would pay the real price for such a practice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most of the candidates have a safe job and solid position when looking for a new one. However, losing the place at the new job, getting sent away is a substantial personal burden. As a result, candidates may find themselves "in the street" looking for a new position. Not having a current job is hard to explain during the HR interviews. At the same time, the financial burden and the time pressure may also put the candidate into a hard-to-negotiate corner during the salary discussions.<br />No company should do this to anyone. If a company wants to hire you without proper assessment: run. Fast and far away.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The thorough assessments of the candidates' skills, experience, and knowledge are at the other end of the spectrum. Some companies do that by giving out homework, completing full-day assessments filled with role plays, coding tasks, and using other similar techniques to evaluate candidates. The simplest and cheapest way to do an evaluation, however, is an interview.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A full-day assessment almost certainly gives a more reliable result, but it requires significant resources from the company. So, as usual in business, we should follow the Pareto principle and shoot for the cheapest good-enough solution. I will talk a bit later about what âgood enoughâ is.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Overcomplicated hiring processes may distract candidates. Imagine a senior developer who is looking for a new position. How many full-day assessments will they attend? To participate in such a selection, candidates may need to use a vacation day from their holiday budget, and they have to keep it secret at the actual workplace. If your competitor offers you a late afternoon interview instead, you will most probably choose that option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are pros and cons. We cannot tell what the best approach is, and certainly, doing interviews as a selection tool is not the imaginable best, but probably the best existing, and indeed the best we know. Nevertheless, it is the industry standard practice.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What is a good interview?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We do not need to complete the best interview in the world, as I wrote above. We have to complete one that is good enough. To say that, we have to know what we consider to be a good interview. We should have a metric that can tell us which interview is "better".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Candidates often tell me: "This was the best interview of my life.", even when my conclusion is not to recommend them for hire. Although a happy candidate is essential in bringing your company a good image, it is not the metric we usually look for. A good interview does not need to be enjoyable for the candidate. That is just an extra, a possible byproduct of a good interview.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An interview's most crucial quality measure is to differentiate a fitting candidate from a non-fitting one. Of course, there are other criteria, like proper communication, politeness, non-disclosure, and conduct. These are all very important. Nevertheless, the primary goal of the interview is the selection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When doing an interview, there are four possible outcomes. The candidate can be fitting or non-fitting, and at the same time, the interviewer recommends or does not recommend the candidate for hire. These are two dimensions with two values each. Each pair is possible, resulting in the four possible outcomes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The recommended fitting candidate and the non-recommended non-fitting candidates are the most uncomplicated cases. These are the happy paths.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The remaining two cases, false positive and false negative, are a bit more tricky. The case when the interviewer does not recommend the candidate, although they are fitting, is theoretical. Those candidates do not get employed, and none will discover their fitness. In other words, we will never know when a candidate and/or an interview fall into this category. This case is theoretical in the sense that though it certainly exists, we will never see it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When a candidate is recommended but not fitting is the costly situation we already discussed. When it happens, it will be clear for many people in the company who will manage the consequences and deal with the problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The solution for the situation is often to find a better, more suitable position for the person inside the company. It is done falling into the trap of the sunk cost fallacy. The people involved subconsciously feel the relative cost and burden of finding a new position without an existing need and actual vacancy. This cost is born to the candidate. Feeling responsible for the situation, they do not want to put that on them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When the company has a good hiring and interviewing practice, it rarely happens. We cannot avoid such situations, however. It is not because of the unique nature of the interviews. It is a general measurement theory. Any decision can have four outcomes: true-positive, true-negative, false-positive, and false-negative. No decision system could avoid the false parts. They exist by principle. The only thing we can tune is to push the scale between the false outcomes. What do we want to have less? Is it the false positive or the false negative result which is less desirable?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point, you can tell that I am advocating against the false positive cases, which means that we have to design the interview decisions to avoid those even if we get more false-negative results.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This advocation is not general, though. It is only for the interview decisions. For example, a cancer screening system should be scaled towards favoring false-positive cases. I would rather choose a few days of panic until the repeated test annuls the false-positive result than die because of a false-negative result not detecting the tumor at an early stage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The fact that we should favor the false-negative cases means that the technical interviewers should recommend hiring only those candidates they are absolutely sure about. When there is any doubt that the candidate is bad, they are better not to be hired.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that by doing so, you will filter out some candidates who are good enough but are not very good. You have your doubts not without reason. The potential loss is insignificant in sending away some of the candidates who would fit but are not "really good".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Do we judge the candidate?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Avoid judging the candidate is extremely important. In the previous section, I deliberately used "good candidate" and "bad candidate". In addition, I used an example (medical screening) that subconsciously compared candidates to cancer. If you felt inappropriate when you first read that, you are on the right track. If not, you have to think about why you did not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We must respect the candidates.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Technical interviewers have to be humble. Maybe non-trivial at first, but we also must not evaluate the person, and we should not use expressions that may even unintentionally imply that. You cannot do that if you look down on candidates and you do not respect them. The respect has to be authentic. If it is not, you cannot hide it. So the first thing is that you should feel and show genuine care and then work on your communication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is why I prefer to use the word "assess" instead of "judge". We assess the knowledge, skills, and experience of the candidate. We do not "judge" these, even though linguistically, it would mean the same. For the same reason, I usually talk about the position fitting the candidate and not the candidate fitting the position. Thus, when I say that a position is not good for a specific candidate, nobody will think that it is generally bad, even less that it is stupid or dumb.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, the sentence "The candidate is not good for the position." is heard and interpreted as "The candidate is not goodâ¦" The end of the sentence often gets lost in the communication or during the interpretation. It has to be carefully avoided.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sometimes, I meet lead developers, senior, or even architect candidates who lack even basic skills in their current employment. Even though I feel the temptation to doubt whether their current status is well justified, I don't. If a candidateâs current position seems to be a lie in the CV, it does not matter. Companies are different, and they need different types of people. There is no such person who is generally not fitting a role. To assess a person's fitness for a position, you have to compare the person's qualities to the role. Otherwise, you could plainly say that the candidate is ok but can not tell us for what.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Work with the Candidate</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When conducting the interview, you work with the candidate. The candidate helps you, and you help the candidate. To get a clear picture and understand whether the position is really the dream position for the candidate is in your mutual interest.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It means that you can be absolutely honest with the candidate. You can tell them all the things that I wrote in this article. You can explain the aim of the interview, what the possible outcomes are, the recommended and not recommended decisions, and so on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I usually devote 7 minutes at the start of the interview explaining the above. Of course, it is a bit boring after several hundreds of interviews, but every job has its downsides and upsides, and it is crucial for each candidate.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can even explain that when candidates are lying or cheating candidates, it might be harmful. It helps when a candidate gets a coding exercise that is too familiar to them. A few times, the candidate proactively warned me that they had already met the task beforehand. So we chose a different one.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Coding Exercise</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The above paragraphs are generally valid for all types of interviews and not specific for software development. For example, doing a coding exercise is specific to technical software developer interviews. However, most of the debates on social media are related to this practice. The reason for that is simple. It is very easy to do it wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I would never recommend a candidate who cannot demonstrate the coding skills in an interview. After all, what is the value a developer can deliver who cannot code? It is more questionable if a solution architect needs to code, and I would not get into that this time. I have my personal opinion about it, but it is irrelevant. Maybe I will discuss it in a different article.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I have met some developers hired from different vendors working in the same team for our clients who could not code. We never complained, and we did the extra work instead of them. The client personnel could see who did what and came to their conclusions most of the time. I will also not name the vendor ever. Let's just say that these developers stay afloat in the industry until they find a different job and become BAs, PMs, or car salesmen. I accept them as a fact of life, but I do not accept hiring one in my workplace. In conclusion, we should agree that some performance measures are needed to assess the coding skills as a work theory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An excellent coding exercise helps assess three things:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The algorithmic thinking of the candidate.</li><li>Coding skills and the muscle memory of the language we test. In my case, it is Java.</li><li>Communication skills.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Each of these can easily go wrong, and hence negative stories quickly get to social media.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is challenging to assess algorithmic thinking. It is much easier to test if the candidate can solve one specific problem or complete a task. That way, the assessment quickly degrades to testing if the candidate knows the particular algorithm. Even though I believe that learning and understanding the most important algorithms and data structures (quick sort, balanced trees, graph traversing) is vital for a developer, many developers do not possess even the fundamental computer science theory. I can also accept that there is no value in knowing many algorithms by heart. It is better to have the skillset to create the algorithm when needed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To avoid testing the candidate knowing the task instead of solving it, I have several of them you cannot find on the internet. (Fun story about that at the end of the article.) We also discuss the solution while the candidate forges the code step by step. I realize if the candidate has known the algorithm beforehand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can test the coding skills easily. Many typical coding practices show off an inexperienced coder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can spot old coding constructs that we are not using anymore as the language (in my case, Java) develops. I sometimes see explicit type boxing, which we do not use since Java 1.4 Junior developers tend to compare a boolean value with '== true' or write an 'if' statement and return 'true' and 'false' literal values from the execution branches. Some developers make mistakes, like indexing a 'String' as if it was an array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an interviewer, you should interpret those with a pinch of salt. The interview is not a normal coding environment. It is much more stressful, and such mistakes are many times caused by stress. The technical tools are usually less advanced than the usual IDE, with less support for code completion, syntax checking, and so on. Do not expect the candidate to know all the JDK API calls from the top of their head.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also check communication skills. For example, some candidates blamed me for presenting unprecise, even sloppy task descriptions. They were surprised when I told them that I was aware of that. It is to test if they clarify the task before making bold assumptions and just immediately start coding. Most of them do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The coding exercise is the most challenging part of the interview. Not for the candidate, though. It is for the interviewer. It is a task that the candidate has to do together with you. If you, as an interviewer, see that the candidate is working on the coding task alone, you are doing it wrong. If you work together, then it is good. It may not be perfect, but most of the usual pitfalls you have already avoided.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Giving Feedback</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>At the end of the interview, you will know whether to recommend or not to recommend the candidate. If you don't know, if you are not absolutely sure, then you should not recommend the candidate. I wrote that you must not recommend someone you are not sure about.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The recommendation, usually along with detailed analysis, is the primary outcome of the interview. There can be, however, another valuable byproduct. You can give valuable feedback to the candidate.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Interviewers seldom give feedback about the interview to the candidates, and this is not a good practice. I do not advocate giving feedback no matter what because it is a double-edged sword. If you provide feedback in the wrong way, it may cause a lot of harm to the candidate and the company. Providing valuable, thoughtful, and relevant feedback required some special skills.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Good feedback emphasizes the candidate's strong points that they can build on and highlights the things that they can improve and that may result in enormous benefits.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The most benefit is evidently for the candidate, but it is also valuable for the company. Getting detailed feedback is always an invaluable help to better ourselves. Good feedback, however, is also beneficial for the company. Even if rejecting a candidate is the correct conclusion, a blatant and unexplained refusal may induce bad feelings towards the company. Feedback can mitigate this risk. Feedback explains the reasons so that the candidate can learn the reasons along with suggestions for improvement. Again, you can emphasize that the refusal is not a judgment; it solely recognizes the incompatibility between the candidateâs skills, experience, or knowledge and what the company requires in a specific role.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You do not know each other. Thus, you have to put a lot of emphasis on the good things that the candidate can build on. You can also explain that the feedback is limited as it is based on a 60-minute interview only.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some candidates challenge some of my statements during the feedback. It is pointless from the feedback point of view. If I made a mistake, I misread the candidate in some aspect; they can ignore that part of the feedback. Some of the comments may likely be wrong due to the limited nature of the session. At the same time, I give feedback after the decision. It would be best if you did not change the decision based on any feedback debate. Even though I am usually lenient with candidates arguing about some points of the feedback. It reveals a lot about their personality that I can include in the subjective part of the interview record, and at the same time, it helps them vent their feelings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I had candidates referred to our company by his friend I rejected but sent away with friendly but honest feedback.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary and Fun Story</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Navigare necesse est. Doing interviews is unavoidable. Vivere no est necesse. Doing good interviews is difficult. In this article, I wrote about some aspects of the interviewing. There are other aspects that I did not discuss. Those I may address in a later article. I also know that many aspects of this topic are opinionated. You are welcome to comment, rant, criticize and tell the truth as you feel fit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I promised you a fun story, so here it is.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once I interviewed a candidate who was not outstanding. He had several knowledge gaps related to basic Java. He knew a few things wrong and was a bit stubborn. His coding skills were also less than what we required. When I ended the interview, I asked him if he wanted feedback. He said no, and disconnected the communication. (We usually do remote interviews using IP communication tools, like Zoom, Teams, Skype, etc.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>He immediately wrote an eMail to the talent acquisition team claiming that I was asking him wrong; I did not accept his correct answers and stating that I did not know Java. He also wrote that I was giving him a coding task that anyone can find on the internet, and I did not accept his correct solution because I did not like him. Even though he did not agree to video recording, the coding exercise does get recorded to crosscheck. I did not doubt that the solution was wrong, but his statement that I allegedly copied the exercise from the internet bothered me. So I googled some of the sentences of the task. I could find it on a site along with a wrong solution he also provided. It was word by word the same, including a typo. So you can guess who was copying from whom.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your coding exercise tasks leak out. So you have to replace them frequently.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2612</wp:post_id>
  <wp:post_date>2021-09-22 16:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-22 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-09-26 09:03:05</wp:post_modified>
  <wp:post_modified_gmt>2021-09-26 08:03:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-and-how-do-to-do-technical-interviews</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63304987955]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1632322934]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1440692923859750912";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Lambda and final variables]]></title>
  <link>https://javax0.wordpress.com/2021/12/08/lambda-and-final-variables/</link>
  <pubDate>Wed, 08 Dec 2021 15:00:00 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2618</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading {"level":1} -->
<h1 id="introduction">Introduction</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Lambda expressions can use the variables in the scope of the lambda expression, but only if they are final or effectively final. What is the reason for that? Why is that? It is an interesting question because the answer is not apparent and opinionated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is only one ultimate answer, though: because that is what the Java Language Specification says. But saying that is boring. True, but boring. I prefer the answer that says lambdas can only use final and effectively final local variables because lambdas are not closures.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the following, I will discuss what final and effectively final mean, the differences between closures and lambdas, and finally, how we can create closures in Java using lambda expressions. I am not advocating the creation of lambda expression-based closures in Java, nor the abandonment of the idea.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="final-and-effectively-final"><code>final</code> and effectively final</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When declaring it, a local variable is final if we use the <code>final</code> keyword. The compiler will also require that the variable get a value only once. This value assignment may happen at the location of the declaration but can be a bit later. There can be multiple lines that assign value to the final variable so long as long only one of them can execute for each method invocation. The typical case is when you declare a final variable without assigning value to it, and then you have an <code>if</code> statement giving different values in the "then" and the "else" branch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Needless to say that the variable has to be initialized before the lambda expression is created.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A variable is effectively final if not final, but it could be. It gets an assigned value at the declaration or can get a given value only once.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="life-of-a-lambda">Life of a Lambda</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A lambda expression is a kind of anonymous class. The JVM handles it differently, and it is more efficient than an anonymous class, not to mention that it is more readable. However, from our point of view, we can think of it as an inner class.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public class Anon {

    public static Function&lt;Integer, Integer&gt; incrementer(final int step) {
        return (Integer i) -&gt; i + step;
    }
    public static Function&lt;Integer, Integer&gt; anonIncrementer(final int step) {
        return new Function&lt;Integer, Integer&gt;() {
            @Override
            public Integer apply(Integer i) {
                return i + step;
            }
        };
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>When the lambda expression is created, the JVM makes an instance of the lambda class that implements the <code>Function</code> interface.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">var inc = Anon.incrementer(5);
assertThat(inc.getClass().getName()).startsWith("javax0.blog.lambdas.Anon$$Lambda$");
assertThat(inc.getClass().getSuperclass().getName()).isEqualTo("java.lang.Object");
assertThat(inc.getClass().getInterfaces()).hasSize(1);
assertThat(inc.getClass().getInterfaces()[0]).isEqualTo(java.util.function.Function.class);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The JVM will place this object on the heap. In some cases, the compiler may realize that the object cannot get out of the method's scope, and in this case, it may store it in the stack. It is called local variable escape analysis, which can just put any object on the stack, which cannot escape from the method and may die together with the method return. However, for our discussion, we can forget this advanced feature of the Java environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The lambda is created in the method and stored in the heap. It is alive so long as long there is a hard reference to this object and is not collected. If a lambda expression could reference and use a local variable, which lives in the stack, it would need access to something gone after the method returns. It is not possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are two solutions to overcome this discrepancy. One is what Java follows, creating a copy of the variable's value. The other one is creating a closure.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="closure-and-groovy">Closure and Groovy</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We will look at Groovy examples when talking about closures. The reason to select Groovy is that it is very close to Java. We will look at some Groovy examples, and for the matter of demonstration, we will use Java-style as much as possible. Groovy is more or less compatible with Java; any Java code can be compiled as a Groovy source. The actual semantic may, however, be different slightly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Groovy solved the issue of local variable accessibility creating closures. The closure closes the functionality and the environment into a single object. For example, the following Groovy code:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">class MyClosure {
    static incrementer() {
        Integer z = 0
        return { Integer x -&gt; z++; x + z }
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>creates a closure, similar to our lambda expression, but it also uses the local variable <code>z</code>. This local variable is not final and not effectively final. What happens here is that the compiler creates a new class that contains a field for each local variable used in the closure. A new local variable references an instance of this new class, and the local variable uses all references to this object and its fields. This object, along with the "lambda expression" code, is the closure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since the object is on the heap, it stays alive as long as there is a hard reference. The object, which holds the described function has one, so this object will be available so long as long the closure is alive.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">def inc = MyClosure.incrementer();
assert inc(1) == 2
assert inc(1) == 3
assert inc(1) == 4</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>It is clearly shown in the test execution where the closure increases the <code>z</code> amount at each execution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Closures are lambdas with state.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="lambda-in-java">Lambda in Java</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Java approaches this problem differently. Instead of creating a new synthetic object to hold the referenced local variables, it simply uses the values of the variables. Lambdas seem to use the variables, but they don't. They use only constants copying the value of the variables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When designing lambdas, there were two options. I was not part of the team making the decisions, so what I write here is only my opinion, guessing, but it may help you understand why the decision was made. One option could be to copy the variable's value when the lambda is created, not caring about the later value change of the local variable. Could it work? Inevitably. Would it be readable? In many cases, it would not be. What if the variable changes later? Will the lambda use the changed value? No, it will use the copied, frozen value. It is different from how variables work usually.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Java requires the variable to be final or effectively final to solve this discrepancy. The disturbing case having the different variable value when the lambda is used is avoided.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When designing language elements, there are always tradeoffs. On one end, some constructs provide great power to the hands of the developers. However, great power requires great responsibility. Most of the developers are not mature enough to take on the responsibility.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other side of the scale are the simple constructs providing less functionality. It may not solve some problems so elegantly, but you also cannot create unreadable code so easily. Java is usually going this way. There has been an obfuscated C contest almost since the language C started. Who can write less readable code in that programming language? Since then, almost all languages started the contest, except two. Java and Perl. In the case of Java, the contest would be dull, as you cannot write obfuscated code in Java. In the case of Perl, the contest is pointless.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="closure-in-java">Closure in Java</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you want to have a closure in Java, you can create one yourself. The good old way is to use anonymous, or for that matter, regular classes. The other is to mimic the behavior of the Groovy compiler and create a class that encapsulates the closure data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Groovy compiler creates the class for you to enclose the local variables, but nothing stops you from making it manually if you want it in Java. You have to do the same thing. Move every local variable that the closure uses into a class as an instance field.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public static Function&lt;Integer, Integer&gt; incrementer() {
    AtomicInteger z = new AtomicInteger(0);
    return x -&gt; {
        z.set(z.get() + 1);
        return x + z.get();
    };
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>We only had one local variable, <code>int z</code>, in our example. We need a class that can hold an int. The class for that is <code>AtomicInteger</code>. It does many other things, and it is usually used when concurrent execution is an issue. Because of that, some overhead may slightly affect the performance, which I abjectly ignore for now.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If there are more than one local variables, we need to craft a class for them.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public static Function&lt;Integer, Integer&gt; incrementer() {
    class DataHolder{int z; int m;}
    final var dh = new DataHolder();
    return x -&gt; {
        dh.z++;
        dh.m++;
        return x + dh.z*dh.m;
    };
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>As you can see in this example, we can declare a class even inside the method, and for the cohesion of the code, it is the right place. Eventually, it is easy to see that this approach is working.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">final var inc = LambdaComplexClosure.incrementer();
assertThat(inc.apply(1)).isEqualTo(2);
assertThat(inc.apply(1)).isEqualTo(5);
assertThat(inc.apply(1)).isEqualTo(10);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>It is, however, questionable if you want to use this approach. Lambdas generally should be stateless. When you need a state that a lambda uses, in other words, when you need a closure, which the language does not directly support, you should use a class.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 id="summary">Summary</h1>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>This article discussed why a lambda expression can access only final and effectively final local variables.</li><li>We also discussed the reason and how different languages approach this issue.</li><li>Finally, we looked at a Groovy example and how Java can mimic this.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Therefore, if anyone asks you the interview question, why a lambda expression can access only final and effectively final local variables, you will know the answer. Because the Java Language Specification says so. Everything else is speculation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You an find the code for this article along with the article text source code at https://github.com/verhas/demo/tree/master/LambdaFinal</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2618</wp:post_id>
  <wp:post_date>2021-12-08 16:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-08 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-30 21:47:58</wp:post_modified>
  <wp:post_modified_gmt>2021-12-30 20:47:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>lambda-and-final-variables</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66272164423]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638975648]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1468596429656662020";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>31762</wp:comment_id>
    <wp:comment_author><![CDATA[Peter Verhas]]></wp:comment_author>
    <wp:comment_author_email>peter@verhas.com</wp:comment_author_email>
    <wp:comment_author_url>http://tifyty.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>83.76.98.184</wp:comment_author_IP>
    <wp:comment_date>2021-12-30 21:49:42</wp:comment_date>
    <wp:comment_date_gmt>2021-12-30 20:49:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good catch! I fixed that sentence. It has to be "The JVM will place this object on the heap."

Thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>31758</wp:comment_parent>
    <wp:comment_user_id>31131067</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1640897383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897383.439277;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1640897383]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31758</wp:comment_id>
    <wp:comment_author><![CDATA[Filip]]></wp:comment_author>
    <wp:comment_author_email>fheryan@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>89.64.57.166</wp:comment_author_IP>
    <wp:comment_date>2021-12-30 20:46:14</wp:comment_date>
    <wp:comment_date_gmt>2021-12-30 19:46:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Is lambda stored on heap or on stack? In paragraph four of "Life of lambda" it is said that lambda is created on a stack, but description is suggesting that it is created on a heap.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1640893574.549408;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1640897311]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1640897298]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897299.367607;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897305.304226;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897311.864745;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31598</wp:comment_id>
    <wp:comment_author><![CDATA[Lambda and final variables - Java Code Geeks - R4 News]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.r4news.online/lambda-and-final-variables-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>51.79.72.47</wp:comment_author_IP>
    <wp:comment_date>2021-12-19 14:24:08</wp:comment_date>
    <wp:comment_date_gmt>2021-12-19 13:24:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Posted on Java Code Geeks with the permission of Peter Verhas, partner of our JCG program. See the original article here: Lambda and final variables [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639920249.515593;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639924471.787184;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1640897433]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897434.387014;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31599</wp:comment_id>
    <wp:comment_author><![CDATA[Lambda and final variables &#8211; Java Code Geeks &#8211; Munaf Sheikh]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://blog.munafsheikh.com/java-development/lambda-and-final-variables-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>196.22.142.43</wp:comment_author_IP>
    <wp:comment_date>2021-12-19 14:30:58</wp:comment_date>
    <wp:comment_date_gmt>2021-12-19 13:30:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639920659.520703;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639924472.019203;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1640897427]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897428.457652;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>31600</wp:comment_id>
    <wp:comment_author><![CDATA[Lambda and final variables â Java Code Geeks &#8211; Munaf Sheikh]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://munafsheikh2.wordpress.com/2021/12/19/lambda-and-final-variables-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.100.30</wp:comment_author_IP>
    <wp:comment_date>2021-12-19 17:35:51</wp:comment_date>
    <wp:comment_date_gmt>2021-12-19 16:35:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639935507.734534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639931751.827963;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1640897422]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1640897423.049747;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Custom Styles]]></title>
  <link>https://javax0.wordpress.com/2021/12/03/wp-global-styles-pub%2ftwentytwelve/</link>
  <pubDate>Fri, 03 Dec 2021 20:58:19 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2619</guid>
  <description/>
  <content:encoded><![CDATA[{"version":2,"isGlobalStylesUserThemeJSON":true}]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2619</wp:post_id>
  <wp:post_date>2021-12-03 21:58:19</wp:post_date>
  <wp:post_date_gmt>2021-12-03 20:58:19</wp:post_date_gmt>
  <wp:post_modified>2021-12-03 21:58:19</wp:post_modified>
  <wp:post_modified_gmt>2021-12-03 20:58:19</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wp-global-styles-pub%2ftwentytwelve</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>wp_global_styles</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="wp_theme" nicename="twentytwelve"><![CDATA[twentytwelve]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Docs as Code is not enough]]></title>
  <link>https://javax0.wordpress.com/2022/03/24/2626/</link>
  <pubDate>Thu, 24 Mar 2022 17:35:38 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2626</guid>
  <description/>
  <content:encoded><![CDATA[<h1>Docs as Code</h1>
<h2>it is the first step to the right direction</h2>
The approach to treating your documentation the same way as program code is a step in the right direction, but it is far from state-of-the-art. The practice is detailed on many websites that advocate the use of docs-as-code (DAC). For example the <a href="https://www.writethedocs.org/guide/docs-as-code/">Write the Docs</a> community has a great article on docs-as-code. The article lists
<ul>
 	<li>Issue Trackers</li>
 	<li>Version Control (Git)</li>
 	<li>Plain Text Markup (Markdown, reStructuredText, Asciidoc)</li>
 	<li>Code Reviews</li>
 	<li>Automated Tests</li>
</ul>
as required tools to this approach. Another example is <a href="https://docs-as-co.de/">docs-as-code</a>, which is a toolset for documentation maintenance. They write
<blockquote>
With docs-as-code, you treat your documentation the same way as your code.

You useâ¦

your IDE to write it
your version control system to store and version it
your test-runner to test it
your build system to build and deploy it"</blockquote>
This is very much the same as the approach of <a href="https://www.writethedocs.org/guide/docs-as-code/">Write the Docs</a>.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-3.svg"/>

You have to have your documents in a format supported by the DAC tools. Use version control, document review, automated build, issue tracker, and automated tests. It is very much the same approach we use in code development.

Essentially it is a copy of the professional software development process' coding part. Documentation, however, is not coding. While it is a good idea to reuse some parts of the coding methodology technics, there is more to it.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-4.svg"/>
<h1>What docs-as-code Ignores</h1>
Coding is a transformation process converting documentation, namely the requirement documentation, into code. The requirement documentation may not be documentation in the classical sense. It may be some note, a list of wishes on a jot of paper. Still, the essence is to convert some human affine into machine affine. Some techniques try to support this process, but most of these techniques die when in production. For example, creating the documentation as UML and making it so precise that the code generation is automatic afterward is not feasible. You could do it in principle, but the cost of the effort is too high. It is cheaper to create the code than documentation that defines the functionality with mathematical precision.

Documenting an application is precisely the opposite direction.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-5.svg"/>

Something that failed in one direction does not necessarily fail when we try to go the other direction. You may not be able to jump from the river to the bridge, but the other way is very much possible.

When creating the program documentation, our source is precisely describing the functionality we want to document. After all, the code is the most precise documentation of the application functionality. We already have the precision, which was not feasible to have for the other way around.

The docs-as-code approach, as described by most articles, ignores it. However, it can be amended, and it should be. We can look at it as the next step in the docs-as-code evolution.
<h2>The next step</h2>
We can categorize documentation into two categories.
<ul>
 	<li>Explanatory, and</li>
 	<li>Reference</li>
</ul>
Sometimes a document belongs to one of the categories, but documents are a mix of the two most of the time. It may even happen that you cannot even tell if a sentence in a document belongs to one category or the other.

Creating an explanatory style text cannot be automated. It needs human effort to create sentences that are clear and easily understandable. The importance is demonstrated by the lack of them in this article, as you may have noticed.

However, creating the reference text is more or less a mechanical task. The documentarian (a term from write-the-docs) copies the key's name to explain how to configure the system and writes a sentence around it. Copies some sample code from the unit tests into a code segment into the Asciidoc documentation and adds explanation. The reference is taken from the code verbatim in these examples, and the explanatory part is added.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-1.svg"/>

You can automate the copy of the reference information. Most of the time, it is not automated.

The catch is that automation, just as in the case of tests, is more expensive than doing manual work once. It pays back when the actual operation (copy and paste) happens many times.

And it usually does. To be more precise, it is supposed to happen. However, the documentation maintenance misses the task in practice, and the document becomes stale. It is where the docs-as-code automated test may help. In principle, it is possible to create a test checking the documentation and find discrepancies between the names in the code and the documentation. It can be heuristic, or it can be exact. To do it the exact way, the documentation and/or the code needs meta-information helping the test to perform the consistency check.

Such a test can signal that the documentation may be outdated and need change. For example, it may give a warning, like
<blockquote> "The name of the field XYZ is not the same as in the documentation ZZZ. Change ZZZ in the documentation to XYZ".</blockquote>
It is a foolish and outrageous error message. I immediately know that the program architecture is messed up when I see such an error message. If the test can tell me what to do with such precision, it could fix the problem with the same effort.

It is much better if we let the automated build copy the actual name instead of checking that the human did it correctly. To do that, the documentarian should put the meta-information into the documentation instead of the copied value. The meta-information is read by the automated build tool, and using that; it copies the actual value or values.

If the value changes, the build process will automatically change it.

Another advantage is the lesser possibility for error. If the documentarian makes a mistake copying the field's name, the text will not complain. If he writes XXY instead of XYZ, the documentation will contain the wrong name unless some human review process discovers and fixes the bug. If the documentarian inserts the meta information and makes a mistake, the build process will likely fail. If instead of XYZ, I have to write <tt>{java:field com.javax0.jamal.api#XYZ}</tt> any simple typo will be detected. If there is a field  <tt>com.javax0.jamal.api#XYZ</tt> it is unlikely to have also <tt>com.javax0.jamal.api#XXY</tt>.

<img src="https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-2.svg"/>

With this approach, the docs-as-code workflow is extended. The documentation's " source code " starts behaving as a source code. The automated build is no longer simply formatting and executing language checks. The goal is to automate everything that you can automate. It may not be cheaper than doing the work manually, but certainly less error-prone.
<h1>Tools</h1>
All the above theory is pleasant and attractive but worth nothing unless there are tools to implement them. My motivation writing this article is partly to advocate the use of the open-source tool <a href="https://github.com/verhas/jamal">Jamal</a>. Although Jamal is a general-purpose macro language and can be used in many areas, its primary purpose is document maintenance support. It is a simple to write, non-intrusive macro language. Using it, you can insert meta-information into the documentation to be processed by the automated build. You can use it with any plain text document format, like Asciidoc, markdown, apt, etc. The latest releases also support the DOCX format to use it even with Microsoft Word.

The set of the macros is quite extensive, and it is easy to add your own. The documentation support module can gather information from the application's source code as snippets. Snippets can then be transformed, extracted, and inserted into the documentation. Information from the code can be extracted using text tools using the source code text. However, in the case of Java applications, the document transformation may also collect information using reflection. It can be done because Jamal itself is a Java application.

It can be started on the command line as a maven plugin and a maven extension. It is also embedded as a doclet and a taglet to allow Jamal macros in the JavaDoc documentation.

You can use macros to check the consistency of the documentation and the code. You can mark some part of the code as a snippet, and the documentation related to the specific region may contain the hash code of the piece. When the part changes in the source code, the macro evaluation will automatically signal an error.

The application of Jamal is independent of build automation. It can be antora, jBake, or simply a maven project with different plugins. The application of Jamal is also independent of the documentation format. It can be Asciidoc, markdown, apt, etc., as long as the documentation format is text. Using the Word extension included in the command line version, it can even be Microsoft DOCX Word format.
<h1>Conclusion</h1>
Treating documentation as source code is a good idea and a good start. It can, and should, however, be extended to include more features. When you treat your documentation as a source code, you should not stop simply using built automation, automated testing, review processes, and versioning. You should also apply techniques like Don't Repeat Yourself (DRY). Extra tools exist and seamlessly integrate with the already existing build and formatting tools to do that.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2626</wp:post_id>
  <wp:post_date>2022-03-24 18:35:38</wp:post_date>
  <wp:post_date_gmt>2022-03-24 17:35:38</wp:post_date_gmt>
  <wp:post_modified>2022-03-24 18:45:33</wp:post_modified>
  <wp:post_modified_gmt>2022-03-24 17:45:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2626</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ea9b5b4dec36bcb4b8588a59f7559c2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0527eb32273f5256f7e73e34d3bc027f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b31c237b38ce6716cab6f8c571ee1224</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ece2817d629f7a4e6a6159bb64f504a6</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2820d1d2ac9ba9a258119cd3432b11dd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9001e9f9e9e687ee94a397ad958cbbe5</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_45e0939b86ffcf5e2adc2c2796066764</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_6c3b938ef0e1ea4f6302a00e908baa8d</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c514ce248c133b41e5e077887ef38335</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4f70cef9ddadf9d54df708377358b88c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1648143340]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[70574809999]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1340505;s:53:"https://twitter.com/verhas/status/1507048521387712516";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_5698973</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_1340505</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[verhas]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>32290</wp:comment_id>
    <wp:comment_author><![CDATA[Docs as Code is not enough - Java Code Geeks - R4 News]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://www.r4news.online/docs-as-code-is-not-enough-java-code-geeks/</wp:comment_author_url>
    <wp:comment_author_IP>51.79.72.47</wp:comment_author_IP>
    <wp:comment_date>2022-04-04 05:02:00</wp:comment_date>
    <wp:comment_date_gmt>2022-04-04 04:02:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Docs as Code is not enough [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1649044920.997338;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1649048772.664181;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1649124002]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1649124003.115275;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"verhas";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>https://javax0.wordpress.com/?p=2646</link>
  <pubDate>Sun, 27 Nov 2022 09:14:16 +0000</pubDate>
  <dc:creator>verhas</dc:creator>
  <guid isPermaLink="false">https://javax0.wordpress.com/?p=2646</guid>
  <description/>
  <content:encoded><![CDATA[<!--?xml version="1.0" encoding="UTF-8"?-->

/* Shared CSS for AsciiDoc xhtml11 and html5 backends <em>/
/</em> Default font. */<br />
body {<br />
  font-family: Georgia,serif;<br />
}

/* Title font. */<br />
h1, h2, h3, h4, h5, h6,<br />
div.title, caption.title,<br />
thead, p.table.header,<br />
#toctitle,<br />
#author, #revnumber, #revdate, #revremark,<br />
#footer {<br />
  font-family: Arial,Helvetica,sans-serif;<br />
}

body {<br />
  margin: 1em 5% 1em 5%;<br />
}

a {<br />
  color: blue;<br />
  text-decoration: underline;<br />
}<br />
a:visited {<br />
  color: fuchsia;<br />
}

em {<br />
  font-style: italic;<br />
  color: navy;<br />
}

strong {<br />
  font-weight: bold;<br />
  color: #083194;<br />
}

h1, h2, h3, h4, h5, h6 {<br />
  color: #527bbd;<br />
  margin-top: 1.2em;<br />
  margin-bottom: 0.5em;<br />
  line-height: 1.3;<br />
}

h1, h2, h3 {<br />
  border-bottom: 2px solid silver;<br />
}<br />
h2 {<br />
  padding-top: 0.5em;<br />
}<br />
h3 {<br />
  float: left;<br />
}<br />
h3 + * {<br />
  clear: left;<br />
}<br />
h5 {<br />
  font-size: 1.0em;<br />
}

div.sectionbody {<br />
  margin-left: 0;<br />
}

hr {<br />
  border: 1px solid silver;<br />
}

p {<br />
  margin-top: 0.5em;<br />
  margin-bottom: 0.5em;<br />
}

ul, ol, li &gt; p {<br />
  margin-top: 0;<br />
}<br />
ul &gt; li     { color: #aaa; }<br />
ul &gt; li &gt; * { color: black; }

.monospaced, code, pre {<br />
  font-family: "Courier New", Courier, monospace;<br />
  font-size: inherit;<br />
  color: navy;<br />
  padding: 0;<br />
  margin: 0;<br />
}<br />
pre {<br />
  white-space: pre-wrap;<br />
}

#author {<br />
  color: #527bbd;<br />
  font-weight: bold;<br />
  font-size: 1.1em;<br />
}<br />
#email {<br />
}<br />
#revnumber, #revdate, #revremark {<br />
}

#footer {<br />
  font-size: small;<br />
  border-top: 2px solid silver;<br />
  padding-top: 0.5em;<br />
  margin-top: 4.0em;<br />
}<br />
#footer-text {<br />
  float: left;<br />
  padding-bottom: 0.5em;<br />
}<br />
#footer-badges {<br />
  float: right;<br />
  padding-bottom: 0.5em;<br />
}

#preamble {<br />
  margin-top: 1.5em;<br />
  margin-bottom: 1.5em;<br />
}<br />
div.imageblock, div.exampleblock, div.verseblock,<br />
div.quoteblock, div.literalblock, div.listingblock, div.sidebarblock,<br />
div.admonitionblock {<br />
  margin-top: 1.0em;<br />
  margin-bottom: 1.5em;<br />
}<br />
div.admonitionblock {<br />
  margin-top: 2.0em;<br />
  margin-bottom: 2.0em;<br />
  margin-right: 10%;<br />
  color: #606060;<br />
}

div.content { /* Block element content. */<br />
  padding: 0;<br />
}

/* Block element titles. */<br />
div.title, caption.title {<br />
  color: #527bbd;<br />
  font-weight: bold;<br />
  text-align: left;<br />
  margin-top: 1.0em;<br />
  margin-bottom: 0.5em;<br />
}<br />
div.title + * {<br />
  margin-top: 0;<br />
}

td div.title:first-child {<br />
  margin-top: 0.0em;<br />
}<br />
div.content div.title:first-child {<br />
  margin-top: 0.0em;<br />
}<br />
div.content + div.title {<br />
  margin-top: 0.0em;<br />
}

div.sidebarblock &gt; div.content {<br />
  background: #ffffee;<br />
  border: 1px solid #dddddd;<br />
  border-left: 4px solid #f0f0f0;<br />
  padding: 0.5em;<br />
}

div.listingblock &gt; div.content {<br />
  border: 1px solid #dddddd;<br />
  border-left: 5px solid #f0f0f0;<br />
  background: #f8f8f8;<br />
  padding: 0.5em;<br />
}

div.quoteblock, div.verseblock {<br />
  padding-left: 1.0em;<br />
  margin-left: 1.0em;<br />
  margin-right: 10%;<br />
  border-left: 5px solid #f0f0f0;<br />
  color: #888;<br />
}

div.quoteblock &gt; div.attribution {<br />
  padding-top: 0.5em;<br />
  text-align: right;<br />
}

div.verseblock &gt; pre.content {<br />
  font-family: inherit;<br />
  font-size: inherit;<br />
}<br />
div.verseblock &gt; div.attribution {<br />
  padding-top: 0.75em;<br />
  text-align: left;<br />
}<br />
/* DEPRECATED: Pre version 8.2.7 verse style literal block. */<br />
div.verseblock + div.attribution {<br />
  text-align: left;<br />
}

div.admonitionblock .icon {<br />
  vertical-align: top;<br />
  font-size: 1.1em;<br />
  font-weight: bold;<br />
  text-decoration: underline;<br />
  color: #527bbd;<br />
  padding-right: 0.5em;<br />
}<br />
div.admonitionblock td.content {<br />
  padding-left: 0.5em;<br />
  border-left: 3px solid #dddddd;<br />
}

div.exampleblock &gt; div.content {<br />
  border-left: 3px solid #dddddd;<br />
  padding-left: 0.5em;<br />
}

div.imageblock div.content { padding-left: 0; }<br />
span.image img { border-style: none; vertical-align: text-bottom; }<br />
a.image:visited { color: white; }

dl {<br />
  margin-top: 0.8em;<br />
  margin-bottom: 0.8em;<br />
}<br />
dt {<br />
  margin-top: 0.5em;<br />
  margin-bottom: 0;<br />
  font-style: normal;<br />
  color: navy;<br />
}<br />
dd &gt; *:first-child {<br />
  margin-top: 0.1em;<br />
}

ul, ol {<br />
    list-style-position: outside;<br />
}<br />
ol.arabic {<br />
  list-style-type: decimal;<br />
}<br />
ol.loweralpha {<br />
  list-style-type: lower-alpha;<br />
}<br />
ol.upperalpha {<br />
  list-style-type: upper-alpha;<br />
}<br />
ol.lowerroman {<br />
  list-style-type: lower-roman;<br />
}<br />
ol.upperroman {<br />
  list-style-type: upper-roman;<br />
}

div.compact ul, div.compact ol,<br />
div.compact p, div.compact p,<br />
div.compact div, div.compact div {<br />
  margin-top: 0.1em;<br />
  margin-bottom: 0.1em;<br />
}

tfoot {<br />
  font-weight: bold;<br />
}<br />
td &gt; div.verse {<br />
  white-space: pre;<br />
}

div.hdlist {<br />
  margin-top: 0.8em;<br />
  margin-bottom: 0.8em;<br />
}<br />
div.hdlist tr {<br />
  padding-bottom: 15px;<br />
}<br />
dt.hdlist1.strong, td.hdlist1.strong {<br />
  font-weight: bold;<br />
}<br />
td.hdlist1 {<br />
  vertical-align: top;<br />
  font-style: normal;<br />
  padding-right: 0.8em;<br />
  color: navy;<br />
}<br />
td.hdlist2 {<br />
  vertical-align: top;<br />
}<br />
div.hdlist.compact tr {<br />
  margin: 0;<br />
  padding-bottom: 0;<br />
}

.comment {<br />
  background: yellow;<br />
}

.footnote, .footnoteref {<br />
  font-size: 0.8em;<br />
}

span.footnote, span.footnoteref {<br />
  vertical-align: super;<br />
}

#footnotes {<br />
  margin: 20px 0 20px 0;<br />
  padding: 7px 0 0 0;<br />
}

#footnotes div.footnote {<br />
  margin: 0 0 5px 0;<br />
}

#footnotes hr {<br />
  border: none;<br />
  border-top: 1px solid silver;<br />
  height: 1px;<br />
  text-align: left;<br />
  margin-left: 0;<br />
  width: 20%;<br />
  min-width: 100px;<br />
}

div.colist td {<br />
  padding-right: 0.5em;<br />
  padding-bottom: 0.3em;<br />
  vertical-align: top;<br />
}<br />
div.colist td img {<br />
  margin-top: 0.3em;<br />
}

@media print {<br />
  #footer-badges { display: none; }<br />
}

#toc {<br />
  margin-bottom: 2.5em;<br />
}

#toctitle {<br />
  color: #527bbd;<br />
  font-size: 1.1em;<br />
  font-weight: bold;<br />
  margin-top: 1.0em;<br />
  margin-bottom: 0.1em;<br />
}

div.toclevel0, div.toclevel1, div.toclevel2, div.toclevel3, div.toclevel4 {<br />
  margin-top: 0;<br />
  margin-bottom: 0;<br />
}<br />
div.toclevel2 {<br />
  margin-left: 2em;<br />
  font-size: 0.9em;<br />
}<br />
div.toclevel3 {<br />
  margin-left: 4em;<br />
  font-size: 0.9em;<br />
}<br />
div.toclevel4 {<br />
  margin-left: 6em;<br />
  font-size: 0.9em;<br />
}

span.aqua { color: aqua; }<br />
span.black { color: black; }<br />
span.blue { color: blue; }<br />
span.fuchsia { color: fuchsia; }<br />
span.gray { color: gray; }<br />
span.green { color: green; }<br />
span.lime { color: lime; }<br />
span.maroon { color: maroon; }<br />
span.navy { color: navy; }<br />
span.olive { color: olive; }<br />
span.purple { color: purple; }<br />
span.red { color: red; }<br />
span.silver { color: silver; }<br />
span.teal { color: teal; }<br />
span.white { color: white; }<br />
span.yellow { color: yellow; }

span.aqua-background { background: aqua; }<br />
span.black-background { background: black; }<br />
span.blue-background { background: blue; }<br />
span.fuchsia-background { background: fuchsia; }<br />
span.gray-background { background: gray; }<br />
span.green-background { background: green; }<br />
span.lime-background { background: lime; }<br />
span.maroon-background { background: maroon; }<br />
span.navy-background { background: navy; }<br />
span.olive-background { background: olive; }<br />
span.purple-background { background: purple; }<br />
span.red-background { background: red; }<br />
span.silver-background { background: silver; }<br />
span.teal-background { background: teal; }<br />
span.white-background { background: white; }<br />
span.yellow-background { background: yellow; }

span.big { font-size: 2em; }<br />
span.small { font-size: 0.6em; }

span.underline { text-decoration: underline; }<br />
span.overline { text-decoration: overline; }<br />
span.line-through { text-decoration: line-through; }

div.unbreakable { page-break-inside: avoid; }

/*<br />
 * xhtml11 specific<br />
 *<br />
 * */

div.tableblock {<br />
  margin-top: 1.0em;<br />
  margin-bottom: 1.5em;<br />
}<br />
div.tableblock &gt; table {<br />
  border: 3px solid #527bbd;<br />
}<br />
thead, p.table.header {<br />
  font-weight: bold;<br />
  color: #527bbd;<br />
}<br />
p.table {<br />
  margin-top: 0;<br />
}<br />
/* Because the table frame attribute is overridden by CSS in most browsers. */<br />
div.tableblock &gt; table[frame="void"] {<br />
  border-style: none;<br />
}<br />
div.tableblock &gt; table[frame="hsides"] {<br />
  border-left-style: none;<br />
  border-right-style: none;<br />
}<br />
div.tableblock &gt; table[frame="vsides"] {<br />
  border-top-style: none;<br />
  border-bottom-style: none;<br />
}

/*<br />
 * html5 specific<br />
 *<br />
 * */

table.tableblock {<br />
  margin-top: 1.0em;<br />
  margin-bottom: 1.5em;<br />
}<br />
thead, p.tableblock.header {<br />
  font-weight: bold;<br />
  color: #527bbd;<br />
}<br />
p.tableblock {<br />
  margin-top: 0;<br />
}<br />
table.tableblock {<br />
  border-width: 3px;<br />
  border-spacing: 0px;<br />
  border-style: solid;<br />
  border-color: #527bbd;<br />
  border-collapse: collapse;<br />
}<br />
th.tableblock, td.tableblock {<br />
  border-width: 1px;<br />
  padding: 4px;<br />
  border-style: solid;<br />
  border-color: #527bbd;<br />
}

table.tableblock.frame-topbot {<br />
  border-left-style: hidden;<br />
  border-right-style: hidden;<br />
}<br />
table.tableblock.frame-sides {<br />
  border-top-style: hidden;<br />
  border-bottom-style: hidden;<br />
}<br />
table.tableblock.frame-none {<br />
  border-style: hidden;<br />
}

th.tableblock.halign-left, td.tableblock.halign-left {<br />
  text-align: left;<br />
}<br />
th.tableblock.halign-center, td.tableblock.halign-center {<br />
  text-align: center;<br />
}<br />
th.tableblock.halign-right, td.tableblock.halign-right {<br />
  text-align: right;<br />
}

th.tableblock.valign-top, td.tableblock.valign-top {<br />
  vertical-align: top;<br />
}<br />
th.tableblock.valign-middle, td.tableblock.valign-middle {<br />
  vertical-align: middle;<br />
}<br />
th.tableblock.valign-bottom, td.tableblock.valign-bottom {<br />
  vertical-align: bottom;<br />
}

/*<br />
 * manpage specific<br />
 *<br />
 * */

body.manpage h1 {<br />
  padding-top: 0.5em;<br />
  padding-bottom: 0.5em;<br />
  border-top: 2px solid silver;<br />
  border-bottom: 2px solid silver;<br />
}<br />
body.manpage h2 {<br />
  border-style: none;<br />
}<br />
body.manpage div.sectionbody {<br />
  margin-left: 3em;<br />
}

@media print {<br />
  body.manpage div#toc { display: none; }<br />
}
<br />
/<em>&lt;![CDATA[</em>/
var asciidoc = {  // Namespace.

/////////////////////////////////////////////////////////////////////
// Table Of Contents generator
/////////////////////////////////////////////////////////////////////

/* Author: Mihai Bazon, September 2002
 * http://students.infoiasi.ro/~mishoo
 *
 * Table Of Content generator
 * Version: 0.4
 *
 * Feel free to use this script under the terms of the GNU General Public
 * License, as long as you do not remove or alter this notice.
 */

/* modified by Troy D. Hanson, September 2006. License: GPL <em>/
 /</em> modified by Stuart Rackham, 2006, 2009. License: GPL */

// toclevels = 1..4.
toc: function (toclevels) {

function getText(el) {
    var text = &quot;&quot;;
    for (var i = el.firstChild; i != null; i = i.nextSibling) {
      if (i.nodeType == 3 /* Node.TEXT_NODE */) // IE doesn&#039;t speak constants.
        text += i.data;
      else if (i.firstChild != null)
        text += getText(i);
    }
    return text;
  }

function TocEntry(el, text, toclevel) {
    this.element = el;
    this.text = text;
    this.toclevel = toclevel;
  }

function tocEntries(el, toclevels) {
    var result = new Array;
    var re = new RegExp(&#039;<a href="[1-&#039;+(toclevels+1)+&#039;]">hH</a>&#039;);<br />
    // Function that scans the DOM tree for header elements (the DOM2<br />
    // nodeIterator API would be a better technique but not supported by all<br />
    // browsers).<br />
    var iterate = function (el) {<br />
      for (var i = el.firstChild; i != null; i = i.nextSibling) {<br />
        if (i.nodeType == 1 /* Node.ELEMENT_NODE */) {<br />
          var mo = re.exec(i.tagName);<br />
          if (mo &amp;&amp; (i.getAttribute("class") || i.getAttribute("className")) != "float") {<br />
            result[result.length] = new TocEntry(i, getText(i), mo[1]-1);<br />
          }<br />
          iterate(i);<br />
        }<br />
      }<br />
    }<br />
    iterate(el);<br />
    return result;<br />
  }
  var toc = document.getElementById("toc");<br />
  if (!toc) {<br />
    return;<br />
  }

// Delete existing TOC entries in case we're reloading the TOC.<br />
  var tocEntriesToRemove = [];<br />
  var i;<br />
  for (i = 0; i &lt; toc.childNodes.length; i++) {
    var entry = toc.childNodes[i];
    if (entry.nodeName.toLowerCase() == &#039;div&#039;
     &amp;&amp; entry.getAttribute(&quot;class&quot;)
     &amp;&amp; entry.getAttribute(&quot;class&quot;).match(/^toclevel/))
      tocEntriesToRemove.push(entry);
  }
  for (i = 0; i &lt; tocEntriesToRemove.length; i++) {
    toc.removeChild(tocEntriesToRemove[i]);
  }

// Rebuild TOC entries.
  var entries = tocEntries(document.getElementById(&quot;content&quot;), toclevels);
  for (var i = 0; i &lt; entries.length; ++i) {
    var entry = entries[i];
    if (entry.element.id == &quot;&quot;)
      entry.element.id = &quot;<em>toc</em>&quot; + i;
    var a = document.createElement(&quot;a&quot;);
    a.href = &quot;#&quot; + entry.element.id;
    a.appendChild(document.createTextNode(entry.text));
    var div = document.createElement(&quot;div&quot;);
    div.appendChild(a);
    div.className = &quot;toclevel&quot; + entry.toclevel;
    toc.appendChild(div);
  }
  if (entries.length == 0)
    toc.parentNode.removeChild(toc);
},

/////////////////////////////////////////////////////////////////////
// Footnotes generator
/////////////////////////////////////////////////////////////////////

/* Based on footnote generation code from:
 * http://www.brandspankingnew.net/archive/2005/07/format_footnote.html
 */

footnotes: function () {
  // Delete existing footnote entries in case we&#039;re reloading the footnodes.
  var i;
  var noteholder = document.getElementById(&quot;footnotes&quot;);
  if (!noteholder) {
    return;
  }
  var entriesToRemove = [];
  for (i = 0; i &lt; noteholder.childNodes.length; i++) {
    var entry = noteholder.childNodes[i];
    if (entry.nodeName.toLowerCase() == &#039;div&#039; &amp;&amp; entry.getAttribute(&quot;class&quot;) == &quot;footnote&quot;)
      entriesToRemove.push(entry);
  }
  for (i = 0; i &lt; entriesToRemove.length; i++) {
    noteholder.removeChild(entriesToRemove[i]);
  }

// Rebuild footnote entries.
  var cont = document.getElementById(&quot;content&quot;);
  var spans = cont.getElementsByTagName(&quot;span&quot;);
  var refs = {};
  var n = 0;
  for (i=0; i&lt;spans.length; i++) {
    if (spans[i].className == &quot;footnote&quot;) {
      n++;
      var note = spans[i].getAttribute(&quot;data-note&quot;);
      if (!note) {
        // Use [\s\S] in place of . so multi-line matches work.
        // Because JavaScript has no s (dotall) regex flag.
        note = spans[i].innerHTML.match(/\s<em>&#091;([\s\S]</em>)]\s*/)[1];
        spans[i].innerHTML =
          &quot;[<a id='_footnoteref_" + n + "' href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";<br />
        spans[i].setAttribute("data-note", note);<br />
      }<br />
      noteholder.innerHTML +=<br />
        "

<div class='footnote' id='_footnote_" + n + "'>" +<br />
        "<a href='#_footnoteref_" + n + "' title='Return to text'>" +<br />
        n + "</a>. " + note + "</div>

";<br />
      var id =spans[i].getAttribute("id");<br />
      if (id != null) refs["#"+id] = n;<br />
    }<br />
  }<br />
  if (n == 0)<br />
    noteholder.parentNode.removeChild(noteholder);<br />
  else {<br />
    // Process footnoterefs.<br />
    for (i=0; i&lt;spans.length; i++) {
      if (spans[i].className == &quot;footnoteref&quot;) {
        var href = spans[i].getElementsByTagName(&quot;a&quot;)[0].getAttribute(&quot;href&quot;);
        href = href.match(/#.*/)[0];  // Because IE return full URL.
        n = refs[href];
        spans[i].innerHTML =
          &quot;[<a href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";<br />
      }<br />
    }<br />
  }<br />
},

install: function(toclevels) {<br />
  var timerId;

function reinstall() {<br />
    asciidoc.footnotes();<br />
    if (toclevels) {<br />
      asciidoc.toc(toclevels);<br />
    }<br />
  }

function reinstallAndRemoveTimer() {<br />
    clearInterval(timerId);<br />
    reinstall();<br />
  }

timerId = setInterval(reinstall, 500);<br />
  if (document.addEventListener)<br />
    document.addEventListener("DOMContentLoaded", reinstallAndRemoveTimer, false);<br />
  else<br />
    window.onload = reinstallAndRemoveTimer;<br />
}

}<br />
asciidoc.install();<br />
/<em>]]&gt;</em>/<br />

<div id="header"></div>

<div id="content">
<div class="sect1">
<h2 id="_span_class_image_img_src_images_logo_svg_alt_width_100px_span_jamal_macro_language"><span class="image">
<img src="images/logo.svg" alt="width=100px" />
</span> Jamal Macro Language</h2>
<div class="sectionbody">
<div class="sidebarblock">
<div class="content">
<div class="paragraph">

<span class="image">
<img src="images/jetbrains.svg" alt="Supported" />
</span> Developed using <a href="https://www.jetbrains.com/community/opensource/#support">JetBrains OSS License</a>

</div>
<div class="imageblock">
<div class="content">
<img src="//javadoc.io/badge/com.javax0.jamal/jamal-parent.svg" alt="link=https://javadoc.io/doc/com.javax0.jamal" /></div>
</div>
<div class="paragraph">

<span class="image">
<img src="//github.com/verhas/jamal/actions/workflows/jamal-build.yml/badge.svg" alt="Java CI with Maven" />
</span>

</div>
</div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">This is the latest development documentation.
This is a SNAPSHOT version (1.12.4-SNAPSHOT).
To see the documentation of a release you have to follow the link in the documentation <a href="RELEASES.adoc"><code>RELEASES.adoc</code></a></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Jamal is a complex text processor with a wide variety of possible use.
The first version of Jamal was developed 20 years ago in Perl.
It was used in many projects to simplify build-scripts maintenance, content text, and many other things.
The old Perl version is still in use for the build chain maintenance of the ScriptBasic scripting language, which is used in many industrial products.
This version of Jamal is a complete rewrite of the original processor in Java.
The Java version development started in 2018.
Jamal leverages on the programming languageâs features, and the twenty years of experience of using the old version.
In this documentation, the term "Jamal" refers to the Java implementation of the macro language.

</div>
<div class="imageblock">
<div class="content">
<img src="images/text2text.png" alt="align=center" /></div>
</div>
<div class="paragraph">

Jamalâs basic concept is to transform a source text to a target text enabling programmatic constructs in the source text.
That way, it enables the maintainer of the text to

</div>
<div class="ulist">
<ul>
    <li>
eliminate repetitions, calculable text, and other redundancies</li>
    <li>
ensure internal consistency, and</li>
    <li>
support consistency with the documented external system(s).</li>
</ul>
</div>
<div class="paragraph">

Jamal design is to be transparent and applicable to any target text file and format.
It uses special start and stop strings for the macros and all other text is copied to the output.
The start and stop string are not hardwired, can be configured and even dynamically changed in the input.
Jamal can create your file from a Jamal source file no matter any particular need to keep new lines, spacing, or special characters.
That way, Jamal can be applied as a universal, programmable preprocessor to any text file type.
The types include document formats, like Markdown, AsciiDoc, HTML, Microsoft Word Docx, and textual data description formats, like JSON, YAML, XML, or even programming languages.
In addition to text files Jamal macros can also be used in DOCX format Microsoft Word files and processed creating an output file.
This way Jamal can be used as a template engine for creating Microsoft Word documents.

</div>
<div class="paragraph">

The source text

</div>
<div class="ulist">
<ul>
    <li>
uses built-in macros (there is a purposefully limited number of them in the core module and there are a lot in different other modules),</li>
    <li>
define and use previously defined user-defined macros,</li>
    <li>
include files,</li>
    <li>
use custom-made macros,</li>
    <li>
include and execute JShell, ScriptBasic, Groovy, Ruby or other scripts,</li>
    <li>
works with yaml, XML data,</li>
    <li>
import documentation and code snippets from the documented application or over the network,</li>
    <li>
execute external programs configured a secure way (e.g.: Graphviz),</li>
    <li>
can create PlantUML diagrams, and</li>
    <li>
can set assertions checking the consistency of the documentation with itself and with the documented system.</li>
</ul>
</div>
<div class="paragraph">

You can start Jamal processing

</div>
<div class="ulist">
<ul>
    <li>
on the command line even without installing Jamal itself automatically downloading from the net,</li>
    <li>
as a Maven plugin,</li>
    <li>
starting with <code>jbang</code>,</li>
    <li>
as a Maven extension letting you use Jamal macros in your POM files,</li>
    <li>
as a JavaDoc doclet letting you use Jamal macros in your JavaDoc documentation (including markdown), and</li>
    <li>
embedded into applications using a simple API, for example the Yamaledt JUnit 5 YAML test data source library.</li>
</ul>
</div>
<div class="paragraph">

You can extend the set of built-in macros creating new macros in any JVM language.

</div>
<div class="paragraph">

Jamal is a text to text processor.
It is also a templating engine to maintain redundant text files.
During development, there are often text files with redundant information you may need to maintain.

</div>
<div class="ulist">
<ul>
    <li>
Some property or other resource files in a Java project may be slightly different for the different environments, test support, user acceptance test, production.
Changing something in one of them many times should be followed in the other versions.
This can be automated using Jamal.</li>
    <li>
A textual documentation has cross-references, but the format does not support automatic symbolic anchors and references.
Jamal macros can keep track of the references and give you a warning when a reference becomes obsolete needing update.</li>
    <li>
The documentation may refer to some files in the project or some Java objects.
Jamal macros can check that the files, classes, methods or fields exist and in case they were moved, removed, renamed Jamal will warn you to update the documentation.</li>
    <li>
You can use Jamal to automatically copy some part of your code source files as examples into the documentation.
Whenever the source changes the output will automatically change when Jamal runs.</li>
    <li>
Jamal can collect and transform documentation text form different sources.
You can put some documentation into the source code right at the place where the functionality is implemented.
You have less chance forgetting the documentation update related to that feature whenever it changes.
Jamal will fetch the documentation from the file, transform it to fit the output format and generate up-to-date compiled documentation.</li>
    <li>
You can embed Plant UML diagram text definition into your documentation source.
The Plant UML macro extension will generate the diagrams and create the image reference into the output document.
Some documents format support embedding Plant UML.
Using Jamal you can embed Plant UML into any textual documentation format.
Because the diagram description is part of a Jamal macro processed source you can use Jamal macros in the diagrams.
That way you are not limited by the macro features supported by Plant UML.</li>
    <li>
If you have any other use, please tell us.</li>
</ul>
</div>
<div class="paragraph">

Generally, Jamal reads a text and generates another one.
In the source file, it processes macros, and the result gets in the macros' place.
That way, text, and macros are mixed conveniently.

</div>
<div class="paragraph">

You can use Jamal as a maven plugin.
The Java::Geci code generators also support Jamal, where you can write your Java code template using Jamal.
You can use it as an embeddable macro engine in your Java application.
Jamal can be used in JavaDoc using the Jamal Doclet implementation.

</div>
<div class="paragraph">

These different features are documented in their respective module documentations:

</div>
<div class="sect2">
<h3 id="_debugger">Debugger</h3>
<div class="imageblock">
<div class="content">
<img src="images/jamaldebugger2559x1089.png" alt="jamaldebugger2559x1089.png" /></div>
</div>
<div class="ulist">
<ul>
    <li>
&lt;&lt;./jamal-debug/README.adoc#,Debugger Technical Documentation&gt;&gt;</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_applications_embedding">Applications, Embedding</h3>
<div class="ulist">
<ul>
    <li>
&lt;&lt;./jamal-asciidoc/README.adoc#,Jamal Asciidoc Documentation&gt;&gt;, How to configure and use Jamal to edit Asciidoc files using IntelliJ WYSIWYG editor.</li>
    <li>
&lt;&lt;./jamal-doclet/README.adoc#,Jamal Doclet Documentation&gt;&gt;, How to use Jamal in JavaDoc</li>
    <li>
&lt;&lt;./jamal-maven-plugin/README.adoc#,Jamal Maven Plugin README&gt;&gt;, How to use Jamal as a Maven plugin</li>
    <li>
&lt;&lt;./jamal-maven-extension/README.adoc#,Jamal Maven Extension README&gt;&gt;, How to use Jamal as a Maven extension</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_programming_language_modules">Programming Language Modules</h3>
<div class="ulist">
<ul>
    <li>
&lt;&lt;./jamal-ruby/README.adoc#,Ruby Module README&gt;&gt;, How to use Ruby code in your Jamal source</li>
    <li>
&lt;&lt;./jamal-groovy/README.adoc#,Groovy Module README&gt;&gt;, How to use Groovy code in your Jamal source</li>
    <li>
&lt;&lt;./jamal-scriptbasic/README.adoc#,ScriptBasic Module README&gt;&gt;, How to use ScriptBasic code in your Jamal source</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_other_external_modules">Other External Modules</h3>
<div class="ulist">
<ul>
    <li>
&lt;&lt;./jamal-io/README.adoc#,Io Module README&gt;&gt;, How to read and write external files from Jamal macros</li>
    <li>
&lt;&lt;./jamal-jamal/README.adoc#,Jamal Jamal Module README&gt;&gt;, How to use Jamal inside Jamal as an embedded language</li>
    <li>
&lt;&lt;./jamal-markdown/README.adoc#,Jamal Markdown Module README&gt;&gt;, Convert markdown to HTML, main usable together with the Jamal Doclet to have Markdown in JavaDoc</li>
    <li>
&lt;&lt;./jamal-mmock/README.adoc#,Jamal Mock Module README&gt;&gt;, Mock built-in macros to test macros that are to run in a specific environment</li>
    <li>
&lt;&lt;./jamal-plantuml/README.adoc#,Jamal PlantUML Module README&gt;&gt;, Embed PlantUML pictures into your documentation</li>
    <li>
&lt;&lt;./jamal-snippet/README.adoc#,Jamal Snippet Module README&gt;&gt;, Use snippets to compile your documentation</li>
    <li>
&lt;&lt;./jamal-yaml/README.adoc#,Jamal Yaml Module README&gt;&gt;, Use data from Yaml files in your macros and use macros in your Yaml files</li>
    <li>
&lt;&lt;./jamal-assertions/README.adoc#,Jamal Assertions Module README&gt;&gt;, contains macros to make assertions to ensure the consistency of your documentation</li>
    <li>
&lt;&lt;./jamal-word/README.adoc#,DOCX Word Processing README&gt;&gt;, describes the Jamal Microsoft Word Processing module and the macros that are specific to DOCX processing</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_test_support">Test Support</h3>
<div class="ulist">
<ul>
    <li>
&lt;&lt;./jamal-testsupport/README.adoc#,Jamal Test Module README&gt;&gt;, Use this module to test your own Java implemented macros</li>
</ul>
</div>
<div class="paragraph">

In this readme, we first discuss how the macros look and how Jamal will convert its input to the output.
Then we discuss the API that lets you embed the macro processing into your application.

</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_table_of_contents">Table of contents</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
    <li>
<a href="#Starting">Starting Jamal</a></li>
    <li>
<a href="#SimpleExample">Simple Example</a></li>
    <li>
<a href="#OtherMacros">Other Macros</a>
<div class="olist lowerroman">
<ol class="lowerroman">
    <li>
<a href="#comment"><code>comment</code></a></li>
    <li>
<a href="#block"><code>block</code></a></li>
    <li>
<a href="#begin"><code>begin</code> and <code>end</code></a></li>
    <li>
<a href="#define"><code>define</code></a></li>
    <li>
<a href="#undefine"><code>undefine</code></a></li>
    <li>
<a href="#eval"><code>eval</code></a></li>
    <li>
<a href="#defer"><code>defer</code></a></li>
    <li>
<a href="#env"><code>env</code></a></li>
    <li>
<a href="#import"><code>import</code></a></li>
    <li>
<a href="#include"><code>include</code></a></li>
    <li>
<a href="#use"><code>use</code></a></li>
    <li>
<a href="#script"><code>script</code></a></li>
    <li>
<a href="#JShell"><code>JShell</code></a></li>
    <li>
<a href="#sep"><code>sep</code></a></li>
    <li>
<a href="#for"><code>for</code></a></li>
    <li>
<a href="#if"><code>if</code></a></li>
    <li>
<a href="#ident"><code>ident</code></a></li>
    <li>
<a href="#verbatim"><code>verbatim</code></a></li>
    <li>
<a href="#export"><code>export</code></a></li>
    <li>
<a href="#options"><code>options</code></a></li>
    <li>
<a href="#try"><code>try</code></a></li>
    <li>
<a href="#escape"><code>escape</code></a></li>
    <li>
<a href="#require"><code>require</code></a></li>
    <li>
<a href="#macro"><code>macro</code></a></li>
    <li>
<a href="#debug"><code>debug</code></a></li>
    <li>
<a href="#log"><code>log</code></a></li>
    <li>
<a href="#nullmacro"><code>no-name macro</code></a></li>
</ol>
</div></li>
    <li>
<a href="#argsplit">Macro Argument Splitting</a></li>
    <li>
<a href="#parparsing">Standard Built-In Parameter Parsing</a></li>
    <li>
<a href="#JamalENV">Jamal Environment Variables</a></li>
    <li>
<a href="#httpsres">Resource Files and Web Resources</a></li>
    <li>
<a href="#error_messages">Error Messages</a></li>
    <li>
<a href="#snippet">Snippet Handling</a></li>
    <li>
<a href="#Groovy">Groovy Integration</a></li>
    <li>
<a href="#Ruby">Ruby Integration</a></li>
    <li>
<a href="#JamalAPI">Jamal API</a></li>
    <li>
<a href="#javadoc">JavaDoc</a></li>
    <li>
<a href="#documentmaintenance">Maintenance of this document</a></li>
</ol>
</div>
<div class="sect2">
<h3 id="_1_starting_jamal">1. Starting Jamal</h3>
<div class="sect3">
<h4 id="Starting">Maven Plugin</h4>
<div class="paragraph">

It is also straightforward to start Jamal using the Maven plugin version.
To do that, you have to have Maven installed, but as a Java developer, you probably have.
Then you can issue the command:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

if you have a <code>pom.xml</code> file in your directory.

</div>
<div class="paragraph">

If you do not have, then read the documentation of the Jamal Maven plugin at
<code>https://github.com/verhas/jamal/blob/master/jamal-maven-plugin/README.md</code>
It is short and straightforward.

</div>
<div class="paragraph">

When something goes wrong, then Jamal will give you a detailed error message.
The message will include the file name, line number, and character count where the error happened.
Jamal may think it works fine in other cases, but the output is not exactly what you expected.
Sorry, in this case, the issue, most probably, is with your expectations.
Jamal converts the text following the rules defined in this document.

</div>
</div>
<div class="sect3">
<h4 id="_maven_extension">Maven Extension</h4>
<div class="paragraph">

If you want to use Jamal macros to maintain your Maven POM files, you can do that.
Edit the content of the POM XML in the file <code>pom.xml.jam</code>.
This file should contain the POM XML possibly enhanced with Jamal macros.
Create a <code>.mvn</code> directory with an <code>extensions.xml</code> file in your project root.
About the content and how this Maven extension works read the extensionâs <a href="jamal-maven-extension/README.adoc">documentation</a>.

</div>
</div>
<div class="sect3">
<h4 id="_starting_command_line_version">Starting Command Line Version</h4>
<div class="paragraph">

To start Jamal on the command line, you need a command:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

It is not a user-friendly approach.
You do not want to type all the paths, and the JARs every time you want to start Jamal.
For this reason, there is a file, <code>jamal.sh</code> that has the following content:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The shell variable <code>MODULES</code> should list the Jamal modules you may need to use in your processing.
The basic modules needed under every circumstance are listed in the example.
The other modules available are <code>snippet</code>, <code>scriptbasic</code>, <code>groovy</code>, <code>ruby</code>, <code>plantuml</code>, and <code>debug</code>.
The shell variable <code>REPO</code> must be set to point to the repository where your local JAR files are.
<code>VERSION</code> has to be the latest version or the one you intend to use.

</div>
<div class="paragraph">

The invocation of the shell script is <code>./jamal.sh options</code> where the <code>options</code> have the <code>key=value</code> format.
If you use a simple option <code>help</code>, then Jamal will print out a short screen that looks something like this:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The command line can contain options and parameters.
Most of the options have single character version and also multiple character versions.
The option values have to be written after the option in case the option is single character and with a <code>=</code> is multiple-character.

</div>
<div class="paragraph">

The options you can use with the command line version of Jamal are the followings:

</div>
<div class="ulist">
<ul>
    <li>
<code>--dry-dry-run</code> will tell Jamal to perform a dry run without invoking the conversion.
Use this opition to test the input and output pattern to see which files will Jamal process and what output files it will create.</li>
    <li>
<code>--dry-run</code> is a dry run, but not so dry as <code>--dry-dry-run</code>.
When this option is used the Jamal processing is performed, but the result is not saved into the out.
Using this option you can see what files Jamal will process and you can also see if there is any error during the processing.</li>
    <li>
<code>-c</code> or <code>--close=&lt;macroClose&gt;</code> specifies the macro closing string.
The default macro closing string is <code>}</code>.
When using this option mind that some characters need escape on the command line.</li>
    <li>
<code>-o</code> or <code>--open=&lt;macroOpen&gt;</code> specifies the macro opening string.
The default macro opening string is <code>{</code>.
When using this option mind that some characters need escape on the command line.</li>
    <li>
<code>-f</code> or <code>--file</code> instructs Jamal not to parse the directory for input files.
When this option is used Jamal will process the command line parameter <code>&lt;inputFile&gt;</code> and it will write the output to <code>&lt;outputFile&gt;</code>.</li>
    <li>
<code>-s</code> or <code>--source=&lt;sourceDirectory&gt;</code> specifies the source directory where Jamal will start looking for input files.
The file listing is recursive going into subdirectories.
The default value is the current directory.</li>
    <li>
<code>-d</code> or <code>--depth=&lt;depth&gt;</code> limits the dept of directory recursion.
The default value does not limit the depth.</li>
    <li>
<code>-e</code> or <code>--exclude=&lt;exclude&gt;</code> exclude the files that match the pattern <code>&lt;exclude&gt;</code>.
The pattern can be usualy file matching wild-card pattern or regular expression if the option <code>-x</code>, <code>--regex</code> is used.
The default value is not to exclude any file.</li>
    <li>
<code>-i</code> or <code>--include=&lt;include&gt; ` include the files that match the pattern `&lt;include&gt;</code>.
The pattern can be usualy file matching wild-card pattern or regular expression if the option <code>-x</code>, <code>--regex</code> is used.
The default value is <code>*.jam</code>.</li>
    <li>
<code>-r</code> or <code>--transform=&lt;transform&gt; [&lt;transform&gt;]</code> define one or more transformation.
When multiple files are processed this transformations are used to calculate the output file name from the input file name.
The option must have two values.
The first value is the regular expression, the second parameter is the replacement string.
These are the parameters that will be used in the Java method <code>inputFileName.replaceAll(a,b)</code> to calculate the output file name.
The default value is <code>\.jam$</code> and an empty string.
The default value will cause <code>replaceAll</code> to chop off the <code>.jam</code> extension from the end of the file.
That way, for example <code>pom.xml.jam</code> will be converted to <code>pom.xml</code>.</li>
    <li>
<code>-t</code> or <code>--target=&lt;targetDirectory&gt;</code> can specify the target directory where the output will be stored.
If input files are under some subdirectories of the <code>&lt;sourceDirectory&gt;</code> then the same directory structure will be created for the output.
The default value is the current directory.</li>
    <li>
<code>-x</code> or <code>--regex</code> use regular expression for the <code>&lt;include&gt;</code> and for the <code>&lt;exclude&gt;</code> values.
Transform is always interpreted as regular expression.</li>
    <li>
<code>-g</code> or <code>--debug=&lt;debug&gt;</code> start the code in debug mode.
To use this option the debugger module implementing the debugger must be on the classpath.
This is automatically ensured when Jamal is started using jbang using the <code>jbang jamal@verhas</code> command.
The parameter <code>&lt;debug&gt;</code> is the debugger configuration string.
To use the web based debugger you can specify <code>http:8080</code>.
With that parameter the debugger will start to listen on the port <code>8080</code> on the localhost ip.
The client code that runs in the browser can also be downloaded from the same server from the <code>http://localhost:8080</code> address.
If you specify a different port, then from that port.</li>
    <li>
<code>-v</code> or <code>--verbose</code> verbose output</li>
    <li>
<code>-h</code> or <code>--help</code> help</li>
    <li>
<code>&lt;inputFile&gt;</code> the input file in case the option <code>-f</code> or <code>--file</code> was used</li>
    <li>
<code>&lt;outputFile&gt;</code> the output file in case the option <code>-f</code> or <code>--file</code> was used</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_starting_with_jbang">Starting with JBang</h4>
<div class="paragraph">

JBang (<a href="https://www.jbang.dev">https://www.jbang.dev</a>) is a popular command line tool that eases the startup of Java applications.
Jamal can be started using JBang.

</div>
<div class="paragraph">

This may be the choice for you if you want to use Jamal, but you do not even have Java installed.
Installing JBang is extremely simple.
When running Jamal using JBang, Jbang will install everything that is needed to execute Jamal is a clean and non-intrusive way.

</div>
<div class="paragraph">

To start Jamal when you have JBang installed on your machine the command line to start Jamal is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This command will invoke the command line version automatically caring about all the Jar files.
The syntax and meaning of the options are the same as in case of the command line version.
This startup also loads all the Jamal extensions, including <code>snippet</code>, <code>scriptbasic</code>, <code>groovy</code>, <code>ruby</code>, <code>plantuml</code>, and <code>debug</code> (1.7.3 and later) and some others.
If you want to see the exact list of the modules this startup loads have a look at the <a href="jbangstarter.java">starter</a> file.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">The possibility to start Jamal using JBang was developed for the version 1.7.3, and it was retrofitted for the version 1.7.2 before the release of 1.7.3.</td>
</tr>
</tbody>
</table>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

If you have used Jamal with jbang before then jbang will store its catalog file in the local cache.
When you start Jamal using <code>jbang jamal@verhas ...</code> and you see an old version starting then delete the file

</div>
<div class="paragraph">

```
~/.jbang/cache/urls/d917b991facb86b9860fa179df2c804fc2090cc76a83fb15b49f47cc2e885f7c/jbangstarter.java
```

</div>
<div class="paragraph">

After that you can start jbang again.
It will download the new catalog, always pointing to the latest release.
You will find the command that deletes this file in the root of the project in the shell script <code>jbang-cache-evict</code>.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_jshell">JShell</h4>
<div class="paragraph">

You can start Jamal using JShell.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">This start mode is experimental and is supported only for the release 1.6.5
It is recommended to use jbang instead.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

All you need to do is execute the following command:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">The URL is a shortened URL of GitHub.
It redirects to <code>https://raw.githubusercontent.com/verhas/jamal/master/jamal-cmd/jamal.jshell</code></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

It will start Jamal to process all files with <code>.jam</code> extension in the current directory and below.
The output files will have the same name as the processed file without the <code>.jam</code> at the end.
For example, <code>pom.xml.jam</code> will be processed to <code>pom.xml</code>.

</div>
<div class="paragraph">

You do not even need to install Jamal.
If you have Java 11 or later installed, you can execute the above command.
JShell will download and execute the script from the URL depicted above.
The script will check if Jamal is installed on your machine.
If it is not installed, it will automatically download the needed JAR. When the JAR files are downloaded, it will start Jamal in the current working directory using the default settings.
You can alter the settings using the <code>jamal.options</code> file.
If this file does not exist in the current working directory, then the JShell script will create one containing the default settings.

</div>
</div>
<div class="sect3">
<h4 id="_debugging_macro_conversions">Debugging Macro Conversions</h4>
<div class="paragraph">

When something goes wrong, Jamal gives you a detailed error message.
The message will include the file name, line number, and character count where the error happened.
In other cases, Jamal may think it works fine, but the output is not exactly what you expected.
Sorry, in this case, the issue, most probably, is with your expectations.

</div>
<div class="paragraph">

In cases like that, you can try to debug the execution of the macro engine.
There are two possibilities:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
use the trace functionality, or</li>
    <li>
use the debugger.</li>
</ol>
</div>
<div class="paragraph">

The trace functionality can create a detailed XML trace of the execution that can later be examined.
The trace information is structured with nested structures.
XML is a format that can accommodate such nested structures and has very extensive editor support.

</div>
<div class="paragraph">

The debugging functionality can execute the macro transformation step-by-step providing interactive debugger user interface.
The tracing functionality was developed earlier and its importance lessens by the introduction of the debugger.

</div>
<div class="sect4">
<h5 id="_tracing">Tracing</h5>
<div class="paragraph">

To get a trace file during the execution of Jamal you can

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

on the command line that starts Jamal.
It will specify a trace file, in this case, <code>tracefile.xml</code>.
If it is more convenient, you can also specify the trace file using the environment variable:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The environment variable is taken into account only if the <code>jamal.trace</code> system property is not defined.

</div>
<div class="paragraph">

The trace file will contain all the macro evaluations' inputs and outputs.
Since there can be many Jamal evaluations one after the other, Jamal does not overwrite old trace information.
It appends the new trace information.
Before starting Jamal, you can manually delete the trace file.
Trace files grow large quickly.
If you do not want to trace anymore, do not forget to unset the environment variable typing

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

to avoid an excessively large trace file growing on your disk.

</div>
</div>
<div class="sect4">
<h5 id="_debugging">Debugging</h5>
<div class="paragraph">

To debug a Jamal macro processing you have to start Jamal in debugging mode.
Jamal switches on debugging mode if the system property <code>jamal.debug</code> or the environment variable <code>JAMAL_DEBUG</code> is defined.
The value of the property or the variable controls which debugger starts and how.

</div>
<div class="paragraph">

Currently, there are two debuggers implemented:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
web based debugger with UI written in React.js</li>
    <li>
a TCP/telnet based debugger.</li>
</ol>
</div>
<div class="paragraph">

The detailed technical documentation of the server side of the debuggers is described in the document <a href="#jamal-debug/README.adoc">debugger readme</a>.
The TCP based debugger is only for experimental purposes or when the web based debugger is not available.

</div>
<div class="paragraph">

Here we briefly describe the web based debugger.
Since the UI can best be described with pictures, especially with moving pictures the documentation is created in screen capture videos.

</div>
<div class="paragraph">

To start Jamal in debugger mode you can specify

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

on the command line that starts Jamal.
It will specify the web based debugger, hence the <code>http</code> and the port, in this case <code>8080</code>.
If it is more convenient, you can also specify the <code>http:8080</code> debug option file using the environment variable:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The environment variable is taken into account only if the <code>jamal.debug</code> system property is not defined.

</div>
<div class="paragraph">

If you do not want to debug anymore, do not forget to unset the environment variable typing

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In debug mode Jamal stops twice for each macro evaluation.
Once when it selects the next text without macro from the actual start of the input, or a macro at the start of the input.
Second time when the macro was evaluated, and the text is appended to the output.

</div>
<div class="paragraph">

If you open your browser after you started Jamal in debug mode and try to open the url <code>http://localhost:8080</code> you will get the debugger UI in your browser.
This user interface will let you see the current input, the current output, the defined built-in and user defined macros.
You can let the code run, make one step macro evaluation, go into nested macro evaluation, evaluate text interactuvely in the current evaluation envirionment and so on.

</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="SimpleExample">2. Simple Example</h3>
<div class="paragraph">

As a quick sample to have a jump start what Jamal can do:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will be converted by Jamal to the file

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this sample, the built-in macro <code>define</code> is used to define a so-called user-defined macro <code>fruit</code>.
This macro has three arguments named <code>color</code>, <code>name</code>, and <code>actualSize</code>.
When the user-defined macro is in use, the actual values replace these arguments.

</div>
<div class="paragraph">

Note that the macros open with the <code>{</code> character and close with the <code>}</code> character in this example.
These are not hardwired in Jamal, and there is not even a suggested default for that.
The embedding application has to define the opening string and the closing string.
For example, the embedding Java::Geci application uses <code>{%</code> and <code>%}</code> as macro open and macro close strings.
It does it because the <code>{</code> and <code>}</code> characters frequently appear in the Java source code.
On the other hand, Java code rarely uses the <code>{%</code> or <code>%}</code> format.
In this documentation, we use the <code>{</code> and <code>}</code> strings.

</div>
<div class="paragraph">

However, you have to be aware that this is NOT enforced.
It is not even a recommendation or a convention.
You can specify the macro opening and closing string as the program parameter, and the Jamal source code can also change it.
You can change them using the built-in <a href="#sep"><code>sep</code></a> macro (<a href="#sep">see later</a>) in the Jamal source.

</div>
<div class="paragraph">

There is one exception where Jamal uses <code>{</code> and <code>}</code> as hardwired strings for macro opening and closing.
This exception is implemented in version 1.5.0 and later.
When you import a file into your code, and the imported file starts with the characters <code>{@</code>, the import will use <code>{</code> and <code>}</code>.
This way, you can easily import files from external sources, like a JAR file or via the web.
The package that defines an import file can use the <code>{</code> and <code>}</code> characters.
Even if your Jamal file uses different macro opening and closing strings, you do not need to change it to <code>{</code> and <code>}</code> in this particular case.
You may have <code>[[</code> and <code>]]</code> as opening and closing strings.
In this case, you write <code>[[@import res:MyResource.jim]]</code> as an example, and it still will be imported correctly.

</div>
<div class="paragraph">

The parameters are separated using the first non-space, non-alphanumeric character following the macroâs name in the macro use.
Thus, you can write

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

the output will be the same for each line:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">In the last example, we used the <code>:</code> character as the separator.
When the name of a macro contains one or more  <code>:</code> characters, then the macro is global.
Since this character can also be part of the macroâs name, there must be a space before it.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

There are also some other rules that make it possible to use a space as separator character.
When a macro has exactly one argument then the parsing follows special rules.
It is also possible to invoke a macro with more or less number of arguments than are defined using the option <code>lenient</code>.
These are advanced topics and are detailed later.

</div>
</div>
<div class="sect2">
<h3 id="OtherMacros">3. Other Macros</h3>
<div class="paragraph">

<code>define</code> is not the only built-in macro in Jamal.
The comprehensive list of built-in macros are

</div>
<div class="ulist">
<ul>
    <li>
<a href="#comment"><code>comment</code></a></li>
    <li>
<a href="#block"><code>block</code></a></li>
    <li>
<a href="#begin"><code>begin</code> and <code>end</code></a></li>
    <li>
<a href="#define"><code>define</code></a></li>
    <li>
<a href="#eval"><code>eval</code></a></li>
    <li>
<a href="#env"><code>env</code></a></li>
    <li>
<a href="#export"><code>export</code></a></li>
    <li>
<a href="#import"><code>import</code></a></li>
    <li>
<a href="#include"><code>include</code></a></li>
    <li>
<a href="#use"><code>use</code></a></li>
    <li>
<a href="#script"><code>script</code></a></li>
    <li>
<a href="#JShell"><code>JSheel</code></a></li>
    <li>
<a href="#sep"><code>sep</code></a></li>
    <li>
<a href="#for"><code>for</code></a></li>
    <li>
<a href="#if"><code>if</code></a></li>
    <li>
<a href="#ident"><code>ident</code></a></li>
    <li>
<a href="#verbatim"><code>verbatim</code></a></li>
    <li>
<a href="#options"><code>options</code></a></li>
    <li>
<a href="#try"><code>try</code></a></li>
    <li>
<a href="#escape"><code>escape</code></a></li>
    <li>
<a href="#require"><code>require</code></a></li>
</ul>
</div>
<div class="paragraph">

You use the built-in macros with <code>#</code> or <code>@</code> in front of the macroâs name.
These characters signal that the macro is built-in (as opposed to user defined).
The typical use is to start a macro with the <code>@</code> character.
In that case, the macro evaluates the rest of the input till the matching closing string.

</div>
<div class="imageblock">
<div class="content">
<img src="images/evaluationorder.svg" alt="evaluationorder.svg" /></div>
</div>
<div class="paragraph">

If the macro starts with the <code>#</code> character, then the input is first parsed for other macros.
These macros are evaluated, and their results replace their occurrences in the code.
Only after this, the macro we are looking at is evaluated.

</div>
<div class="paragraph">

For more about definition scopes and exporting, read the section about <a href="#export"><code>export</code></a>.
In that section we discuss the evaluation order of the macros in great detail.

</div>
<div class="sect3">
<h4 id="comment">i. <code>comment</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>comment</code> is used to insert comments to the input.
It can also be used to enclose definitions without side effects, but this is not recommended.
For that purpose, use the [<code>block</code>](#block) macro.

</div>
<div class="paragraph">

For more about definition scopes and exporting, read the section about <a href="#export"><code>export</code></a>.
In that section we discuss the evaluation order of the macros in great detail.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will generate

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that this is important to use the <code>@</code> character in front of the keyword <code>comment</code> to make it a real comment.
If the macro character <code>#</code> is used, like <code>{#comment comment_text}</code> then the <code>comment_text</code> part will be evaluated.
If there is some macro in the <code>comment_text</code> that modifies the evaluation state, then the modification will happen.
For example, if the <code>comment_text</code> defines some global macro, then the defined macro can be used after the <code>comment</code> block.

</div>
<div class="paragraph">

It is safe to say always to use <code>{@comment ...}</code>.
When the code needs the evaluation, then use the [<code>block</code>](#block) macro.

</div>
</div>
<div class="sect3">
<h4 id="block">ii. <code>block</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>block</code> is technically the same as <code>comment</code>.
It is recommended to use the <code>comment</code> macro with the <code>@</code> starting character.
In that case the content of the comment is not interpreted by Jamal.
Use the <code>block</code> with <code>#</code> to have the content interpreted.
Block should be used to enclose definitions to a scope level.
Note that the result of the macro <code>{#block ... }</code> is an empty string.

</div>
<div class="paragraph">

For more about definition scopes and exporting, read the section about <a href="#export"><code>export</code></a>.
In that section we discuss the evaluation order of the macros in great detail.

</div>
</div>
<div class="sect3">
<h4 id="begin">iii. <code>begin</code> and <code>end</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

The macros <code>begin</code> and <code>end</code> start and close a local definition scope.
This is similar as using a <code>{#ident ... }</code> macro to create a new scope for the evaluation of the macros inside it.
The text between the <code>{@begin}</code> and <code>{@end}</code> will be evaluated in a new scope.
Any user defined macro in this scope is going to be local, unless exported or has a <code>:</code> in the name.

</div>
<div class="paragraph">

It is recommended to use <code>begin</code> and <code>end</code> when the structure is complex, and it is more readable to use the <code>begin</code>, <code>end</code> macros than a simple <code>block</code>.
To ensure that all <code>begin</code> has an <code>end</code> you can name the blocks.
You can put an arbitrary string after the macro name <code>begin</code> and if you do then you have to repeat the same string after the macro name <code>end</code>.
The spaces from the beginning, and the end of the parameter are trimmed.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

First <code>Z</code> is defined to be the string <code>"1"</code> (without the quotes).
Then we start a new scope, named <code>alma</code>.
Inside this new scope we redefine the macro <code>Z</code> to be <code>2</code>.
When we use <code>Z</code> writing <code>{Z}</code> then it will output <code>2</code> here.
We also define <code>S</code> to be <code>2</code> and we also <a href="#export"><code>export</code></a> it.
Exporting means that the definition will get to the surrounding scope.
After that we close the scope named <code>alma</code>.
When closing the scope there is an extra space after the name, but it does not matter.
Now <code>S</code> is <code>2</code>, because it was exported and <code>Z</code> is <code>1</code>, because it was defined to be <code>1</code> on this level and was not exported from the nested level.

</div>
<div class="paragraph">

For more about definition scopes and exporting, read the section about <a href="#export"><code>export</code></a>.
In that section we discuss the evaluation order of the macros in great detail.

</div>
<div class="paragraph">

Scopes are nested, stacked into each other any levels.
Scopes are opened by many things, like macro start, or including a file.
You can close a scope using the macro <code>end</code> that was opened with a matching <code>begin</code>.
You cannot not close a scope using <code>end</code> that was opened by something else.
For example, you cannot get into the scope of the including file putting a pair-less <code>end</code> macro into an included file.
This will trigger a processing error.
It is also an error if a <code>{@begin...}</code> does not have its <code>{@end...}</code> pair in the main file or in any included or imported file.

</div>
</div>
<div class="sect3">
<h4 id="define">iv. <code>define</code></h4>
<div class="ulist">
<ul>
    <li>
since 1.0.0 (core)</li>
    <li>
since 1.6.4 <code>default</code> as special macro</li>
    <li>
since 1.7.4 <code>default</code> macro first argument, macro can be defined to evaluate verbatim</li>
    <li>
since 1.7.6 optional and extra ignored arguments</li>
    <li>
since 1.12.3 options can also be used to define optional, failing, pure and verbatim macros</li>
    <li>
since 1.12.3 option <code>RestrictedDefineParameters</code> can be used to restrict parameters to be only identifiers</li>
</ul>
</div>
<div class="sect4">
<h5 id="_define_basics">Define basics</h5>
<div class="paragraph">

<code>define</code> defines a user-defined macro in the current scope.

</div>
<div class="paragraph">

For more about definition scopes and exporting, read the section about <a href="#export"><code>export</code></a>.
In that section we discuss the evaluation order of the macros in great detail.

</div>
<div class="paragraph">

The syntax is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The arguments part is optional in case there are no arguments for the macro.
In that case the macro syntax is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Using the <code>()</code> characters after the identifier of the macro is optional, and the result is exactly the same as if it omitted.
The two definitions are equivalent.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">There is one exception, when you have to use <code>()</code> even for empty parameter list.
This is the case, when the <code>id</code> ends with a colon <code>:</code>.
In this case the definition <code>{@define id:=...}</code> would be ambigous, because using <code>:=</code> instead of <code>=</code> has a special meaning (see it later).</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

When the macro is used, the arguments are replaced in the body by the actual parameters supplied at the place of use.
The arguments are specified as a comma-separated list.
They are usually identifiers.

</div>
<div class="paragraph">

Note that the arguments do not have any special syntax.
The only requirement is that they do not contain a comma <code>,</code>, a closing parenthesis <code>)</code> and they do not start or end with <code>...</code>.
That is because the list is comma-separated, because <code>)</code> terminates the list of the arguments, and a <code>...</code> prefix or postfix denotes optional arguments.
It is recommended, though, to use normal identifiers and no spaces in the argument names.
This is only a recommendation and is not enforced by Jamal.
You may need to process some special text.
You may need some specially named arguments.
In the examples, you usually see that the arguments start with a <code>$</code> character.

</div>
<div class="paragraph">

Somebody may follow other conventions, like starting every argument with the <code>*</code> or enclosing the argument names between <code>|</code> or <code>/</code> or some other characters.
These practices can be absolutely okay so long as long they support the readability of the macro body and the use of the macro.
Applying such practices may help to visually separate the macro arguments from the textual content of the macro body.

</div>
<div class="paragraph">

From practice, we see that in case of longer macros using simple, argument names with one or only a few letters may lead to some error.
For example the macro:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This is probably not the result that the macro creator wanted.
They probably missed the point that the word <code>fox</code> also contains an <code>x</code>.

</div>
<div class="paragraph">

To ensure that the argument replacing is consistent, the argument names cannot contain each other as a substring.
Assume that there is an argument <code>a</code> with an actual parameter value <code>oneA</code>.
There is another argument named <code>aa</code> with an actual value <code>twoAs</code>.
In this case the occurrences of <code>aa</code> in the body could be replaced to <code>twoAs</code> or <code>oneAoneA</code>.

</div>
<div class="paragraph">

Although Jamal could define some rule, like left-to-right, or right-to-left, or longer-first evaluation these could still lead to a hard-to-read situations.
Jamal suffers from hard to read situations already without this extra headache.
To avoid that Jamal does not allow you <code>a</code> and <code>aa</code> as argument names to a macro definition the same time.

</div>
<div class="paragraph">

During the replacement a parameter value may be a string that contains the name of one or more argument names.
This is absolutely legit.
The use of the macro should not, and does not depend on the names used to define the macro.
The macro parameter names inside the actual parameter values will NOT be replaced with the parameter value(s) that were provided for the other argument(s) inside the value of the parameter.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

even though <code>*c</code> is a <code>fish</code>, but the characters <code>*c</code> in the output come from the value of a parameter, and therefore it is not replaced.

</div>
</div>
<div class="sect4">
<h5 id="_option_code_restricteddefineparameters_code">Option <code>RestrictedDefineParameters</code></h5>
<div class="paragraph">

In the example above the parameter names started with the <code>*</code> character.
These are not identifier names.
Identifiers start with the letters <code>a-z</code> or <code>A-Z</code>, <code>$</code>, <code>:</code> or underscore <code>_</code> and can contain any of these on consecutive positions and also digits.
If you want to restrict the macro definitions to use only identifiers as symbolic names for user defined macro arguments you can use the option  <code>RestrictedDefineParameters</code>.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

but the previous sample, using parameter names starting with the character <code>*</code> would result in an error.

</div>
</div>
<div class="sect4">
<h5 id="_special_user_defined_macros">Special User Defined Macros</h5>
<div class="paragraph">

In Jamal user defined macros are defined using the <code>define</code> macro.
Internally, a user defined macro can be anything that implements a specific Java interface.
Jamal only requires that it can be evaluated and that it handles the string arguments passed to it.
Some built-in macros implemented in external packages, like the Yaml package have their implementation.
It means that they create user defined macros that you can pass parameters, and their evaluation results some output, but they are not "classical" user defined macros.
They just behave like the macros that are defined using <code>define</code>.
Foe example the macro `counter:define`from the Snippet package creates a "user defined" macro that results a number when used, but it also changes the value at every invocation.

</div>
</div>
<div class="sect4">
<h5 id="_macro_redefine">Macro redefine</h5>
<div class="paragraph">

Macros can be redefined at any point.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

It is possible to use a question mark <code>?</code> after the macro keyword <code>define</code>.
In that case the macro is only defined if is NOT yet defined in the current scope or any other outer scope.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

It is also possible to use a <code>!</code> instead of the <code>?</code>.
In this case the macro <code>define</code> will report an error if the macro is already defined.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">The macro <code>try!</code> will catch the error and send the error message to the output.
This is mainly used for debugging and in this case for documentation purposes.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

When a user defined macro is evaluated, the result of the macro is evaluated again resolving all the macros that happen to be in the result.
This can be prevented using the <a href="#verbatim"><code>verbatim</code></a> macro.
You can also read more details on the macro evaluation order in the chapter <a href="#verbatim"><code>verbatim</code></a>.

</div>
<div class="paragraph">

If you use the <code>~</code> (tilde) character after the keyword <code>define</code> then the macro will be evaluated "verbatim" by default.
It means that the value of the user defined macro will not be evaluated like if it was used with the macro <code>verbatim</code>.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If, for any reason, you need to evaluate the result of such a macro you can use <code>eval</code> or <code>!</code> when using th e macro.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

You cannot use <code>!</code> together wit the macro  <code>verbatim</code>.
This is because the format <code>{!@verbatim ...}</code> is the same as simply <code>{...}</code> without the <code>!</code> and the <code>@verbatim</code>.
On the other hand when the macro would almost always be used together with <code>verbatim</code> then it makes sense to define the macro to be a verbatim user defined macro.
In the few cases when it would be used without <code>verbatim</code> you can use <code>!</code>.

</div>
<div class="paragraph">

The macros in the module Yaml define the object structures read from the Yaml format as verbatim user defined macros.
When you use such a macro, like <code>{yaml}</code> the Yaml formatted string representation of the data is the result of the macro.
Yaml itself may use the JSON compatible <code>{A:1, B:2, ..., X:88}</code> format, which Jamal may mistakenly try to interpret as a macro.
To prevent this these Yaml data containing user defined macros are verbatim by default.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect4">
<h5 id="_global_macros">Global Macros</h5>
<div class="paragraph">

When the name of the macro contains at least one colon character <code>:</code> then the macro will be defined in the global scope.
Global scope is the top-level scope, and it means that a macro like that can be used everywhere in the text after it was defined.

</div>
<div class="paragraph">

For example modifying a bit our example from the "<a href="#begin"><code>begin</code> and <code>end</code></a>" section

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case the macro <code>A:Z</code> is a global macro because it has a <code>:</code> in the name.

</div>
<div class="paragraph">

It is also possible to define a user-defined macro to be global without <code>:</code> in the name.
If the very first character of the name of the macro is <code>:</code> then this character is removed, but the macro is defined in the global scope.
Further modifying the example we get:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

which will result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that you cannot use <code>{:Z}</code> when using the global macro.
The <code>:</code> character in this case is not part of the name.
Also note that you can define a local macro even if there is a global macro of the same name.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

which will result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The <code>define</code> inside the <code>begin</code>, and <code>end</code> delimited scope does not redefine the global scoped <code>Z</code>.
It defines a scope local macro, which gets out of scope with the macro <code>end</code>.

</div>
<div class="paragraph">

When a user-defined macro is used, the parameters are defined after the name of the macro.
In the case of user-defined macros, there is no <code>@</code> or <code>#</code> in front of the name of the macro.
Optionally there may be a <code>?</code> character.
In that case, the result of an undefined user macro will be the empty string.
In most other cases using an undefined user macro results an error.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

which will result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">The <a href="#try"><code>try</code></a> built-in macro is mainly for debugging purposes and returns the error message itself.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

If you automatically want to interpret all user defined macro reference if there was a <code>?</code> in front of them then you can use the option <code>emptyUndef</code>.
With this option there is no need for the <code>?</code> in front of the macro name, every undefined macro will evaluate to empty string.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

results

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect4">
<h5 id="default">Default macro</h5>
<div class="paragraph">

In addition to having a <code>?</code> character or using the <code>try</code> macro, there is another possibility to avoid the error in case of an undefined macro.
If the macro <code>default</code> is defined then it will be used instead of any undefined macro, even when the <code>?</code> character is used in front of the macro name.

</div>
<div class="paragraph">

Example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

During the design there were two possibilities.
One, to let the <code>{?...}</code> macro use perform the same way as if there was no defined <code>default</code> macro.
The other, to let the <code>{?...}</code> use the <code>default</code> macro.
We selected the second option because in that case there is a fallback.
You can simply write <code>{#ident {@undefine default}{?...}}</code>.
If we selected the first option, then the <code>{?...}</code> macro would not have and alternative way to use the default macro.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

results

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Because it is cumbersome to write <code>{#ident {@undefine default}{?...}}</code> every time the option <code>:noUndefault</code> can also be used.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

results

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>default</code> can have arguments, and they will be handled as they should be.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that there can be many undefined macros, and the different macros may expect different number of parameters.
If the number of the actual parameters is not the same as what the defined <code>default</code> expects Jamal will stop with error.
Consider the use <code>{@options :lenient}</code> along with the definition of the <code>default</code> macro, or a default macro with optional arguments.

</div>
<div class="paragraph">

Starting with the version 1.7.4 the macro <code>default</code> can have a special first parameter.
If the first argument of the macro is either <code>$macro</code> or <code>$_</code> then this parameter will hold the name of the macro, which was not found.
That way the <code>default</code> macro can use the name of the macro in its evaluation.

</div>
<div class="paragraph">

Example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Starting with the version 1.7.6 Jamal introduced optional arguments to user defined macros.
(Details are a bit later.)
You can use optional arguments when you define a <code>default</code> macro.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The parameters stand after the name of the macro separated by a separator character.
The first non-whitespace and non-alphanumeric character after the name of the macro is the separator character.
It can be <code>/</code> as in the examples below, but it can also be any non-alphanumeric character.
The number of parameters should be exactly the same as the number of argument unless the <code>{@options :lenient}</code> was specified, or the <code>...</code> was used to denote optional arguments.
In the case of optional arguments, the missing arguments will be zero-length strings.
If there are extra parameters, they will be ignored.

</div>
<div class="paragraph">

The separator character cannot be an alphanumeric character (letter or digit, Unicode categories Lu, Ll, Lt, Lm, Lo, and Nd).
Any other Unicode character can be used as a parameter separator character.

</div>
<div class="paragraph">

If the user-defined macro has exactly one argument then there is no need to use a separator character.
The sole parameter of the macro can start after the name of the macro at the first non-whitespace, alphanumeric character.
For example,

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The parameter, in this case should start with an alphanumeric character or with a macro start string.
If it starts with something else then that character will be the separator character that separates the parameters.
In this case, because there is only one parameter it will separate the macro name from the parameter.
For example,

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Writing

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

because <code>-</code> is not alphanumeric and therefore it is treated as a separator character separating a single empty string.
On the other hand

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will work, and the result will be

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This is because the <code>{</code> in this case is the macro start string.
in that case, the first character of it is not considered to be as a separator character even though it is not alphanumeric.

</div>
<div class="paragraph">

There are cases when it is necessary to use a separator character.
In some cases the parameter starts with a significant space.
In other cases it starts with a character that is not alphanumeric.
In that case the above macro should be used like the following three examples:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

These uses of the above macro will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In the second line in the examples, the separator character is used in the parameter.
Because the macro needs only one argument all the rest of the parameter until the macro closing string is used as the single parameter.
It is not split up further along the later occurrences of the separator character.
Just use any non-alphanumeric character in front of the parameter that looks good.
You need not worry that the character itself presents in the content.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result an error, because there are too many arguments:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">In the example above we switched off the lenient mode, because it was already switched on for some previous samples.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The rule that the separator character is not considered as another separator in the rest of the argument is valid only when there is only one argument.
In case of multiple arguments this could easily lead to unreadable macro use.
The above example modified to be lenient demonstrates this:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The provided third value, <code>t</code> is ignored.

</div>
<div class="paragraph">

There are situations where the use of a separator character is not a must, but the use of it helps the readability.
Consider, for example <code>{enclose/a/b/v}</code>.
We know  from earlier that <code>enclose</code> has only one argument, however the use of it looks like it has three.
The one argument it has is <code>a/b/v</code>.

</div>
<div class="paragraph">

Omitting the separator character, <code>/</code> in this case, does not help the readability or only a bit.
The use <code>{enclose a/b/c}</code> still looks like a macro with three parameters.
In situations like that the most readable solution is to use an explicit separator character that looks good.
For example <code>{enclose |a/b/c}</code> makes it evident and readable that there is only one parameter: <code>a/b/c</code>.

</div>
<div class="paragraph">

In the following sample code, you can see some complex examples that demonstrate these cases:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will generate

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This is a fairly complex example.
To ease the understanding note the followings:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
<code>%66h</code> is an absolutely valid macro parameter name.
Anything can be a parameter name that does not contain a comma, a closing parentheses, does not start or end with <code>...</code> and is not a substring of any other parameter.</li>
    <li>
When a macro parameter is replaced in the body of the macro the processing of that string is finished and is not processed further replacing macro parameters.
Macro parameters are only replaced with the actual values in the macro body and not in the parameter actual values.
That is why parameters âa` and <code>b</code> are replaced with the actual string ' %66hâ but then this is not replaced with the actual value of the parameter <code>%66h</code>.</li>
    <li>
When we define the macros <code>x</code> and <code>y</code> inside the <code>comment</code> macro it happens in a local scope of the <code>comment</code> macro.
It means that the definition of <code>x</code> has no effect outside the macro <code>comment</code>.
Using the name <code>:x</code> defines the macro <code>x</code> in the global scope, that is above the current scope.
When we defined the macro <code>y</code> it also starts with <code>:</code>
and so it gets into the global scope.
However, during the definition, it is in the local scope of the <code>comment</code> macro where the local definition of <code>x</code> overrides the global definition of <code>x</code> even though the global definition happened later.
Therefore, <code>y</code> will be <code>here we are local</code>.
That is also because  <code>y</code> is defined using the <code>#</code> character before the built-in macro keyword <code>define</code> and thus the content of the definition is evaluated before defining the global <code>y</code>.</li>
</ol>
</div>
</div>
<div class="sect4">
<h5 id="_pure_macros">Pure Macros</h5>
<div class="paragraph">

It may happen that the macro opening and closing strings are different when the macro is defined and when used.
In a situation like that the macro evaluation replaces the macro opening and closing strings in the macro definition to the actual macro opening and closing strings.
It can be prevented using <code>:=</code> instead of a <code>=</code> between the name, parameter list and the body of the macro.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

results

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

When <code>a</code> is evaluated the result is <code>[z]{z}</code> on both lines.
In the next step this result is evaluated, because the macro is not a <code>verbatim</code> one.
In the first case the macro a normal one and the evaluation knows that the macro opening and closing strings were <code>[</code> and <code>]</code>.
In this case the evaluation also knows that the characters <code>{</code> and <code>}</code> are just ordinary characters.

</div>
<div class="paragraph">

In the second case, however, the macro is a "pure" macro and is evaluated as it using the current macro opening and closing strings.

</div>
<div class="paragraph">

Note that when there are no parameters, and the macro definition does not use the optional <code>()</code> after the name of the macro the <code>:=</code> would be ambiguous.
To avoid this ambiguity you have to use <code>()</code> after the name of the macro if the name of the macro finishes with a <code>:</code> character.

</div>
</div>
<div class="sect4">
<h5 id="_optional_arguments">Optional Arguments</h5>
<div class="paragraph">

Setting the option <code>lenient</code> is a very aggressive way to make all macros inside the current scope evaluated in the lenient way.
There are more subtle methods to specify that some macro may work with less or more actual parameter values than their concrete arguments.
Macros can define a minimum, and a maximum number of parameters they need when they are called.
When an argument in the <code>define</code> macro starts with <code>...</code> characters it means that the next argument, and the arguments afterwards are optional.
When using the macro these arguments will be empty string when not provided. For example,

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

You can also say that all the parameters are optional in case the <code>...</code> is in front of the first argument:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Optional parameters are different from leinent mode, that they do not allow extra parameters. For example the

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result the error

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If you want to allow extra parameters then you can append <code>...</code> after the last argument:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

resulting in

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Appending <code>...</code> after some other argument, which is not the last one or using <code>...</code> prefix on more than one argument is an error.
It is also an error to add <code>...</code> postfix after the first argument when the macro has one argument.
One argument macros are treated in a special way and all the text following the macro will be treated as a single argument, thus it is meaningless to use <code>...</code> after a single argument.

</div>
</div>
<div class="sect4">
<h5 id="_options">Options</h5>
<div class="paragraph">

Following the version 1.12.3 the macro <code>define</code> can be used with the options

</div>
<div class="ulist">
<ul>
    <li>
<code>verbatim</code>,</li>
    <li>
<code>optional</code> (alias <code>ifNotDefined</code>),</li>
    <li>
<code>fail</code> (aliases <code>noRedefine</code>, <code>noRedef</code>, <code>failIfDefined</code>), and</li>
    <li>
<code>pure</code></li>
</ul>
</div>
<div class="paragraph">

These can be used instead of the modifying characters <code>~</code>, <code>?</code>, <code>!</code> and <code>:</code> respectively.
You cannot use them together with the modifying character, but you can use one of the modifying character and the other option, unless they are mutually exclusive (<code>?</code> and <code>!</code>).

</div>
<div class="paragraph">

n addition to that you can use the option

</div>
<div class="ulist">
<ul>
    <li>
<code>global</code></li>
</ul>
</div>
<div class="paragraph">

to define a global macro, even if the macro does not have a <code>:</code> in the name.
Using the option as <code>global=false</code>, however, will not make a macro containing <code>:</code> local.
This option can be used together with the name containing <code>:</code>.

</div>
</div>
</div>
<div class="sect3">
<h4 id="undefine">v. <code>undefine</code></h4>
<div class="ulist">
<ul>
    <li>
since 1.6.6</li>
</ul>
</div>
<div class="paragraph">

<code>undefine</code> can be used to undefine a macro.
Undefining a macro works the same way as definition: in scope.
When you undefine a macro it will be undefined only for the current scope and later for any lower newly opened scope.
Undefining a macro does not affects the definition of the macro in any higher level.

</div>
<div class="paragraph">

You can undefine a macro on the global level the same way as you can define a macro on the global level.

</div>
<div class="sect4">
<h5 id="_simple_undefine_on_one_single_scope">Simple undefine on one single scope</h5>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Here we define the macro <code>fruit</code> to be <code>apple</code>, and we use it once.
Following it, we undefine the macro.
When we use it next time it is undefined.
The use of it is not an error because we use the <code>?</code> in front of the macro name, but the result is the empty.

</div>
<div class="paragraph">

Finally, it will generate the following output.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect4">
<h5 id="_undefine_an_inherited_macro_in_a_local_scope">Undefine an inherited macro in a local scope</h5>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example we define the macro <code>apple</code> on the top level scope, but we undefine it one level deeper.
The macro is undefined only in the local scope, where it was undefined but on higher levels it is still defined.

</div>
<div class="paragraph">

Finally, it will generate the following output.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect4">
<h5 id="_being_undefined_can_be_exported">Being undefined can be exported</h5>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example we undefine the macro fruit in the local scope, but then we export it from this scope.
Being explicitly undefined can be exported the same way as the macro, which is defined.
Because the "undefinedness" is exported the macro <code>fruit</code> becomes undefined in the enclosing scope.

</div>
<div class="paragraph">

Finally, it will generate the following output.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect4">
<h5 id="_undefine_export_and_redefine">Undefine, export and redefine</h5>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example we define the macro <code>fruit</code> on the top level.
After that we open two new scopes nested.
We undefine the macro in the most inner scope, and we export this undefinedness to the middle scope.
After that, we define the macro again in the most inner scope.

</div>
<div class="paragraph">

At this moment we have three "definition" of the macro <code>fruit</code>.
In the outer scope it is defined to be <code>apple</code>.
In the middle scope it is undefined.
In the most inner scope it is defined to be <code>pear</code>.

</div>
<div class="paragraph">

Finally, it will generate the following output.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

For the technically savvy, the following may help get a more comfortable grab of how the macro <code>undefined</code> works.

</div>
<div class="paragraph">

Jamal stores user-defined macros in maps.
The key in the map is the id of the macro.
The value in the map is a Java object that represents the user-defined macro.
The maps are organized in a stack.
The stack has one element for each scope.
When a new scope opens in the Jamal source, the stack grows.
When a scope is closed, the stack shrinks.
Searching for a macro starts in the map stored at the top of the stack (opened latest).
If the macro is not in the map, then the search goes deeper.
The search finally finds the macro in one of the maps or runs out of stack levels.

</div>
<div class="paragraph">

The maps are very general in the sense that they can store any Java object that implements <code>Identified</code>.
User-defined macros implement this interface along with <code>UserDefinedMacro</code>.
A macro is undefined when there is no object assigned to the name in any of the maps.
However, it is also undefined when the search finds an object in the stacked map structure that does not implement <code>UserDefinedMacro</code>.
The macro <code>undefine</code> inserts an object into the structure that is exactly like that.
Export is possible because the macro <code>export</code> does not care about the implemented interfaces.
It merely removes the object from the map and inserts it in the map on the next stack level.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="eval">vi. <code>eval</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>eval</code> interprets the content of the macro.
The text written after the macro keyword <code>eval</code> is evaluated as a script.
The scripting language can be defined following a <code>/</code> character.
If there is no script type defined (or <code>jamal</code> is defined) then the content will be evaluated as normal Jamal macro text.
Otherwise, the script engine named is used.

</div>
<div class="paragraph">

There are three ways to use the macro in one of the following formats:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If <code>eval</code> is followed by <code>/</code> character then the next identifier is the type of the script.
White space characters before, and after the <code>/</code>, as well as after the script type name are ignored.
You can use any scripting language that

</div>
<div class="ulist">
<ul>
    <li>
implements the Java scripting API and</li>
    <li>
the interpreter is available on the classpath when Jamal is executed.</li>
</ul>
</div>
<div class="paragraph">

If the script type is <code>jamal</code> then it is the same as if there was no script type specified.
You may need the explicit specification of <code>jamal</code> when the content of the macro to be evaluated starts with the <code>/</code> character.

</div>
<div class="paragraph">

If character following the keyword <code>eval</code> is <code>\*</code> then the scripting type is <code>jamal</code> and the evaluation is repeated until all macros are resolved.
The macro assumes that all the macros are resolved when the evaluation of the text does not change any more.
This may lead to infinite loop, therefore there is a built-in limit.
<code>eval*</code> evaluates the macro input at most 100 times.
This limit can be changed with the option <code>evaluateLoopLimit</code>.
This name can also be used as a user defined macro to set this option globally, for example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This option has two aliases <code>limit</code>, and <code>max</code>.
The aliases can be used interchanged between <code>[</code> and <code>]</code> characters following the <code>\*</code> character, for example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The following two examples show how <code>eval</code> can be used to evaluate simple arithmetic expressions using the Java built-in JShell interpreter.
Note that in the second example the macro <code>eval</code> is preceded with the character <code>#</code> therefore the body of the macro is parsed for other macros before <code>eval</code> itself is invoked.
That way <code>{a}</code> and <code>{b}</code> are replaced with their defined values and <code>eval</code> itself sees <code>1+2</code>.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">Versions prior 1.5.0 used the Nashorn JavaScript interpreter as the default interpreter.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Starting with version 1.5.0 Jamal introduces the <code>!</code> modification character.
When this character is used in front of a macro, then the result of the macro will be evaluated like it was surrounded with <code>{#eval ... }</code>.
This can be used in the case of user-defined macros as well as in the case of built-in macros.
Note, that in the case of user-defined macros the result of the macro will be evaluated by default.
Using the <code>!</code> in front of a user-defined macro will repeat the evaluation.
You can use more than one <code>!</code> characters in front of a macro.
The macro result will be evaluated so many times as many <code>!</code> characters there are.
In case of a user-defined macro the "so many times" should be interpreted as one, by default plus N times.

</div>
<div class="paragraph">

For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

and the output is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example the macro <code>userDefined</code> is <code>{`c}</code>.
User defined macros values are evaluated after the evaluation of the macro itself, therefore when we use <code>{userDefined}</code> we get <code>{c}</code>.
The back-tick character before the macro after the <code>{</code> is identical to the use of an <a href="#ident"><code>ident</code></a> macro: <code>{@ident {c}}</code>.

</div>
<div class="paragraph">

When there is a single <code>!</code> in front of it, then the repeated evaluation results <code>{b}</code>, and so on.
To get the final result, in this case we need three <code>!</code> characters, meaning four post evaluation.

</div>
<div class="paragraph">

You can use this character together with the back-tick macro modifying character.
They do not eliminate each other, because the back-tick prevents pre-evaluation and <code>!</code> provides extra post evaluation.
When using <code>!</code> to evaluate the result of a macro you cannot specify any scripting language.
The evaluation will be Jamal macros evaluation.

</div>
</div>
<div class="sect3">
<h4 id="defer">vii. <code>defer</code></h4>
<div class="paragraph">

since 1.10.0

</div>
<div class="paragraph">

The macro <code>defer</code> evaluates its input only when the processing is finished.
It can be used to execute some macros at the end of the execution, which have side effect, or to modify the final output using some macros.

</div>
<div class="paragraph">

At the place of the the macro the value of the macro is an empty string.
The result of the evaluation, since it happens after the whole input was already processed and we have a final output, is also ignored.
There is, however, a possibility for the content of the macro to read the final result and also to modify it.

</div>
<div class="paragraph">

When the input of the macro is executed the global macro <code>$input</code> contains the output of the processing.
The naming may be strange at first, but consider that this string is the input for the deferred macro evaluation.

</div>
<div class="imageblock">
<div class="content">
<img src="images/input_output.svg" alt="input_output.svg" /></div>
</div>
<div class="paragraph">

If this evaluation defines the global macro <code>$output</code> the value of the macro will be used instead of the original output.

</div>
<div class="paragraph">

The name of the input and output macros can be changed using options.
The options

</div>
<div class="ulist">
<ul>
    <li>
<code>$input</code> with the aliases <code>input</code>, and <code>inputName</code> can specify the name of the input macro.</li>
    <li>
<code>$output</code> with the aliases <code>output</code>, and <code>outputName</code> can specify the name of the output macro.</li>
</ul>
</div>
<div class="paragraph">

As usually the option name can be defined as a macro, like <code>{@define $input=$INPUT}</code>, the aliases can only be used as macro options, like

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

You probably want to use the macro <code>defer</code> with the <code>@</code> character in front of the macro name.
If you use <code>#</code> then the content is evaluated before the macro <code>defer</code> is executed.
In this case the macro sees the evaluated input and will defer the evaluation of that to the end of the execution.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

In the followings we will give some examples.

</div>
<div class="paragraph">

This example is the simplest.
It defers an empty string.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

When the empty string is evaluated nothing happens, the original output is retained:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The second example is a bit more complex:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This example defines a user defined macro that duplicates the input.
In the deferred evaluation the macro <code>$output</code> is defined and it will be the same as the <code>$input</code> repeated.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The next example demonstrates that

</div>
<div class="ulist">
<ul>
    <li>
the name of the input and output macros can be redefined, and</li>
    <li>
multiple <code>defer</code> macros are executed in the order as they were evaluated in the input during the Jamal processing.</li>
</ul>
</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that the definition of the macros <code>$input</code> and <code>$output</code> are local to the <code>block</code> and therefore they have no impact on the second defer.
Since the <code>{#define OUT=|{IN}|}</code> is defind before <code>{#define $output=*{$input}*}</code> the text <code>Framed</code> is enclosed first between <code>|</code> characters and only the result is enclosed between <code>\*</code>.

</div>
<div class="paragraph">

The output is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The next example is almost the same as the previous.
It uses macro options to set the input and output names for the first <code>defer</code> macro:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case there is no need for the <code>block</code> macro, since option setting is always local to the macro where it is set.
The result is the same as in the previous case:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The next example shows that you do not need to use the input at all to set the output.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case the output is an empty string

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The following sample shows that the macros used in the text of <code>defer</code> have to be defined only when it gets executed.
In the example the macro <code>doplikate</code> is not defined when used in <code>defer</code> only at the end of the file.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The output is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The following example is a bit more complex.
In this case the code uses the <code>escape*</code> macro.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case there are two deferred operations.
The first one is the unescaping of <code>escape*</code>.
This is executed first, because the use of the first <code>escape*</code> macro precedes the macro <code>defer</code>.
When this unescaping is finished the result of the processing will be <code>{mememe}Mememe?</code>.
It contains a string that can be interpreted as a macro.
For this reason the macro <code>doplikate</code> is defined as a "verbatim" macro.
This is signalled by the <code>~</code> character after the <code>define</code> keyword.
Verbatim user defined macros are not post evaluated.
When <code>doplikate</code> is invoked in the <code>defer</code> then <code>{mememe}Mememe?</code> will be converted to <code>{mememe}Mememe?{mememe}Mememe?</code>.
This result also will not be evaluated again.

</div>
<div class="paragraph">

However, when we set the macro <code>$output</code> in the line <code>{#define $output={doplikate/{$input}}}</code> why <code>{mememe}Mememe?</code> is not evaluated.
The reason is that the user defined macro <code>$input</code> holding the final result of the Jamal processing is also a verbatim macro.

</div>
<div class="paragraph">

The output is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Although <code>$input</code> is verbatim, <code>$output</code> does not need to be.
This macro is used temporarily by the deferred action to change the output of Jamal processing.
The following example shows that the value of <code>$output</code> is not available as input for <code>defer</code>.
The macro <code>$output</code> can only be set by the input of <code>defer</code> and <code>$output</code> is undefined when the evaluation starts:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This example tries to use the value of the macro <code>$output</code> in the deferred code.
The deferred code can rely on the macros defined during the Jamal processing.
Note, however that only the top level macros are available as all other macros are out of scope and only those, which were defined at the end of the Jamal processing.

</div>
<div class="paragraph">

The macro <code>$output</code>, however, is used in a special way.
Because it serves to pass a modified output from the deferred code it is undefined before the deferred code start.
The result of this evaluation is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>$output</code> gets undefined before the evaluation of each deferred code.
If we extend the previous example and define the output in one deferred code and try to use that in the next one it will still be undefined.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The output is still:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The last example shows that other macros survive and can be used in subsequent deferred actions.
If the macro <code>doplikate</code> is defined in a deferred action then the subsequent deferred actions can use the macro:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

And the output is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect3">
<h4 id="env">viii. <code>env</code></h4>
<div class="paragraph">

since 1.3.0

</div>
<div class="paragraph">

<code>env</code> returns the value of an environment variable.
The macro can also be used to test that an environment variable exists or not.
If the argument to the macro is the name of an environment variable then the result will be the value of the variable.
If the variable is not defined then the macro will result empty string.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

on the machine where the original <code>README.adoc.jam</code> file was converted to ASCIIDOC.

</div>
<div class="paragraph">

If there is a <code>?</code> after the name of the variable name then the macro will result either the <code>true</code> or <code>false</code>.
This can be used to test that an environment variable exists or not.
Testing the value of the environment variable in an <code>{@if ... }</code> macro may be misleading when the value is literal <code>false</code> or an empty string.

</div>
<div class="paragraph">

Starting with Jamal 1.9.0 it is possible to use <code>!</code> after the name of the variable.
In this case the macro will throw exception when the environment variable is not defined.

</div>
<div class="paragraph">

The macro does not only check the environment variables when looking for a configuration value.

</div>
<div class="ulist">
<ul>
    <li>
First it looks at the Java system properties,</li>
    <li>
then it looks at the environment variables,</li>
    <li>
and finally tries to look up the configuration value from the <code>~/.jamal/setting.properties</code> or <code>~/.jamal/setting.xml</code> file.</li>
</ul>
</div>
<div class="paragraph">

When looking up a Java system property the algorithm

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
converts the name of the property to lowercase, and then</li>
    <li>
replaces all <code>_</code> character with a dot <code>.</code> character.</li>
</ol>
</div>
<div class="paragraph">

When looping up a property from the <code>~/.jamal/setting.properties</code> or <code>~/.jamal/setting.xml</code> file the algorithm also removes any <code>JAMAL_</code> or <code>jamal.</code> prefix from the property name.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

This search algorithm tries to follow the naming of the Java system properties, environment and properties.
Also, it makes it possible to define something globvally for the user, or only for the running shell or only for the running JVM.
The more local configuration overrules the broader one using this algorithm.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="import">ix. <code>import</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>import</code> opens a file and reads the content of the file and interprets it as Jamal macro file.
Anything defined in that file will be imported into the scope of the current file.
If the macro opening and closing strings are redefined using the <code>sep</code> macro it will change for the file that imported the other file.
Any user-defined macros defined in the top-level scope of the file will be available in the importing file.

</div>
<div class="paragraph">

Note that the top-level scope of the file may not be the same as the global scope.
If the importing happens

</div>
<div class="ulist">
<ul>
    <li>
from an included file, or</li>
    <li>
from inside a block of from inside a macro, or</li>
    <li>
in scope that was started with a <code>begin</code> macro</li>
</ul>
</div>
<div class="paragraph">

then the "top-level-scope of the file" is the one, that contains the <code>import</code> macro.
If anything is defined into the global scope in the imported file then those macros will eventually be in the global scope and available to anyone later.

</div>
<div class="paragraph">

The output that the processing of the imported file generates is discarded.

</div>
<div class="paragraph">

The syntax of the command is

</div>
<div class="paragraph">

<code>{@import file_name}</code>

</div>
<div class="paragraph">

The name of the file can be absolute, or it can be relative to the file that imports the other file.
Any file name starting with the letters <code>res:</code> are considered to be resource files in Java.
This makes it possible to load macros that are provided with JAR libraries and are on the classpath.
Any file name starting with the letters <code>https:</code> are downloaded from the net.

</div>
<div class="paragraph">

The option <code>[top]</code> can be used along with the <code>import</code>.
In this case a relative file name is relative to the main file that imports the other files.
It is not possible to to step one or a few levels up in the import hierarchy.
The only two possibilities are to import as file relative to the current one or the top level one.

</div>
<div class="paragraph">

Note, however, that using the option <code>[top]</code> does not change the scope of the imports.
The definitions will be exported to the importing scope.
This option only changes the base directory for the file name calculation.

</div>
<div class="paragraph">

Use <code>import</code> to import user-defined macro definitions.

</div>
<div class="paragraph">

Because the textual output from the evaluation of the file is discarded feel free to use text in the file to be imported as documentation.
There is no need to enclose such a text into a <code>{@comment ...}</code> macro.

</div>
<div class="paragraph">

Starting with version 1.5.0 the import macro looks into the file before evaluating it.
If the very first two characters in the file are <code>{@</code> then it evaluates the content using <code>{</code> as macro opening string and <code>}</code> as macro closing string.
This way you can freely import resource files provided in JAR file or through the net even if you use different macro opening and closing strings.
Such import files cannot redefine the macro opening and closing string unless file importing also uses <code>{</code> and <code>}</code>.

</div>
<div class="paragraph">

Starting with version 1.11.0 the import macro has the option <code>noCache</code>.

</div>
<div class="ulist">
<ul>
    <li>
<code>noCache</code> will ignore the cache when downloading resources using <code>https:</code> protocol.
More precisely, it will download the resource from the network and update the cache file with the new content.</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="include">x. <code>include</code></h4>
<div class="ulist">
<ul>
    <li>
since 1.0.0 (core)</li>
    <li>
since 1.7.3 verbatim include</li>
    <li>
since 1.11.0 lines</li>
    <li>
since 1.11.0 noCache</li>
</ul>
</div>
<div class="paragraph">

<code>include</code> reads a file similarly to <code>import</code>, but it starts a new scope for the processing of the included file, and it also results the content of the file included into the main file.

</div>
<div class="paragraph">

Use <code>include</code> to get the content of a file into the main output.

</div>
<div class="paragraph">

The file included can define user-defined macros.
These macros are available only inside the included file unless they are exported.
The included file may redefine the macro opening and closing string, but this works only in the included file only.
The file that includes the other file is not affected by the redefinition of the macro opening and closing string.

</div>
<div class="paragraph">

The macro itself is replaced by the output generated by the processing of the included file.

</div>
<div class="paragraph">

The syntax of the command is

</div>
<div class="paragraph">

<code>{@include [options] file_name}</code>

</div>
<div class="paragraph">

The options are between the <code>[</code> and <code>]</code> brackets.
The options are:

</div>
<div class="ulist">
<ul>
    <li>
<code>includeVerbatim</code> (alias <code>verbatim</code>)  - the file is inserted into the output as it is without processing.</li>
    <li>
<code>top</code> - the file is included relative to the top level file. This option cannot be defined as macro.</li>
    <li>
<code>lines</code> - the option can list ranges of lines to include.
The individual ranges can be separated by <code>,</code> or <code>;</code>.
The ranges are specified as a range of numbers separated by <code>..</code>.
A one line range can be specified by a single number.
The range start line number can be larger than the end line number.
In that case that lines appear in reversed order from the start to the end.
The lines are included in the order as the ranges specify.
Using this option you can rearrange the order of the lines.
This option cannot be defined as macro.</li>
    <li>
<code>noCache</code> will ignore the cache when downloading resources using <code>https:</code> protocol.
More precisely, it will download the resource from the network and update the cache file with the new content.</li>
</ul>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

Note that the macro <code>include</code> is NOT inner scope dependent.
It means that <code>{#include {@options includeVerbatim} ...}</code> will not work.
The options set inside the <code>include</code> macro have no effect when the <code>include</code> macro is executed.

</div>
<div class="paragraph">

The option set outside, like <code>{@options includeVerbatim}{#include ...}</code> will work.
However, it will change the behaviour of all <code>include</code> macros executing later, while the option is in effect.

</div>
<div class="paragraph">

This type of use is not recommended and is included only for backward compatibility and may later be removed.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The name of the file can be absolute, or it can be relative to the file that includes the other file.
Any file name starting with the letters <code>res:</code> are considered to be resource files in Java.
This makes it possible to load macros that are provided with JAR libraries and are on the classpath.
Any file name starting with the letters <code>https:</code> are downloaded from the net.

</div>
<div class="paragraph">

The option <code>[top]</code> can be used along with the <code>include</code>.
In this case a relative file name is relative to the main file that includes the other files.
It is not possible to to step one or a few levels up in the include hierarchy.
The only two possibilities are to include as file relative to the current one or the top level one.

</div>
<div class="paragraph">

The number of includes are limited to 100 in depth.
A file can include another, which can again include another and so on, but only to the maximum depth of 100.
This depth limit is set because an included file can be included many times.
It is possible to implement recursion.
This possibility does not mean that it is clever to do it.
If the recursion does not end the include macros would drive the macro resolution into an infinite loop.
This limit prevents this to happen.

</div>
<div class="paragraph">

The limit can be modified setting the environment variable <code>JAMAL_INCLUDE_DEPTH</code>.

</div>
</div>
<div class="sect3">
<h4 id="use">xi. <code>use</code></h4>
<div class="paragraph">

since 1.0.0 since 1.7.4 can define an alias for an already loaded macro

</div>
<div class="paragraph">

<code>use</code> declares a Java class as a built-in macro or defines an alias name for an already loaded built-in macro.

</div>
<div class="sect4">
<h5 id="_how_macros_are_loaded">How macros are loaded</h5>
<div class="paragraph">

Built-in macros are classes that implement the <code>javax0.jamal.api.Macro</code> interface.
When they are registered as services, they are automatically loaded when any application embedding Jamal creates a new processor.
In other words, the classes that implement some macros are automatically discovered if

</div>
<div class="ulist">
<ul>
    <li>
they are in the <code>module-info</code> module descriptor <code>provides</code> directive and/or</li>
    <li>
the fully qualified name of the class is listed in the JAR file in the  <code>META-INF/services/javax0.jamal.api.Macro</code>
file.</li>
</ul>
</div>
<div class="paragraph">

Some libraries contain <code>javax0.jamal.api.Macro</code> implementations that are not loaded by the service loader.
These classes are not advertised in the <code>module-info</code> file or in the <code>META-INF</code> directory.
To use these classes as built-in macros the macro <code>use</code> has to be invoked.

</div>
</div>
<div class="sect4">
<h5 id="_defining_the_use_of_a_java_class_as_a_macro">Defining the use of a Java Class as a Macro</h5>
<div class="paragraph">

The use of the <code>use</code> macro (sic) is the following:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example, the class <code>javax0.jamal.scriptbasic.Basic</code> implements a macro.
The class has to be on the classpath, and it has to implement the interface <code>javax0.jamal.api.Macro</code>.
It will be defined and available as a globally available built-in macro under the alias <code>scriptbasic</code>.

</div>
<div class="paragraph">

The keyword <code>global</code> can be missing:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case, the macro will only be available in the current scope and will not be available as soon as the current scope is closed.
Note that built-in macros cannot be exported.
They can be declared either local for the current scope or global.

</div>
<div class="paragraph">

Usually, the alias part (the <code>as scriptbasic</code> in the example above) can also be omitted:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In such a case the macro will be registered with the name that the macro provides by itself as an identifier.
The interface <code>Macro</code> defines a method <code>String getId()</code> that should return the identifier of the macro.
The interface also provides a default implementation that returns the lower-case version of the class name (w/o the packages).
If there is no defined alias following the <code>as</code> keyword then the one returned by the macro implementation will be used.

</div>
<div class="paragraph">

It is recommended to use the alias in the Jamal source file.
That way there is no ambiguity when reading the code what the name of the built-in macro is.

</div>
</div>
<div class="sect4">
<h5 id="_defining_the_use_of_a_java_class_as_a_macro_2">Defining the use of a Java Class as a Macro</h5>
<div class="paragraph">

The syntax of the command is the same to define an alias for an already loaded macro.
If there is no <code>.</code> dot character in the "klass name", then the command will know that it cannot be a class name.
In that case it will look for an already loaded built-in macro with the given name and it will register it again with the new alias.
Following this both names can refer to the same macro.

</div>
<div class="paragraph">

The alias will refer to the built-in macro, which is the closest reachable in the current scope.
If the evaluation leaves the current scope, and the <code>global</code> keyword was not used then the alias will also go out of the scope.
It is independent of the macro itself.
The macro may be reachable via the original name.

</div>
<div class="paragraph">

The alias will refer to the built-in macro, which is the closest reachable in the current scope even if the <code>global</code> keyword is used.
In this case the alias will be global, and the macro will be reachable via the alias even if the original name was not registered global and goes out of scope.

</div>
</div>
</div>
<div class="sect3">
<h4 id="script">xii. <code>script</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

The macro <code>script</code> defines a user-defined macro that is interpreted as a script.
The syntax of the command is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If <code>script</code> is followed by <code>/</code> character then the next identifier is the type of the script.
If this is missing the default, <code>JShell</code> is assumed.
You can use any scripting language that implements the Java scripting API and the interpreter is available on the classpath.

</div>
<div class="paragraph">

The parameters are handled differently from the parameters of the user-defined macros defined using the <code>define</code> built-in macro.
In that case, the parameter strings are replaced by the actual value strings during evaluation.
In this case, the parameters are used as global variable names.
Using these names, the actual values are injected into the context of the script before evaluation.

</div>
<div class="paragraph">

This also implies that you do not have the total freedom of parameter names.
For <code>define</code> we can use any string as a parameter id so long as long it contains no <code>,</code> and no <code>)</code>.
In this case, you should care about the syntax of the scripting language used.
The parameter names have to be valid identifiers in the scripting language as they are used as such.

</div>
<div class="paragraph">

The value injection converts the actual value of the parameter to script values.
Because the parameters are injected into global variables Jamal performs some conversions.
Without this, all the scripts that use some integer or floating-point calculation were supposed to convert them first from the string.

</div>
<div class="paragraph">

Therefore, Jamal tries to convert the actual parameters.

</div>
<div class="ulist">
<ul>
    <li>
First it tries treating it as an integer.
If it succeeds then the global variable having the name as the parameter will hold an integer value.</li>
    <li>
If the conversion to an integer does not work then it tries the same with double.</li>
    <li>
If that is also not feasible then it will check if the actual value is lower case <code>true</code> or <code>false</code>.
In this case the global variable of the script will be a <code>Boolean</code> value.</li>
    <li>
In any other case, the global variable will get the actual value as a string assigned to it.</li>
</ul>
</div>
<div class="paragraph">

The actual scripting implementation may not have <code>Integer</code>, <code>Double</code> or <code>Boolean</code> type but there will be some script type corresponding.

</div>
<div class="paragraph">

The following sample shows a simple script that implements a looping construct using JavaScript.
The source Jamal file:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The output generated by the Jamal preprocessor:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that the JavaScript code itself contains the macro opening and closing strings.
This does not do any harm so long as long these are in pairs.
It is a better practice to change the separator characters to something that cannot appear in the body of the script macro.

</div>
<div class="paragraph">

Starting with version 1.3.0 Jamal support the JShell built-in scripting engine.
You can define <code>JShell</code> as script type.
In this case the content will be passed to the Java built-in JShell engine.
When the script is invoked the result of the macro will be the string that is printed by the JShell script.
If this is empty then the value of the last Java shell snippet will be used.
The argument names have to be valid Java identifiers.
When the script is invoked they will be defined as <code>String</code>, <code>long</code>, <code>double</code> or <code>boolean</code> variables.
They will get the actual values of the parameters.
The type depends on the actual value.
If the value string can be interpreted as a <code>long</code> then it will be converted to <code>long</code>.
If the string is not a long, but can be converted to <code>double</code> then the variable will be <code>double</code>.
If the string is either <code>true</code> or <code>false</code> case insensitive then the variable will be <code>boolean</code>.
In any other case the variable will be declared as <code>String</code>.

</div>
<div class="paragraph">

In short, the arguments to a <code>script</code> macro will be converted to the following types in this order, whichever first succeeds:

</div>
<div class="ulist">
<ul>
    <li>
<code>int</code></li>
    <li>
<code>double</code></li>
    <li>
<code>boolean</code></li>
    <li>
<code>String</code></li>
</ul>
</div>
<div class="paragraph">

For more information and details see the section <a href="#JShell">[JShell]</a>

</div>
</div>
<div class="sect3">
<h4 id="JShell">xiii. <code>JShell</code></h4>
<div class="paragraph">

since 1.3.0 (core)

</div>
<div class="paragraph">

The Java built-in scripting engine JShell can be used to define macros.
The macro <a href="#script">script</a> and the macro <code>JShell</code> can be used to define JShell scripts.

</div>
<div class="paragraph">

The macro <code>JShell</code> can be used to define methods, classes, variables and so on.
The macro <a href="#script">script</a> is to define a script macro that later can be invoked like any other used defined script macro.

</div>
<div class="paragraph">

When the macro <code>JShell</code> or <a href="#script">script</a> is used the result is empty string.
When the script is invoked the output of the macro will be what the script prints out to the standard output.

</div>
<div class="paragraph">

The following example defines a global method, a script using the method and then it invokes the script.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

It simply prints

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>JShell</code> defines the method <code>hello()</code>.
The macro <code>script</code> is a script macro that has one argument.
Note that this argument is also the name of the global variable <code>world</code>.
This global variable is used in the JShell snippet defined above but this is not an argument to the method.
When we use the line

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Jamal will invoke the JShell interpreter executing

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

first, and then

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Since the method <code>hello()</code> prints out to the standard output <code>Hello, My Dear</code> this is the result of this macro.

</div>
<div class="paragraph">

If there is some error in the code of the snippet then Jamal will throw a <code>BadSyntax</code> exception.
In this exception the causing exception is included if there is any.
This causing exception should give some clue to find out what the issue is.
If that does not help then using the interactive JShell program should help.

</div>
<div class="paragraph">

Creating a JShell execution environment is expensive.
To do that the Java starts a new JVM process for the JShell.
Many Jamal macro processing do not need the extra JShell.
It would slow down Jamal if we created the JShell process for each and every processor even when it is not needed.
The JShell environment is created only when it is unavoidable.
It is when the processing <em>uses</em> the first time a JShell type script.
It not when the script is defined.
It is when the defined script is used.
In the above example the JShell interpreter is created when the <code>{hello ...}</code> macro is evaluated.
Only at that point all the prior definitions that were defined in any <code>{@JShell }</code> macro are fed into the JShell interpreter.

</div>
<div class="paragraph">

The consequence is that you do not need to worry about the performance when you design a macro library.
The processed files can bravely import the macros even if they declare JShell usage.
It will not slow down the processing creating a JShell engine, only when the JShell engine is needed.

</div>
<div class="paragraph">

Another important side effect of this optimization is that you will not get an error message for an erroneous <code>{@JShell }</code> macro until the JShell interpreter is used.
When you design a macro library it is not enough to import the library to discover possible errors in the JShell scrips.
The scripts have to be used to manifest the error.

</div>
</div>
<div class="sect3">
<h4 id="for">xiv. <code>for</code></h4>
<div class="ulist">
<ul>
    <li>
since 1.0.0 (core)</li>
    <li>
since 1.5.0 multi-argument <code>for</code></li>
    <li>
since 1.6.3 backtick string separator value list</li>
    <li>
since 1.7.3 options between <code>[</code> and <code>]</code></li>
    <li>
since 1.7.8 option <code>evalist</code></li>
</ul>
</div>
<div class="paragraph">

The macro <code>for</code> can be used to repeat the same text many times.
This macro has two forms.
The syntax of the macro is either

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The <code>variable</code> or the multiple variables can be used in the content and will be replaced for each iteration with the respective element on the comma-separated list.
When there are multiple variables then the sub-list of the values is separated using the <code>|</code> character.
Both the command and the <code>|</code> character can be modified to use something else instead of these characters.

</div>
<div class="paragraph">

The list of the values can also be separated by other strings.
If the macro <code>$forsep</code> is defined, like in

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

then the arguments will be separated by one or more spaces.
The string between the <code>(</code> and the <code>)</code> will be split using the string defined in <code>$forsep</code> as a regular expression.

</div>
<div class="paragraph">

Similarly, if the macro <code>$forsubsep</code> is defined, like in

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

then the values for the different variables will be separated by a semicolon.

</div>
<div class="paragraph">

Note that the macros <code>$forsep</code> and <code>$forsubsep</code> can also be defined inside the <code>for</code> macro body in case the macro is used with the <code>#</code> character at the start.
In this case the definition of these macros is limited to the evaluation of this very <code>for</code> macro.

</div>
<div class="paragraph">

Starting with version 1.7.3 you can also define these options locally using the format

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

where the options can be

</div>
<div class="ulist">
<ul>
    <li>
<code>$forsep</code>, <code>separator</code> to specify the separator regular expression</li>
    <li>
<code>$forsubsep</code>, <code>subseparator</code> to specify the sub separator regular expression</li>
    <li>
<code>trimForValues</code>, <code>trim</code> to trim off the sapces from the values</li>
    <li>
<code>skipForEmpty</code>, <code>skipEmpty</code> to skip empty parameter list (see below)</li>
    <li>
<code>lenient</code> for lenient operation (see below)</li>
    <li>
<code>evaluateValueList</code>, or <code>evalist</code> to instruct the loop that the list of the values between the <code>(</code> and <code>)</code> has to be evaluated.</li>
</ul>
</div>
<div class="paragraph">

For example the macros:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case the value of the macro <code>$forsep</code> is effective inside the <code>for</code>, but it is undefined outside.
Another example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result the same output:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

Using the <code>#</code> character in front of a built-in macro in the first version instead of <code>@</code> will make the content evaluated before the macro.
The content evaluates in a freshly opened scope, which is usually closed before the built-in macro evaluation.
It means that any local definitions inside the macro use go out of scope when the built-in macro evaluates.

</div>
<div class="paragraph">

However, some built-in macros, like âfor<code>, rely on the macrosâ value defined inside.
We call these built-in macros "inner scope dependent" macros because they depend on the inner scope.
If you look at the Java implementation of such macros, you can see that they implement the interface `InnerScopeDependent</code>.
If a built-in macro is inner scope dependent, it evaluates while the internal scope is still open.
In this case, the scope closes after the built-in macro evaluation finishes.

</div>
<div class="paragraph">

If the built-in macro is surrounded with an <code>{@eval ...}</code> macro, that is already evaluated in the outer scope.
Using the <code>{#!macro ...}</code> way, where the <code>!</code> character directs Jamal to execute the macroâs result is the same as using the <code>{@eval...}</code> surrounding the macro.
The "post evaluation" runs in the outer scope.

</div>
<div class="paragraph">

The macro <code>for</code> is inner scope dependent.

</div>
<div class="paragraph">

Also, the second example shows that the same effect can also be reached using the macro options.
Macro options are always between <code>[</code> and <code>]</code> characters in case of the core built-in macros.
The <code>(</code> and <code>)</code> characters are used in case of extension package macros.
Some extensions package macros use the first line of the macro content to fetch parameters.
Note, however, that the use of the <code>(</code> and <code>)</code> characters to enclose options is only a convention.
A 3rd party macro can decide to use any character pair as they like.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The number of the actual values separated by <code>|</code> character should be the same as the number of the variables in the for loop.
If this is not the case then the macro evaluation will throw a bad syntax exception.
This can be suppressed with the option <code>lenient</code>.
If the option <code>lenient</code> is used then extra values are ignored and missing values are presented as empty strings.
Note that this same option controls how user defined macro arguments are paired to the parameters.

</div>
<div class="paragraph">

Starting with version 1.5.3 you can fine tune how a <code>for</code> loop treats the empty elements.
By default, the empty elements in a for loop value list represent empty strings.
The loop body will be rendered with these values replacing the loop variable with an empty string.
In a situation like that the use of the option <code>lenient</code> is also a must if the loop has multiple variables.
In that case the empty value will be split into a one, empty string value for the empty value in the loop and this has to be assigned to the multipled loop variables.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will not work, because the empty string cannot be split into two strings (it results one empty string when it is split).
On the other hand the following code will work

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

and it will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

as both <code>k</code> and <code>z</code> are empty strings.
Here, you can see two versions.
The first one is declaring the <code>lenient</code> option inside the <code>for</code> macro, the second one is using the option, which is more coincise and shorter.

</div>
<div class="paragraph">

This default behaviour can be altered using the option <code>skipForEmpty</code>.
If this option is used the <code>for</code> loop will skip the empty values.
The previous example with this option:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will evaluate to an empty string.
Also note that in this case there is no need to use the option <code>lenient</code>.
That is because the empty value is skipped and there is no issue splitting it up into a less number of values than the number of the loop variables.

</div>
<div class="paragraph">

The example above contains one loop value and that loop value is an empty string.
There can be more than one empty values in a for loop and empty and non-empty values can be mixed.
The option <code>skipForEmpty</code> and the alias <code>skipEmpty</code> works in any of those cases.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will also result an empty string and

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Sometimes the values for the <code>for</code> loop come from some macro.
In that case the <code>for</code> macro should start with the <code>#</code> character, otherwise the macro will not be evaluated to the list of values.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

That is because the content of the macro <code>for</code> is not evaluated before the <code>for</code> loop is executed because we used the <code>@</code> character.
The result of the for loop is not evaluated.
We will have to attend to that, but first we have to solve the issue that the macro <code>list</code> is not evaluated.
To do that we need to use the <code>#</code> character in front of the <code>for</code> loop.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result an empty string:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The reason is that the content of the <code>for</code> macro is evaluated before executing the macro itself.
That way the macro reference <code>{list}</code> will become <code>x,y,z</code>, but the same time the part, which is after the <code>=</code> is also evaluated.
The evaluation will define the macro <code>z</code> to be <code>zz</code>, but this macro is within the scope of the <code>for</code> macro.
As soon as the <code>for</code> macro execution is finished the definition of <code>z</code> is lost.
What we want is to protect the body of the <code>for</code> macro from evaluation before <code>for</code> the macro is executed and we want it to execute after.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>{@ident ...}</code> is evaluated and its result is the content of the macro and it is not evaluated further before the evaluation of the macro <code>for</code>.
The macro <code>for</code> gets evaluated and then the output is evaluated because the macro is preceeded with the back-tick character, which is a shorthand for the core built-in macro <code>eval</code>.
This evaluation defines <code>x</code>, <code>y</code> and <code>z</code>.

</div>
<div class="paragraph">

Because the case that we want to evaluate the list part of the <code>for</code> loop but not the body part is so common there is an option that helps with this.
The option <code>evaluateValueList</code> (alias <code>evalist</code>) instructs the macro <code>for</code> to evaluate the value list before iterating through it.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

We still need the <code>!</code> character in front of the <code>for</code> but we could get rid of the <code>ident</code> macro and the extra level of nesting.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

The use of <code>evalist</code> and using <code>#</code> along with <code>ident</code> is not exactly the same.
Using <code>#</code> will evaluate the part not protected by <code>ident</code> before the <code>for</code> macro evaluates its input.
The option <code>evalist</code> tells the macro to evaluate the string it has already found that time between the opening <code>(</code> and closing <code>)</code>.

</div>
<div class="paragraph">

The consequence is that using <code>evalist</code> you can have a list that contains the <code>)</code> character.
The end of the list was already determined when the evaluation starts.
Using <code>#</code> in front of the macro identifier will cause problem if the list contains the <code>)</code> character.

</div>
<div class="paragraph">

In situations like that you can use the special list separator that we discuss in the next paragraph.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Sometimes you may need to do a for loop over values that contain the <code>)</code> character.
With the conventional form of the <code>for</code> macro it was not possible, because the first <code>)</code> character terminates the list of the values.
Jamal 1.6.3 introduced a new, backward compatible format for the <code>for</code> macro.

</div>
<div class="paragraph">

Instead of the <code>(</code> and <code>)</code> characters it is possible to use an arbitrary string to denote the end of the values.
When the first character after the keyword <code>in</code> (after optional spaces) is the backtick character then the string till the next backtick character will be used to denote the end of the values.
The starting and ending backtick should also be part of the string closing the values.

</div>
<div class="paragraph">

For example the following

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that this alternative format can only be used for the values list and not for the variables.
The variables of the for loop should always be listed between <code>(</code> and <code>)</code> characters.

</div>
</div>
<div class="sect3">
<h4 id="if">xv. <code>if</code></h4>
<div class="paragraph">

The <code>if</code> macro makes it possible to evaluate the content conditionally.
The syntax of the macro is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Here we use <code>/</code> as a separator character but this is not hardwired.
The <code>if</code> macro uses the <a href="#argsplit">Standard Built-In Macro Argument Splitting</a> to parse the body of the macro.

</div>
<div class="paragraph">

The result of the evaluated macro will be the <code>then content</code> when the <code>test</code> is true, and the <code>else content</code> otherwise.

</div>
<div class="paragraph">

When no options are specified the <code>test</code> is true, if

</div>
<div class="ulist">
<ul>
    <li>
it is the literal string <code>true</code> (case-insensitive),</li>
    <li>
it is a signed or unsigned integer number, and the value is not zero,</li>
    <li>
it is any other string that contains at least one non-space character, except</li>
    <li>
when the <code>test</code> is the literal string <code>false</code> (case-insensitive).</li>
</ul>
</div>
<div class="paragraph">

The literal <code>false</code> is false using any combination of upper and lower case letters with or without surrounding spaces.

</div>
<div class="paragraph">

The evaluation of the test string can be modified using options.
There are  8 options.

</div>
<div class="paragraph">

The first three options are "boolean" options.
It is enough to use their keyword between the <code>[</code> and <code>]</code>.
(See examples later.)

</div>
<div class="ulist">
<ul>
    <li>
<code>blank</code> will test true if the test string is blank, it is empty or contains spaces only.</li>
    <li>
<code>empty</code> will test true if the test string is zero length and does not contain even spaces.</li>
    <li>
<code>not</code>  will negate the test result.</li>
    <li>
<code>or</code> can be used with the numerical options when more than one test is needed.
When you specify more than one <code>equals</code>, <code>lessThan</code>, or <code>greaterThan</code> option the test is true if any of the tests is true.
This is the default behaviour, so this option is not needed.
Setting <code>or=false</code> has no effect and is not the same as using the option <code>and</code>.
This option is included only to add readability if needed.</li>
    <li>
<code>and</code> can be used with the numerical options when more than one test is needed.
When you specify more than one <code>equals</code>, <code>lessThan</code>, or <code>greaterThan</code> option test is true if all the tests are true.
This option cannot be used together with the option <code>or</code> and it also needs multiple numeric options.</li>
</ul>
</div>
<div class="paragraph">

Note that the options <code>and</code> and <code>or</code> are simple boolean options.
They can appear only once in the list of the macro options.
You cannot write <code>{@if [equals=3 or equals=4 or equals=6] /9/a/b}</code>.
It is recommended to use the <code>or</code> or the <code>and</code> option following the first numeric option.
For example, <code>{@if [lessThan=7 and greaterThan=2] /6/it is in (2,7)/out of range}</code> .
If you feel it is more readable you can put these options at any place in the list.

</div>
<div class="paragraph">

The following options will do numerical comparison.
When any of them are used then the test string is converted to a number.
If the test string is not a number an error will happen.
These options are integer options, which means that you have to specify a number following them like <code>lessThan=55</code>.

</div>
<div class="ulist">
<ul>
    <li>
<code>lessThan</code> (aliases <code>less</code>,<code>smaller</code>, <code>smallerThan</code>) is true if the number is less than the value.</li>
    <li>
<code>greaterThan</code> (aliases <code>greater</code>, <code>bigger</code>, <code>biggerThan</code>, <code>larger</code>, <code>largerThan</code>) is true if the number is greater than the value.</li>
    <li>
<code>equals</code> (aliases <code>equal</code>, <code>equalsTo</code>, <code>equalTo</code>) is true if the number is equal to the value.</li>
</ul>
</div>
<div class="paragraph">

There is no separately "less than or equal" and "greater or equal" option.
If, for example, you want to test that a number is greater than or equal to a certain value then you can use the <code>greaterThan</code> and the <code>equals</code> options together.
An alternative is to use the <code>lessThan</code> option along with the boolean <code>not</code> option.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

The option <code>blank</code> is needed in case you have a special case when the literal <code>false</code> should be treated positively.
The need for this option arose when we wanted to create a macro supporting XML documents.
The <a href="#default"><code>default</code></a> macro generated <code>&lt;tag&gt;</code> from <code>{tag}</code> when the tag was not defined.
At the same time <code>{tag something}</code> was converted to <code>&lt;tag&gt;something&lt;/tag&gt;</code>.
The two different cases were separated using an <code>if</code> macro.
The definition was something like this:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The only problem was that the <code>if</code> macro was not able to handle the case <code>{tag false}</code>.
In that case the evaluation results

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

instead of <code>&lt;tag&gt;false&lt;/tag&gt;</code>.

</div>
<div class="paragraph">

To fix that we need to use the option <code>blank</code> as in the following sample:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This will result the desired

</div>
<div class="listingblock">
<div class="content"></div>
</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The following examples show a few cases, as demonstrations:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

The above example is generated running the samples.
The composition of the sample is somewhat complex.
It uses sophisticated macros that heavily use the macro evaluation order.
These macros also check that the <em>if</em> macro really works the way it is supposed to.
If you are interested in how it looks, check the file <code>README.adoc.jam</code> and search for the string "avraka kedabra".
This string, avraka kedabra appears only once in the Jamal source file.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="ident">xvi. <code>ident</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>ident</code> is an extremely simple macro.
It just returns the body of the macro.
The name stands for <em>identity</em>.
It is helpful in some complex cases when you need to fine-tune the macro evaluation order.
It is the case when Jamal should not evaluate some macro while it should others in a local scope.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

When we define the macro <code>c</code> we do not want to evaluate <code>{a}</code>.
There are two reasons for this.
One is that at that point, <code>a</code> is not defined.
The other is to use the actual definition of <code>a</code> whenever the macro <code>c</code> is used.
On the other hand, we want to evaluate <code>b</code>.
This way, <code>c</code> will become <code>{a}92</code>.
When later <code>c</code> is used, and we already defined <code>a</code> as <code>14</code>, then the final result will be <code>1492</code>.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that <code>c</code> is defined using the <code>#</code> character before <code>define</code>.
At the same time, we used <code>@</code> in front of <code>ident</code>.
Jamal evaluates the content of <code>define</code>.
In this evaluation <code>{@ident {a}}</code> is evaluated and <code>{b}</code> is also evaluated.
<code>{@ident {a}}</code> becomes <code>{a}</code>.
<code>{b}</code> becomes '92`.
This way <code>c</code> will become <code>{a}92</code>.

</div>
<div class="paragraph">

If we redefine later <code>a</code> to some different value then <code>c</code> will follow this change.
If we redefine <code>b</code> the value of <code>c</code>
will still remain <code>1492</code> assuming <code>a</code> is still <code>14</code>.

</div>
<div class="paragraph">

You can also use this macro to enclose some text into a block where the definitions are local.
For example, you may want to modify the macro start and end strings temporarily.
In that case, you can use the <code>sep</code> macro at the start and use the <code>sep</code> macro without argument to reset the previous value.
You can also enclose the setting of the macro start and end string into an <code>ident</code> block.

</div>
<div class="paragraph">

Specific use of <code>ident</code> is to insert a "null length separator" into the text.
Imagine that the macro start and close strings should be <code>((</code> and <code>))</code>.
We may want to use those because the curly braces are used in the text frequently, and so are the single <code>(</code> and <code>)</code> characters.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

Generally, it is not a good idea to use opening and closing strings that contain repeated characters.
The reason for this is precisely the situation we describe in the example below.
It isnât easy to read the closing strings when there is more than one.
For example, how many <code>)))))))</code> double closing <code>))</code> are there in this string?
In the example, we use these strings to demonstrate how you can deal with a situation like that in case you have to.
The possibility shows Jamalâs power, but it does not mean that you should utilize all these tricks.
It is better to choose better opening and closing strings if the default <code>{</code> and <code>}</code> do not work.
Many times <code>{%</code> and <code>%}</code> are good choices.
The source of this document also uses these opening and closing strings.
I used the <code>ident</code> macro between the characters of these strings to have them in the output.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

As an example, we may want to define a macro that creates a markdown image reference:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This example needs a space after the closing <code>)</code> character at the end of the image url.
If we did not have this space, the macro would be closed one <code>)</code> sooner than needed.
To avoid that, we insert an extra space after the image reference.
Usually, it is not a problem.
In some situations, however, we do not want to have that extra space there.
It is possible using <code>ident</code>.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>((@ident))</code> will prevent Jamal from interpreting the <code>)</code> character after the <code>.png</code> as the first character of a macro closing string.
At the same time <code>((@ident))</code> produces no character, not even a space in the output.
You can also use the macros <code>comment</code> and <code>block</code> the same way.

</div>
<div class="paragraph">

Be aware that the macro <code>ident</code> consumes the white spaces (including newlines) that follow the <code>ident</code> keyword.
It is to avoid extra white spaces when tabulation gives better readability.
If you need the whitespace (e.g., newline) in the output, you can put those in the <code>ident</code> macro.

</div>
<div class="paragraph">

Starting with Jamal 1.5.0, there is a built-in language syntax similar to <code>ident</code>.
If a macro is preceded with a

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

backtick character, then the macro will not be evaluated.
The above example, which is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

can also be written as:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This built-in "ident" can be used many times if you want to postpone the macro evaluation multiple times.
You can have

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

or

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

as many times as it makes sense.
You can use this macro modification character together with the <code>!</code> character.
There is no restriction on ordering the <code>!</code> and the backtick characters in case they are used together.
If you use many of them in extreme cases, you can mix them.
Note, if the macro does not get evaluated fully, Jamal may not preserve the order of these characters in the output.

</div>
</div>
<div class="sect3">
<h4 id="verbatim">xvii. <code>verbatim</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>verbatim</code> is a special macro, which affects macro evaluation order and is used for advanced macro evaluation.
To understand what it does, we have to discuss first how Jamal evaluates the different macros.

</div>
<div class="paragraph">

Jamal parses the input from the start towards the end and copies the characters from the input to the output.
Whenever, when it sees a macro then it evaluates the macro, and the result of the evaluation is copied to the output.
This evaluation is done in three steps, two of those are recursive.
Letâs have a simple example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>a</code> is defined simply.
It is <code>this is it</code>.
Whenever <code>a</code> is evaluated it will result the string <code>this is it</code>.

</div>
<div class="paragraph">

The macro <code>b</code> has the value <code>{a}</code>.
When macro <code>b</code> is defined the content <code>{a}</code> is not evaluated before the definition because there is a <code>@</code> before the <code>define</code>.
When <code>b</code> is evaluated it results <code>{a}</code> and then before using this output in place of the use of the macro <code>b</code> this result is evaluated by Jamal as a new input.
This second recursive evaluation will result in the string <code>this is it</code>.

</div>
<div class="paragraph">

The macro <code>c</code> is defined using the <code>#</code> character before the keyword <code>define</code>, therefore Jamal will process the body of the macro before processing the built-in macro <code>define</code> itself.
Essentially, it will evaluate <code>{b}</code> first.
It will put the resulting characters after the <code>=</code> sign in the definition of <code>c</code> and then it will evaluate the <code>define</code> built-in macro.

</div>
<div class="paragraph">

As we discussed above when this time <code>{b}</code> is evaluated it results <code>{a}</code>, which also gets evaluated and then it results <code>this is it</code>.
Therefore, the value of the macro <code>c</code> is <code>this is it</code> and that is what we see in the output:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

This way the evaluation of a macro is done in three steps:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
Evaluate the body of the macro unless the macro is built-in and starts with the character <code>@</code>.
For this evaluation Jamal starts a new scope and evaluate the macros following these three steps.</li>
    <li>
Evaluate the macro itself.
If it is a built-in macro then it calls the <code>evaluate()</code> method of the Java class that implements the macro.
If the macro is user defined then it evaluates as described in the section <a href="#define"><code>define</code></a>.</li>
    <li>
If the macro is user-defined or starts with a <code>!</code> character then Jamal evaluates the output of the macro.
If it contains macros then evaluate those using these three steps.</li>
</ol>
</div>
<div class="paragraph">

As you can see the first, and the last steps are recursive steps.
The first step can be skipped using the <code>@</code> character, but only in case of built-in macros.
The second step cannot be skipped, and after all, there is no reason to do so.
However, the third step can be

</div>
<div class="ulist">
<ul>
    <li>
skipped using the macro <code>verbatim</code> if the macro is user defined, or</li>
    <li>
enforced using a <code>!</code> in front of the <code>@</code> or <code>#</code> character if the macro is built-in.</li>
</ul>
</div>
<div class="paragraph">

The use of the <code>!</code> character in front of a built-in macro is similar to the use of the macro <code>eval</code>.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

can be shortened as

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The only difference is that the <code>eval</code> macro consumes the white-space characters at the start of its argument.
In the example above the <code>{#eval macro ...}</code> before its evaluation is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The body starts with a new line.
The macro <code>eval</code> deletes this new line, while using the <code>!</code> in front of the macro does not.

</div>
<div class="paragraph">

The syntax of the <code>verbatim</code> macro is the following:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The <code>verbatim</code> macro has to be followed by a user defined macro use.
If we modify the previous example to use <code>verbatim</code> we can do it the following way:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this example <code>{@verbatim b}</code> is the same as <code>{b}</code> in the previous example.
The only exception is that after <code>b</code> is evaluated the result is not processed further for macros.
It is used directly as the value of the new macro <code>c</code> because of the <code>verbatim</code> keyword.
The value of <code>c</code> will be <code>{a}</code>.
Also, when we use <code>{c}</code> the result of <code>c</code> is scanned as a third step for further macros.
In this case, there is one because the value of the macro <code>c</code> is <code>{a}</code>, that further evaluates to <code>this is it</code>.
On the other hand when we use <code>{@verbatim c}</code> then the result <code>{a}</code> is not processed any further.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Note that the macro <code>verbatim</code> is a special one because it is hardwired into the evaluation logic of Jamal and it is not a "real" built-in macro.
In other words, if there are user-defined macros and built-in macros then <code>verbatim</code> is one level deeper built-in than the other built-in macros.
To understand this may be important if you want to write your own built-in macros as Java classes.
You cannot "redefine" <code>verbatim</code>.

</div>
<div class="paragraph">

You cannot use <code>verbatim</code> together with the <code>!</code> macro modifying character.
Their meaning is exactly opposite.

</div>
<div class="sect4">
<h5 id="_fine_points_of_macro_evaluation">Fine points of macro evaluation</h5>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">This section does not apply to any version prior 1.2.0</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Recall the three steps of macro evaluation:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
Evaluate the body of the macro unless the macro is built-in and starts with the character <code>@</code>.
For this evaluation Jamal starts a new scope and evaluate the macros following these three steps.</li>
    <li>
Evaluate the macro itself.
If it is a built-in macro then it calls the <code>evaluate()</code> method of the Java class that implements the macro.
If the macro is user defined then it evaluates as described in the section <a href="#define"><code>define</code></a>.</li>
    <li>
If the macro is user-defined or starts with a <code>!</code> character then Jamal evaluates the output of the macro.
If it contains macros then evaluate those using these three steps.</li>
</ol>
</div>
<div class="paragraph">

These points can be refined further:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
First the beginning of the macro text is evaluated if the text contains macros.
The user-defined macro name itself in the text can be the result of another macro.
For example, calling the macro named <code>white</code> can be <code>{white}</code>.
If there is another macro <code>{@define black=white}</code> then using <code>{{black}}</code> will result the same as <code>{white}</code>.
In this case first <code>{black}</code> is evaluated to <code>white</code> and then <code>{white}</code> is evaluated.
There may be multiple macros at the start.
For example, we can have <code>{@define bla=whi}</code> and <code>{@define ck=te}</code>.
Using these we can get <code>{{bla}{ck}}</code> to <code>{white}</code>.</li>
    <li>
The second step is that the content of the macro is split up into the macro name and the parameters.
Recall that the first character that is not part of the name of the macro is used as a parameter separator character.
This is a non-space character that cannot be part of a macro name, or the first character that follows the spaces after the macro name.
The splitting process takes care of the macro calls that are in the arguments.
For example the macro <code>{q/a/{b|c/g}}</code> will get two parameters.
The first parameter to <code>q</code> is <code>a</code>, the second is <code>{b|c/g}</code>.
The first <code>/</code> character separates the name of the macro from the parameters.
At the same time, it defines which character is used as a separator character.
The second <code>/</code> character separates the first and second parameters.
The third <code>/</code> is not used as a separator character because it is inside a macro use.
This character is not used as a separator character, even when the macro <code>{b|c/g}</code> is evaluated, because in that macro use the separator character is <code>|</code>.
Similarly, if we look at the macro <code>{q/a/{b/c}}</code> then the parameters are <code>a</code> and <code>{b/c}</code>.
In this case, the third <code>/</code> is ignored and is not considered as a parameter separator.
Although this character is a parameter separator when the macro <code>b</code> is evaluated.
The characters that are inside further macro calls are not used as parameter separators.</li>
    <li>
When the parameter strings are identified then they are evaluated one after the other.
In the previous example <code>a</code> and <code>{b|c/g}</code> are evaluted before <code>q</code> is evaluated.
When the macro <code>q</code> is evaluated, the parameters already contain the result of the evaluation of these macro uses.</li>
</ol>
</div>
<div class="paragraph">

The versions of Jamal prior 1.2.0 (so up to and including 1.1.0) evaluated user-defined macros simpler.
In those versions the body of the macro was evaluated as a whole in one simple step.
The parameter separator character was used in a very simple splitting operation.
Those versions did not check if the separation character was inside an embedded macro use.

</div>
<div class="paragraph">

That way it may have happened that some macro was evaluated, and the resulting string contained the separator character.
This is usually not what the users intend, and creates a bug that is hard to find.
In the previous examples the evaluation of the macro use <code>{q/a/{b/c}}</code> would evaluate first <code>a/{b/c}</code>.
After that, the splitting takes place on the resulting string.

</div>
<div class="paragraph">

Usually, this results in the same as the new algorithm.
However, if the definition of <code>b</code> is for example <code>{@define b(Z)=shoot/Z}</code>, then the evaluated string will be <code>a/shoot/c</code>.
In this case the final evaluation will get (prior 1.2.0) <code>{q/a/shoot/c}</code>.
It will result in three parameters.
This is probably an error because <code>q</code> in the example needs only two.
Even, if the option <code>lenient</code> was declared the result is not the one the author of the text expected.

</div>
<div class="paragraph">

The versions 1.2.0 and later can revert to the earlier algorithm if the Jamal code defines the option <code>omasalgotm</code>.
Using the macro <code>options</code> as <code>{@options omasalgotm}</code> you can switch to the old algorithm.
The name of the option is an abbreviation and is hard to remember to distract from the use of it.
If you need this option then your Jamal source file does some shady thing that it should not.
This option is obsolete from the very start of the introduction and is meant as a last resort to keep backward compatibility.
It is removed from Jamal versions 1.10.0 and later.

</div>
</div>
</div>
<div class="sect3">
<h4 id="sep">xviii. <code>sep</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

This macro can be used to change the macro opening and closing string.
In the examples, in this documentation, we use <code>{</code> as the opening string and <code>}</code> as the closing string.
Jamal itself does not impose any such predefined setting.

</div>
<div class="paragraph">

The syntax of the command is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If both the start and end strings are a single character, for example <code>[</code> and <code>]</code> then you can use the simple form:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

A two-character argument to the macro <code>sep</code> will use the first character as macro opening string and the second as macro closing string.
You can also use three character.
For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The separating character between the opening and closing string characters can be any character except any of the opening or closing string character.
It is also possible to use the format

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

separating the opening and closing strings with spaces.
This format is very readable and convenient in many cases.
For example, you can specify

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

and other, similar opening and closing strings.
There are some definitions that can be misleading.
For example, the following declarations can be interpreted by humans in multiple ways.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Many human readers would tend to think the second.
The syntax however matches the <code>\S+\s+\S+</code> pattern.
To avoid any such ambiguous situation Jamal does not allow the use of this form when

</div>
<div class="ulist">
<ul>
    <li>
the opening string</li>
    <li>
starts and ends with the same character</li>
    <li>
is at least three characters long, and</li>
    <li>
it does not contain the first character inside</li>
</ul>
</div>
<div class="paragraph">

or

</div>
<div class="ulist">
<ul>
    <li>
the closing string</li>
    <li>
starts with the same character as the opening string</li>
    <li>
at least two character long</li>
    <li>
does not contain this character after the first character.</li>
</ul>
</div>
<div class="paragraph">

These seem to be complex rules.
They contain a bit of heuristics.
They were designed to let the users use the most readable format of the <code>sep</code> macro.
The same time they help avoid unreadable declarations and errors.

</div>
<div class="paragraph">

If in doubt then you can always use the last, definitive syntax that does not rely on any heuristics.
This syntax is described in the followings.

</div>
<div class="paragraph">

If the syntax does not match and of the previous cases, Jamal will use the syntax that is defined with the following "regular expression" like line:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

There can be whitespace characters after the macro name <code>sep</code>, and at the end, but these are optional.
The first non-space character is used as a separator character that separates the macro opening string from the macro closing string.
It is usually the <code>/</code> character, but it can be anything that does not appear in the opening string.
Prior to 1.3.0 this character could appear in the closing string, although it is not recommended.
Starting with 1.3.0 it is an error.
It is possible to use spaces inside the macro opening and closing strings, but it is not recommended.
Leading and trailing spaces of the opening and closing strings will be trimmed off.
That way

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

are all the same.
Note though that <code>{@sep / [[ /]]}</code> would be logical in the above list, but it is missing.
There is only one space (<code>\s+</code>) separator between the <code>/</code> and <code>/]]</code> strings, and it matches the

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

format, and it will set the separators to <code>/ [[</code> and <code>/]]</code>.

</div>
<div class="paragraph">

Note that the macro <code>sep</code> should be terminated with the original macro closing string.
The macros after it already have to use the altered opening and closing strings.
This makes it a bit tricky when you want to use a closing string that happens to contain the original closing string.
Assume that the current opening string is <code>{</code> and the current closing string is <code>}</code>.
You want to have <code>{{</code> as an opening string and <code>}}</code> as a closing string.
This is often the choice when using Jamal in a programming language environment that heavily uses <code>{</code> and <code>}</code> braces.
In this case

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will not work.
It will set the closing string empty which is not valid and will raise an error.
To overcome the situation you have to change the separator strings in two steps:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Also, do not forget that the end you should call <code>sep</code> without an argument twice:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

unless you want this change till the end of the scope.

</div>
<div class="paragraph">

The change of the opening and the closing strings always happens in pairs.
You cannot change only the closing or only the opening string.
You can, however, redefined one of them to be something that is different from the current value, and the other one to be the same as the current value.
To do that you will need two steps for the reason described above.
Even in this case, the definitions should specify both strings.

</div>
<div class="paragraph">

The change of the opening and closing strings is valid only for the current scope.
Returning from the scope the original value is restored even if the strings were set to different values multiple times.

</div>
<div class="paragraph">

Neither the opening nor the closing string can be empty.
Trying to set it to an empty string will raise an error.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="ulist">
<ul>
    <li>
Jamal 1.0.0 got into an infinite loop in case of an empty opening string.
Later versions will signal an error.</li>
    <li>
Jamal 1.3.0 extended the <code>sep</code> macro.</li>
</ul>
</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

When the opening and the closing strings are set, the original values are stored in a list.
It is possible to use the macro <code>sep</code> without any separator string specification.
In this case the macro call is nothing more than the macro name, like <code>{@sep}</code>.
In this case the last opening and closing strings are restored.
The strings are stored in a stack, so you can define new strings and return to the previous one many times nesting the redefinitions.

</div>
<div class="paragraph">

The following sample is executed with <code>{</code> and <code>}</code> as opening and closing string at the beginning.
After that, it sets the strings to <code>[[</code> and <code>]]</code>.
This is used to define the macro <code>apple</code>.
After this when the scope of the next macro, <code>comment</code> starts the opening and closing strings are still <code>[[</code> and <code>]]</code>.
Starting a new scope does not change the macro opening and closing strings.

</div>
<div class="paragraph">

It would be an error to use <code>[[@sep]]</code> inside the scope of the macro <code>comment</code> at this point trying to restore the original macro opening and closing strings.
In that scope at the start, there are no opening and closing strings to be restored.
The opening and closing strings do not belong to this scope, they are simply inherited from the outer scope.
On the other hand, the sample can change the strings, as it does to <code>&lt;&lt;</code> and <code>&gt;&gt;</code>.
Using these it defines the macro <code>z</code>.
Note that <code>z</code> is not exported from this scope.

</div>
<div class="paragraph">

After that the <code>&lt;&lt;@sep&gt;&gt;</code> restores the opening and closing strings to the inherited one and with these, it defines <code>a1</code>
and <code>a2</code> and exports them.
Note, that <code>a1</code> will have the actual value of the macro <code>z</code> evaluated inside the scope of the <code>comment</code> macro.
The macro <code>a2</code> starts with <code>@</code> thus the body is not parsed during the macro definition and thus the value of <code>a2</code> is <code>[[``z`</code>]]` unevaluated, as it is.
Similarly, the macro <code>a3</code> will have the value <code>{z}</code>.

</div>
<div class="paragraph">

All these macros are evaluated because the macro <code>comment</code> is started with the character <code>#</code>.
It means that Jamal will evaluate the body of the macro before evaluating the macro itself.

</div>
<div class="paragraph">

After the <code>comment</code> macro the separators are set back to the original value <code>{</code> and <code>}</code> automatically.
Then we have a simple macro definition that defines <code>z</code> and then this <code>z</code> is used, and the exported <code>a1</code>, <code>a2</code>, and <code>a3</code>.

</div>
<div class="paragraph">

<code>z</code> is now, as defined in the outer scope is <code>SSS</code>.
<code>a1</code> has the value that came from the macro <code>z</code> as it was defined inside the scope of the macro <code>comment</code>.
Macro <code>a2</code> has the value ``[[``z``]]`` that has nothing special in the current scope.
The macro <code>a3</code> has the value <code>{z}</code> which is evaluated after the macro <code>a3</code> is replaced with its value.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect3">
<h4 id="export">xix. <code>export</code></h4>
<div class="paragraph">

since 1.0.0 (core)

</div>
<div class="paragraph">

<code>export</code> moves the definition of one or more user-defined macros to a higher scope.

</div>
<div class="paragraph">

The syntax of the macro is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

exporting one or more macros, comma separated.

</div>
<div class="paragraph">

When a macro is defined it is defined in the current scope (unless the name contains one or more <code>:</code>, or it starts with <code>:</code>).

</div>
<div class="paragraph">

The Jamal input file is one scope and if there is a macro defined in the file on the top-level then that macro can be used anywhere inside the file.
However, when Jamal includes a file into another it opens a new scope.
The macro <code>include</code> should include some text in the output.
It can be used, for example, to split up a long document into chapters and then use Jamal to create the final output.
In that case, the macros defined in the included files should not interfere with the definitions in the file that includes the other one.
To accomplish this separation Jamal starts a new scope when it includes a file.
Scopes are embedded into each other like a call stack in a programming languages.
When a macro is defined in scope it is available in that scope and all other scopes that are opened from that scope.
When a macro is redefined in a scope the redefined value is used until the scope is closed.
In the case of an included file, the user-defined macros defined in the included file disappear as soon as the included file processing is finished.

</div>
<div class="paragraph">

The setting and resetting of the separator characters is also limited to the scope.
You cannot reset the separator character to a value that was set in a lower, or higher scope.

</div>
<div class="paragraph">

Jamal opens a new scope in the following cases:

</div>
<div class="ulist">
<ul>
    <li>
When a file is processed with the <code>include</code> macro.</li>
    <li>
When macros are evaluated inside another macro.
This is the case of user-defined macros or in case of built-in macros when they are started with the character <code>#</code>.</li>
    <li>
Other built-in macros that are not part of the core package may also open and close scopes.
Built-in macros are provided in form of JAR files.</li>
</ul>
</div>
<div class="paragraph">

Note that the macro <code>import</code> does NOT open a new scope to process the imported file.
This is because of the aim of <code>import</code> is to have the macros defined in the imported file available in the file that imports them.

</div>
<div class="paragraph">

In the following example, we define the macro <code>Z</code> in the scope of the macro <code>comment</code>.
The <code>{@define Z=13}</code> is evaluated before the <code>comment</code> macro because we use the <code>#</code> in front of the <code>comment</code> macro.
When the <code>comment</code> evaluation finishes the scope is closed and <code>Z</code> is not defined anymore.
In the second case the macro <code>Z</code> is exported using the <code>export</code> macro.
The <code>export</code> macro moves the definition of the macro from the scope of the <code>comment</code> to the enclosing scope.

</div>
<div class="paragraph">

The example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

You cannot export a macro defined in a higher scope.
You can use those macros and you can reference them.
It is just that you cannot export them to the enclosing scope because they do not belong to the current scope.
You can export a macro that was defined in a lower scope and was exported to the current scope.
However, you cannot export a macro that was defined in a lower scope but was not exported to the current scope, simply because they do not exist anymore when the export is executed.
You cannot export macros from the top-level scope, because there is no enclosing scope above that.

</div>
</div>
<div class="sect3">
<h4 id="options">xx. <code>options</code></h4>
<div class="paragraph">

since 1.0.3 (core)

</div>
<div class="paragraph">

The options macro can be used to alter the behavior of Jamal.
The options can be listed <code>|</code> separated as an argument to the macro.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro does not check the optionâs name.
For example the option <code>lenient</code> is used by Jamal itself and by the <code>for</code> macro, however, if you type <code>{@options lenuent}</code> misspelled the <code>options</code> macro will not recognize it as an error.
The option <code>lenuent</code> could be used by some other macros and the <code>options</code> macro just treats it as a new option.
It stores the options specified, and they can be queried by any other built-in macros.
Any extension can define and use any options it likes.

</div>
<div class="paragraph">

The scope of the options is local, or global the same way as the scope of user-defined macros.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

Technically the options are stored along the user-defined macros.
These objects cannot be evaluated only queried for their stored value, which is either <code>true</code> or <code>false</code>.
It is possible to export the options to higher layers the same way as macros.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

An option can be switched off using the <code>~</code> character in front of the options name.
There can be no space between the <code>~</code> character and the name of the option.

</div>
<div class="paragraph">

Similar to user defined macros, options containing a <code>:</code> are global.
You can define a global value for an option using the <code>:</code> prefix in front of the name of the option.
This character will be removed from the name, the same way as it is removed from the name of global user defined macros.
If the <code>:</code> is inside the name then it remains part of the name, and it is not possible to have a local definition for the option.

</div>
<div class="paragraph">

The options implemented currently:

</div>
<div class="sect4">
<h5 id="_code_lenient_code"><code>:lenient</code></h5>
<div class="paragraph">

In the lenient mode, the number of the arguments to a user-defined macro do not need to be exactly the same as it is defined.
If there are fewer values provided then the rest of the arguments will be an empty string in the lenient mode.
Similarly, if there are more arguments than needed the extra arguments will be ignored.
The option <code>lenient</code> is global.
Nothing will stop you to redefined the option in a local scope, but macro evaluation will use the global value even in that scope.

</div>
<div class="paragraph">

The lenient mode also applies to the multi variable for loops.
In lenient mode there may be more or less actual values than the number of loop variables.

</div>
</div>
<div class="sect4">
<h5 id="_code_omasalgotm_code_since_1_2_0_lt_1_10_0"><code>omasalgotm</code> (since 1.2.0 &lt; 1.10.0)</h5>
<div class="paragraph">

Jamal 1.2.0 changed a lot from 1.0.0 in the way how macros are evaluated.
The version 1.2.0 is safer and more flexible and is compatible with the older versions in most of the cases.
There may be some cases when the macros are not compatible with the old version.
In this case, it is recommended to alter the macros so that they do not rely on the old evaluation algorithm.
In the meantime, it is possible to use the option <code>omasalgotm</code> to force Jamal to the old evaluation style.

</div>
<div class="paragraph">

Version 1.10.0 and later versions do not implement this option.
The code providing compatibility with the old evaluation style is not included in the distribution.

</div>
</div>
<div class="sect4">
<h5 id="_code_nl_code_since_1_3_0"><code>nl</code> (since 1.3.0)</h5>
<div class="ulist">
<ul>
    <li>
1.3.0 till 1.7.6 introduces the option <code>nl</code>.</li>
    <li>
1.7.7 removes this option</li>
</ul>
</div>
<div class="paragraph">

When this option is in effect then all new-line characters are copied into the output.
This was the default and non-changeable behavior prior 1.3.0.

</div>
<div class="paragraph">

In versions 1.3.0 and later it is possible to escape a newline character that is following a macro closing string.
For example the macro <code>{@define z=1}</code> can be followed by a <code>\</code> character before the newline.
That way <code>{@define z=1}\</code> will tell Jamal that the next newline character is not needed in the output.
The backslash, the newline character following it and the spaces that may be between the two will be skipped.

</div>
<div class="paragraph">

The <code>\</code> character has to follow the macro closing string immediately, spaces are not allowed.
There can be spaces between the <code>\</code> character and the following new-line character.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

A backslash in any other places is just a character and will not escape a newline.
This escaping works only following built-in and user defined macros.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">Since this is a slight behavioral change in the input processing, therefore it may break some of the source files.
We decided to change the default behavior because there is a little chance to have escaped new-line characters in existing <code>jam</code> files.
On the other hand, we envision that with the introduction of this feature most of the Jamal source files will use this feature.
We wanted to avoid starting every new Jamal source file with the <code>nl</code> option setting.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

With the release 1.7.7 this option is not available anymore.
The default behavior, skipping new lines after a <code>\</code> character that follows a macro close string cannot be switched off.

</div>
</div>
<div class="sect4">
<h5 id="_code_failfast_code_since_1_7_8"><code>failfast</code> (since 1.7.8)</h5>
<div class="paragraph">

This option tells the Jamal processor to stop at the first error.
With the version 1.7.8 and later the Jamal processor does not stop the processing at the first syntax error.
This helps the discovery of all the syntax errors in the input.
Prior 1.7.8 Jamal stopped at the first error.
The user could fix the error, restart Jamal and repeat this process for each error one by one.
The feature introduced in 1.7.8 collects all the errors and displays them at the end of the processing as an aggregate error.

</div>
<div class="paragraph">

Using this option Jamal 1.7.8 and later revert to the old behaviour.

</div>
</div>
</div>
<div class="sect3">
<h4 id="try">xxi. <code>try</code></h4>
<div class="paragraph">

since 1.5.0 (core)

</div>
<div class="paragraph">

The macro try will evaluate its content and return the result.
The evaluation does not open a new scope, just like in the case of the macro <code>{@eval }</code>.
In case the evaluation results an error then the result will be empty string.

</div>
<div class="paragraph">

For example the following macro will produce an empty string.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>macro</code> is not defined, but the error is caught with the macro <code>try</code>.

</div>
<div class="paragraph">

The macro <code>try</code> can also be used to include the error message into the output.
If we use an <code>!</code> character right after (no spaces) the <code>try</code> keyword the result will be the error message.
If there is no error then the result is the result of the evaluated text inside the macro.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">Jamal usually allows you to have spaces in places like the keyword <code>try</code> and the following <code>!</code> or <code>?</code>.
For example you can have spaces between the macro name <code>define</code> and the <code>!</code>, <code>?</code> or <code>~</code> character.
In case of <code>try</code> there must be no space.
The reason for this strictness is that <code>try</code> is followed by arbitrary text evaluated by the macro itself.
Allowing space between the macro name and the <code>!</code> or <code>?</code> character would result ambigous syntax.
We could not tell if the <code>!</code> or <code>?</code> character is part of the macro use or already the first starting character of the text to be evaluated.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

If we use a <code>?</code> character right after (no spaces) the <code>try</code> keyword then the result will be the string <code>true</code> if there was no error and <code>false</code> is there was an error.
This can be used to test the "computability" of the text.

</div>
<div class="paragraph">

The macro <code>try</code> should only be used to debug certain macro files.
When an error happens, and the <code>try</code> macro catches the exception thrown the scopes may not be properly closed.

</div>
</div>
<div class="sect3">
<h4 id="escape">xxii. <code>escape</code></h4>
<div class="ulist">
<ul>
    <li>
since 1.5.4 (core)</li>
    <li>
since 1.9.1 (<code>escape*</code>)</li>
</ul>
</div>
<div class="paragraph">

The built-in macro escape is a special one, like <code>verbatim</code>.
The implementation of the macro overrides the method that parses the macro seeking for the matching closing string.
The default implementation is simply searches for the first closing string taking into account the nested macros.
The syntax of `escape, however, is special.

</div>
<div class="paragraph">

The syntax of the macro is the following:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The part <code>SEP</code> between the back-tick characters can be any string, which does not appear inside the escaped string.
This string along with the back-ticks has to be repeated at the end of the macro before the macro end string.

</div>
<div class="paragraph">

The result of the macro is the escaped string without any modification.
The macro itself is very simple.
The speciality of macro is that it overrides  the text parsing that locates the end of the macro.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

This macro originally was intended to be used by Jamal itself when evaluating a user defined macro, which was defined using different macro opening and closing strings than the actual one.
In this case the macro opening and closing strings, which were in effect at the time of the macro definition are replaced with the current one.
That way the macros defined inside the macros will be evaluated even though the macro opening and closing strings have changed.

</div>
<div class="paragraph">

At the same time the current macro opening and closing strings had no special effect by the time of the macro definition.
If there is any current macro opening and closing string in the definition of the macro then they should not play a special role.
They get protected using the <code>escape</code> macro automatically.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

There is a special way to escape content from macro evaluation.
In this special case you can write a <code>*</code> right after the <code>escape</code> keyword, as

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

In this case the escape not only escapes the macro opening and any other otherwise processable content but also results the protecting shell around the escaped string.
The result in this case will be

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

You will never see in your output the <code>escape*</code> macro.
It is eliminated after the whole file was processed by Jamal invoking a so called closer.
The closer object is automatically created and registered by Jamal when the <code>escape*</code> macro is used.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

This macro comes in handy when you want to protect something from evaluation that should never be interpreted as a macro text.
For example you can have a Maven property in a <code>pom.jam</code> file, like <code>${project.build.sourceDirectory}</code>.
You can redefine at the start of the file the macro open and macro close strings, but it may be simpler to protect the one or few special strings.
A normal escape, without the <code>\*</code> after the keyword hides the content from evaluation only once.
When the <code>*</code> character is used the content will be protected even when it is deep inside macros and target for many different evaluations.
It should only be eliminated at the very end of the processing on the top level, which is done automatically.

</div>
<div class="paragraph">

The macro <code>escape*</code> will liberate the content.
The liberation will happen after the whole content was already processed in a so called "closer".
Built-in macros implemented in Java have the possibility to register an object to be executed after the processing of the whole content.
Such an object is a closer and it can be used to close resources that were open by the macro during processing.
During the execution of this closer the code can access and modify the final result.

</div>
<div class="paragraph">

The macro <code>escape*</code> registers a closer that will invoke the the Jamal processing again for the output with a flag that tells every <code>escape*</code> macro to release its content.

</div>
<div class="paragraph">

In some cases it may happen that you want the <code>escape*</code> closer run before some other closers, but the <code>escape*</code> happens later than the register of the other closer.

</div>
<div class="paragraph">

The different closers are invoked in the order they were registered.
You may use a macro <code>X</code>, which also creates a closer.
The use of the macro <code>X</code> precedes the first evaluation of an <code>escape*</code> macro.
In this case the closer registered by <code>X</code> would be evaluated before the <code>escape*</code> closer.
If you want the <code>escape*</code> closer to run first, you have to use the macro <code>escape*</code> before <code>X</code>.
The simplest form is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

It essentially escapes an empty string delimited by two backtick delimited empty strings.
(Hence the four back ticks.)
After the content liberation the result will be an empty string, thus there is no harm using this before any <code>X</code> macro.

</div>
<div class="paragraph">

The closer registered by <code>escape*</code> works very simple.
It simply evaluates the result setting a flag that tells <code>escape*</code> that this time it should ignore the <code>\*</code> character.

</div>
</div>
<div class="sect3">
<h4 id="require">xxiii. <code>require</code></h4>
<div class="paragraph">

since 1.6.4

</div>
<div class="paragraph">

Since Jamal has many different versions, there may be a need to stick to a specific version.
To do that, the built-in macro introduced in version 1.6.4 <code>require</code> can be used.
The syntax of the macro is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The evaluation of this built-in macro will check that the currently running version of Jamal is

</div>
<div class="ulist">
<ul>
    <li>
less-than</li>
    <li>
greater-than</li>
    <li>
lees-then or equal</li>
    <li>
greater than or equal, or</li>
    <li>
equal</li>
</ul>
</div>
<div class="paragraph">

to/than the version specified after the comparison sign.
The use of the comparison sign is optional.
The default comparison is greater than or equal.

</div>
<div class="paragraph">

If the comparison fails, the evaluation of the macro will result in an error.
If the current version matches the requirement, then the result of the macro is an empty string.

</div>
<div class="paragraph">

For example:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

You can specify only one version in a <code>require</code> macro.
If you want to specify a minimum and a maximum version, you should use two <code>require</code> macros.

</div>
<div class="paragraph">

Using a version before <code>1.6.4</code> in the <code>require</code> argument is an error.

</div>
</div>
<div class="sect3">
<h4 id="macro">xxiv. <code>macro</code></h4>
<div class="paragraph">

since 1.11.0

</div>
<div class="paragraph">

The macro named <code>macro</code> is a special one that is needed only in rare cases.
The original purpose of the macro was to support the import of macros from sources where the macro names do not conform to Jamal macro naming.
A hypothetical library, built-in macro package may import macros from a property file, where the property names contain <code>.</code> dots.
These names are not permitted in Jamal.
The implementation then either provides extra built-in macros to access the values or converts the names to conforming ones.
The first approach loses the aim of the pure import.
The second approach forces the users to remember the transformations, and it may be a source of name collisions.

</div>
<div class="paragraph">

The solution is the use of the macro <code>macro</code>.
The syntax of the macro is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro will evaluate the macro that has the name <code>original macro name</code> without any parameters.
The catch is that the <code>original macro name</code> does not need to conform the naming of Jamal.
It can be any string.

</div>
<div class="paragraph">

The evaluation of the macro without parameters is a reasonable use case, because the imported macros usually just assign a string to a name.
If the macro is a "proper" Jamal macro with a non-conforming name, then it can be evaluated with arguments in a special way.
To do that the option <code>alias</code> has to be used.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will evaluate the macro <code>my.weird.macro</code> with the arguments <code>1</code> and <code>2</code> and <code>3</code>.
When the parameter <code>alias</code> is used the macro <code>macro</code> does not evaluate the macro, but instead it creates an alias to the macro.
The alias is also returned and can be used as in the example.
If the automatically generated alias is <code>_1</code> then the above example will evaluate through the intermediary step:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

and the macro at this point will be the same user defined macro, which is named <code>my.weird.macro</code>.
The automatically generated macro has the format <code>_n</code> where <code>nnn</code> is a number usually starting with 1 and increasing by one for each macro.
If it happens to be defined then the counting skips the number.
This alias has a scope inside the user defined macro use, and it is not exported from there.

</div>
<div class="paragraph">

If you want to use the alias many times you can select a name yourself.
In this case the format is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

After this you can write

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

When the name of the alias is given and not generated the name is exported and can be used later.
Note that the macro <code>#block</code> is used to omit the output of the macro, which is the alias itself in this case.

</div>
<div class="paragraph">

The macro <code>macro</code> does not care if the original macro is defined in a higher scope.
The only thing that matters is that the macro is defined.

</div>
<div class="paragraph">

You can force the macro <code>macro</code> to search for the original macro only in the global level.
To do that use the option <code>global</code>.
This option, however, does not alter the scope of the new aliases in case an alias is created.
The alias will be created in the current scope for generated aliases, or one level higher (exported) for specified aliases.
If the specified alias contains one or more <code>:</code> characters then the macro will be defined with the alias in the global scope.
This is the same behaviour that the macro <code>define</code> follows.

</div>
<div class="paragraph">

Note that there is no restriction on the alias.
You can use any string as alias, however, there is no point to use and alias that you cannot use later as a Jamal compliant macro name.
The macro named <code>macro</code> is a special one needed only in rare cases.
The original purpose of the macro was to support the import of macros from sources where the macro names do not conform to Jamal macro naming.
A hypothetical library, built-in macro package may import macros from a property file, where the property names contain <code>.</code> dots.
Jamal does not permit these names as identifiers.
The implementation provides extra built-in macros to access the values or converts the names to conforming ones.
The first approach loses the aim of pure import.
The second approach forces the users to remember the transformations, and it may be a source of name collisions.

</div>
<div class="paragraph">

The solution is the use of the macro <code>macro</code>.
The syntax of the macro is

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro will evaluate the macro with the name <code>original macro name</code> without any parameters.
The catch is that the <code>original macro name</code> does not need to conform to the naming of Jamal.
It can be any string.

</div>
<div class="paragraph">

Evaluating the macro without parameters is a good use case because the imported macros usually assign a string to a name.
If the macro is a "proper" Jamal macro with a non-conforming name, then it can be evaluated with arguments in a particular way.
To do that, the option <code>alias</code> has to be used.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will evaluate the macro <code>my.weird.macro</code> with the arguments <code>1</code> and <code>2</code> and <code>3</code>.
When the parameter <code>alias</code> is used, the macro <code>macro</code> does not evaluate the macro, but instead, it creates an alias to the macro.
The alias is also returned and can be used as in the example.
If the automatically generated alias is <code>_1</code>, then the above example will evaluate through the intermediary step:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro <code>_1</code> at this point will be the same user-defined macro, as the one named <code>my.weird.macro</code>.
The automatically generated macro has the format <code>_n</code> where <code>nnn</code> is a number usually starting with 1 and increasing by one for each macro.
If it happens to be defined, then the counting skips the number.
This alias has scope inside the user-defined macro use, and it is not exported from there.

</div>
<div class="paragraph">

If you want to use the alias many times, you can select a name yourself.
In this case the format is:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

After this, you can write

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

When the alias' name is given and not generated, the name is exported and can be used later.
Note that the macro <code>#block</code> is used to omit the macroâs output, which is the alias itself in this case.

</div>
<div class="paragraph">

The macro <code>macro</code> does not care if the original macro is defined in a higher scope.
The only thing that matters is that the macro is defined.

</div>
<div class="paragraph">

You can force the macro <code>macro</code> to only search for the original macro at the global level.
To do that, use the option <code>global</code>.
This option, however, does not alter the scope of the new aliases in case an alias is created.
Jamal will create the alias in the current scope for generated aliases or one level higher (exported) for specified aliases.
If the specified alias contains one or more <code>:</code> characters, then Jamal will define the macro with the alias in the global scope.
It is the same behavior that the macro <code>define</code> follows.

</div>
<div class="paragraph">

Note that there is no restriction on the alias.
You can use any string as an alias.
However, there is no point in using an alias that you cannot use later as a Jamal compliant macro name.

</div>
<div class="paragraph">

<code>macro</code> behaves similar to the normal use of the macros when the macro is not defined.
If an alias is to be created, <code>macro</code> will create the alias and return it even when the original macro is undefined.
If this returned name is used later, an exception may occur.
This is the same for user-defined macros and built-in macros as well.
Note, however, that undefined user-defined macros may revert to the macro <code>default</code> if present.
There is no such fallback for built-in macros.

</div>
<div class="paragraph">

When <code>macro</code> tries to evaluate an undefined original macro, it will revert to the <code>default</code> in case of a user-defined macro, or will result an error if the macro is built-in.

</div>
<div class="paragraph">

You can use this macro to create aliases for standard macros with proper names.
It is not a requirement to alias a macro that has a non-identifier string as a name.

</div>
<div class="paragraph">

The macro <code>macro</code> can invoke weirdly named built-in macros directly or create aliases for them.
To do that, the parameter <code>type</code> has to be set to <code>builtin</code>, <code>built-in</code>, or <code>built in</code>.
The behavior will be the same as for user-defined macros.
If you want to emphasize that you use the macro for user-defined macros, you can set the parameter <code>type</code> to <code>userdefined</code>, <code>user-defined</code>, or <code>user defined</code>.

</div>
</div>
<div class="sect3">
<h4 id="log">xxv. <code>log</code></h4>
<div class="paragraph">

since 1.12.3

</div>
<div class="paragraph">

This macro results and empty string and sends the input to the log output.
The macro has one parameter, <code>level</code> that may specify the logging level.
The default level is <code>INFO</code>.

</div>
<div class="paragraph">

The usage of the macro is, for example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
</div>
<div class="sect3">
<h4 id="debug">xxvi. <code>debug</code></h4>
<div class="paragraph">

since 1.12.3

</div>
<div class="paragraph">

The macro <code>debug</code> can be used to start the debugger from the Jamal source code.
It is an extra way to start the debugger in case setting an environment variable or system variable would be too difficult.

</div>
<div class="paragraph">

It is important to note, it will only work if the debugger is on the module path or on the classpath.
It is also important to note that the macro only works if there is no debugger configured in the environment variables, or in the system properties or configured in the <code>.jamal</code> directory.

</div>
<div class="paragraph">

The macro has the following syntax:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The macro has the following options:

</div>
<div class="ulist">
<ul>
    <li>
<code>using</code> (aliases <code>debugger</code>, <code>selector</code>) can specify the debugger connection string.
This is the same connection string that you can use in the environment variable <code>JAMAL_DEBUG</code> or system property.</li>
</ul>
</div>
<div class="paragraph">

YOu can switch off and on the debugger inside the input using the options <code>on</code> and <code>off</code>.

</div>
<div class="ulist">
<ul>
    <li>
<code>on</code> the debugger is switched on.</li>
    <li>
<code>off</code> the debugger is switched off.</li>
</ul>
</div>
<div class="paragraph">

You cannot use the <code>on</code> and <code>off</code> options together.
Doing so will result in an error.

</div>
<div class="paragraph">

The options <code>on</code>, <code>off</code>, and <code>using</code> are technically all aliases, which means that a user defined macro or option of the same name does not affect the macro.

</div>
<div class="ulist">
<ul>
    <li>
<code>noDebug</code> is an option that can be used via the <code>options</code> macro to switch the debugger off globally for the whole file, or for the part where the option is in effect.
It is possible to use this option as a parameter to the macro, however, in this case the effect is the same as the parameter <code>off</code>.</li>
    <li>
<code>lenient</code> is an option that can be used via the <code>options</code> macro.
When this option is on, the fact that a global and external debugger is defined will not result in an error.</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="nullmacro">4. Special NoName User Defined Macro</h3>
<div class="paragraph">

There is a special user defined macro that has no name.
It is automatically created by Jamal every time it is needed.
This user defined macro is used whenever the macro closing string follows the macro opening string directly.
It can be used when you want to insert the macro opening string into the text but you do not want it to be interpreted as a macro opening.
For example the following input

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result in the following output:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

If you use this macro inside another macro then the result will be evaluated after the macro itself was evaluated.
For example

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

will result in the following output:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The recommendation is to use this macro only on the top level instead of the longer

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

Also, the macro closing string can be used without any escaping on the top level.

</div>
</div>
<div class="sect2">
<h3 id="argsplit">5. Standard Built-In Macro Argument Splitting</h3>
<div class="paragraph">

This section contains the description of the Standard Built-in Macro Argument splitting.
The text describes the syntax used by some of the built-in macros, which do not implement their syntax parsing.
It is essential when you use these macros, for example, the core <code>if</code> macro.
The text also mentions some Java internals that may be valuable if you intend to develop your built-in macros.

</div>
<div class="paragraph">

A built-in macro accesses the input as one single string.
Technically the input parameter of the method <code>evaluate()</code> is not a string.
It is an instance of the class <code>Input</code> implementing the Java interface <code>CharSequence</code>.
That way, we can think of it as a string.
The Java code of the macro is free to interpret this string the way it wants.
Different macros implement their syntax analysis differently.

</div>
<div class="paragraph">

To manage the input and ease the format analysis and interpretation of the input, there is a utility class named <code>InputHandler</code>.
This class defines a method named <code>getParts()</code> which does a simple analysis.
It splits the input into an array of strings in a "standard" way.

</div>
<div class="paragraph">

This method is used, for example, by the implementation of the <code>if</code> built-in macro.
I recommend using this method when there is no special requirement for a macro.
Using this method provides a concise way for macro argument separation.
The way it splits the arguments is defined here so that the extension documentation can refer to this section.

</div>
<div class="paragraph">

The splitting offers three syntax variations:

</div>
<div class="olist arabic">
<ol class="arabic">
    <li>
<code>macroName / a / b / c / ... /x</code></li>
    <li>
<code>macroName   a   b   c   ...  x</code></li>
    <li>
<code>++macroName `regex</code> separator a separator b separator â¦ separator x++`</li>
</ol>
</div>
<div class="paragraph">

In the first case the argument separator character is the first special character.
This character can be any unicode character except

</div>
<div class="ulist">
<ul>
    <li>
letter or digit,</li>
    <li>
back-tick character,</li>
    <li>
white space character.</li>
</ul>
</div>
<div class="paragraph">

If the first non-white space character is a letter or digit character then the second syntax is used.
In this case the input is split up along the white space characters.
Multiple adjacent white space characters are counted as one.
The splitting does not create empty parameters.

</div>
<div class="paragraph">

The third possibility is when the fist non-space character is backtick (<code>++</code>++`).
If the first non-whitespace character after the name of the macro id is a backtick then the parsing expects to be a regular expression till the next backtick.
After the regular expression and after the closing backtick the rest of the input is spit up using the regular expression as separator.

</div>
<div class="paragraph">

Backtick was selected during the design of the syntax to enclose the regular expression because this character is very rare in Java regular expression.
In case you need one inside the regular expression then you have to simply double it, and the parsing will single it back.

</div>
</div>
<div class="sect2">
<h3 id="parparsing">6. Standard Built-In Parameter/Option Parsing</h3>
<div class="paragraph">

In addition to the method ``getParts()`` there is another utility that the built-in macros can use.
It is the class <code>Params</code>.
The class is a utility to parse some particular part of the whole input of the built-in macro looking for parameters.
This particular part is usually the first line of the input, but it can be the part between <code>(</code> and <code>)</code> following the macro ID or the whole input.
This utility is used by some built-in core macros.
The core macros use the <code>[</code> and <code>]</code> characters to enclose the parameters.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">
<div class="paragraph">

The core macros cannot use the <code>(</code> and <code>)</code> characters, because the syntax of the macro <code>for</code> already supported the multi-variable version of it.
Because of that options between <code>(</code> and <code>)</code> could not be distinguished from the variable list.
To be consistent the macros <code>include</code>, <code>import</code>, <code>eval</code>, <code>if</code>, <code>macro</code>, <code>define</code>, <code>log</code> and <code>defer</code> also use the <code>[</code> and the <code>]</code> characters.
This is also a clear visual separation of core macros from other macros provided by extra modules.
The core macro <code>debug</code> uses the whole input, therefore it does not use any of the brackets around the parameters.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The documentation of the parameter handling in these macros is not part of this readme.
It can be found in the separate <a href="PARAMS.adoc">PARAMS</a> document.

</div>
</div>
<div class="sect2">
<h3 id="JamalENV">7. Jamal Environment Variables</h3>
<div class="paragraph">

You do not need to configure Jamal.
The environment variables that you may set to modify the behavior of Jamal are documented in this section.
All environment variables start with the prefix "<code>JAMAL_</code>".
For every environment variable, there is a corresponding system property.
The name of the system property is the same as the environment variable lower case converted and replacing the <code>_</code> to <code>.</code> characters.
For example, for the environment variable <code>JAMAL_CHECKSTATE</code>, the system property is <code>jamal.checkstate</code>.
First, the system property is consulted, and the environment variable has only effect when the system property is not defined.
The following sections describe the individual environment variables.

</div>
<div class="sect3">
<h4 id="_code_jamal_connect_timeout_code"><code>JAMAL_CONNECT_TIMEOUT</code></h4>
<div class="paragraph">

This variable can define the connection timeout value for the web download in millisecond as unit.
Jamal can download resources when the name of a file starts with the prefix <code>https://</code>.

</div>
<div class="paragraph">

The default value for the timeouts is 5000, meaning five seconds.

</div>
<div class="paragraph">

The proxy setting can be configured using standard Java system properties.
For more information see the JavaDoc documentation of the class <code>java.net.HttpURLConnection</code> in the JDK documentation.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_read_timeout_code"><code>JAMAL_READ_TIMEOUT</code></h4>
<div class="paragraph">

This variable can define the read timeout value for the web download in millisecond as unit.

</div>
<div class="paragraph">

The default value for the timeouts is 5000, meaning five seconds.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_trace_code"><code>JAMAL_TRACE</code></h4>
<div class="paragraph">

This environment variable defines the name of the trace file.
When a trace file is defined the evaluation and all the partial evaluations are logged to this file during processing.
This file can grow very fast, and it is not purged or deleted by Jamal.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_stack_limit_code"><code>JAMAL_STACK_LIMIT</code></h4>
<div class="paragraph">

sets the recursive call depth in macro evaluation.
Macros may be recursive and in some cases it may create infinite recursive calls in Jamal.
Try a simple Jamal file that contains <code>{@define a={a}}{a}</code>.
This will drive Jamal into an infinite recursive call.
During the macro evaluation <code>{a}</code> will result <code>{a}</code> again and this will be evaluated again and again.
Infinite recursive calls result <code>StackOverflowError</code> which should not be caught by any program.
To avoid this Jamal limits the recursive calls to the maximum depth 1000.
This is a reasonable limit.

</div>
<div class="ulist">
<ul>
    <li>
Most Jamal sources are not complex, and will not get above this limit recursively.</li>
    <li>
At the same time, most Java implementations can handle this dept.</li>
</ul>
</div>
<div class="paragraph">

This limit may be too much in your environment.
Jamal may still throw a <code>StackOverflowError</code>.
In this case set this to a smaller value.
It may also happen that you deliberately create complex recursive macros.
In that case this limit may be too small.
Set your value to a limit that fits your need.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_checkstate_code"><code>JAMAL_CHECKSTATE</code></h4>
<div class="paragraph">

This environment variable can switch off macro statefulness checking during macro registration.
It is generally recommended that the macros are stateless to support multi-thread evaluation when a single JVM runs multiple Jamal processors in one or more threads.
If a macro has to have a state, it must be annotated using the annotation <code>Macro.Stateful</code>.
The statelessness or annotation is checked during macro registering since Jamal version 1.8.0.
You can switch off the functionality setting this environment variable to <code>false</code>.
It may be needed if you want to use an older, prior 1.8.0 library or a library that does not follow this rule.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_debug_code"><code>JAMAL_DEBUG</code></h4>
<div class="paragraph">

This environment variable can switch on debugging of Jamal.
To use the debugger this variable has to set to a value, which is recognized by a debugger on the classpath.
The web based debugger recognizes the <code>http:port</code> format variables.
Set this variable to <code>http:8080</code>, put the <code>jamal-debug</code> module on the classpath and after starting Jamal processing open your browser at <code>http://localhost:8080</code>.
The debugger and the use of it is detailed in a separate section.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_include_depth_code"><code>JAMAL_INCLUDE_DEPTH</code></h4>
<div class="paragraph">

This variable can set the maximum number of file include nesting.
The default value is 100.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_https_cache_code"><code>JAMAL_HTTPS_CACHE</code></h4>
<div class="paragraph">

This variable can be set to point to a directory for cache files.
When Jamal downloads web resources it stores them in a cache directory is the directory exists.
Jamal creates subdirectories under the cache directory, but the cache directory itself has to be created manually.

</div>
<div class="paragraph">

The default location for the cache files is <code>~/.jamal/cache/</code>.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_dev_path_code"><code>JAMAL_DEV_PATH</code></h4>
<div class="paragraph">

This environment variable can define replacements for files.

</div>
<div class="paragraph">

The aim of this feature is to use a local file during development, and still refer to it using the <code>https://</code> URL, which will be the production URL.
You want to run tests without pushing the file to a repository, but at the same time you do not want your code to refer to a dev location to be changed before releasing.11

</div>
<div class="paragraph">

Only absolute file names can be replaced.

</div>
<div class="paragraph">

For example, you include the file <code>https://raw.githubusercontent.com/central7/pom/1/pom.jim</code> in your Jamal file.
You want to replace it with a local file <code>~/projects/jamal/pom.jim</code>.
In that case you should set the environment variable

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The environment value is a list of <code>=</code> separated pairs.
The list is parsed using the standard <code>InputHandler.getParts(Input)</code> method.
This is the reason why the first character in the example is the separator <code>|</code>

</div>
<div class="paragraph">

An alternative use is to specify an existing text file in this variable.
In that case the file will be read by Jamal, and the individual lines will be interpreted as <code>key=value</code> pairs.
Comment lines starting with <code>#</code> and empty lines are ignored.

</div>
</div>
<div class="sect3">
<h4 id="_code_jamal_options_code"><code>JAMAL_OPTIONS</code></h4>
<div class="paragraph">

This environment variable can define options for the Jamal processor.
The value of the variable is interpreted as a multi-part input.
The list is parsed using the standard <code>InputHandler.getParts(Input)</code> method.
If you just have one option then you can define that with the name.
If there are multiple options then you have to select a non-alphanumeric separator character and present it in front of the list.

</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">that the usual <code>|</code> character has a special meaning for the bash, and therefore you may need escaping.
Also note that using <code>:</code> as a separator character may work, but it may be misleading as it can also be part of an option name.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

The options are set on the top level, there is no need to use a <code>:</code> prefix.
To set an option to <code>false</code>, you can use the <code>~</code> character, but please do not.
Every option default value is <code>false</code> when not set.

</div>
<div class="paragraph">

The typical use of this possibility is to set the option <code>failfast</code>.
This option alters the error processing, and it is more "bound" to the execution than to the document.
It may be a better option to include it in an environment variable, or system property than in the document itself.
Both approaches work.

</div>
</div>
</div>
<div class="sect2">
<h3 id="httpsres">8. Resource Files and Web Resources</h3>
<div class="paragraph">

When the macros <code>import</code> or <code>include</code> reference a file with a name that starts with either

</div>
<div class="ulist">
<ul>
    <li>
<code>res:</code>, or</li>
    <li>
<code>https:</code></li>
</ul>
</div>
<div class="paragraph">

then these files are treated in a special way.
In any other case the files are loaded from the local disk.
The following two subsections detail the mechanism of these two cases.

</div>
<div class="sect3">
<h4 id="_java_resource_files">Java Resource Files</h4>
<div class="paragraph">

When the file name starts with the characters <code>res:</code> it is a Java resource file.
It means that the file is in a JAR file among the classes.
The JAR file has to be on the classpath.
When Jamal is started from the command line then the JAR file has to be added to the classpath.
The classpath is usually after the <code>-cp</code> or <code>-classpath</code> argument of the Java command line.
If Jamal is started as a Maven plugin then the configuration in the <code>pom.xml</code> file should include the dependency.
For example to add the pomlib library JAR to the classpath you can use the following fragment in your <code>pom.xml</code>:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="admonitionblock">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title">Note</div></td>
<td class="content">The module <code>jamal-pomlib</code> was discontinued and is not part of the current Jamal library structure.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_web_resources">Web Resources</h4>
<div class="paragraph">

Web resources can be downloaded using the <code>https:</code> prefix.
The only protocol supported is <code>https</code>.
Jamal does not download any resource using the unencrypted <code>HTTP</code> protocol.

</div>
<div class="paragraph">

It is possible to cache the downloaded files.
The environment variable <code>JAMAL_HTTPS_CACHE</code> can define a directory to store the web resources.
In case the environment variable is not defined then the default value <code>~/.jamal/cache/</code> will be used.
If the cache directory exists Jamal will store there the downloaded files.
Jamal will create the subdirectories if needed, but Jamal will never create the cache directory itself.
If you do not want to use the caching then do not create the cache directory.

</div>
<div class="paragraph">

Jamal will not cache a downloaded files that has <code>SNAPSHOT</code> in the URL (all capital letters).
There is no cache eviction or expiration by default.
You can find the files in the cache directory in subdirectories.
You can also find there corresponding property files that contain information about the caching.
These properties files contain information about when a file was stored in the cache and also when it was last time read.
It is also possible to define Time To Live (TTL) for the cache items.

</div>
<div class="paragraph">

Ttl value can be defined with the <code>ttl</code> property key.
The value can be a raw number expressing the ttl inseconds or a string with time unit(s).
The unites are:

</div>
<div class="ulist">
<ul>
    <li>
<code>y</code> for year(s) (365 days)</li>
    <li>
<code>M</code> for month(s) (31 days)</li>
    <li>
<code>w</code> for week(s) (7 days)</li>
    <li>
<code>d</code> for day(s) (24 hours)</li>
    <li>
<code>h</code> for hour(s) (60 minutes)</li>
    <li>
<code>m</code> for minute(s) (60 seconds)</li>
    <li>
<code>s</code> for second(s)</li>
</ul>
</div>
<div class="paragraph">

If you use multiple time units then the value is the sum of the time units.
The units should be used in <code>Y</code>, <code>M</code>, <code>w</code>, <code>d</code>, <code>h</code>, <code>m</code>, <code>s</code> order.
You can omit the units that have zero value.
You can use any number in front of a unit, you are not limited with the natural amount of time units.
For example, you can say <code>1d25h</code> for 1 day and 25 hours, which is exactly the same as <code>2d1h</code>

</div>
<div class="paragraph">

Examples:

</div>
<div class="ulist">
<ul>
    <li>
<code>13y</code> means 13 years</li>
    <li>
<code>13y1m3h</code> means 13 years, 1 month and 3 hours</li>
</ul>
</div>
<div class="paragraph">

The property values, <code>ttl</code> or other values, are read from the property file and are inherited from <code>.properties</code> files.
These files are not created by Jamal, but you are free to create them with different keys and values.
The <code>.properties</code> files can be created in the different cache directories up to the root directory of the properties.
When a key is defined in multiple <code>.properties</code> files then the value closer to the properties file of the cached item is used.
If the key is defined in the properties file of the cached item, then the value is used.
This way you can define the TTL for a specific cache item, a group of items and for the whole cache.

</div>
<div class="paragraph">

The connection to the web can be configured if needed.
The environment variables that can be used are the followings:

</div>
<div class="ulist">
<ul>
    <li>
<code>JAMAL_CONNECT_TIMEOUT</code>, and</li>
    <li>
<code>JAMAL_READ_TIMEOUT</code></li>
</ul>
</div>
<div class="paragraph">

can define two timeout values for the web download in millisecond as unit.

</div>
<div class="paragraph">

The default value for the timeouts is 5000, meaning five seconds.

</div>
<div class="paragraph">

The proxy setting can be configured using standard Java system properties.
For more information see the JavaDoc documentation of the class <code>java.net.HttpURLConnection</code> in the JDK documentation.

</div>
</div>
</div>
<div class="sect2">
<h3 id="error_messages">9. Error Messages</h3>
<div class="paragraph">

When there is a processing error then Jamal throws a Java exception.
The message of the exception contains at the end the location of the error.
Sometimes it is not simple to identify the location due to the string replacement nature of Jamal processing.
To help locating the error as precise as possible the location is given as a series as triplets.
Each triplet contains a file name, a line number and a column number.
The location is given in the following format:

</div>
<div class="literalblock">
<div class="content">
<pre><code>file/line:column</code></pre>
</div>
</div>
<div class="paragraph">

When a file includes or imports another file then the location of the file is given in the error message along with the location from where the file is included or imported.
The format in this case is

</div>
<div class="literalblock">
<div class="content">
<pre><code>file/line:column &lt;&lt;&lt; file/line:column</code></pre>
</div>
</div>
<div class="paragraph">

If the include/import hierarchy is deeper then the location is also given in several levels.
In some cases the hierarchy is created in the error message inside a single file to help locating the error.

</div>
</div>
<div class="sect2">
<h3 id="snippet">10. Snippet Handling</h3>
<div class="paragraph">

Snipetts are text fragments from the source code or from other text files that are to be included into the documentation as samples.
Jamal Snippet handling macros can automate the copiing of such lines, but they can do more.
These macros can trim, line number, transform the source text before inserting into the output document.

</div>
<div class="paragraph">

The snippet handling macros are documented in the <a href="jamal-snippet/README.adoc">Snipped module readme</a>.
These macros include also date handling, run-time checking of existence of referenced files, directores, classes, methods and so on.

</div>
</div>
<div class="sect2">
<h3 id="Groovy">11. Groovy Integration</h3>
<div class="paragraph">

The Groovy language integration lets you include Groovy code fragments into your document.
These scripts are executed during the file processing, and can programmatically calculate the macro outputs.

</div>
<div class="paragraph">

The integration and how to use the module macros are described in the <a href="jamal-groovy/README.adoc">Groovy readme</a>.

</div>
</div>
<div class="sect2">
<h3 id="Ruby">12. Ruby Integration</h3>
<div class="paragraph">

The Ruby language integration lets you include Ruby code fragments into your document.
These scripts are executed during the file processing, and can programmatically calculate the macro outputs.

</div>
<div class="paragraph">

The integration and how to use the module macros are described in the <a href="jamal-ruby/README.adoc">Ruby readme</a>.

</div>
</div>
<div class="sect2">
<h3 id="Yaml">13. Yaml Integration</h3>
<div class="paragraph">

The Yaml module can be used to simplify the maintenance of Yaml files using macros and splitting up the Yaml files into smaller chunks.
The documentation of the module is <a href="jamal-yaml/README.adoc">Yaml readme</a>

</div>
</div>
<div class="sect2">
<h3 id="IO">14. IO Module</h3>
<div class="paragraph">

The Io module can be used to write text into separate files during the processing of a Jamal input file.
The documentation of the module is <a href="jamal-io/README.adoc">Io readme</a>

</div>
</div>
<div class="sect2">
<h3 id="JamalAPI">15. Jamal API</h3>
<div class="paragraph">

Embedding Jamal into an application is very simple.
You need the Jamal libraries on your classpath.
If you use Maven, you can simply have

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

in your pom file.

</div>
<div class="paragraph">

The library <code>jamal-engine</code> transitively depends on the other libraries that are needed (<code>jamal-core</code>, <code>jamal-api</code> and <code>jamal-tools</code>).

</div>
<div class="paragraph">

You also have to specify that you use these modules (Java 9 and later) if your code uses modules.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The code invoking Jamal needs a processor that will process the input.

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The <code>macroOpen</code> and <code>macroClose</code> parameters are <code>String</code> values.
The parameter <code>input</code> to the method <code>process()</code> has to be an object that implements the <code>javax0.jamal.api.Input</code> interface.
The easiest way to do that is to use the readily available class <code>javax0.jamal.tools.Input</code>.

</div>
<div class="paragraph">

You can see an example to create an <code>Input</code> from an existing file in the <code>jamal-maven-plugin</code> module.
The method <code>createInput()</code> reads a file, and then it creates a new input:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

An <code>Input</code> holds the content the processor has to process.
It also has a reference file name used to resolve the absolute names of the included and imported files.
It also keeps track of the line number, and the column of the actual character as the macro evaluation progresses.
A <code>new Position(s,1)</code> creates a new position that identifies the file by the nameâs` and the line number 1.

</div>
<div class="paragraph">

When a new processor is instantiated, it uses the <code>ServiceLoader</code> mechanism to find all the built-in macros that are on the classpath.
If your application has special macros implemented in Java then you can just put the library on the <code>modulepath</code>.
If the classes are defined in the <code>provides</code> directive of the module then Jamal will find and load them automatically.

</div>
<div class="paragraph">

It is also possible to define user-defined and built-in macros via API.
To do that you need access to the <code>MacroRegister</code> object that the <code>Processor</code> object has.
To get that you can invoke the method <code>getRegister()</code> on the processor object:

</div>
<div class="listingblock">
<div class="content"></div>
</div>
<div class="paragraph">

The register has API to define macros and user-defined macros.
For further information see the API JavaDoc documentation.

</div>
<div class="paragraph">

There is a very simple API class that makes it possible to use Jamal as a templating engine.
The utility class <code>javax0.jamal.Format</code> has the method
<code>public static String format(String content, Map&lt;String, String&gt; predefinedMacros)</code>
that can format the <code>content</code> string using the entries of the <code>predefinedMacros</code> as user-defined macros.
These macros eventually cannot have arguments.
This is a simplified interface to access the functionality of Jamal.

</div>
</div>
<div class="sect2">
<h3 id="javadoc">16. JavaDoc and API</h3>
<div class="paragraph">

The current and past versions of the JavaDoc can be read online at the address:

</div>
<div class="ulist">
<ul>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-api/">https://javadoc.io/doc/com.javax0.jamal/jamal-api/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-assertions/">https://javadoc.io/doc/com.javax0.jamal/jamal-assertions/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-cmd/">https://javadoc.io/doc/com.javax0.jamal/jamal-cmd/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-core/">https://javadoc.io/doc/com.javax0.jamal/jamal-core/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-debug/">https://javadoc.io/doc/com.javax0.jamal/jamal-debug/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-doclet/">https://javadoc.io/doc/com.javax0.jamal/jamal-doclet/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-engine/">https://javadoc.io/doc/com.javax0.jamal/jamal-engine/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-extensions/">https://javadoc.io/doc/com.javax0.jamal/jamal-extensions/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-groovy/">https://javadoc.io/doc/com.javax0.jamal/jamal-groovy/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-io/">https://javadoc.io/doc/com.javax0.jamal/jamal-io/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-jamal/">https://javadoc.io/doc/com.javax0.jamal/jamal-jamal/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-markdown/">https://javadoc.io/doc/com.javax0.jamal/jamal-markdown/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-maven-extension/">https://javadoc.io/doc/com.javax0.jamal/jamal-maven-extension/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-maven-plugin/">https://javadoc.io/doc/com.javax0.jamal/jamal-maven-plugin/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-plantuml/">https://javadoc.io/doc/com.javax0.jamal/jamal-plantuml/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-ruby/">https://javadoc.io/doc/com.javax0.jamal/jamal-ruby/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-scriptbasic/">https://javadoc.io/doc/com.javax0.jamal/jamal-scriptbasic/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-snippet/">https://javadoc.io/doc/com.javax0.jamal/jamal-snippet/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-test/">https://javadoc.io/doc/com.javax0.jamal/jamal-test/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-testsupport/">https://javadoc.io/doc/com.javax0.jamal/jamal-testsupport/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-tools/">https://javadoc.io/doc/com.javax0.jamal/jamal-tools/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-word/">https://javadoc.io/doc/com.javax0.jamal/jamal-word/</a></li>
    <li>
<a href="https://javadoc.io/doc/com.javax0.jamal/jamal-yaml/">https://javadoc.io/doc/com.javax0.jamal/jamal-yaml/</a></li>
</ul>
</div>
<div class="paragraph">

/m

</div>
<div class="paragraph">

In addition to the low level API, there are facades that help the use of Jamal for special purposes.
One of them is implemented by the class <code>javax0.jamal.Format</code>.
The other one is in the class <code>javax0.jamal.DocumentConverter</code>.

</div>
<div class="paragraph">

The class <code>Format</code> is a facade that provides a simplified interface to the functionality of the Jamal.
The method <code>name()</code> has two arguments.
The first is the content to be formatted.
The second is a map of predefined macros.
These macros are all parameterless macros.
It is not possible to define parameters using this interface.
Although the content string can contain any Jamal macros.

</div>
<div class="paragraph">

This interface also invokes the Jamal processor with <code>{{</code> and <code>}}</code> as the macro open and close characters.

</div>
<div class="paragraph">

The other class, <code>DocumentConverter</code> supports document converting.
This is usually done during the build process in the unit test phase.
The practice is to create one or more unit tests converting the project <code>.jam</code> files.

</div>
<div class="paragraph">

The method <code>convert(file)</code> converts the file given as argument.
The resulting file will be created in the same directory as the original file with the <code>.jam</code> extra extension chopped off.
For example, if you convert <code>README.adoc.jam</code> then the resulting file will be <code>README.adoc</code>.

</div>
<div class="paragraph">

The other method <code>convertAll(file)</code> converts many files.
It takes two arguments, both are list of file name endings.
The first is the file endings (extensions) to include, the second one is the file endings (extensions) to exclude.
The two static methods <code>include()</code> and <code>exclude()</code> can be used to create these arguments.

</div>
</div>
<div class="sect2">
<h3 id="documentmaintenance">17. Maintenance of this document</h3>
<div class="paragraph">

The source of this document is <code>README.adoc.jam</code>.
The Jamal conversion uses the snippet macros and some core built-in macros.
The conversion is part of the execution of the tests.
The code samples are automatically executed using this process, and the sample output is automatically inserted into the document.

</div>
</div>
</div>
</div>
</div>

<div id="footnotes">

<hr />

</div>

<div id="footer">
<div id="footer-text">
Last updated
2022-11-23 17:59:48 CET</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2646</wp:post_id>
  <wp:post_date>2022-11-27 10:14:16</wp:post_date>
  <wp:post_date_gmt>2022-11-27 09:14:16</wp:post_date_gmt>
  <wp:post_modified>2022-11-30 16:35:55</wp:post_modified>
  <wp:post_modified_gmt>2022-11-30 15:35:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>2646__trashed</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="java"><![CDATA[Java]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_status</wp:meta_key>
    <wp:meta_value><![CDATA[private]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_trash_meta_time</wp:meta_key>
    <wp:meta_value><![CDATA[1669822554]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_desired_post_slug</wp:meta_key>
    <wp:meta_value><![CDATA[2646]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
