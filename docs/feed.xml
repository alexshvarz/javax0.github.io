<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://javax0.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://javax0.github.io/" rel="alternate" type="text/html" /><updated>2023-02-13T10:56:58+01:00</updated><id>https://javax0.github.io/feed.xml</id><title type="html">Java Deep, mostly Java</title><subtitle>javax0 is a technical Java oriented blog. Whenever I find something interesting, in the mood and feel the power to publish it, you will get it here. Publications are usually released on Wednesday 15:00am GMT. Earlier posts of the blog were published on Javax0 Wordpress Site at https://javax0.wordpress.com</subtitle><entry><title type="html">About Rust</title><link href="https://javax0.github.io/2023/02/13/about-rust.html" rel="alternate" type="text/html" title="About Rust" /><published>2023-02-13T00:00:00+01:00</published><updated>2023-02-13T00:00:00+01:00</updated><id>https://javax0.github.io/2023/02/13/about-rust</id><content type="html" xml:base="https://javax0.github.io/2023/02/13/about-rust.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is for developers and managers who have heard about Rust but do not know much about it.
It is not a tutorial.
I write what I see and give some unsolicited&amp;#8201;&amp;#8212;&amp;#8201;or assuming you read it not by accident, then solicited&amp;#8201;&amp;#8212;&amp;#8201;advice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a few words about Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a ten-year-old programming language.
In my opinion this language will shape the industry in the future comparable to the impact of Java.
Time will tell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New programming languages arise all the time, and then they get forgotten.
I remember when Roger Lang told me in 1997 about Java that it was a paper tiger.
We worked for Digital Equipment Corporation in the Hungarian subsidiary, and Java was relatively new.
The expression &quot;paper tiger&quot; references the Chinese proverb, &quot;The tiger that is paper is not a tiger&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;He failed.&lt;br&gt;
Java did not.&lt;br&gt;
Java was a tiger, though an infant.&lt;br&gt;
Some believed it even then, but nobody could &quot;know&quot;.&lt;br&gt;
The future of Java was not sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same is with Rust now.&lt;br&gt;
Although it is a ten-year-old language, it is still an infant.&lt;br&gt;
Technically it is not.
There are many solutions in the language and in the whole infrastructure architecture that are mature and brilliant.
What is still missing is community and industry acceptance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prediction is that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust will step over the industry acceptance threshold in 2023, becoming a player in the industry; you can be confident it will not fade and be forgotten soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before going on with the rest of the article, I have to make a statement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am not a Rust expert. I have recently started learning the language and am still a beginner.
I have written more than a simple &quot;Hello,World!&quot; but that is it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, I have more than 40 years of programming experience if we start counting from my first program line, which was executed by a processor (TI-59 calculator) in 1980.
I programmed in FORTRAN, BASIC, Pascal, C, C++, Java, JavaScript, Python, and many other languages.
Java, as you can see from the topic of the blog, is my main charter for now.
May Rust be the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will write a few words about Rust.
I will not teach you Rust.
(After the disclaimer, this should be evident.)
I will write down some of the features that I felt were important and interesting.
I try to focus on the essential features from the commercial point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that they are the features that will make Rust a success or a failure.
You, as a developer, may like some features.
You may say, &quot;how cool Rust is because of&quot; this or that feature.
But if the feature is not essential for the industry, or the managers, then it is not crucial for Rust.
A language is not a hobby project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is about what I have seen so far and what I imply from it for the future of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-rust-is-a-systems-programming-language&quot;&gt;2. Rust is a systems programming language&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being a Java developer, I do not feel threatened by Rust.
Rust is a system programming language like C or C++.
It is a robust language, and I believe writing enterprise applications in it is possible, but not now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust compiles to machine code or WebAssembly.
There is no virtual machine and no garbage collection.
It means that the performance is comparable to C and C.
I would not write it is faster than Java because even C and C are slower than Java in some particular cases.
The important thing is that there are no hiccups in the performance during garbage collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I acknowledge that Java has dramatically improved and has a highly optimized garbage collector.
Still, it collects the garbage and then releases it in batches, affecting performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google&amp;#8217;s Golang garbage collector is also fast.
However, comparing it to any other GC, you should remember that it does not compact the heap.
It simply can not because the language uses pointers, and as such, it is prone to memory fragmentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the way: using pointers also makes Rust prone to this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-memory-safety&quot;&gt;3. Memory Safety&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical section in this article.
If you are a manager and inpatient, here it is in one sentence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust uses a memory management approach, which delivers the same level of safety as Java without the garbage collection overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Managers can skip to the next section.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Memory safety is the feature that makes Rust outstanding and unique.
C trusts the developer not to make mistakes.
It is a wrong choice.
Developers make mistakes, Rust does not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers have to know when the code is not using an allocated memory chunk anymore, and they have to free it.
This is something that a compiler could do.
In principle, a compiler could identify the memory chunks not used anymore and generate code to free them.
They don&amp;#8217;t do that because the task is computationally expensive.
In short, the compiler cannot identify when to free the memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other end of the scale, Java safeguards everything using the garbage collector.
In this case, the run-time keeps track of all the references and frees the memory when it is not referenced anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust language developers did not accept the statement that the compiler could not do it.
They approached the problem again, and they found a solution.
The solution is called &quot;ownership&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference to a memory location is either owning the resource or borrowing it.
There can be only one resource owner, just like in real life.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, it is a bit hard to grasp the concept and needs a bit of different thinking than C or Java development.
However, it is a brilliant solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-application-management&quot;&gt;4. Application Management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust does not have built-in application management.
The reason for it is that Rust is a systems programming language.
When you have a JVM process, you can attach a debugger, query the memory and thread parameters, and make a memory dump.
With Rust, all you can do is what the operating system lets you do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you run an enterprise application that runs for several months between two maintenance stops for the ubiquitous version update, you need information about the running system to know how well it performs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust may have and certainly will have libraries and tools in the future addressing this issue, but it is not part of the ecosystem and the default run-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-ease-of-learning&quot;&gt;5. Ease of Learning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a critical point.
Rust is not easy to learn.
Writing the first &quot;Hello, World!&quot; and having it up and running took a few days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel the weight of the language and the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is good news for the developers.
If you know Rust, you have little competition.
Rust developers are expensive.
For the managers, it is bad news.
Rust developers are expensive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-language-features&quot;&gt;6. Language Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many great features in Rust that developers can like.
The code, after you learn the language, can be very readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it can also be very unreadable.
There are Rust quizzes on the net that I do not understand after a month of learning the language.
Not being able to solve it would be natural, but I often do not understand the explanation.
It is partially my age; 40 years of experience does not come young, but it is also the complexity of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually say that the important question is not&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BAD QUESTION: How readable code can someone write in a language?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rather&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GOOD QUESTION: How unreadable code can a junior developer, who thinks they mastered it all, write?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this regard, Rust is guilty.
The language is open for the developers to be extended.
The developers can write macros, which are part of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is similar to the C preprocessor, but macros run during instead of before the compilation.
The input for the macros is the lexical tokens, and the output is the lexical tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be precise, the macros work on a lexical token tree, not a stream.
It simply means that the paired symbols, like &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, should be in pairs, or else the compiler will complain before passing the lexical tree to the macro.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java, for example, says that such a &quot;preprocessor&quot; or &quot;macro&quot; is counterintuitive.
The language is powerful enough.
If you need any macro to write your code readable, you have done something wrong; you must learn to use the language better.
Developers, on the other hand, welcome such a possibility.
We love to use the tool and not to &quot;learn it more&quot;.
This is the main reason why projects like Lombok are so hated and loved at the same time.
(In addition to the fact that Lombok is using undocumented API.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is on the other end of the scale.
It provides not only macro processing but also allows the developers to interpret the token tree in Rust.
A code written in Rust will start during the compilation and transform part of the lexical tree to another.
Using this possibility, you can significantly alter the language by giving different meanings and semantics to some constructs.
Eventually, you should not do that; it was never intended to introduce procedural macros.
A &quot;clever&quot; junior, however, could.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-backward-compatibility&quot;&gt;7. Backward Compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Backward compatibility is a critical issue.
Pulling an old 8mm magnetic tape zip archive with some Java 1.0 code will compile and run with the newest Java version.
You can compile with the latest C compiler code written in 1970.
(Most of the cases.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as we can see in the case of Java, this hinders language development.
My favorite example is &lt;code&gt;final&lt;/code&gt;.
By the time Java was introduced, the obvious and reasonable choice was to make everything non &lt;code&gt;final&lt;/code&gt; by default.
Hence, we have the &lt;code&gt;final&lt;/code&gt; keyword in Java and do not have something like &lt;code&gt;nonfinal&lt;/code&gt;.
Today most of us feel that &lt;code&gt;final&lt;/code&gt; would be a better default, but it is too late to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust cuts this Gordian knot.
Rust introduces the edition mechanism.
There are different editions of Rust, which are essentially language versions.
Inside an edition, a new version is always backward compatible.
Some old conventions can be thrown away when a new edition comes out.
The new compiler, however, can still work with the old code.
It just has to know which edition it is, and the edition is stated in the project&amp;#8217;s &lt;code&gt;Cargo.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-libraries&quot;&gt;8. Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Libraries are also vital parts of the ecosystem.
There are libraries for Rust, but not as wast as for Java.
It clearly shows that mainly enthusiasts support Rust.
Most of the libraries look like well-designed open-source hobby projects.
Documented, but not excessively, covers most use cases, but sometimes not all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are rooms for library development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-tooling&quot;&gt;9. Tooling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust tooling is excellent.
Eventually not as good as Java, but it is getting there.
I tried to develop a Rust application using IntelliJ IDEA and CLion.
It works; you can also debug the language interactively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I compiled my sample codes on an Apple M1 machine and coded to generate code for Intel Linux, Intel Windows, and WebAssembly.
Cross-compilation is a strong point of Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-implications&quot;&gt;10. Implications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is an important language that we have to pay attention to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-1-use-rust&quot;&gt;10.1. Use Rust?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The big question is: should you use Rust?
When should you use Rust?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a developer, allocate time to learn it.
You will need devotion because it is not trivial.
Find some hobby projects or libraries that you will develop in Rust.
Keep Rust in your toolset; it will pay back sooner or later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a manager, know about it.
Encourage your developers to learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your actual project is low-level, more or less a systems programming project, then Rust must be considered.
I do not advocate selecting Rust, but it must be considered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The decision has to be made based on non-technical requirements.
Rust is mature enough to do anything that C can do.
If there is something prohibited by compile time memory safety, you can still use &lt;code&gt;unsafe&lt;/code&gt; code as a last resort.
Technical requirements make no difference in this case.
The questions you have to ask are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long will the project run? How long will you need to maintain it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many developers will work on the project? Can you afford to have a Rust developer? Can you educate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Rust at the moment is a significant investment.
Rust developers are not available in the market significant amount.
It is a good choice if you can afford to educate your developers to learn Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-2-what-will-rust-do&quot;&gt;10.2. What will Rust do ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My opinion is that Rust will be used in many areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-1-systems-programming&quot;&gt;10.2.1. Systems Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For low-level systems programming, it will definitely be a significant player.
The promise to create a memory-safe, &quot;unhackable&quot; program is strong.
There is no general guarantee for the resulting code 100% secure, but a significant share of the security issues use exploits based on memory safety problems.
It is also something that I genuinely believe Rust delivers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-2-application-programming&quot;&gt;10.2.2. Application Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But this is not the whole story.
Rust has the potential to be a significant player in enterprise application development.
It has to evolve to have more commercial-grade libraries and a non-niche developer base to get there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-3-web-ui-development&quot;&gt;10.2.3. Web UI Development&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also see the possibility of it being a player in Web UI development.
The reason for the possibility is WebAssembly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compiling the code to run in the browser is a prerequisite, but not enough.
The main reason, strangely, is the complexity of Rust.
The needed and delivered code quality of UI projects reflecting the experience of the average UI developer is usually low.
UI developers are usually young and less experienced.
This also means an issue when you have a project that needs more experience.
Finding a senior UI developer may be difficult in the swarm of young developers.
On the other hand, when you find a developer who can program in Rust, you are more likely to find someone who is a senior developer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-summary-and-conclusion&quot;&gt;11. Summary and Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a language that we have to pay attention to.
It is technically mature, and it will become commercially mature in the future.
2023 is the year (my opinion) when it will pass the tipping point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer, you should learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a manager, you should know about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article as a source code was available on GitHub since the start of writing.
The people who contributed to the text with comments before the publishing date are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Juriy&quot;&gt;Iurii Bura&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;Kristof Szabados&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author></entry><entry><title type="html">Open Source Blog</title><link href="https://javax0.github.io/2023/01/31/opensource-blog.html" rel="alternate" type="text/html" title="Open Source Blog" /><published>2023-01-31T00:00:00+01:00</published><updated>2023-01-31T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/31/opensource-blog</id><content type="html" xml:base="https://javax0.github.io/2023/01/31/opensource-blog.html">&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Article Management Technical Details&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-31-opensource-blog&quot;&gt;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-31-opensource-blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Article source &lt;a href=&quot;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-31-opensource-blog.adoc.jam&quot;&gt;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-31-opensource-blog.adoc.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is about the philosophy behind creating an open-source blog.
The article will discuss&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;what an open-source blog means&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-what-is-an-open-source-blog&quot;&gt;2. What is an Open-Source Blog?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know what open-source software (OSS) is.
It is many things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OSS is free to redistribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code is included.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The license allows modification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports the integrity of the author&amp;#8217;s code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No discrimination against persons or groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No discrimination against fields of endeavor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distribution of license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not be specific to a product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not restrict other software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must be technology-neutral.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(source &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Open_Source_Definition&quot;&gt;Wikipedia, Open Source Definition&lt;/a&gt;])&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initiative of OSS was extended to documentation, for example, the GNU Free Documentation License.
The most well-known licensing scheme is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Creative_Commons_license&quot;&gt;Creative Commons License&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These mainly focus on the rights and the way the product is used.
It is imperative, and there is a good reason that most approaches look at this side of OSS and documentation.
This side regulates the use and how OSS creates value in the economy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, as a developer, the other side is more important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me use the well-known parable &lt;a href=&quot;https://en.wikipedia.org/wiki/Blind_men_and_an_elephant&quot;&gt;about the blind men and the elephant&lt;/a&gt;.
Everybody touches a different part of the elephant and has a different opinion about what an elephant is.
The industry is mainly interested in the fertilizing output that comes out of the OSS ecosystem.
I stay more at the other end of the elephant, at the trunk and the mouth that feeds the animal.
I drew a picture of an elephant showing the developer side:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://javax0.github.io/assets/images/elephant.png&quot; alt=&quot;elephant&quot; width=&quot;500px&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we create open-source software, we usually do it for fun.
It is why I was drawing the elephant.
It is fun.
In a commercial project, you never do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, open source, for me, is cooperation.
We do it together.
There is a  team of developers, and we develop the software together.
Other people use the software, and few start to complain.&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Four Levels of OSS Developer Success (click to open)&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;You create a project, and no one notices.
It is always how it starts, but even this is fun.
Creating software is fun.
If it is not fun, then don&amp;#8217;t do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some people have started to use your software.
You do not know about it because they do not give you feedback.
You google your project name and may see it mentioned, appearing at places.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People start asking stupid and annoying questions.
It is the real success.
People believe your software is so good that they invest effort in asking when they cannot get along.
Your users are introverted developers.
From their side, asking is a considerable effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are hate posts about your software.
It is the ultimate success.
Some people write about why no one should not use your software.
I could never reach this level with any of my projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is when you start your OSS project.
When you join an already-running OSS project, it is different.
In that case, you jump on an already running train&amp;#8230;&amp;#8203; sorry: elephant.
Your name gets to the list of developers, and you can be proud that your tiny but essential change was added to the project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about blogs?
What will make this blog to be open source?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is open for collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code is included.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog content is free to redistribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The license allows modification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports the integrity of the author&amp;#8217;s code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No discrimination against persons or groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No discrimination against fields of endeavor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distribution of license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not be specific to a product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not restrict other software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must be technology-neutral.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following sections, I will look at these aspects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no separate section in this article for&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The license allows modification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distribution of license&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not be specific to a product&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must not restrict other software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;License must be technology-neutral&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are provided by the CC-BY license governing the content of the blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-it-is-open-for-collaboration&quot;&gt;3. It is open for collaboration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is the most critical aspect of open-source blogging.
You can use the content of this blog according to the CC-BY license terms.
It allows practically any use, even commercial, so long you attribute the source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But that is the rear end of the elephant.
We are interested in feeding the elephant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog is maintained in a &lt;a href=&quot;https://www.writethedocs.org/guide/docs-as-code/&quot;&gt;Doc as Code&lt;/a&gt; style.
The blog is edited using markup.
The selected markup is Asciidoc, and I also use the Jamal preprocessor.
The article source files are &lt;code&gt;.adoc.jam&lt;/code&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source is maintained on GitHub in a public repository.
It means that you can look at any article.
Not only those which are already published but also the articles which are under construction.
You can also have a look at the history of article editing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Articles are created and edited for days, sometimes for weeks.
It is similar to program features.
Not to interfere with the already released article set, these article sources are maintained in separate branches.
GitHub allows you to list all these branches and look at what is cooking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, you can fork the repository, create new articles, and suggest modifications to any article creating a pull request.
True to the open-source philosophy, I will consider every pull request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-source-code-is-included&quot;&gt;4. Source code is included&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is almost evident in the case of documentation or blogs.
The source is the text itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, it is, but that is a mistake.
It is like programming in machine code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you code in machine code, the binary is the source code.
We don&amp;#8217;t do that.
The reason: it isn&amp;#8217;t easy and involves a lot of mechanical work that computers can do.
We program in high-level languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we document, we still create the documentation in &quot;machine code&quot; to some extent.
Maybe, the level we are in is not machine code.
After all, you do not edit a PDF binary.
What we usually do is assembly level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The better approach is to use tools to write the documentation at a high level.
Do NOT copy and paste the information from the documented system.
Write code that will do the copy-pasting, reformatting, extracting, and transformation needed for the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamal does it for this blog, and Jamal source of the blog articles are available in a public Git repository:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/javax0/javax0.github.io&quot;&gt;https://github.com/javax0/javax0.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the source of the articles, the source for the build environment is also in the repository.
You can use them to start your blog if you like.
Their license is Apache 2.0, as denoted by the &lt;code&gt;LICENSE&lt;/code&gt; file in the repo root.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-blog-content-is-free-to-redistribute&quot;&gt;5. Blog content is free to redistribute&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no technical blocker since the code is available as open source.
The license is reasonably permissive, CC-BY.
I even encourage redistribution.
As you can see on the opening page, I have an agreement for many years with DZone and JCG.
I also discussed with Baeldung, but their policy does not fit redistribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find articles from the blog on Chinese, Russian, and Hindi sites.
You can also feel free to copy, modify, and translate as long you follow attribution CC-BY.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-supports-the-integrity-of-the-authors-code&quot;&gt;6. Supports the integrity of the author&amp;#8217;s code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the article is modified, you have to note it in the attribution so that the readers will know that it is a derivative.
They can easily see the difference between the original and the derived work using backlinking.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-no-discrimination-against-persons-or-groups&quot;&gt;7. No discrimination against persons or groups&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am not racist.
There is no need to say more about it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-no-discrimination-against-fields-of-endeavor&quot;&gt;8. No discrimination against fields of endeavor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is the part that makes me a bit uncomfortable, but what can I do?
If you use the content of my articles to destroy the universe, I must be OK with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-summary&quot;&gt;9. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the blog!
Do not only READ it!
Be part of this blog!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading is fine.
First step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commenting is welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suggesting modifications and writing articles to be published here is the ultimate goal of being an open-source blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-31-opensource-blog Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-31-opensource-blog.adoc.jam 1. Introduction</summary></entry><entry><title type="html">About Rust</title><link href="https://javax0.github.io/2023/01/30/about-rust.html" rel="alternate" type="text/html" title="About Rust" /><published>2023-01-30T00:00:00+01:00</published><updated>2023-01-30T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/30/about-rust</id><content type="html" xml:base="https://javax0.github.io/2023/01/30/about-rust.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is for developers and managers who have heard about Rust but do not know much about it.
It is not a tutorial.
I write what I see and give some unsolicited&amp;#8201;&amp;#8212;&amp;#8201;or assuming you read it not by accident, then solicited&amp;#8201;&amp;#8212;&amp;#8201;advice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a few words about Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a ten-year-old programming language.
In my opinion this language will shape the industry in the future comparable to the impact of Java.
Time will tell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New programming languages arise all the time, and then they get forgotten.
I remember when Roger Lang told me in 1997 about Java that it was a paper tiger.
We worked for Digital Equipment Corporation in the Hungarian subsidiary, and Java was relatively new.
The expression &quot;paper tiger&quot; references the Chinese proverb, &quot;The tiger that is paper is not a tiger&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;He failed.&lt;br&gt;
Java did not.&lt;br&gt;
Java was a tiger, though an infant.&lt;br&gt;
Some believed it even then, but nobody could &quot;know&quot;.&lt;br&gt;
The future of Java was not sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same is with Rust now.&lt;br&gt;
Although it is a ten-year-old language, it is still an infant.&lt;br&gt;
Technically it is not.
There are many solutions in the language and in the whole infrastructure architecture that are mature and brilliant.
What is still missing is community and industry acceptance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prediction is that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust will step over the industry acceptance threshold in 2023, becoming a player in the industry; you can be confident it will not fade and be forgotten soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before going on with the rest of the article, I have to make a statement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am not a Rust expert. I have recently started learning the language and am still a beginner.
I have written more than a simple &quot;Hello,World!&quot; but that is it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, I have more than 40 years of programming experience if we start counting from my first program line, which was executed by a processor (TI-59 calculator) in 1980.
I programmed in FORTRAN, BASIC, Pascal, C, C++, Java, JavaScript, Python, and many other languages.
Java, as you can see from the topic of the blog, is my main charter for now.
May Rust be the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will write a few words about Rust.
I will not teach you Rust.
(After the disclaimer, this should be evident.)
I will write down some of the features that I felt were important and interesting.
I try to focus on the essential features from the commercial point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that they are the features that will make Rust a success or a failure.
You, as a developer, may like some features.
You may say, &quot;how cool Rust is because of&quot; this or that feature.
But if the feature is not essential for the industry, or the managers, then it is not crucial for Rust.
A language is not a hobby project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is about what I have seen so far and what I imply from it for the future of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-rust-is-a-systems-programming-language&quot;&gt;2. Rust is a systems programming language&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being a Java developer, I do not feel threatened by Rust.
Rust is a system programming language like C or C++.
It is a robust language, and I believe writing enterprise applications in it is possible, but not now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust compiles to machine code or WebAssembly.
There is no virtual machine and no garbage collection.
It means that the performance is comparable to C and C.
I would not write it is faster than Java because even C and C are slower than Java in some particular cases.
The important thing is that there are no hiccups in the performance during garbage collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I acknowledge that Java has dramatically improved and has a highly optimized garbage collector.
Still, it collects the garbage and then releases it in batches, affecting performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google&amp;#8217;s Golang garbage collector is also fast.
However, comparing it to any other GC, you should remember that it does not compact the heap.
It simply can not because the language uses pointers, and as such, it is prone to memory fragmentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the way: using pointers also makes Rust prone to this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-memory-safety&quot;&gt;3. Memory Safety&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical section in this article.
If you are a manager and inpatient, here it is in one sentence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust uses a memory management approach, which delivers the same level of safety as Java without the garbage collection overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Managers can skip to the next section.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Memory safety is the feature that makes Rust outstanding and unique.
C trusts the developer not to make mistakes.
It is a wrong choice.
Developers make mistakes, Rust does not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers have to know when the code is not using an allocated memory chunk anymore, and they have to free it.
This is something that a compiler could do.
In principle, a compiler could identify the memory chunks not used anymore and generate code to free them.
They don&amp;#8217;t do that because the task is computationally expensive.
In short, the compiler cannot identify when to free the memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other end of the scale, Java safeguards everything using the garbage collector.
In this case, the run-time keeps track of all the references and frees the memory when it is not referenced anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust language developers did not accept the statement that the compiler could not do it.
They approached the problem again, and they found a solution.
The solution is called &quot;ownership&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference to a memory location is either owning the resource or borrowing it.
There can be only one resource owner, just like in real life.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, it is a bit hard to grasp the concept and needs a bit of different thinking than C or Java development.
However, it is a brilliant solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-application-management&quot;&gt;4. Application Management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust does not have built-in application management.
The reason for it is that Rust is a systems programming language.
When you have a JVM process, you can attach a debugger, query the memory and thread parameters, and make a memory dump.
With Rust, all you can do is what the operating system lets you do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you run an enterprise application that runs for several months between two maintenance stops for the ubiquitous version update, you need information about the running system to know how well it performs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust may have and certainly will have libraries and tools in the future addressing this issue, but it is not part of the ecosystem and the default run-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-ease-of-learning&quot;&gt;5. Ease of Learning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a critical point.
Rust is not easy to learn.
Writing the first &quot;Hello, World!&quot; and having it up and running took a few days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel the weight of the language and the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is good news for the developers.
If you know Rust, you have little competition.
Rust developers are expensive.
For the managers, it is bad news.
Rust developers are expensive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-language-features&quot;&gt;6. Language Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many great features in Rust that developers can like.
The code, after you learn the language, can be very readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it can also be very unreadable.
There are Rust quizzes on the net that I do not understand after a month of learning the language.
Not being able to solve it would be natural, but I often do not understand the explanation.
It is partially my age; 40 years of experience does not come young, but it is also the complexity of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually say that the important question is not&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BAD QUESTION: How readable code can someone write in a language?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rather&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GOOD QUESTION: How unreadable code can a junior developer, who thinks they mastered it all, write?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this regard, Rust is guilty.
The language is open for the developers to be extended.
The developers can write macros, which are part of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is similar to the C preprocessor, but macros run during instead of before the compilation.
The input for the macros is the lexical tokens, and the output is the lexical tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be precise, the macros work on a lexical token tree, not a stream.
It simply means that the paired symbols, like &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, should be in pairs, or else the compiler will complain before passing the lexical tree to the macro.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java, for example, says that such a &quot;preprocessor&quot; or &quot;macro&quot; is counterintuitive.
The language is powerful enough.
If you need any macro to write your code readable, you have done something wrong; you must learn to use the language better.
Developers, on the other hand, welcome such a possibility.
We love to use the tool and not to &quot;learn it more&quot;.
This is the main reason why projects like Lombok are so hated and loved at the same time.
(In addition to the fact that Lombok is using undocumented API.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is on the other end of the scale.
It provides not only macro processing but also allows the developers to interpret the token tree in Rust.
A code written in Rust will start during the compilation and transform part of the lexical tree to another.
Using this possibility, you can significantly alter the language by giving different meanings and semantics to some constructs.
Eventually, you should not do that; it was never intended to introduce procedural macros.
A &quot;clever&quot; junior, however, could.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-backward-compatibility&quot;&gt;7. Backward Compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Backward compatibility is a critical issue.
Pulling an old 8mm magnetic tape zip archive with some Java 1.0 code will compile and run with the newest Java version.
You can compile with the latest C compiler code written in 1970.
(Most of the cases.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as we can see in the case of Java, this hinders language development.
My favorite example is &lt;code&gt;final&lt;/code&gt;.
By the time Java was introduced, the obvious and reasonable choice was to make everything non &lt;code&gt;final&lt;/code&gt; by default.
Hence, we have the &lt;code&gt;final&lt;/code&gt; keyword in Java and do not have something like &lt;code&gt;nonfinal&lt;/code&gt;.
Today most of us feel that &lt;code&gt;final&lt;/code&gt; would be a better default, but it is too late to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust cuts this Gordian knot.
Rust introduces the edition mechanism.
There are different editions of Rust, which are essentially language versions.
Inside an edition, a new version is always backward compatible.
Some old conventions can be thrown away when a new edition comes out.
The new compiler, however, can still work with the old code.
It just has to know which edition it is, and the edition is stated in the project&amp;#8217;s &lt;code&gt;Cargo.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-libraries&quot;&gt;8. Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Libraries are also vital parts of the ecosystem.
There are libraries for Rust, but not as wast as for Java.
It clearly shows that mainly enthusiasts support Rust.
Most of the libraries look like well-designed open-source hobby projects.
Documented, but not excessively, covers most use cases, but sometimes not all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are rooms for library development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-tooling&quot;&gt;9. Tooling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust tooling is excellent.
Eventually not as good as Java, but it is getting there.
I tried to develop a Rust application using IntelliJ IDEA and CLion.
It works; you can also debug the language interactively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I compiled my sample codes on an Apple M1 machine and coded to generate code for Intel Linux, Intel Windows, and WebAssembly.
Cross-compilation is a strong point of Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-implications&quot;&gt;10. Implications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is an important language that we have to pay attention to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-1-use-rust&quot;&gt;10.1. Use Rust?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The big question is: should you use Rust?
When should you use Rust?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a developer, allocate time to learn it.
You will need devotion because it is not trivial.
Find some hobby projects or libraries that you will develop in Rust.
Keep Rust in your toolset; it will pay back sooner or later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a manager, know about it.
Encourage your developers to learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your actual project is low-level, more or less a systems programming project, then Rust must be considered.
I do not advocate selecting Rust, but it must be considered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The decision has to be made based on non-technical requirements.
Rust is mature enough to do anything that C can do.
If there is something prohibited by compile time memory safety, you can still use &lt;code&gt;unsafe&lt;/code&gt; code as a last resort.
Technical requirements make no difference in this case.
The questions you have to ask are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long will the project run? How long will you need to maintain it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many developers will work on the project? Can you afford to have a Rust developer? Can you educate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Rust at the moment is a significant investment.
Rust developers are not available in the market significant amount.
It is a good choice if you can afford to educate your developers to learn Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-2-what-will-rust-do&quot;&gt;10.2. What will Rust do ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My opinion is that Rust will be used in many areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-1-systems-programming&quot;&gt;10.2.1. Systems Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For low-level systems programming, it will definitely be a significant player.
The promise to create a memory-safe, &quot;unhackable&quot; program is strong.
There is no general guarantee for the resulting code 100% secure, but a significant share of the security issues use exploits based on memory safety problems.
It is also something that I genuinely believe Rust delivers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-2-application-programming&quot;&gt;10.2.2. Application Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But this is not the whole story.
Rust has the potential to be a significant player in enterprise application development.
It has to evolve to have more commercial-grade libraries and a non-niche developer base to get there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-3-web-ui-development&quot;&gt;10.2.3. Web UI Development&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also see the possibility of it being a player in Web UI development.
The reason for the possibility is WebAssembly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compiling the code to run in the browser is a prerequisite, but not enough.
The main reason, strangely, is the complexity of Rust.
The needed and delivered code quality of UI projects reflecting the experience of the average UI developer is usually low.
UI developers are usually young and less experienced.
This also means an issue when you have a project that needs more experience.
Finding a senior UI developer may be difficult in the swarm of young developers.
On the other hand, when you find a developer who can program in Rust, you are more likely to find someone who is a senior developer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-summary-and-conclusion&quot;&gt;11. Summary and Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a language that we have to pay attention to.
It is technically mature, and it will become commercially mature in the future.
2023 is the year (my opinion) when it will pass the tipping point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer, you should learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a manager, you should know about it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author></entry><entry><title type="html">Ten Useless Things You Did Not Know About Java</title><link href="https://javax0.github.io/2023/01/23/ten-java.html" rel="alternate" type="text/html" title="Ten Useless Things You Did Not Know About Java" /><published>2023-01-23T00:00:00+01:00</published><updated>2023-01-23T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/23/ten-java</id><content type="html" xml:base="https://javax0.github.io/2023/01/23/ten-java.html">&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Article Management Technical Details&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java&quot;&gt;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Article source &lt;a href=&quot;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam&quot;&gt;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java is a complex language, and some features that initially seemed a good idea turned out to be useless.
In this article, we will look at ten such Java language features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-java-has-labels&quot;&gt;1. Java Has Labels&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can have labels in your Java code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         LABEL1:
 2.         for (int i = 0; i &amp;lt; 10; i++) {
 3.             for (int j = 0; j &amp;lt; 10; j++) {
 4.                 if (i * j &amp;gt; 15 &amp;amp;&amp;amp; (i * j) % 2 == 0) break LABEL1;
 5.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 6.             }
 7.             System.out.println();
 8.         }
 9.         System.out.println();
10.         System.out.println();
11.         LABEL2:
12.         for (int i = 0; i &amp;lt; 10; i++) {
13.             for (int j = 0; j &amp;lt; 10; j++) {
14.                 if (i * j &amp;gt; 15 &amp;amp;&amp;amp; (i * j) % 2 == 0) {
15.                     System.out.println();
16.                     continue LABEL2;
17.                 }
18.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
19.             }
20.             System.out.println();
21.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like you could have them in assembly.
Or when you were programming BASIC numbering the lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To interrupt an outer loop, you can reference these labels in the &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of the above program is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7

0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7
3,0 3,1 3,2 3,3 3,4 3,5
4,0 4,1 4,2 4,3
5,0 5,1 5,2 5,3
6,0 6,1 6,2
7,0 7,1 7,2 7,3
8,0 8,1
9,0 9,1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to compare, here is the version without the labels:&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Click to open the version without labels&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         for (int i = 0; i &amp;lt; 10; i++) {
 2.             for (int j = 0; j &amp;lt; 10; j++) {
 3.                 if (i * j &amp;gt; 15 &amp;amp;&amp;amp; (i * j) % 2 == 0) break;
 4.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 5.             }
 6.             System.out.println();
 7.         }
 8.         System.out.println();
 9.         System.out.println();
10.         for (int i = 0; i &amp;lt; 10; i++) {
11.             for (int j = 0; j &amp;lt; 10; j++) {
12.                 if (i * j &amp;gt; 15 &amp;amp;&amp;amp; (i * j) % 2 == 0) {
13.                     System.out.println();
14.                     continue;
15.                 }
16.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
17.             }
18.             System.out.println();
19.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and the output&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7
3,0 3,1 3,2 3,3 3,4 3,5
4,0 4,1 4,2 4,3
5,0 5,1 5,2 5,3
6,0 6,1 6,2
7,0 7,1 7,2 7,3
8,0 8,1
9,0 9,1


0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7


3,0 3,1 3,2 3,3 3,4 3,5
3,7
3,9
4,0 4,1 4,2 4,3






5,0 5,1 5,2 5,3
5,5
5,7
5,9
6,0 6,1 6,2







7,0 7,1 7,2 7,3
7,5
7,7
7,9
8,0 8,1








9,0 9,1
9,3
9,5
9,7
9,9&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-you-can-break-from-a-block&quot;&gt;2. You can &lt;code&gt;break&lt;/code&gt; from a Block&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Labels make it possible to break from a block.
It does not need to be a loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         for (int i = 1; i &amp;lt;= 15; i++) {
 2.             FIZZ:
 3.             {
 4.                 System.out.printf(&quot;%d &quot;, i);
 5.                 if (i % 3 != 0) break FIZZ;
 6.                 System.out.print(&quot;fiz&quot;);
 7.             }
 8.             BUZZ:
 9.             {
10.                 if (i % 5 != 0) break BUZZ;
11.                 System.out.print(&quot;buzz&quot;);
12.             }
13.             System.out.println();
14.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will print&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1
2
3 fiz
4
5 buzz
6 fiz
7
8
9 fiz
10 buzz
11
12 fiz
13
14
15 fizbuzz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-static-methods-can-also-be-final&quot;&gt;3. &lt;code&gt;static&lt;/code&gt; Methods can also be &lt;code&gt;final&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a method is final in a class, you cannot redefine it in a child class.
Static methods, however, are not virtual.
They cannot be redefined.
A static method in the child class of the same signature has nothing to do with the method in the parent class.
Or does it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, it does.
If the static method is &lt;code&gt;final&lt;/code&gt;, then the child class cannot have a method with the same signature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate this, we compile the test classes dynamically.
We do not want any syntax errors in our demo project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         final var FIZZ = &quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 public class Fizz {
 4.                     static void fizzy(){
 5.                     }
 6.                 }
 7.                 &quot;&quot;&quot;;
 8.         final var BUZZ = &quot;&quot;&quot;
 9.                 package com.javax0.blog.tenjava;
10.                 public class Buzz extends Fizz {
11.                     static void fizzy(){
12.                     }
13.                 }
14.                 &quot;&quot;&quot;;
15.         final var testSet1 = Compiler.java().from(
16.                 FIZZ
17.         ).from(BUZZ).compile().load();
18.         testSet1.get(&quot;Buzz&quot;);
19.         Assertions.assertThrows(Compiler.CompileException.class, () -&amp;gt; Compiler.java().from(
20.                 FIZZ.replaceAll(&quot;static void&quot;, &quot;final static void&quot;)
21.         ).from(BUZZ).compile());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We compile FIZZ and BUZZ.
Both classes have a method named &lt;code&gt;fizzy()&lt;/code&gt;.
No problem.
Then we change the method in the class &lt;code&gt;Fizz&lt;/code&gt; to &lt;code&gt;final&lt;/code&gt;.
Now the compilation fails.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You cannot &quot;override&quot; the final method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-goto-is-a-reserved-word&quot;&gt;4. &lt;code&gt;goto&lt;/code&gt; is a reserved word&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no &lt;code&gt;goto&lt;/code&gt; in Java; still, &apos; goto` is a keyword.
The designers of the language thought it to be a good idea.
Future versions of Java may have a &lt;code&gt;goto&lt;/code&gt; statement.
Let&amp;#8217;s reserve this as a keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         Compiler.java().from(&quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 class NoGotoPlease{
 4.                   public void _goto(){
 5.                   }
 6.                 }
 7.                 &quot;&quot;&quot;
 8.         ).compile();
 9.         Assertions.assertThrows(Compiler.CompileException.class, () -&amp;gt; Compiler.java().from(&quot;&quot;&quot;
10.                 package com.javax0.blog.tenjava;
11.                 class NoGotoPlease{
12.                   public void goto(){
13.                   }
14.                 }
15.                 &quot;&quot;&quot;
16.         ).compile());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we name the method &lt;code&gt;_goto&lt;/code&gt;, it is okay.
Using it without an underscore in the front: it is a keyword.
It does not compile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you consider that &lt;code&gt;var&lt;/code&gt;, on the other hand, is NOT a keyword&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-var-is-not-a-keyword-in-java&quot;&gt;5. &lt;code&gt;var&lt;/code&gt; is not a keyword in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 10  introduced &lt;code&gt;var&lt;/code&gt;.
There are a lot of articles about how you can use &lt;code&gt;var&lt;/code&gt; and why &lt;code&gt;var&lt;/code&gt; is not syntactic sugar.
However, &lt;code&gt;var&lt;/code&gt; is also not a keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it was a keyword, we could have a program, like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. public class VarNotKeyword {
 2.     final int var = 13;
 3.
 4.     void myMethod() {
 5.         int var = var().var;
 6.     }
 7.
 8.     VarNotKeyword var() {
 9.         return new VarNotKeyword();
10.     }
11.
12. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which was a valid code before Java 10.
It still is because &lt;code&gt;var&lt;/code&gt; is not a keyword, but it would be ruined if it was.
Luckily, it is not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You cannot name a class to be &lt;code&gt;var&lt;/code&gt;.
This means that even though &lt;code&gt;var&lt;/code&gt; is not a keyword, we may still have some incompatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-stream-operations-are-mutating&quot;&gt;6. Stream operations are mutating&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also a Java secret, but at least this knowledge is not useless.
After all, who would like to read an article full of useless things?
As a matter of fact, there was a question on a Java interview, so it may even be essential to know.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you chain the stream methods, they transform streams.
There is no operation happening until the final terminal operation is chained up and starts to execute.
The stream operations without the terminal operation only build up the operation chain.
They transform one stream into a new stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not only!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stream operations, like &lt;code&gt;map&lt;/code&gt;, also modify the stream they are attached to.
The stream will remember that an operation was already attached to it and will throw an exception if you try to form a stream.
The following code demonstrates this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final Stream&amp;lt;Object&amp;gt; stream = Stream.of(&quot;a&quot;, 2, 3, new Object[2]);
2.         final var stringStream1 = stream.map(Object::toString);
3.         try {
4.             final var stream2 = stream.map(obj -&amp;gt; &quot; &quot; + obj);
5.         } catch (IllegalStateException e) {
6.             System.out.println(e);
7.         }
8.         final var string = stringStream1.collect(Collectors.joining(&quot;\n&quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output of this is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalStateException: stream has already been operated upon or closed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-streams-do-not-always-run&quot;&gt;7. Streams do not always run&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You know that the intermediary operations on a stream do not run if there is no terminal operation.
The terminal operation is the one that runs the streams invoking all the intermediary ones for the elements.
However, not all terminal operations run the whole chain.
It may lead to surprises in some cases.
To see that, let&amp;#8217;s use &lt;code&gt;peek()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;peek()&lt;/code&gt; is a stream intermediary method that does not modify the stream.
The Javadoc of the method in the official JDK documentation says:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same Javadoc then gives a sample that uses &lt;code&gt;System.out.println&lt;/code&gt; to print values from a stream in different stages.
We will do the same&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var w = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).toArray();
3.         System.out.println(w.length);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sample goes through the elements of the stream.
It prints the elements of the stream and then the number of the elements as we have collected them to an &lt;code&gt;Object[]&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1
2
3
4
5
apple
bird
3.1415926
8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is nice and dandy.
What if we do not collect the elements?
In the example above, we are only interested in the number of elements; there is no reason to collect them into an array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final long z = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).count();
3.         System.out.println(z);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We expect to get the same output as before.
The reality, however, is that the output this time is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where did the elements go?
Why &lt;code&gt;peek&lt;/code&gt; does not print the elements?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the terminal operation &lt;code&gt;count()&lt;/code&gt; does not execute the stream pipeline.
Therefore, the &lt;code&gt;peek()&lt;/code&gt; action is not invoked.
There is no magic or secret in it.
The JavaDoc of &lt;code&gt;count()&lt;/code&gt; explains it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An implementation may choose to not execute the stream pipeline &amp;#8230;&amp;#8203; if it is capable of computing the count directly from the stream source.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, like the one in the example above, the terminal operation &lt;code&gt;count()&lt;/code&gt; does not need to iterate through the stream to know the number of elements.
So it does not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even the documentation of &lt;code&gt;peek()&lt;/code&gt; has a link to this fact.
Nobody reads documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-strictfp-is-a-modifier&quot;&gt;8. &lt;code&gt;strictfp&lt;/code&gt; is a modifier&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once upon a time, there was a keyword called &lt;code&gt;strictfp&lt;/code&gt;.
It was introduced in Java 1.2 and required the floating point calculations to be performed differently.
Floating point calculations traditionally used the format IEEE 754 standard defined.
The early x86 processors with the x87 floating point coprocessor worked differently.
The coprocessor used a longer format, allowing more precision.
The &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; values were 64bit, but the generated code stored the intermediate values on more bits during a calculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before Java 1.2, the compiler generated machine code modifying the result of every intermediate value to 64bit.
This required extra machine code operations and slowed the calculation down.
It was not only slower but more error-prone to overflow errors.
A calculation result could be okay with the 64-bit precision while some intermediate values overflowed.
Using more precision provided by the hardware could lead to the correct value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;strictfp&lt;/code&gt; was introduced to let the compiler generate a more effective floating-point code.
With 1.2 and later till Java 17, the compiler generates code using the extra precision unless the class or method is &lt;code&gt;strictfp&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;just kidding&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;strictfp&lt;/code&gt; means that the floating calculation will result in the exact wrong result on all platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Times change.
Pentium 4 in 2001 allows the compiler to avoid the extra code for strict floating point.
Java could generate the strict floating point effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 17 came 20 years later, and Java changed again.
Java 17 later uses strict arithmetic even when &lt;code&gt;strictfp&lt;/code&gt; is not specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can still use it, and reflectively query its existence on a class, interface, or non-abstract method, but the Java compiler does not use it anymore.
Maybe, the Java compiler was the only one using &lt;code&gt;strictfp&lt;/code&gt; even in the past.
At least, I have never met anyone who needed that and used it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-there-are-multiple-arraylist-implementations-in-the-jdk&quot;&gt;9. There are multiple &lt;code&gt;ArrayList&lt;/code&gt; implementations in the JDK&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have programmed Java for a long time, you know that you can easily create a list of elements calling &lt;code&gt;Array.asList()&lt;/code&gt;.
If you look at the implementation of this static method, you can see that it is simply:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @SafeVarargs
    @SuppressWarnings(&quot;varargs&quot;)
    public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; asList(T... a) {
        return new ArrayList&amp;lt;&amp;gt;(a);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;in the class &lt;code&gt;java.util.Arrays&lt;/code&gt;.
Although the method&amp;#8217;s return type is the interface &lt;code&gt;List&lt;/code&gt;, the documentation guarantees that the return type is &lt;code&gt;ArrayList&lt;/code&gt;.
It says&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns a fixed-size list backed by the specified array.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So it is an &lt;code&gt;ArrayList&lt;/code&gt;.
Yes and no.
Let&amp;#8217;s try the following program:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         try {
2.             final ArrayList&amp;lt;Integer&amp;gt; x = (ArrayList) Arrays.asList(1, 2, 3, 4);
3.         } catch (ClassCastException cce) {
4.             System.out.println(cce);
5.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output will be&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.ClassCastException: class java.util.Arrays$ArrayList cannot be cast to class java.util.ArrayList (java.util.Arrays$ArrayList and java.util.ArrayList are in module java.base of loader &apos;bootstrap&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The returned list is an &lt;code&gt;ArrayList&lt;/code&gt;, but it is a &lt;code&gt;java.util.Arrays$ArrayList&lt;/code&gt; and not &lt;code&gt;java.util.ArrayList&lt;/code&gt;.
These are two different classes and are not compatible.
One cannot be converted to the other; only the simple name is the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Two classes are the same if their &lt;em&gt;canonical name&lt;/em&gt; is the same and were loaded by one class loader.
The simple name being the same is not enough.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why did the implementors of &lt;code&gt;asList()&lt;/code&gt; create a new &lt;code&gt;ArrayList&lt;/code&gt; class?
Probably they wanted to create optimized code.
The list this method returns is backed up by an array just like the &lt;code&gt;java.util&lt;/code&gt; one.
However, this array cannot be resized.
It is the same array that you provided as an argument.
It is not copied or cloned.
It remains in its place and is used by the list implementation.
You can see that in the following code sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final Integer[] w = {1, 2, 3};
2.         final var wl = Arrays.asList(w);
3.         Assertions.assertEquals(1, wl.get(0));
4.         w[0] = 55;
5.         wl.set(1, 66);
6.         Assertions.assertEquals(55, wl.get(0));
7.         Assertions.assertEquals(66, w[1]);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the code modifies the array, the list also gets modified.
When the list is modified, the array also gets modified.
That is because they are one and the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-something-something&quot;&gt;10. something != something&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently a friend (Istvan Kovács) posted a puzzle on &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7022233914991640576/&quot;&gt;Linked-in&lt;/a&gt;.
What should you write to the place of &lt;code&gt;???&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var variable = ???;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The question was: what should you write into the place of the &lt;code&gt;???&lt;/code&gt; characters?
Unless you want to have a failing test, you need something which is not equal to itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It cannot be an object, because &lt;code&gt;==&lt;/code&gt; compares the reference &quot;address&quot;, therefore an object is always &lt;code&gt;==&lt;/code&gt; to itself.
It can only be a primitive value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution comes from the &lt;a href=&quot;https://ieeexplore.ieee.org/document/30711&quot;&gt;IEEE 754&lt;/a&gt; standard.
It has the sentence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The exceptions are C predicates “ x == x ” and “ x != x ”, which are respectively 1 and 0 for every
infinite or finite number x but reverse if x is Not a Number ( NaN )&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although it talks about the C language, Java has inherited a lot from it.
Java implements the standard as we have already discussed related to the &lt;code&gt;strictfp&lt;/code&gt; keyword.
That way the code sample is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var variable = Float.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var variable = Double.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-summary&quot;&gt;11. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have visited ten Java features.
These are not important.
Writing about these was fun, and I hope reading them was also fun.
I tried to be precise, and I could not resist including some information that may also be useful despite the article title.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know any other more or less useless facts about Java, please write them down in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam</summary></entry><entry><title type="html">Hidden Classes in Java 15</title><link href="https://javax0.github.io/2023/01/05/hidden-classes.html" rel="alternate" type="text/html" title="Hidden Classes in Java 15" /><published>2023-01-05T00:00:00+01:00</published><updated>2023-01-05T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/05/hidden-classes</id><content type="html" xml:base="https://javax0.github.io/2023/01/05/hidden-classes.html">&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Article Management Technical Details&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes&quot;&gt;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Article source &lt;a href=&quot;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam&quot;&gt;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java can have anonymous classes from the very start.
(Well, actually, they came in version 1.1 only.)
However, anonymous classes were not anonymous.
You did not need to name them, but under the hood, they were named by the Java compiler.
If you are familiar with the command &lt;code&gt;javap&lt;/code&gt;, you can &quot;disassemble&quot; a JAR file and see the name of the compiler generated for the anonymous classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 15 introduced hidden classes, which do not have a name.
Almost, as you will see.
It is not part of the language but part of the JDK.
There is no language element to create hidden classes, but JDK methods and classes come to the rescue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we will discuss&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;what hidden classes are, and what is the reason to have them,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how you can use hidden classes,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to load hidden classes using the JDK methods and, finally&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to easily create and load hidden classes using &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I created SourceBuddy, an Apache v2.0 licensed open-source program.
While creating the code, I learned a few things about hidden classes I wanted to share with you.
You may also look at this article as a SourceBuddy promotion, which is ok if you do that.
Nevertheless, I hope to successfully add extra value to this article so that this is not simply a promo.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-what-are-hidden-classes&quot;&gt;2. What are hidden classes?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an easy-to-read &lt;a href=&quot;https://www.baeldung.com/java-hidden-classes&quot;&gt;introductory article&lt;/a&gt; about hidden classes on Baeldung.
If you are impatient and do not care about some intricate details, go there and read that article.
Baeldung articles are always short, focusing on the most important and correct.
They give a good starting point, which there would be no reason to repeat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hidden classes were proposed in the &lt;a href=&quot;https://openjdk.org/jeps/371&quot;&gt;JEP371&lt;/a&gt;, and it reads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;hidden &amp;#8230;&amp;#8203; classes that cannot be used directly by the bytecode of other classes&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a bit short and may not be easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A hidden class is loaded into the JVM.
When a class is in source code format or byte code, it cannot be &quot;hidden&quot;.
This term can refer only to loaded classes.
Calling them secretly loaded classes could be more appropriate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A class gets hidden when it is loaded in a particular way so that it remains secret in front of other code parts.
Remaining hidden does not mean that other codes cannot use this class.
They can so long as long they &quot;know&quot; about the secret.
The big difference is that this class is not &quot;advertised&quot; because you cannot find it using the name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you load a class the hidden way creating a hidden class, you will have a reference to this class.
Using the reflective methods, you can instantiate the class many times, and then you can invoke methods, set, and get fields.
If the class implements an interface or extends a class, you can cast the instance reference to the interface and class and invoke the methods without reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class is hidden for two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it does not have a name other classes could reference, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there is no reference from the class loader to the class.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you call &lt;code&gt;getName()&lt;/code&gt; or &lt;code&gt;getSimpleName()&lt;/code&gt; on a variable referencing a hidden class, you will get some string.
These are names for messages for humans and are irrelevant for the other classes.
When a class refers to another class it needs the canonical name.
&lt;code&gt;getCanonicalName()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.
The canonical name is the actual name of the class, which is non-existent in the case of hidden classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the class cannot be found through the class loader without the canonical name, there is no reason for the loader to keep a reference to the class.
Why would it keep a reference when it cannot give the class to anyone?
Keeping a reference would have only one side effect: preventing the GC from unloading the class so long as the class loader is alive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since there is no reference from the class loader, the GC can unload the class object as soon as it is out of use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-what-is-the-use-of-hidden-classes&quot;&gt;3. What is the use of hidden classes?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://openjdk.org/jeps/371&quot;&gt;JEP371&lt;/a&gt; describes the reason for hidden classes.
It says&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allow frameworks to define classes as non-discoverable implementation details of the framework so that they cannot be linked against other classes nor discovered through reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many frameworks use dynamically created classes.
They are proxy classes in most cases.
A proxy class implements an interface or extends another class, and when invoked, it calls an instance of the interface or the original class.
It usually does something extra as well, or else there would be no reason for the proxy class and instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example is the Spring framework when your code requires injecting a request bean into a session bean.
(Or any other shorter lifecycle bean into a longer one.)
Several threads can serve different requests at the same time, all belonging to the same session.
All these threads will see the same session bean, but they magically will see their request beans.
The magic is a proxy object extending the request bean&amp;#8217;s class.
When you call a method on the request bean, you invoke the proxy instance.
It checks the thread and the request it serves and forwards the call to the appropriate request bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another example is JPA lazy loading.
You can have an SQL table where each row references the previous one.
When you try to load the last record, it will automatically load the previous one, which indeed will load the one before.
It will load the whole table.
It happens unless you annotate the field as lazy.
It means that the actual data from the database has to be loaded only when it is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you load the record, you get a proxy object.
This proxy object knows which record it refers to and will load the record from the database only when a method is called.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same mechanism is used for Aspect Oriented Programming and many other cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can create a proxy class using only the JDK reflection API so long as the target class implements the interface you want to proxy.
You can use the &lt;a href=&quot;https://bytebuddy.net/&quot;&gt;ByteBuddy&lt;/a&gt; library if there is no such interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/cglib/cglib&quot;&gt;cglib&lt;/a&gt; library is widely used and well-known in many frameworks, but it has been deprecated recently.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you create such classes, you do not need any name for these classes.
You get the reference to the class and the reference to the instance.
The framework injects the reference to the field it has to, and then the code uses them as any object.
It does not need to know the name of the class.
All it needs to know is that it is an instance of the target class or interface.
However, some codes may discover the name.
These classes have some names that reflection can discover.
Some &quot;clever&quot; junior may discover it and play some neat trick that you may have later issues maintaining.
Would it be better if there was no name at all?
Probably yes, it would be cleaner.
Hence: hidden classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The proxy classes may also cause issues when you implement the &lt;code&gt;equals(Object other)&lt;/code&gt; method.
The usual implementation of the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)&quot;&gt;equals&lt;/a&gt; method compares the &lt;code&gt;other&lt;/code&gt; object&amp;#8217;s class to the actual class.
It will eventually be &lt;code&gt;false&lt;/code&gt; when the other object is a proxy instance.
What the &lt;code&gt;equals()&lt;/code&gt; method should check is the assignability whenever there is a possibility that the &lt;code&gt;other&lt;/code&gt; object is a proxy.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, there is another reason to have hidden classes.
As soon as a class has a name, it is possible to discover it by the name.
The class loader has to keep the class alive to keep it discoverable.
The class loader has a reference to the loaded classes.
It means the garbage collector will not be able to collect the class, even when it is no longer in use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a class has no name, the class loader does not need to keep a reference to this class.
Class loaders do not keep references to hidden classes unless you explicitly instruct them to do so.
When all instances of a hidden class are collected, and there is no reference to the class, the garbage collector will recognize it as garbage.
The class loader will not keep the class in memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, the frameworks will not over-consume memory when a long-running code creates a lot of classes.
Better frameworks that collect unused classes do not need to create separate class loaders for these ephemeral classes.
There is no need to create a short-living, disposable class loader to make the class also disposable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support extending an access control nest with non-discoverable classes.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is the second bullet point in the list of goals in the &lt;a href=&quot;https://openjdk.org/jeps/371&quot;&gt;JEP371&lt;/a&gt;.
JVM can load hidden classes in a way that they become a member of a nest.
What is a nest?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know what a nesting host is and are impatient, jump to the following quote.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, it is a long story, but since it is Christmas time, I am on holiday, and the press will not print this article on the paper wasting tree, here it goes.
(I wrote this article for weeks. It is still not published, and already next year, January.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once upon a time, Java version 1.0 did not have inner classes.
Now, you better stop reading it here if you ask me what inner classes are.
Then Java version 1.1 introduced inner classes but did not change the JVM structure.
The JVM did not know anything about inner classes.
The Java compiler created regular (almost) top-level classes from the inner classes.
It invented some funny names, like &lt;code&gt;A$B&lt;/code&gt; when there was a class &lt;code&gt;B&lt;/code&gt; inside &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can try to define an &lt;code&gt;A$B&lt;/code&gt; top-level class in the same package where the class &lt;code&gt;A&lt;/code&gt; containing the class &lt;code&gt;B&lt;/code&gt; is.
&lt;code&gt;A$B&lt;/code&gt; is a valid name.
You will see what the compiler does.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was some hacking with the visibility though.
An inner class has the same visibility as the top-level class.
Anything private inside one compilation unit (file) is visible.
Visibility, however, is also enforced by the JVM.
But the JVM sees two top-level classes.
The compiler generated bridge methods in the classes wherever needed to overcome this issue.
They are package level for the JVM, and when called, they pass on the call to the private method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then came Java 11 something like 25 years later and &lt;a href=&quot;https://openjdk.org/jeps/181&quot;&gt;introduced the nest control&lt;/a&gt;.
Since Java 11, every class has a relation to another class or to itself, which is the nest host of the class.
Classes having the same nest host can see each other&amp;#8217;s, private members.
The JVM does not need the bridge methods anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you load a class hidden, you can specify it to become a member of the same nest (having the same nest host) as the class that created the lookup object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We have not yet discussed what a lookup object is and how to load a class hidden.
It will come.
As for now: a lookup object is something that can load a byte array as a hidden class into the JVM memory.
When a lookup object is created from inside a method of a class, the lookup object will belong to that class.
When a class is loaded as hidden using the lookup object, it is possible to pass an option to make the new hidden class belong to the nest in which the code created the lookup object.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without the hidden class functionality, I do not know any other possibility to load a class that will belong to an already existing nest.
If you know of any possibility, write it in a comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following bullet point reads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support aggressive unloading of non-discoverable classes, so that frameworks have the flexibility to define as many as they need.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is an important point.
When you create a class, it remains in the memory so long as the classloader is alive.
Classloaders keep references to all the classes they loaded.
These references say that some code may ask the classloader to return the loaded class object by the name.
The application logic may long forget the class; nobody will ever need it.
Still, the garbage collector cannot collect it because there is a reference in the class loader.
A solution is to create a new class loader for every new non-hidden dynamically created class, but that is overkill.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Classloaders loading hidden classes do not keep a reference to the hidden class by default.
As with the nesting host, it is possible to provide an option to differ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not see any reason.
There is no name, not discoverable, but keep an extra reference so the GC cannot throw it away.
If you see any reasonable use case, again: comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deprecate the non-standard API sun.misc.Unsafe::defineAnonymousClass, with the intent to deprecate it for removal in a future release.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Very well.
Yes.
Absolutely.
Separate articles and many of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do not change the Java programming language in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice point. Sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With these, we discussed what hidden classes are.
You should have a firm understanding of their nature and why they are essential.
We also derailed a bit to nest hosting or host nesting, nesting hosting&amp;#8230;&amp;#8203; whatever.
I hope it was of some value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following, I will discuss how we create hidden classes using the JDK API and then using &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-creating-hidden-classes&quot;&gt;4. Creating Hidden Classes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Articles and tutorials showing how to load hidden classes use precompiled Java classes.
These are usually part of the running application.
The tutorial calculates the path to the &lt;code&gt;.class&lt;/code&gt; file and reads the byte code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically this is correct but does not demonstrate the basic need for hidden class loading: load dynamically created classes hidden.
These classes are not dynamically created and could be loaded the usual way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we will create a class from text, Java source on the fly&amp;#8201;&amp;#8212;&amp;#8201;during run-time&amp;#8201;&amp;#8212;&amp;#8201;and then load the resulting byte code as a hidden class.&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Code Sample Disclaimer&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code samples are available on GitHub in the &lt;a href=&quot;https://github.com/javax0/javax0.github.io/tree/master/_projects&quot;&gt;project directory&lt;/a&gt;.
Each article has a project directory named &lt;code&gt;YYYY-MM-DD-article-title&lt;/code&gt; where the project code files are.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this article it is &lt;code&gt;2023-01-05-hidden-classes&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The samples are automatically copied from the project directory to the article using Jamal.
No manual copy, no outdated stale samples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample project for this article contains only unit test files.
The class is &lt;code&gt;TestHiddenClassLoader&lt;/code&gt;.
We have the source code for the hidden class stored in a field variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.     private static final String CODE1 = &quot;&quot;&quot;
 2.             package com.javax0.blog.hiddenclasses;
 3.
 4.             public class MySpecialClass implements TestHiddenClassLoader.Hello {
 5.
 6.                 @Override
 7.                 public void hello() {
 8.                     System.out.println(&quot;Hello, from the hidden class.&quot;);
 9.                 }
10.             }
11.             &quot;&quot;&quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The interface is also inside the same class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.     interface Hello {
2.         void hello();
3.     }
4.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following code is from one of the unit tests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var byteCode = Compiler.java().from(CODE1).compile().get();
2.         final var lookup = MethodHandles.lookup();
3.         final var classLookup = lookup.defineHiddenClass(byteCode, true);
4.         final var helloClass = (Class&amp;lt;Hello&amp;gt;) classLookup.lookupClass();
5.
6.         final var hello = helloClass.getConstructor().newInstance();
7.         hello.hello();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; library in this code to compile the Java source to byte code.
The first line of the sample does that.
We use &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; version 2.1.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need a lookup object to load the compiled byte code as a hidden class.
This object is created on the second line.
The lookup object is used on the third and fourth lines to load the class hidden.
Line 3 defines the class loading it into the JVM.
The second argument, &lt;code&gt;true&lt;/code&gt;, initializes the class.
That is when the &lt;code&gt;static{}&lt;/code&gt; blocks execute.
The last line invokes the interface-defined method &lt;code&gt;hello()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the local variable &lt;code&gt;hello&lt;/code&gt; is an instance of an object, a hidden class.
What are a hidden class&amp;#8217;s name, simple name, and canonical name?
Let&amp;#8217;s print it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         System.out.println(&quot;1. &quot; + hello.getClass());
2.         System.out.println(&quot;2. &quot; + hello.getClass().getClassLoader());
3.         System.out.println(&quot;3. &quot; + this.getClass().getClassLoader());
4.         System.out.println(&quot;4. &quot; + hello.getClass().getSimpleName());
5.         System.out.println(&quot;5. &quot; + hello.getClass().getName());
6.         System.out.println(&quot;6. &quot; + hello.getClass().getCanonicalName());
7.         System.out.println(&quot;7. &quot; + lookup.getClass());
8.         System.out.println(&quot;8. &quot; + lookup.getClass().getClassLoader());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Output Disclaimer&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
The output in the unit tests is redirected calling &lt;code&gt;System.setOut()&lt;/code&gt;.
The output is collected to a file and then this file is included calling &lt;code&gt;include [verbatim]&lt;/code&gt; Jamal macro into the article.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello, from the hidden class.
1. class com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b0c00
2. jdk.internal.loader.ClassLoaders$AppClassLoader@5b37e0d2
3. jdk.internal.loader.ClassLoaders$AppClassLoader@5b37e0d2
4. MySpecialClass/0x00000008011b0c00
5. com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b0c00
6. null
7. class java.lang.invoke.MethodHandles$Lookup
8. null&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the output from calling &lt;code&gt;hello()&lt;/code&gt; and then the name as printed from the implicit &lt;code&gt;toString()&lt;/code&gt; from the class object, the class loader that loaded the hidden class, the simple name, the name, and in the last line the canonical name.
This last one is interesting as it is &lt;code&gt;null&lt;/code&gt;, showing no class name.
It is hidden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class, although hidden, has a reference to the class loader that loaded it.
It is needed when there is anything to resolve during the execution of the code.
The difference is that the class loader does not have a reference to the class.
One direction from the class to the loader exists, but the other direction from the loader to the class does not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class loader is the same as the one that loaded the class calling &lt;code&gt;MethodHandles.lookup()&lt;/code&gt;.
You can see that since we printed out the class loader of the &lt;code&gt;this&lt;/code&gt; object in the test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we also print out the class of the lookup object and the class loader.
The latter is &lt;code&gt;null&lt;/code&gt;, which means the bootstrap class loader loaded it. (For more information on class loaders, I can recommend reading the article &lt;a href=&quot;https://www.baeldung.com/java-classloaders&quot;&gt;class loaders&lt;/a&gt; from the Baeldung blog.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should also note that the interface &lt;code&gt;hello&lt;/code&gt; is package private.
It is still visible for the dynamically created code because it is in the same package and module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with Java 9, there is a module system in Java.
Many developers I meet say they are not interested in JPMS; they do not need to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact is that you DO use it, whether you want it or not.
It is the same as concurrent programming.
Java is concurrent; at least there are three threads in a JVM, so your code runs in a concurrent environment, whether you want it or not.
You may not have trouble understanding the details for a long time.
However, when you start digging deeper and creating code that uses some &quot;tricks&quot; or does something special, you almost certainly face some weird errors.
You must know and understand the underlying theory to understand the errors, handle them, mitigate the cause, and fix the bug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Loading hidden classes dynamically created is precisely such a trick.
You should learn Java Modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the hidden class is loaded, it is in the same package as the one where the interface is defined.
It is not enough, however, as we will see an example in the next section.
It is also a requirement that the same class loader loads the interface and the hidden class.
That way, the interface, and the hidden class are in the same module, in this case, the same unnamed module.
The different class loaders load classes into different modules; thus, when you load a class using a different class loader, it may not see the package fields, methods, interfaces, etc., even if they are in the same package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is not the only requirement that the lookup object is from the same module.
It is also a requirement that it is from the same package as the class to be loaded.
We must stop here to clarify things, to be painfully precise, because it is easy to confuse things at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lookup object is an instance of a class in the &lt;code&gt;java.lang.invoke&lt;/code&gt; package.
The class loader loaded this class is &lt;code&gt;null&lt;/code&gt; as shown in the output.
It means the bootstrap class loader.
The bootstrap class loader is implemented in C/C++ and not in Java.
No corresponding Java object represents this class loader; thus, there cannot be a reference to it.
It is solved by returning &lt;code&gt;null&lt;/code&gt; from &lt;code&gt;getClassloader()&lt;/code&gt;.
There is a module, package, and class that &quot;belongs&quot; to the lookup object.
The code&amp;#8217;s module, package, and class were called the &lt;code&gt;MethodHandles.lookup()&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You cannot create a hidden class from one package for another.
If you try that, like in the following sample code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         try {
2.             final var byteCode = Compiler.java()
3.                     .from(&quot;package B; class A{}&quot;).compile().get();
4.             MethodHandles.lookup().defineHiddenClass(byteCode, true);
5.         } catch (Throwable t) {
6.             System.out.println(t);
7.         }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;still from the test class &lt;code&gt;com.javax0.blog.hiddenclasses.TestHiddenClassLoader&lt;/code&gt;.
The class to be loaded is NOT in the same package as the caller for &lt;code&gt;MethodHandles.lookup()&lt;/code&gt;.
It will result in the printout:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalArgumentException: B.A not in same package as lookup class&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-creating-hidden-classes-the-easy-way&quot;&gt;5. Creating hidden classes the easy way&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the previous section, we created a new class dynamically and loaded the new class hidden.
The loading was done using lookup objects we acquired from the &lt;code&gt;MethodHandles&lt;/code&gt; class.
In this section, we will see how we can do the same by calling the fluent API of &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code creating a class saying hello is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var hello = Compiler.java()
2.                 .from(CODE1.replaceAll(&quot;\\.Hello&quot;, &quot;.PublicHello&quot;)).hidden()
3.                 .compile().load().newInstance(PublicHello.class);
4.         hello.hello();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this code, we replaced the interface from &lt;code&gt;Hello&lt;/code&gt; to &lt;code&gt;PublicHello&lt;/code&gt;, which you may guess:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.     public interface PublicHello {
2.         void hello();
3.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is essentially the same as the previous interface but is &lt;code&gt;public&lt;/code&gt;.
The process is much more straightforward than before.
We specify the source code; we declare that it is a hidden class calling &lt;code&gt;hidden()&lt;/code&gt;, and we compile, load, and ask for an instance cast to &lt;code&gt;PublicHello&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to use the package-private interface, like (not replacing &lt;code&gt;Hello&lt;/code&gt; to &lt;code&gt;PublicHello&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         Assertions.assertThrows(IllegalAccessError.class, () -&amp;gt;
2.                 Compiler.java().from(CODE1).hidden().compile().load().newInstance(PublicHello.class));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;we will get an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalAccessError: class com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b1c00 cannot access its superinterface com.javax0.blog.hiddenclasses.TestHiddenClassLoader$Hello (com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b1c00 is in unnamed module of loader com.javax0.sourcebuddy.ByteClassLoader @4e5ed836; com.javax0.blog.hiddenclasses.TestHiddenClassLoader$Hello is in unnamed module of loader &apos;app&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is explained clearly in the error message.
The interface and the class implementing it are in two different modules.
Both are unnamed modules, but they are not the same.
In Java, starting with Java 9, there are modules, and when the application does not use modules, it essentially creates pseudo modules putting the classes there.
The JDK classes are still in modules, like &lt;code&gt;java.base&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The hidden class creation, as created above, uses a separate class loader to load the dynamically written Java class.
The separate class loader loads classes to its module.
Code in different modules cannot see classes from other modules unless they are public.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; does a little trick to load a class hidden, it cannot overcome this restriction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Loading a hidden class needs a lookup object.
The application usually provides this object.
The calls above do not specify any lookup object, but &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; still needs one.
To have one, it creates one.
The lookup object remembers the class called &lt;code&gt;MethodHandles.lookup()&lt;/code&gt; to create one.
When loading a class hidden, it is required that the lookup object &quot;belongs&quot; to the class&amp;#8217;s package.
The lookup object was created, calling for it from a class, which is &lt;strong&gt;in&lt;/strong&gt; that package.
The lookup object will &quot;belong&quot; to that class and hence to the class&amp;#8217;s package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To have a lookup object that comes from a class from a specific package we need a class in that package that can give us one.
If there is none in the code, we must create one dynamically.
&lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; does that exactly.
It creates the Java source code for the class, compiles it and loads it, instantiates it, and calls the  &lt;code&gt;Supplier&amp;lt;MethodHandles.Lookup&amp;gt;&lt;/code&gt; defined &lt;code&gt;get()&lt;/code&gt; method the class implements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a kind of trick that seems to violate the access control built-in to Java.
We seem to get a new hidden class in a package that was not prepared for it.
A package is protected from external access in Java (trivial).
Only public and protected members and classes can be used from outside the package.
The package can be accessed using reflection from the outside, but only in the same module, or the module has to be opened explicitly.
Similarly, an object loaded using a lookup object should be in the same package and access the package&amp;#8217;s internal members and whatnot if a class in the package provided that lookup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we can see from the error message, it only seems to be the package.
In reality, the new hidden class is in a package with the same name but in a different module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to have a hidden class in the same package and not only a package with the same name, you need a lookup object from that package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example, it is simple.
Our &lt;code&gt;Hello&lt;/code&gt; interface is in the same package as the test code so that we can create the lookup object ourselves:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.         final var hi = Compiler.java().from(CODE1).hidden(MethodHandles.lookup()).compile()
2.                 .load().newInstance(Hello.class);
3.         hi.hello();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access to a lookup object may be a bit more complex in real-life examples.
When the code calling &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; is in a different package than the code generated, the lookup object creation cannot be in the &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; calling code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example, we will see how that will be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a class &lt;code&gt;OuterClass&lt;/code&gt; in the package &lt;code&gt;com.javax0.blog.hiddenclasses.otherpackage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. package com.javax0.blog.hiddenclasses.otherpackage;
 2.
 3. import java.lang.invoke.MethodHandles;
 4.
 5. public class OuterClass {
 6.
14.     public static MethodHandles.Lookup lookup() {
15.         return MethodHandles.lookup();
16.     }
17. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Some lines are skipped from the class. We will use those later.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This class has a method, &lt;code&gt;lookup()&lt;/code&gt;.
It creates a lookup object and returns it.
We will have a proper lookup object if we call this method from our code.
Note that this class is in a different package and not the same as our test code.
Our test code is in &lt;code&gt;com.javax0.blog.hiddenclasses&lt;/code&gt;, and &lt;code&gt;OuterClass&lt;/code&gt; is a package deeper.
Essentially in a different package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also have another class for the demonstration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1. package com.javax0.blog.hiddenclasses.otherpackage;
2.
3. class MyPackagePrivateClass {
4.
5.     void sayHello(){
6.         System.out.println(&quot;Hello from package private.&quot;);
7.     }
8.
9. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a package-private class with a package-private method in it.
If we dynamically create a hidden class, as in the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         final var hidden = Compiler.java().from(&quot;&quot;&quot;
 2.                 package com.javax0.blog.hiddenclasses.otherpackage;
 3.
 4.                 public class AnyName_ItWillBeDropped_Anyway {
 5.                     public void hi(){
 6.                         new MyPackagePrivateClass().sayHello();
 7.                     }
 8.                 }&quot;&quot;&quot;).hidden(OuterClass.lookup()).compile().load().newInstance();
 9.         final var hi = hidden.getClass().getDeclaredMethod(&quot;hi&quot;);
10.         hi.invoke(hidden);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is one topic that we have not touched on.
It is how to create a nestmate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you have a binary class file, you can load it as a nestmate to a class that provides a lookup object.
The JVM does not care how that class was created.
When we compile Java sources, we only have one possibility.
The class has to be an inner class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you use &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt;, you have to provide your source code as an inner class to the one you want the hidden to be nest mate with.
The source code and the class was already provided when you compiled your code.
It is not possible to insert into THAT source code any new inner class.
We have to fool the compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We provide a class having the same name as the one we want to insert our inner class later.
When the compilation is done, we have the outer class and the inner class as well.
We tell the class loading to forget the outer and only to load the inner one, hidden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is what we will do.
This time we display here the whole outer class that we use for demonstration including the skipped lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. package com.javax0.blog.hiddenclasses.otherpackage;
 2.
 3. import java.lang.invoke.MethodHandles;
 4.
 5. public class OuterClass {
 6.
 7.     // skip lines
 8.     private int z = 55;
 9.
10.     public int getZ() {
11.         return z;
12.     }
13.     // end skip
14.     public static MethodHandles.Lookup lookup() {
15.         return MethodHandles.lookup();
16.     }
17. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you will see, it has a private field and a getter to test the changed value effectively.
It also has the before-mentioned &lt;code&gt;lookup()&lt;/code&gt; method.
The code dynamically creating an inner class is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         final var inner = Compiler.java().from(&quot;&quot;&quot;
 2.                         package com.javax0.blog.hiddenclasses.otherpackage;
 3.
 4.                         public class OuterClass
 5.                                                 {
 6.                             private int z;
 7.
 8.                             public static class StaticInner {
 9.                                public OuterClass a(){
10.                                  final var outer = new OuterClass();
11.                                  outer.z++;
12.                                  return outer;
13.                                }
14.                             }
15.
16.                         }&quot;&quot;&quot;).nest(MethodHandles.Lookup.ClassOption.NESTMATE).compile().load()
17.                 .newInstance(&quot;StaticInner&quot;);
18.         final var m = inner.getClass().getDeclaredMethod(&quot;a&quot;);
19.         final var outer = (OuterClass)m.invoke(inner);
20.         Assertions.assertEquals(56, outer.getZ());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an &lt;code&gt;OuterClass&lt;/code&gt; in the source, but it is only to help the compilation and to tell &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; the name of the nesting host.
When we call the method &lt;code&gt;nest()&lt;/code&gt; with the option &lt;code&gt;NESTMATE&lt;/code&gt;, it knows that the class &lt;code&gt;OuterClass&lt;/code&gt; is the nesting host.
It also marks the class not to be loaded by the class loader ever.
The inner class compiles to a different byte code, and when it is loaded, it becomes a nestmate of &lt;code&gt;OuterClass&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you pay attention to the intricate details of Java access control discussed in this article, you will notice that we do not provide a lookup object.
And the example above still works.
How is it possible?
There is no magic.
When you call &lt;code&gt;nest()&lt;/code&gt;, &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; looks for the already loaded version of &lt;code&gt;OuterClass&lt;/code&gt; and fetches the lookup object using reflection.
To do that the outer class has to have a static field or method of type &lt;code&gt;MethodHandles.Lookup&lt;/code&gt;.
&lt;code&gt;OuterClass&lt;/code&gt; has a method, so &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt; calls this method to get the lookup object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example above creates a static inner class.
You can create the same way a non-static inner class as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The difference between static and non-static inner classes in Java is that non-static inner class instances have a reference to an outer class instance.
Static inner classes do not.
It is where the name comes from.
Static inner class instances belong to the class.
Non-static belongs to an instance of the outer class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get the reference to the outer class instance, the inner class&amp;#8217;s constructor is modified.
When you specify a constructor for an inner class, the compiled adds an extra parameter in front of the other parameters specified in the Java source code.
This extra first parameter is the reference to the outer class instance.
This reference is stored in a field not available at the source level but used by the code to access the fields and methods of the outer instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The creation of a non-static inner class looks very much the same as the creation of a static inner class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.         final var outer = new OuterClass();
 2.         final var inner = Compiler.java().from(&quot;&quot;&quot;
 3.                         package com.javax0.blog.hiddenclasses.otherpackage;
 4.
 5.                         public class OuterClass {
 6.                             private int z;
 7.
 8.                             public class Inner {
 9.                                public void a(){
10.                                  z++;
11.                                }
12.                             }
13.
14.                         }&quot;&quot;&quot;).nest(MethodHandles.Lookup.ClassOption.NESTMATE).compile().load()
15.                 .newInstance(&quot;Inner&quot;, classes(OuterClass.class), args(outer));
16.         final var m = inner.getClass().getDeclaredMethod(&quot;a&quot;);
17.         m.invoke(inner);
18.         Assertions.assertEquals(56, outer.getZ());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need an instance of the outer class to instantiate the inner class.
It is the variable &lt;code&gt;outer&lt;/code&gt;.
We must pass this variable to the constructor through the &lt;code&gt;newInstance()&lt;/code&gt; API of &lt;a href=&quot;https://github.com/sourcebuddy/sourcebuddy&quot;&gt;SourceBuddy&lt;/a&gt;.
This method call has a version that accepts a &lt;code&gt;Class[]&lt;/code&gt; and an &lt;code&gt;Object[]&lt;/code&gt; array specifying the constructor argument types and values.
In the case of an inner class, it is the outer class and an instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-summary&quot;&gt;6. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article discussed some details of the hidden classes introduced in Java 15.
We went a little deeper than the usual introductory articles.
Now you understand how hidden classes work and how to use them in your projects.&lt;/p&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;How to Comment&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the Disqus commenting possibility to comment.
If you find any incorrectness in the article, you are welcome to mention it.
You can also access the source code of the article on github at&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam&quot;&gt;&lt;code&gt;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are welcome to create a &lt;a href=&quot;https://github.com/javax0/javax0.github.io/issues/new&quot;&gt;ticket&lt;/a&gt;, create a  &lt;a href=&quot;https://github.com/javax0/javax0.github.io/fork&quot;&gt;fork&lt;/a&gt;, suggest modification via pull requests.
Note that this repository also contains the demonstration sample source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For other aspects of commenting read the &lt;a href=&quot;https://javax0.github.io/about/&quot;&gt;ABOUT&lt;/a&gt; page of this blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam 1. Introduction</summary></entry><entry><title type="html">Technology behind this post</title><link href="https://javax0.github.io/2022/12/07/blog-posting.html" rel="alternate" type="text/html" title="Technology behind this post" /><published>2022-12-07T00:00:00+01:00</published><updated>2022-12-07T00:00:00+01:00</updated><id>https://javax0.github.io/2022/12/07/blog-posting</id><content type="html" xml:base="https://javax0.github.io/2022/12/07/blog-posting.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/Users/verhasp/github/javax0.github.io/_posts&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog is the continuation of the blog post at the WordPress-hosted javax0 blog that was at &lt;a href=&quot;https://javax0.wordpress.com&quot;&gt;javax0.wordpress.com&lt;/a&gt;.
The technology, the hosting, and all were okay by that time, but times changed.
This blog post describes why I changed the blog technology and what technology I use here to write these blog posts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-problems-with-wordpress&quot;&gt;2. Problems with WordPress&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, I have to state that I am not saying or implying that WordPress would not be an excellent platform.
It is a well-established and a kind of one of its kind, de-facto number-one blogging forum.
The problems are specific to my particular needs for this blog.
These needs may not be specific to my person, but a bit more general: technical blogging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is like Opel, Toyota, VW, or any other average, workhorse car type.
Opel is a good car; it runs, is reliable, and is reasonably priced.
However, if I am a farmer and need to plow my fields, I will probably choose a tractor instead.
In this analogy, the farmer is a &lt;em&gt;technical&lt;/em&gt; blogger.
Emphasis is on &lt;em&gt;technical&lt;/em&gt;.
For anybody else: WordPress is an excellent choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look at the issues that I had.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-markup&quot;&gt;2.1. Markup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I write anything, I like to edit some markup.
I can use Word or LibreOffice.
I was using DEC Write in the early 1990-is if you are old enough to know what that is but not too old to forget things and still remember.
Even at that time, I preferred markups, which at that time were TeX and LaTeX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I even wrote a hyphenation preprocessor for Tex for the Hungarian language, and it became a standard part of some Linux distributions.
Since they installed Linux on  Mars Rovers, sometimes I entertain myself with the idea that some of my code got as far as planet Mars.
Please let me have this fantasy, and do not correct me if I am wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could use other markups, like APT, Markdown, Asciidoc, and many others over the years.
These days two of those are used mainly, Markdown and Asciidoc.
WordPress hosted site supported or still supports Markdown, but I started to prefer Asciidoc for these blogs.
The only problem was that I could not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-2-code-samples&quot;&gt;2.2. Code Samples&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I write some technical blogs, I include code samples.
I develop the code first, and then I write the article.
That is the principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, the practice is that after I started to write the article, I realized that the code was not perfect.
So I changed the code and copied the relevant part to the article sample displays.
Unless I forget to update some of those after a few iterations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was also the case when I wrote my first book, and I have sworn that it will never happen again.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-3-version-control&quot;&gt;2.3. Version Control&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Editing on WordPress works, and you can look at the different versions.
But it is not comparable with the possibilities provided by a Git repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-the-new-blog-technology&quot;&gt;3. The New Blog Technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-github-pages-and-jekyll&quot;&gt;3.1. Github Pages and Jekyll&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new technology stack for blogging is based on GitHub pages.
It is not unique, and it has support for Jekyll, which is a static blogging engine.
Setting up a Jekyll-based blog is pretty straightforward.
I already had the organization name &lt;code&gt;javax0&lt;/code&gt; on GitHub.
It only seemed logical to use this as &lt;code&gt;javax0.github.io&lt;/code&gt; for blogging.
Later I may use the &lt;code&gt;javax0.com&lt;/code&gt; domain that I also keep.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installing Jekyll on my MacBook was a bit tricky.
First, I had to install the newest Ruby.
An old version of Ruby comes preinstalled on every macOS.
This old version is not suitable for running Jekyll.
I used brew, but it failed, complaining that I was not on the sudoer list.
It took a while until I realized that, for some reason, two &lt;code&gt;sudo&lt;/code&gt; programs were installed on my machine.
The brew installer used a different one than what I reached from the command line.
I had to add myself to the other sudoer&amp;#8217;s list as well.
The last trick was to tweak the &lt;code&gt;PATH&lt;/code&gt; so Jekyll would use the newest Ruby version.
After that, there was still some problem when I configured Jekyll to run locally and on GitHub.
It was executing some commands following some StackOverflow page suggestions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes I had no idea what I was doing.
I can only hope that I did not install malware during the process.
You, AsciiDoc, Jekyll, and other tool developers have all my trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I integrated JRuby into Jamal, but I do not program in Ruby.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-2-jekyll-asciidoc-plugin&quot;&gt;3.2. Jekyll Asciidoc Plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to Jekyll, I also installed the Asciidoc plugin for Jekyll.
Since both Asciidoctor and Jekyll are written in Ruby, it was nothing more than issuing a few commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-3-jamal&quot;&gt;3.3. Jamal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extra part, which is not a standard Asciidoc-boosted Jekyll installation, is my use of Jamal.
The main reason to use Jamal is to include the code samples in the blog posts, but it does much more than that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote above that I struggled with maintaining the code samples when writing my books.
I created the pyama tool in Python for the second book I wrote.
It copies the code snippets into the text file that I edited.
Later I developed the snippet module for Jamal, which revolves around this concept.
Keep the source in the code files, have only a reference in the document, and copy it in the CI/CD process.
I hesitated to use Jamal and the snipped module myself for a long time.
It is easier to edit a file showing some code when the code is there a few lines above.
Pyama was copying the code into the edited file.
Jamal does not do that.
Jamal can also do that, but I do not recommend using that feature.
A source file is a source file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I created the Asciidoctor Jamal plugin that can plug Jamal functionality into Asciidoctor and delivers Jamal WYSIWYG editing in IntelliJ, the situation changed drastically.
There was no reason more to use something like pyama.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Pyama is still available in my GitHub, but there are much better tools for the purpose.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Jamal, I can include code snippets and delete or keep some lines by selecting regular expressions or line numbers.
I can number the lines, and I can still use all the Asciidoctor formatting features at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-4-installing-jamal&quot;&gt;3.4. Installing Jamal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installing Jamal to use in IntelliJ is very simple.
All it takes to download a ZIP file and extract the content into the projects &lt;code&gt;.asciidoctor/lib&lt;/code&gt; directory.
You should open IntelliJ settings and associate the &lt;code&gt;.jam&lt;/code&gt; extension with the Asciidoctor plugin (in addition to the other default extensions already there).
Restart IntelliJ, and you can start editing your first Jamal-enabled Asciidoc file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you edit the file on the left pane, you see the formatted text on the right pane.
It is how the plugin works, but you can also use Jamal macros now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://javax0.github.io/assets/images/image-2022-12-09-16-47-43-394.png&quot; alt=&quot;image 2022 12 09 16 47 43 394&quot; width=&quot;500&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-5-blogging-macros&quot;&gt;3.5. Blogging Macros&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are not too many specific macros that differ from other documentation macros.
Most of the macros I use in Jamal are snippet macros and built-in core ones.
Some macros help scan the snippets following the directory naming conventions of the site.
There are some macros to reference one article from another easily.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-6-deploying-the-site&quot;&gt;3.6. Deploying the Site&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment of the site is simply a git push.
Almost.
The site has to be built before.
There is a simple build script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/sh
./build
git add --all docs
git commit -m &quot;deploy&quot;
git push
open https://javax0.github.io&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This script builds the site, adds all the new and modified generated files, and then pushes it to the git server.
It also opens the web page, so I can immediately see the blog&amp;#8217;s opening page after it is deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I tried to let GitHub pages do the building of the Jekyll site.
After all, it supports Jekyll.
The problem is that GitHub does not support the Jekyll Asciidoc plugin.
It is a bit strange: Asciidoc is natively supported by GitHub, and any readme or other files can be Asciidoc.
Still, GitHub Sites cannot be, except if they are built and deployed elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-building-the-site&quot;&gt;4. Building the site&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;update at 2023-01-25&lt;/div&gt;
&lt;p&gt;Building the site was first was a simple &lt;code&gt;Makefile&lt;/code&gt; starting Jamal via &lt;code&gt;jbang&lt;/code&gt; to convert all the &lt;code&gt;.adoc.jam&lt;/code&gt; files to &lt;code&gt;.adoc&lt;/code&gt; from the directory &lt;code&gt;_posts&lt;/code&gt;.
This, however, resulted almost 400 files in the directory.
During the course of the last ten years I wrote 180 articles.
All their &lt;code&gt;.adoc.jam&lt;/code&gt; and the generated &lt;code&gt;.adoc&lt;/code&gt; files got into one flat directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To mitigate this situation I decided to group the articles into subdirectories by years.
It means eleven subdirectories now and 15 to 20 more in my lifetime.
It is manageable.
The problem was I did not know how to write a general &lt;code&gt;make&lt;/code&gt; rule that says &lt;code&gt;.adoc.jam&lt;/code&gt; files in the subdirectories should be compiled to &lt;code&gt;.adoc&lt;/code&gt; files in the &lt;code&gt;_posts&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I used Jamal to the rescue.
What else?
I created a &lt;code&gt;Makefile.jam&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;{@sep [% %] }[%@import tab.jim%]\
all:  [%!@for [evalist] $file in `//` [%@listDir (pattern=&quot;\\.adoc\\.jam$&quot;) _posts%]`//` =[%@comment%]\
 _posts/[%@file (format=$naked1)$file%]%]\

[%!!#for $dir in ([%@listDir (maxDepth=1 pattern=&quot;/\\d{4}$&quot;)_posts%])=[%@comment%]\
  [%@ident
    [%@for [evalist] $file in `//` [%@listDir (maxDepth=1 pattern=&quot;\\.adoc\\.jam$&quot;) $dir%]`//` =[%@comment%]\
    [%#define YYYY=[%#replace (regex)|$dir|.*/_posts/||%]%]\
    [%#define SOURCE=_posts/[%YYYY%]/[%#file (format=$simpleName)$file%]%]\
    [%#define TARGET=_posts/[%@file (format=$naked1)$file%]%]
[%TARGET%] : [%SOURCE%]
[%HT%]jbang jamal@verhas -open=&apos;{%&apos; -close=&apos;%}&apos; [%SOURCE%] [%TARGET%]
    %]%]%]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not expect you to understand this structure.
It is fairly complex,but it shows the power of Jamal in some way.
You should not feel intimidated.
If you decide to use Jamal only for 10% of what it can do, it is fine.
It is a tool to provide value and not something you need to master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Jamal code lists all the files and generates &lt;code&gt;Makefile&lt;/code&gt; rules for each &lt;code&gt;.adoc.jam&lt;/code&gt; article.
I struggled a bit with spaces and tabs.
IntelliJ does not preserve the tabs, except when it is a &lt;code&gt;Makefile&lt;/code&gt;.
However, &lt;code&gt;Makefile.jam&lt;/code&gt; is NOT &lt;code&gt;Makefile&lt;/code&gt;.
As a workaround I created a &lt;code&gt;tab.jim&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;{@define HT=	} &amp;lt;- this is a tab character
A simple tab character.

This file is not to be edited other than vi.
Other editors may replace the TAB character with spaces.
Files can import this file and use {HT} in Makefiles.
To exit vi press the escape key and then capital Z twice.
Without saving: escsape and then :q!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The comment in the file says it all, I wil not repeat here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I may later move the &lt;code&gt;YYYY&lt;/code&gt; yearly subdirectories from &lt;code&gt;_posts&lt;/code&gt; to make the &lt;code&gt;_posts&lt;/code&gt; directory something that I never need to open in the editor.
Look at the GitHub repo to see if I did that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-what-will-be-missing&quot;&gt;5. What will be Missing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WordPress very neatly showed the statistics of the site.
I do not know if I can get such statistics here.
Probably not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, most of the readers for my articles came from the republishing sites DZone and Java Code Geeks.
I will keep them.
(Note to myself: I have to inform them about the blog&amp;#8217;s new location officially.)
They automatically fetch the blog posts.
So I do not need to do anything.
They select from the published articles.
They only repost the good ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know any other aggregator I should contact, give me some advice. I am open.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-summary&quot;&gt;6. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope blogging using this toolset will be much more fun than the old technology.
At least, I am less likely to end up in some articles with &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; infested source codes.
(I had to apply a unique trick to get them here.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This type of blogging using Asciidoc, Jekyll, and Jamal is more a Doc as a Code that I advocate heavily.
We will see how it will work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Docs as Code is not enough</title><link href="https://javax0.github.io/2022/05/24/docs-as-code.html" rel="alternate" type="text/html" title="Docs as Code is not enough" /><published>2022-05-24T00:00:00+02:00</published><updated>2022-05-24T00:00:00+02:00</updated><id>https://javax0.github.io/2022/05/24/docs-as-code</id><content type="html" xml:base="https://javax0.github.io/2022/05/24/docs-as-code.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-docs-as-code&quot;&gt;1. Docs as Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-1-it-is-the-first-step-to-the-right-direction&quot;&gt;1.1. it is the first step to the right direction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The approach to treating your documentation the same way as program code is a step in the right direction, but it is far from state-of-the-art. The practice is detailed on many websites that advocate the use of docs-as-code (DAC). For example the &lt;a href=&quot;https://www.writethedocs.org/guide/docs-as-code/&quot;&gt;Write the Docs&lt;/a&gt; community has a great article on docs-as-code. The article lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Issue Trackers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Version Control (Git)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plain Text Markup (Markdown, reStructuredText, Asciidoc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Reviews&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automated Tests&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;as required tools to this approach. Another example is &lt;a href=&quot;https://docs-as-co.de/&quot;&gt;docs-as-code&lt;/a&gt;, which is a toolset for documentation maintenance. They write&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With docs-as-code, you treat your documentation the same way as your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You use…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;your IDE to write it
your version control system to store and version it
your test-runner to test it
your build system to build and deploy it&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is very much the same as the approach of &lt;a href=&quot;https://www.writethedocs.org/guide/docs-as-code/&quot;&gt;Write the Docs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-3.svg&quot; alt=&quot;docs as code 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have to have your documents in a format supported by the DAC tools. Use version control, document review, automated build, issue tracker, and automated tests. It is very much the same approach we use in code development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially it is a copy of the professional software development process&apos; coding part. Documentation, however, is not coding. While it is a good idea to reuse some parts of the coding methodology technics, there is more to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-4.svg&quot; alt=&quot;docs as code 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-what-docs-as-code-ignores&quot;&gt;2. What docs-as-code Ignores&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coding is a transformation process converting documentation, namely the requirement documentation, into code. The requirement documentation may not be documentation in the classical sense. It may be some note, a list of wishes on a jot of paper. Still, the essence is to convert some human affine into machine affine. Some techniques try to support this process, but most of these techniques die when in production. For example, creating the documentation as UML and making it so precise that the code generation is automatic afterward is not feasible. You could do it in principle, but the cost of the effort is too high. It is cheaper to create the code than documentation that defines the functionality with mathematical precision.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documenting an application is precisely the opposite direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-5.svg&quot; alt=&quot;docs as code 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something that failed in one direction does not necessarily fail when we try to go the other direction. You may not be able to jump from the river to the bridge, but the other way is very much possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating the program documentation, our source is precisely describing the functionality we want to document. After all, the code is the most precise documentation of the application functionality. We already have the precision, which was not feasible to have for the other way around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The docs-as-code approach, as described by most articles, ignores it. However, it can be amended, and it should be. We can look at it as the next step in the docs-as-code evolution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-the-next-step&quot;&gt;2.1. The next step&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can categorize documentation into two categories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explanatory, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes a document belongs to one of the categories, but documents are a mix of the two most of the time. It may even happen that you cannot even tell if a sentence in a document belongs to one category or the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating an explanatory style text cannot be automated. It needs human effort to create sentences that are clear and easily understandable. The importance is demonstrated by the lack of them in this article, as you may have noticed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, creating the reference text is more or less a mechanical task. The documentarian (a term from write-the-docs) copies the key&amp;#8217;s name to explain how to configure the system and writes a sentence around it. Copies some sample code from the unit tests into a code segment into the Asciidoc documentation and adds explanation. The reference is taken from the code verbatim in these examples, and the explanatory part is added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-1.svg&quot; alt=&quot;docs as code 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can automate the copy of the reference information. Most of the time, it is not automated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The catch is that automation, just as in the case of tests, is more expensive than doing manual work once. It pays back when the actual operation (copy and paste) happens many times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it usually does. To be more precise, it is supposed to happen. However, the documentation maintenance misses the task in practice, and the document becomes stale. It is where the docs-as-code automated test may help. In principle, it is possible to create a test checking the documentation and find discrepancies between the names in the code and the documentation. It can be heuristic, or it can be exact. To do it the exact way, the documentation and/or the code needs meta-information helping the test to perform the consistency check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such a test can signal that the documentation may be outdated and need change. For example, it may give a warning, like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;The name of the field XYZ is not the same as in the documentation ZZZ. Change ZZZ in the documentation to XYZ&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a foolish and outrageous error message. I immediately know that the program architecture is messed up when I see such an error message. If the test can tell me what to do with such precision, it could fix the problem with the same effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is much better if we let the automated build copy the actual name instead of checking that the human did it correctly. To do that, the documentarian should put the meta-information into the documentation instead of the copied value. The meta-information is read by the automated build tool, and using that; it copies the actual value or values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the value changes, the build process will automatically change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another advantage is the lesser possibility for error. If the documentarian makes a mistake copying the field&amp;#8217;s name, the text will not complain. If he writes XXY instead of XYZ, the documentation will contain the wrong name unless some human review process discovers and fixes the bug. If the documentarian inserts the meta information and makes a mistake, the build process will likely fail. If instead of XYZ, I have to write &lt;code&gt;{java:field com.javax0.jamal.api#XYZ}&lt;/code&gt; any simple typo will be detected. If there is a field  &lt;code&gt;com.javax0.jamal.api#XYZ&lt;/code&gt; it is unlikely to have also &lt;code&gt;com.javax0.jamal.api#XXY&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-2.svg&quot; alt=&quot;docs as code 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this approach, the docs-as-code workflow is extended. The documentation&amp;#8217;s &quot; source code &quot; starts behaving as a source code. The automated build is no longer simply formatting and executing language checks. The goal is to automate everything that you can automate. It may not be cheaper than doing the work manually, but certainly less error-prone.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-tools&quot;&gt;3. Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the above theory is pleasant and attractive but worth nothing unless there are tools to implement them. My motivation writing this article is partly to advocate the use of the open-source tool &lt;a href=&quot;https://github.com/verhas/jamal&quot;&gt;Jamal&lt;/a&gt;. Although Jamal is a general-purpose macro language and can be used in many areas, its primary purpose is document maintenance support. It is a simple to write, non-intrusive macro language. Using it, you can insert meta-information into the documentation to be processed by the automated build. You can use it with any plain text document format, like Asciidoc, markdown, apt, etc. The latest releases also support the DOCX format to use it even with Microsoft Word.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of the macros is quite extensive, and it is easy to add your own. The documentation support module can gather information from the application&amp;#8217;s source code as snippets. Snippets can then be transformed, extracted, and inserted into the documentation. Information from the code can be extracted using text tools using the source code text. However, in the case of Java applications, the document transformation may also collect information using reflection. It can be done because Jamal itself is a Java application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It can be started on the command line as a maven plugin and a maven extension. It is also embedded as a doclet and a taglet to allow Jamal macros in the JavaDoc documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use macros to check the consistency of the documentation and the code. You can mark some part of the code as a snippet, and the documentation related to the specific region may contain the hash code of the piece. When the part changes in the source code, the macro evaluation will automatically signal an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application of Jamal is independent of build automation. It can be antora, jBake, or simply a maven project with different plugins. The application of Jamal is also independent of the documentation format. It can be Asciidoc, markdown, apt, etc., as long as the documentation format is text. Using the Word extension included in the command line version, it can even be Microsoft DOCX Word format.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Treating documentation as source code is a good idea and a good start. It can, and should, however, be extended to include more features. When you treat your documentation as a source code, you should not stop simply using built automation, automated testing, review processes, and versioning. You should also apply techniques like Don&amp;#8217;t Repeat Yourself (DRY). Extra tools exist and seamlessly integrate with the already existing build and formatting tools to do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;comments-imported-from-wordpress&quot;&gt;Comments imported from Wordpress&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Docs as Code is not enough - Java Code Geeks - R4 News&lt;/strong&gt; 2022-04-04 05:02:00&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Docs as Code is not enough [&amp;#8230;]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Docs as Code</summary></entry><entry><title type="html">Lambda and final variables</title><link href="https://javax0.github.io/2021/12/08/lambda-and-final-variables.html" rel="alternate" type="text/html" title="Lambda and final variables" /><published>2021-12-08T00:00:00+01:00</published><updated>2021-12-08T00:00:00+01:00</updated><id>https://javax0.github.io/2021/12/08/lambda-and-final-variables</id><content type="html" xml:base="https://javax0.github.io/2021/12/08/lambda-and-final-variables.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lambda expressions can use the variables in the scope of the lambda expression, but only if they are final or effectively final. What is the reason for that? Why is that? It is an interesting question because the answer is not apparent and opinionated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is only one ultimate answer, though: because that is what the Java Language Specification says. But saying that is boring. True, but boring. I prefer the answer that says lambdas can only use final and effectively final local variables because lambdas are not closures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following, I will discuss what final and effectively final mean, the differences between closures and lambdas, and finally, how we can create closures in Java using lambda expressions. I am not advocating the creation of lambda expression-based closures in Java, nor the abandonment of the idea.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-final-and-effectively-final&quot;&gt;2. &lt;code&gt;final&lt;/code&gt; and effectively final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When declaring it, a local variable is final if we use the &lt;code&gt;final&lt;/code&gt; keyword. The compiler will also require that the variable get a value only once. This value assignment may happen at the location of the declaration but can be a bit later. There can be multiple lines that assign value to the final variable so long as long only one of them can execute for each method invocation. The typical case is when you declare a final variable without assigning value to it, and then you have an &lt;code&gt;if&lt;/code&gt; statement giving different values in the &quot;then&quot; and the &quot;else&quot; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Needless to say that the variable has to be initialized before the lambda expression is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A variable is effectively final if not final, but it could be. It gets an assigned value at the declaration or can get a given value only once.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-life-of-a-lambda&quot;&gt;3. Life of a Lambda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lambda expression is a kind of anonymous class. The JVM handles it differently, and it is more efficient than an anonymous class, not to mention that it is more readable. However, from our point of view, we can think of it as an inner class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Anon {

    public static Function&amp;lt;Integer, Integer&amp;gt; incrementer(final int step) {
        return (Integer i) -&amp;gt; i + step;
    }
    public static Function&amp;lt;Integer, Integer&amp;gt; anonIncrementer(final int step) {
        return new Function&amp;lt;Integer, Integer&amp;gt;() {
            @Override
            public Integer apply(Integer i) {
                return i + step;
            }
        };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the lambda expression is created, the JVM makes an instance of the lambda class that implements the &lt;code&gt;Function&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var inc = Anon.incrementer(5);
assertThat(inc.getClass().getName()).startsWith(&quot;javax0.blog.lambdas.Anon$$Lambda$&quot;);
assertThat(inc.getClass().getSuperclass().getName()).isEqualTo(&quot;java.lang.Object&quot;);
assertThat(inc.getClass().getInterfaces()).hasSize(1);
assertThat(inc.getClass().getInterfaces()[0]).isEqualTo(java.util.function.Function.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JVM will place this object on the heap. In some cases, the compiler may realize that the object cannot get out of the method&amp;#8217;s scope, and in this case, it may store it in the stack. It is called local variable escape analysis, which can just put any object on the stack, which cannot escape from the method and may die together with the method return. However, for our discussion, we can forget this advanced feature of the Java environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lambda is created in the method and stored in the heap. It is alive so long as long there is a hard reference to this object and is not collected. If a lambda expression could reference and use a local variable, which lives in the stack, it would need access to something gone after the method returns. It is not possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two solutions to overcome this discrepancy. One is what Java follows, creating a copy of the variable&amp;#8217;s value. The other one is creating a closure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-closure-and-groovy&quot;&gt;4. Closure and Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will look at Groovy examples when talking about closures. The reason to select Groovy is that it is very close to Java. We will look at some Groovy examples, and for the matter of demonstration, we will use Java-style as much as possible. Groovy is more or less compatible with Java; any Java code can be compiled as a Groovy source. The actual semantic may, however, be different slightly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy solved the issue of local variable accessibility creating closures. The closure closes the functionality and the environment into a single object. For example, the following Groovy code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MyClosure {
    static incrementer() {
        Integer z = 0
        return { Integer x -&amp;gt; z++; x + z }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;creates a closure, similar to our lambda expression, but it also uses the local variable &lt;code&gt;z&lt;/code&gt;. This local variable is not final and not effectively final. What happens here is that the compiler creates a new class that contains a field for each local variable used in the closure. A new local variable references an instance of this new class, and the local variable uses all references to this object and its fields. This object, along with the &quot;lambda expression&quot; code, is the closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the object is on the heap, it stays alive as long as there is a hard reference. The object, which holds the described function has one, so this object will be available so long as long the closure is alive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def inc = MyClosure.incrementer();
assert inc(1) == 2
assert inc(1) == 3
assert inc(1) == 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is clearly shown in the test execution where the closure increases the &lt;code&gt;z&lt;/code&gt; amount at each execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Closures are lambdas with state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-lambda-in-java&quot;&gt;5. Lambda in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java approaches this problem differently. Instead of creating a new synthetic object to hold the referenced local variables, it simply uses the values of the variables. Lambdas seem to use the variables, but they don&amp;#8217;t. They use only constants copying the value of the variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When designing lambdas, there were two options. I was not part of the team making the decisions, so what I write here is only my opinion, guessing, but it may help you understand why the decision was made. One option could be to copy the variable&amp;#8217;s value when the lambda is created, not caring about the later value change of the local variable. Could it work? Inevitably. Would it be readable? In many cases, it would not be. What if the variable changes later? Will the lambda use the changed value? No, it will use the copied, frozen value. It is different from how variables work usually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java requires the variable to be final or effectively final to solve this discrepancy. The disturbing case having the different variable value when the lambda is used is avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When designing language elements, there are always tradeoffs. On one end, some constructs provide great power to the hands of the developers. However, great power requires great responsibility. Most of the developers are not mature enough to take on the responsibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other side of the scale are the simple constructs providing less functionality. It may not solve some problems so elegantly, but you also cannot create unreadable code so easily. Java is usually going this way. There has been an obfuscated C contest almost since the language C started. Who can write less readable code in that programming language? Since then, almost all languages started the contest, except two. Java and Perl. In the case of Java, the contest would be dull, as you cannot write obfuscated code in Java. In the case of Perl, the contest is pointless.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-closure-in-java&quot;&gt;6. Closure in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to have a closure in Java, you can create one yourself. The good old way is to use anonymous, or for that matter, regular classes. The other is to mimic the behavior of the Groovy compiler and create a class that encapsulates the closure data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Groovy compiler creates the class for you to enclose the local variables, but nothing stops you from making it manually if you want it in Java. You have to do the same thing. Move every local variable that the closure uses into a class as an instance field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Function&amp;lt;Integer, Integer&amp;gt; incrementer() {
    AtomicInteger z = new AtomicInteger(0);
    return x -&amp;gt; {
        z.set(z.get() + 1);
        return x + z.get();
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We only had one local variable, &lt;code&gt;int z&lt;/code&gt;, in our example. We need a class that can hold an int. The class for that is &lt;code&gt;AtomicInteger&lt;/code&gt;. It does many other things, and it is usually used when concurrent execution is an issue. Because of that, some overhead may slightly affect the performance, which I abjectly ignore for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there are more than one local variables, we need to craft a class for them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Function&amp;lt;Integer, Integer&amp;gt; incrementer() {
    class DataHolder{int z; int m;}
    final var dh = new DataHolder();
    return x -&amp;gt; {
        dh.z++;
        dh.m++;
        return x + dh.z*dh.m;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in this example, we can declare a class even inside the method, and for the cohesion of the code, it is the right place. Eventually, it is easy to see that this approach is working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final var inc = LambdaComplexClosure.incrementer();
assertThat(inc.apply(1)).isEqualTo(2);
assertThat(inc.apply(1)).isEqualTo(5);
assertThat(inc.apply(1)).isEqualTo(10);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is, however, questionable if you want to use this approach. Lambdas generally should be stateless. When you need a state that a lambda uses, in other words, when you need a closure, which the language does not directly support, you should use a class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-summary&quot;&gt;7. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This article discussed why a lambda expression can access only final and effectively final local variables.* We also discussed the reason and how different languages approach this issue.* Finally, we looked at a Groovy example and how Java can mimic this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, if anyone asks you the interview question, why a lambda expression can access only final and effectively final local variables, you will know the answer. Because the Java Language Specification says so. Everything else is speculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You an find the code for this article along with the article text source code at &lt;a href=&quot;https://github.com/verhas/demo/tree/master/LambdaFinal&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/demo/tree/master/LambdaFinal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;comments-imported-from-wordpress&quot;&gt;Comments imported from Wordpress&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Peter Verhas&lt;/strong&gt; 2021-12-30 21:49:42&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good catch! I fixed that sentence. It has to be &quot;The JVM will place this object on the heap.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Filip&lt;/strong&gt; 2021-12-30 20:46:14&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is lambda stored on heap or on stack? In paragraph four of &quot;Life of lambda&quot; it is said that lambda is created on a stack, but description is suggesting that it is created on a heap.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lambda and final variables - Java Code Geeks - R4 News&lt;/strong&gt; 2021-12-19 14:24:08&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;] Posted on Java Code Geeks with the permission of Peter Verhas, partner of our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lambda and final variables &amp;#8211; Java Code Geeks &amp;#8211; Munaf Sheikh&lt;/strong&gt; 2021-12-19 14:30:58&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lambda and final variables – Java Code Geeks &amp;#8211; Munaf Sheikh&lt;/strong&gt; 2021-12-19 17:35:51&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Lambda and Final Parameters</title><link href="https://javax0.github.io/2021/12/08/lambda-and-final-parameters.html" rel="alternate" type="text/html" title="Lambda and Final Parameters" /><published>2021-12-08T00:00:00+01:00</published><updated>2021-12-08T00:00:00+01:00</updated><id>https://javax0.github.io/2021/12/08/lambda-and-final-parameters</id><content type="html" xml:base="https://javax0.github.io/2021/12/08/lambda-and-final-parameters.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lambda expressions can use the variables in the scope of the lambda expression, but only if they are final or effectively final. What is the reason for that? Why is that? It is an interesting question because the answer is not apparent and opinionated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is only one ultimate answer, though: because that is what the Java Language Specification says. But saying that is boring. True, but boring. I prefer the answer that says lambdas can only use final and effectively final local variables because lambdas are not closures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following, I will discuss what final and effectively final mean, the differences between closures and lambdas, and finally, how we can create closures in Java using lambda expressions. I am not advocating the creation of lambda expression-based closures in Java, nor the abandonment of the idea.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-final-and-effectively-final&quot;&gt;2. &lt;code&gt;final&lt;/code&gt; and effectively final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When declaring it, a local variable is final if we use the &lt;code&gt;final&lt;/code&gt; keyword. The compiler will also require that the variable get a value only once. This value assignment may happen at the location of the declaration but can be a bit later. There can be multiple lines that assign value to the final variable so long as long only one of them can execute for each method invocation. The typical case is when you declare a final variable without assigning value to it, and then you have an &lt;code&gt;if&lt;/code&gt; statement giving different values in the &quot;then&quot; and the &quot;else&quot; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Needless to say that the variable has to be initialized before the lambda expression is created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A variable is effectively final if not final, but it could be. It gets an assigned value at the declaration or can get a given value only once.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-life-of-a-lambda&quot;&gt;3. Life of a Lambda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lambda expression is a kind of anonymous class. The JVM handles it differently, and it is more efficient than an anonymous class, not to mention that it is more readable. However, from our point of view, we can think of it as an inner class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Anon {

    public static Function&amp;amp;lt;Integer, Integer&amp;amp;gt; incrementer(final int step) {
        return (Integer i) -&amp;amp;gt; i + step;
    }
    public static Function&amp;amp;lt;Integer, Integer&amp;amp;gt; anonIncrementer(final int step) {
        return new Function&amp;amp;lt;Integer, Integer&amp;amp;gt;() {
            @Override
            public Integer apply(Integer i) {
                return i + step;
            }
        };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the lambda expression is created, the JVM makes an instance of the lambda class that implements the &lt;code&gt;Function&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var inc = Anon.incrementer(5);
assertThat(inc.getClass().getName()).startsWith(&quot;javax0.blog.lambdas.Anon$$Lambda$&quot;);
assertThat(inc.getClass().getSuperclass().getName()).isEqualTo(&quot;java.lang.Object&quot;);
assertThat(inc.getClass().getInterfaces()).hasSize(1);
assertThat(inc.getClass().getInterfaces()[0]).isEqualTo(java.util.function.Function.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JVM will place this object on the heap. In some cases, the compiler may realize that the object cannot get out of the method&amp;#8217;s scope, and in this case, it may store it in the stack. It is called local variable escape analysis, which can just put any object on the stack, which cannot escape from the method and may die together with the method return. However, for our discussion, we can forget this advanced feature of the Java environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lambda is created in the method and stored in the heap. It is alive so long as long there is a hard reference to this object and is not collected. If a lambda expression could reference and use a local variable, which lives in the stack, it would need access to something gone after the method returns. It is not possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two solutions to overcome this discrepancy. One is what Java follows, creating a copy of the variable&amp;#8217;s value. The other one is creating a closure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-closure-and-groovy&quot;&gt;4. Closure and Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will look at Groovy examples when talking about closures. The reason to select Groovy is that it is very close to Java. We will look at some Groovy examples, and for the matter of demonstration, we will use Java-style as much as possible. Groovy is more or less compatible with Java; any Java code can be compiled as a Groovy source. The actual semantic may, however, be different slightly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy solved the issue of local variable accessibility creating closures. The closure closes the functionality and the environment into a single object. For example, the following Groovy code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MyClosure {
    static incrementer() {
        Integer z = 0
        return { Integer x -&amp;amp;gt; z++; x + z }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;creates a closure, similar to our lambda expression, but it also uses the local variable &lt;code&gt;z&lt;/code&gt;. This local variable is not final and not effectively final. What happens here is that the compiler creates a new class that contains a field for each local variable used in the closure. A new local variable references an instance of this new class, and the local variable uses all references to this object and its fields. This object, along with the &quot;lambda expression&quot; code, is the closure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the object is on the heap, it stays alive as long as there is a hard reference. The object, which holds the described function has one, so this object will be available so long as long the closure is alive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def inc = MyClosure.incrementer();
assert inc(1) == 2
assert inc(1) == 3
assert inc(1) == 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is clearly shown in the test execution where the closure increases the &lt;code&gt;z&lt;/code&gt; amount at each execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Closures are lambdas with state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-lambda-in-java&quot;&gt;5. Lambda in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java approaches this problem differently. Instead of creating a new synthetic object to hold the referenced local variables, it simply uses the values of the variables. Lambdas seem to use the variables, but they don&amp;#8217;t. They use only constants copying the value of the variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When designing lambdas, there were two options. I was not part of the team making the decisions, so what I write here is only my opinion, guessing, but it may help you understand why the decision was made. One option could be to copy the variable&amp;#8217;s value when the lambda is created, not caring about the later value change of the local variable. Could it work? Inevitably. Would it be readable? In many cases, it would not be. What if the variable changes later? Will the lambda use the changed value? No, it will use the copied, frozen value. It is different from how variables work usually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java requires the variable to be final or effectively final to solve this discrepancy. The disturbing case having the different variable value when the lambda is used is avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When designing language elements, there are always tradeoffs. On one end, some constructs provide great power to the hands of the developers. However, great power requires great responsibility. Most of the developers are not mature enough to take on the responsibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other side of the scale are the simple constructs providing less functionality. It may not solve some problems so elegantly, but you also cannot create unreadable code so easily. Java is usually going this way. There has been an obfuscated C contest almost since the language C started. Who can write less readable code in that programming language? Since then, almost all languages started the contest, except two. Java and Perl. In the case of Java, the contest would be dull, as you cannot write obfuscated code in Java. In the case of Perl, the contest is pointless.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-closure-in-java&quot;&gt;6. Closure in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to have a closure in Java, you can create one yourself. The good old way is to use anonymous, or for that matter, regular classes. The other is to mimic the behavior of the Groovy compiler and create a class that encapsulates the closure data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Groovy compiler creates the class for you to enclose the local variables, but nothing stops you from making it manually if you want it in Java. You have to do the same thing. Move every local variable that the closure uses into a class as an instance field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Function&amp;amp;lt;Integer, Integer&amp;amp;gt; incrementer() {
    AtomicInteger z = new AtomicInteger(0);
    return x -&amp;amp;gt; {
        z.set(z.get() + 1);
        return x + z.get();
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We only had one local variable, &lt;code&gt;int z&lt;/code&gt;, in our example. We need a class that can hold an int. The class for that is &lt;code&gt;AtomicInteger&lt;/code&gt;. It does many other things, and it is usually used when concurrent execution is an issue. Because of that, some overhead may slightly affect the performance, which I abjectly ignore for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there are more than one local variables, we need to craft a class for them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Function&amp;amp;lt;Integer, Integer&amp;amp;gt; incrementer() {
    class DataHolder{int z; int m;}
    final var dh = new DataHolder();
    return x -&amp;amp;gt; {
        dh.z++;
        dh.m++;
        return x + dh.z*dh.m;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in this example, we can declare a class even inside the method, and for the cohesion of the code, it is the right place. Eventually, it is easy to see that this approach is working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final var inc = LambdaComplexClosure.incrementer();
assertThat(inc.apply(1)).isEqualTo(2);
assertThat(inc.apply(1)).isEqualTo(5);
assertThat(inc.apply(1)).isEqualTo(10);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is, however, questionable if you want to use this approach. Lambdas generally should be stateless. When you need a state that a lambda uses, in other words, when you need a closure, which the language does not directly support, you should use a class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-summary&quot;&gt;7. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This article discussed why a lambda expression can access only final and effectively final local variables.* We also discussed the reason and how different languages approach this issue.* Finally, we looked at a Groovy example and how Java can mimic this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, if anyone asks you the interview question, why a lambda expression can access only final and effectively final local variables, you will know the answer. Because the Java Language Specification says so. Everything else is speculation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You an find the code for this article along with the article text source code at &lt;a href=&quot;https://github.com/verhas/demo/tree/master/LambdaFinal&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/demo/tree/master/LambdaFinal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Why and how to do technical interviews?</title><link href="https://javax0.github.io/2021/09/22/why-and-how-to-do-technical-interviews.html" rel="alternate" type="text/html" title="Why and how to do technical interviews?" /><published>2021-09-22T00:00:00+02:00</published><updated>2021-09-22T00:00:00+02:00</updated><id>https://javax0.github.io/2021/09/22/why-and-how-to-do-technical-interviews</id><content type="html" xml:base="https://javax0.github.io/2021/09/22/why-and-how-to-do-technical-interviews.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-why-and-how-to-do-technical-interviews&quot;&gt;1. Why and how to do technical interviews?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;It is a personal blog. The views and opinions expressed in this article are those of the author. They do not represent people, institutions, or organizations that the author may or may not be associated with in a professional or a personal capacity. All information is provided on an as-is basis.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technology companies are growing and need new personnel. In addition, there is natural attrition in the companies. In a highly competitive market, people are leaving for various reasons, and these needs also have to be met through hiring new employees. Therefore, searching for, selecting, and hiring new co-workers are always a must - it is a standard business for every company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Companies usually conduct interviews to assess and select their future colleagues from the pool of aspiring candidates. Even though it is the standard practice, there are a lot of controversies with this approach. You can see many social media posts about harmful practices, wrong questions, and ill-treatment of the candidate. One infamous example was when Google asked candidates in their interviews to estimate the number of golf balls that could fit in a bus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the people having a voice on social media express their opinion that this was total misuse. I tend to see some merit in using such questions, but, as often, personal opinions are irrelevant. So instead of starting a debate about this particular question or similar questionable practices, I will focus on the purpose and the practical approaches we apply when conducting interviews.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I mainly rely on the experiences I gained when completing interviews on behalf of my current employer, but I believe there is nothing company-specific in this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I write &apos;we&apos;, I refer to the whole industry or at least to a large group of companies that follow good practice and not specifically to my employer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-1-what-is-the-purpose-of-conducting-interviews&quot;&gt;1.1. What is the purpose of conducting interviews?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any company could hire a candidate without any prior filtering, but this could cost them a lot. Suppose the candidate does not fit the company or meet the criteria to be successful in a position. In that case, the company would have to pay the salary for the probation period, colleagues guiding the new hire during the onboarding process would invest significant time and effort, and other resources, like office space, infrastructure, heating, network, and so on, that also costs money. It is not a good practice for a company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, the money the company loses is not the main issue. Companies have profit and loss, and you can consider the cost of selecting the right candidate as an investment. The highest cost is not monetary, and it is not on the company side. The candidate is the one who would pay the real price for such a practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the candidates have a safe job and solid position when looking for a new one. However, losing the place at the new job, getting sent away is a substantial personal burden. As a result, candidates may find themselves &quot;in the street&quot; looking for a new position. Not having a current job is hard to explain during the HR interviews. At the same time, the financial burden and the time pressure may also put the candidate into a hard-to-negotiate corner during the salary discussions.
No company should do this to anyone. If a company wants to hire you without proper assessment: run. Fast and far away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The thorough assessments of the candidates&apos; skills, experience, and knowledge are at the other end of the spectrum. Some companies do that by giving out homework, completing full-day assessments filled with role plays, coding tasks, and using other similar techniques to evaluate candidates. The simplest and cheapest way to do an evaluation, however, is an interview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A full-day assessment almost certainly gives a more reliable result, but it requires significant resources from the company. So, as usual in business, we should follow the Pareto principle and shoot for the cheapest good-enough solution. I will talk a bit later about what ‘good enough’ is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overcomplicated hiring processes may distract candidates. Imagine a senior developer who is looking for a new position. How many full-day assessments will they attend? To participate in such a selection, candidates may need to use a vacation day from their holiday budget, and they have to keep it secret at the actual workplace. If your competitor offers you a late afternoon interview instead, you will most probably choose that option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are pros and cons. We cannot tell what the best approach is, and certainly, doing interviews as a selection tool is not the imaginable best, but probably the best existing, and indeed the best we know. Nevertheless, it is the industry standard practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-2-what-is-a-good-interview&quot;&gt;1.2. What is a good interview?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not need to complete the best interview in the world, as I wrote above. We have to complete one that is good enough. To say that, we have to know what we consider to be a good interview. We should have a metric that can tell us which interview is &quot;better&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Candidates often tell me: &quot;This was the best interview of my life.&quot;, even when my conclusion is not to recommend them for hire. Although a happy candidate is essential in bringing your company a good image, it is not the metric we usually look for. A good interview does not need to be enjoyable for the candidate. That is just an extra, a possible byproduct of a good interview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An interview&amp;#8217;s most crucial quality measure is to differentiate a fitting candidate from a non-fitting one. Of course, there are other criteria, like proper communication, politeness, non-disclosure, and conduct. These are all very important. Nevertheless, the primary goal of the interview is the selection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When doing an interview, there are four possible outcomes. The candidate can be fitting or non-fitting, and at the same time, the interviewer recommends or does not recommend the candidate for hire. These are two dimensions with two values each. Each pair is possible, resulting in the four possible outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recommended fitting candidate and the non-recommended non-fitting candidates are the most uncomplicated cases. These are the happy paths.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The remaining two cases, false positive and false negative, are a bit more tricky. The case when the interviewer does not recommend the candidate, although they are fitting, is theoretical. Those candidates do not get employed, and none will discover their fitness. In other words, we will never know when a candidate and/or an interview fall into this category. This case is theoretical in the sense that though it certainly exists, we will never see it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a candidate is recommended but not fitting is the costly situation we already discussed. When it happens, it will be clear for many people in the company who will manage the consequences and deal with the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution for the situation is often to find a better, more suitable position for the person inside the company. It is done falling into the trap of the sunk cost fallacy. The people involved subconsciously feel the relative cost and burden of finding a new position without an existing need and actual vacancy. This cost is born to the candidate. Feeling responsible for the situation, they do not want to put that on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the company has a good hiring and interviewing practice, it rarely happens. We cannot avoid such situations, however. It is not because of the unique nature of the interviews. It is a general measurement theory. Any decision can have four outcomes: true-positive, true-negative, false-positive, and false-negative. No decision system could avoid the false parts. They exist by principle. The only thing we can tune is to push the scale between the false outcomes. What do we want to have less? Is it the false positive or the false negative result which is less desirable?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, you can tell that I am advocating against the false positive cases, which means that we have to design the interview decisions to avoid those even if we get more false-negative results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This advocation is not general, though. It is only for the interview decisions. For example, a cancer screening system should be scaled towards favoring false-positive cases. I would rather choose a few days of panic until the repeated test annuls the false-positive result than die because of a false-negative result not detecting the tumor at an early stage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that we should favor the false-negative cases means that the technical interviewers should recommend hiring only those candidates they are absolutely sure about. When there is any doubt that the candidate is bad, they are better not to be hired.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that by doing so, you will filter out some candidates who are good enough but are not very good. You have your doubts not without reason. The potential loss is insignificant in sending away some of the candidates who would fit but are not &quot;really good&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-3-do-we-judge-the-candidate&quot;&gt;1.3. Do we judge the candidate?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avoid judging the candidate is extremely important. In the previous section, I deliberately used &quot;good candidate&quot; and &quot;bad candidate&quot;. In addition, I used an example (medical screening) that subconsciously compared candidates to cancer. If you felt inappropriate when you first read that, you are on the right track. If not, you have to think about why you did not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We must respect the candidates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technical interviewers have to be humble. Maybe non-trivial at first, but we also must not evaluate the person, and we should not use expressions that may even unintentionally imply that. You cannot do that if you look down on candidates and you do not respect them. The respect has to be authentic. If it is not, you cannot hide it. So the first thing is that you should feel and show genuine care and then work on your communication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is why I prefer to use the word &quot;assess&quot; instead of &quot;judge&quot;. We assess the knowledge, skills, and experience of the candidate. We do not &quot;judge&quot; these, even though linguistically, it would mean the same. For the same reason, I usually talk about the position fitting the candidate and not the candidate fitting the position. Thus, when I say that a position is not good for a specific candidate, nobody will think that it is generally bad, even less that it is stupid or dumb.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, the sentence &quot;The candidate is not good for the position.&quot; is heard and interpreted as &quot;The candidate is not good…&quot; The end of the sentence often gets lost in the communication or during the interpretation. It has to be carefully avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, I meet lead developers, senior, or even architect candidates who lack even basic skills in their current employment. Even though I feel the temptation to doubt whether their current status is well justified, I don&amp;#8217;t. If a candidate’s current position seems to be a lie in the CV, it does not matter. Companies are different, and they need different types of people. There is no such person who is generally not fitting a role. To assess a person&amp;#8217;s fitness for a position, you have to compare the person&amp;#8217;s qualities to the role. Otherwise, you could plainly say that the candidate is ok but can not tell us for what.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-4-work-with-the-candidate&quot;&gt;1.4. Work with the Candidate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When conducting the interview, you work with the candidate. The candidate helps you, and you help the candidate. To get a clear picture and understand whether the position is really the dream position for the candidate is in your mutual interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It means that you can be absolutely honest with the candidate. You can tell them all the things that I wrote in this article. You can explain the aim of the interview, what the possible outcomes are, the recommended and not recommended decisions, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually devote 7 minutes at the start of the interview explaining the above. Of course, it is a bit boring after several hundreds of interviews, but every job has its downsides and upsides, and it is crucial for each candidate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can even explain that when candidates are lying or cheating candidates, it might be harmful. It helps when a candidate gets a coding exercise that is too familiar to them. A few times, the candidate proactively warned me that they had already met the task beforehand. So we chose a different one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-5-coding-exercise&quot;&gt;1.5. Coding Exercise&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above paragraphs are generally valid for all types of interviews and not specific for software development. For example, doing a coding exercise is specific to technical software developer interviews. However, most of the debates on social media are related to this practice. The reason for that is simple. It is very easy to do it wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would never recommend a candidate who cannot demonstrate the coding skills in an interview. After all, what is the value a developer can deliver who cannot code? It is more questionable if a solution architect needs to code, and I would not get into that this time. I have my personal opinion about it, but it is irrelevant. Maybe I will discuss it in a different article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have met some developers hired from different vendors working in the same team for our clients who could not code. We never complained, and we did the extra work instead of them. The client personnel could see who did what and came to their conclusions most of the time. I will also not name the vendor ever. Let&amp;#8217;s just say that these developers stay afloat in the industry until they find a different job and become BAs, PMs, or car salesmen. I accept them as a fact of life, but I do not accept hiring one in my workplace. In conclusion, we should agree that some performance measures are needed to assess the coding skills as a work theory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An excellent coding exercise helps assess three things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The algorithmic thinking of the candidate.* Coding skills and the muscle memory of the language we test. In my case, it is Java.* Communication skills.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of these can easily go wrong, and hence negative stories quickly get to social media.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is challenging to assess algorithmic thinking. It is much easier to test if the candidate can solve one specific problem or complete a task. That way, the assessment quickly degrades to testing if the candidate knows the particular algorithm. Even though I believe that learning and understanding the most important algorithms and data structures (quick sort, balanced trees, graph traversing) is vital for a developer, many developers do not possess even the fundamental computer science theory. I can also accept that there is no value in knowing many algorithms by heart. It is better to have the skillset to create the algorithm when needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid testing the candidate knowing the task instead of solving it, I have several of them you cannot find on the internet. (Fun story about that at the end of the article.) We also discuss the solution while the candidate forges the code step by step. I realize if the candidate has known the algorithm beforehand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can test the coding skills easily. Many typical coding practices show off an inexperienced coder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can spot old coding constructs that we are not using anymore as the language (in my case, Java) develops. I sometimes see explicit type boxing, which we do not use since Java 1.4 Junior developers tend to compare a boolean value with &apos;== true&apos; or write an &apos;if&apos; statement and return &apos;true&apos; and &apos;false&apos; literal values from the execution branches. Some developers make mistakes, like indexing a &apos;String&apos; as if it was an array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an interviewer, you should interpret those with a pinch of salt. The interview is not a normal coding environment. It is much more stressful, and such mistakes are many times caused by stress. The technical tools are usually less advanced than the usual IDE, with less support for code completion, syntax checking, and so on. Do not expect the candidate to know all the JDK API calls from the top of their head.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also check communication skills. For example, some candidates blamed me for presenting unprecise, even sloppy task descriptions. They were surprised when I told them that I was aware of that. It is to test if they clarify the task before making bold assumptions and just immediately start coding. Most of them do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The coding exercise is the most challenging part of the interview. Not for the candidate, though. It is for the interviewer. It is a task that the candidate has to do together with you. If you, as an interviewer, see that the candidate is working on the coding task alone, you are doing it wrong. If you work together, then it is good. It may not be perfect, but most of the usual pitfalls you have already avoided.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-6-giving-feedback&quot;&gt;1.6. Giving Feedback&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of the interview, you will know whether to recommend or not to recommend the candidate. If you don&amp;#8217;t know, if you are not absolutely sure, then you should not recommend the candidate. I wrote that you must not recommend someone you are not sure about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recommendation, usually along with detailed analysis, is the primary outcome of the interview. There can be, however, another valuable byproduct. You can give valuable feedback to the candidate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interviewers seldom give feedback about the interview to the candidates, and this is not a good practice. I do not advocate giving feedback no matter what because it is a double-edged sword. If you provide feedback in the wrong way, it may cause a lot of harm to the candidate and the company. Providing valuable, thoughtful, and relevant feedback required some special skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good feedback emphasizes the candidate&amp;#8217;s strong points that they can build on and highlights the things that they can improve and that may result in enormous benefits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most benefit is evidently for the candidate, but it is also valuable for the company. Getting detailed feedback is always an invaluable help to better ourselves. Good feedback, however, is also beneficial for the company. Even if rejecting a candidate is the correct conclusion, a blatant and unexplained refusal may induce bad feelings towards the company. Feedback can mitigate this risk. Feedback explains the reasons so that the candidate can learn the reasons along with suggestions for improvement. Again, you can emphasize that the refusal is not a judgment; it solely recognizes the incompatibility between the candidate’s skills, experience, or knowledge and what the company requires in a specific role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You do not know each other. Thus, you have to put a lot of emphasis on the good things that the candidate can build on. You can also explain that the feedback is limited as it is based on a 60-minute interview only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some candidates challenge some of my statements during the feedback. It is pointless from the feedback point of view. If I made a mistake, I misread the candidate in some aspect; they can ignore that part of the feedback. Some of the comments may likely be wrong due to the limited nature of the session. At the same time, I give feedback after the decision. It would be best if you did not change the decision based on any feedback debate. Even though I am usually lenient with candidates arguing about some points of the feedback. It reveals a lot about their personality that I can include in the subjective part of the interview record, and at the same time, it helps them vent their feelings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had candidates referred to our company by his friend I rejected but sent away with friendly but honest feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-7-summary-and-fun-story&quot;&gt;1.7. Summary and Fun Story&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigare necesse est. Doing interviews is unavoidable. Vivere no est necesse. Doing good interviews is difficult. In this article, I wrote about some aspects of the interviewing. There are other aspects that I did not discuss. Those I may address in a later article. I also know that many aspects of this topic are opinionated. You are welcome to comment, rant, criticize and tell the truth as you feel fit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I promised you a fun story, so here it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once I interviewed a candidate who was not outstanding. He had several knowledge gaps related to basic Java. He knew a few things wrong and was a bit stubborn. His coding skills were also less than what we required. When I ended the interview, I asked him if he wanted feedback. He said no, and disconnected the communication. (We usually do remote interviews using IP communication tools, like Zoom, Teams, Skype, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;He immediately wrote an eMail to the talent acquisition team claiming that I was asking him wrong; I did not accept his correct answers and stating that I did not know Java. He also wrote that I was giving him a coding task that anyone can find on the internet, and I did not accept his correct solution because I did not like him. Even though he did not agree to video recording, the coding exercise does get recorded to crosscheck. I did not doubt that the solution was wrong, but his statement that I allegedly copied the exercise from the internet bothered me. So I googled some of the sentences of the task. I could find it on a site along with a wrong solution he also provided. It was word by word the same, including a typo. So you can guess who was copying from whom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your coding exercise tasks leak out. So you have to replace them frequently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Why and how to do technical interviews?</summary></entry></feed>