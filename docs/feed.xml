<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://javax0.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://javax0.github.io/" rel="alternate" type="text/html" /><updated>2023-01-25T10:03:43+01:00</updated><id>https://javax0.github.io/feed.xml</id><title type="html">Java Deep, mostly Java</title><subtitle>javax0 is a technical Java oriented blog. Whenever I find something interesting, in the mood and feel the power to publish it, you will get it here. Publications are usually released on Wednesday 15:00am GMT. Earlier posts of the blog were published on Javax0 Wordpress Site at https://javax0.wordpress.com</subtitle><entry><title type="html">Ten Useless Things You Did Not Know About Java</title><link href="https://javax0.github.io/2023/01/23/ten-java.html" rel="alternate" type="text/html" title="Ten Useless Things You Did Not Know About Java" /><published>2023-01-23T00:00:00+01:00</published><updated>2023-01-23T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/23/ten-java</id><content type="html" xml:base="https://javax0.github.io/2023/01/23/ten-java.html">[%collapsible,title=Article Management Technical Details]
====
****
* Code link:https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java[https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java]
* Article source link:https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam[https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam]
****
====

Java is a complex language, and some features that initially seemed a good idea turned out to be useless.
In this article, we will look at ten such Java language features.

== 1. Java Has Labels

You can have labels in your Java code.

[source,java]
----
 1.         LABEL1:
 2.         for (int i = 0; i &lt; 10; i++) {
 3.             for (int j = 0; j &lt; 10; j++) {
 4.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) break LABEL1;
 5.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 6.             }
 7.             System.out.println();
 8.         }
 9.         System.out.println();
10.         System.out.println();
11.         LABEL2:
12.         for (int i = 0; i &lt; 10; i++) {
13.             for (int j = 0; j &lt; 10; j++) {
14.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) {
15.                     System.out.println();
16.                     continue LABEL2;
17.                 }
18.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
19.             }
20.             System.out.println();
21.         }

----

Like you could have them in assembly.
Or when you were programming BASIC numbering the lines.

To interrupt an outer loop, you can reference these labels in the `break` or `continue` command.

The output of the above program is:
[source,text]
----
0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 

0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 
3,0 3,1 3,2 3,3 3,4 3,5 
4,0 4,1 4,2 4,3 
5,0 5,1 5,2 5,3 
6,0 6,1 6,2 
7,0 7,1 7,2 7,3 
8,0 8,1 
9,0 9,1 

----

If you want to compare, here is the version without the labels:

[%collapsible, title=&quot;Click to open the version without labels&quot;]
====
[source,java]
----
 1.         for (int i = 0; i &lt; 10; i++) {
 2.             for (int j = 0; j &lt; 10; j++) {
 3.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) break;
 4.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 5.             }
 6.             System.out.println();
 7.         }
 8.         System.out.println();
 9.         System.out.println();
10.         for (int i = 0; i &lt; 10; i++) {
11.             for (int j = 0; j &lt; 10; j++) {
12.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) {
13.                     System.out.println();
14.                     continue;
15.                 }
16.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
17.             }
18.             System.out.println();
19.         }

----

and the output

[source,text]
----
0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 
3,0 3,1 3,2 3,3 3,4 3,5 
4,0 4,1 4,2 4,3 
5,0 5,1 5,2 5,3 
6,0 6,1 6,2 
7,0 7,1 7,2 7,3 
8,0 8,1 
9,0 9,1 


0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 


3,0 3,1 3,2 3,3 3,4 3,5 
3,7 
3,9 
4,0 4,1 4,2 4,3 






5,0 5,1 5,2 5,3 
5,5 
5,7 
5,9 
6,0 6,1 6,2 







7,0 7,1 7,2 7,3 
7,5 
7,7 
7,9 
8,0 8,1 








9,0 9,1 
9,3 
9,5 
9,7 
9,9 

----
====

== 2. You can `break` from a Block

Labels make it possible to break from a block.
It does not need to be a loop.

[source,java]
----
 1.         for (int i = 1; i &lt;= 15; i++) {
 2.             FIZZ:
 3.             {
 4.                 System.out.printf(&quot;%d &quot;, i);
 5.                 if (i % 3 != 0) break FIZZ;
 6.                 System.out.print(&quot;fiz&quot;);
 7.             }
 8.             BUZZ:
 9.             {
10.                 if (i % 5 != 0) break BUZZ;
11.                 System.out.print(&quot;buzz&quot;);
12.             }
13.             System.out.println();
14.         }

----

It will print

[source,text]
----
1 
2 
3 fiz
4 
5 buzz
6 fiz
7 
8 
9 fiz
10 buzz
11 
12 fiz
13 
14 
15 fizbuzz

----

== 3. `static` Methods can also be `final`

When a method is final in a class, you cannot redefine it in a child class.
Static methods, however, are not virtual.
They cannot be redefined.
A static method in the child class of the same signature has nothing to do with the method in the parent class.
Or does it?

Actually, it does.
If the static method is `final`, then the child class cannot have a method with the same signature.

To demonstrate this, we compile the test classes dynamically.
We do not want any syntax errors in our demo project.

[source,java]
----
 1.         final var FIZZ = &quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 public class Fizz {
 4.                     static void fizzy(){
 5.                     }
 6.                 }
 7.                 &quot;&quot;&quot;;
 8.         final var BUZZ = &quot;&quot;&quot;
 9.                 package com.javax0.blog.tenjava;
10.                 public class Buzz extends Fizz {
11.                     static void fizzy(){
12.                     }
13.                 }
14.                 &quot;&quot;&quot;;
15.         final var testSet1 = Compiler.java().from(
16.                 FIZZ
17.         ).from(BUZZ).compile().load();
18.         testSet1.get(&quot;Buzz&quot;);
19.         Assertions.assertThrows(Compiler.CompileException.class, () -&gt; Compiler.java().from(
20.                 FIZZ.replaceAll(&quot;static void&quot;, &quot;final static void&quot;)
21.         ).from(BUZZ).compile());

----

We compile FIZZ and BUZZ.
Both classes have a method named `fizzy()`.
No problem.
Then we change the method in the class `Fizz` to `final`.
Now the compilation fails.

You cannot &quot;override&quot; the final method.

== 4. `goto` is a reserved word

There is no `goto` in Java; still, &apos; goto` is a keyword.
The designers of the language thought it to be a good idea.
Future versions of Java may have a `goto` statement.
Let&apos;s reserve this as a keyword.

[source,java]
----
 1.         Compiler.java().from(&quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 class NoGotoPlease{
 4.                   public void _goto(){
 5.                   }
 6.                 }
 7.                 &quot;&quot;&quot;
 8.         ).compile();
 9.         Assertions.assertThrows(Compiler.CompileException.class, () -&gt; Compiler.java().from(&quot;&quot;&quot;
10.                 package com.javax0.blog.tenjava;
11.                 class NoGotoPlease{
12.                   public void goto(){
13.                   }
14.                 }
15.                 &quot;&quot;&quot;
16.         ).compile());

----

If we name the method `_goto`, it is okay.
Using it without an underscore in the front: it is a keyword.
It does not compile.

If you consider that `var`, on the other hand, is NOT a keyword...

== 5. `var` is not a keyword in Java

Java 10  introduced `var`.
There are a lot of articles about how you can use `var` and why `var` is not syntactic sugar.
However, `var` is also not a keyword.

If it was a keyword, we could have a program, like

[source,java]
----
 1. public class VarNotKeyword {
 2.     final int var = 13;
 3.
 4.     void myMethod() {
 5.         int var = var().var;
 6.     }
 7.
 8.     VarNotKeyword var() {
 9.         return new VarNotKeyword();
10.     }
11.
12. }

----

which was a valid code before Java 10.
It still is because `var` is not a keyword, but it would be ruined if it was.
Luckily, it is not.

You cannot name a class to be `var`.
This means that even though `var` is not a keyword, we may still have some incompatibility.

== 6. Stream operations are mutating

It is also a Java secret, but at least this knowledge is not useless.
After all, who would like to read an article full of useless things?
As a matter of fact, there was a question on a Java interview, so it may even be essential to know.

When you chain the stream methods, they transform streams.
There is no operation happening until the final terminal operation is chained up and starts to execute.
The stream operations without the terminal operation only build up the operation chain.
They transform one stream into a new stream.

____
Not only!
____

Stream operations, like `map`, also modify the stream they are attached to.
The stream will remember that an operation was already attached to it and will throw an exception if you try to form a stream.
The following code demonstrates this:

[source,java]
----
1.         final Stream&lt;Object&gt; stream = Stream.of(&quot;a&quot;, 2, 3, new Object[2]);
2.         final var stringStream1 = stream.map(Object::toString);
3.         try {
4.             final var stream2 = stream.map(obj -&gt; &quot; &quot; + obj);
5.         } catch (IllegalStateException e) {
6.             System.out.println(e);
7.         }
8.         final var string = stringStream1.collect(Collectors.joining(&quot;\n&quot;));

----

The output of this is:

[source,text]
----
java.lang.IllegalStateException: stream has already been operated upon or closed

----

== 7. Streams do not always run

You know that the intermediary operations on a stream do not run if there is no terminal operation.
The terminal operation is the one that runs the streams invoking all the intermediary ones for the elements.
However, not all terminal operations run the whole chain.
It may lead to surprises in some cases.
To see that, let&apos;s use `peek()`.

`peek()` is a stream intermediary method that does not modify the stream.
The Javadoc of the method in the official JDK documentation says:

____
This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline.
____

The same Javadoc then gives a sample that uses `System.out.println` to print values from a stream in different stages.
We will do the same

[source,java]
----
1.         final var w = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).toArray();
3.         System.out.println(w.length);

----

This sample goes through the elements of the stream.
It prints the elements of the stream and then the number of the elements as we have collected them to an `Object[]`:

[source,text]
----
1
2
3
4
5
apple
bird
3.1415926
8

----

This is nice and dandy.
What if we do not collect the elements?
In the example above, we are only interested in the number of elements; there is no reason to collect them into an array.

[source,java]
----
1.         final long z = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).count();
3.         System.out.println(z);

----

We expect to get the same output as before.
The reality, however, is that the output this time is:

[source,text]
----
8

----

Where did the elements go?
Why `peek` does not print the elements?

In this case, the terminal operation `count()` does not execute the stream pipeline.
Therefore, the `peek()` action is not invoked.
There is no magic or secret in it.
The JavaDoc of `count()` explains it.

____
An implementation may choose to not execute the stream pipeline ... if it is capable of computing the count directly from the stream source.
____

In some cases, like the one in the example above, the terminal operation `count()` does not need to iterate through the stream to know the number of elements.
So it does not.

Even the documentation of `peek()` has a link to this fact.
Nobody reads documentation.

== 8. `strictfp` is a modifier

Once upon a time, there was a keyword called `strictfp`.
It was introduced in Java 1.2 and required the floating point calculations to be performed differently.
Floating point calculations traditionally used the format IEEE 754 standard defined.
The early x86 processors with the x87 floating point coprocessor worked differently.
The coprocessor used a longer format, allowing more precision.
The `float` and `double` values were 64bit, but the generated code stored the intermediate values on more bits during a calculation.

Before Java 1.2, the compiler generated machine code modifying the result of every intermediate value to 64bit.
This required extra machine code operations and slowed the calculation down.
It was not only slower but more error-prone to overflow errors.
A calculation result could be okay with the 64-bit precision while some intermediate values overflowed.
Using more precision provided by the hardware could lead to the correct value.

`strictfp` was introduced to let the compiler generate a more effective floating-point code.
With 1.2 and later till Java 17, the compiler generates code using the extra precision unless the class or method is `strictfp`.

.just kidding
____
`strictfp` means that the floating calculation will result in the exact wrong result on all platforms.
____

Times change.
Pentium 4 in 2001 allows the compiler to avoid the extra code for strict floating point.
Java could generate the strict floating point effectively.

Java 17 came 20 years later, and Java changed again.
Java 17 later uses strict arithmetic even when `strictfp` is not specified.

You can still use it, and reflectively query its existence on a class, interface, or non-abstract method, but the Java compiler does not use it anymore.
Maybe, the Java compiler was the only one using `strictfp` even in the past.
At least, I have never met anyone who needed that and used it.

== 9. There are multiple `ArrayList` implementations in the JDK

If you have programmed Java for a long time, you know that you can easily create a list of elements calling `Array.asList()`.
If you look at the implementation of this static method, you can see that it is simply:

[source,java]
----
    @SafeVarargs
    @SuppressWarnings(&quot;varargs&quot;)
    public static &lt;T&gt; List&lt;T&gt; asList(T... a) {
        return new ArrayList&lt;&gt;(a);
    }
----

in the class `java.util.Arrays`.
Although the method&apos;s return type is the interface `List`, the documentation guarantees that the return type is `ArrayList`.
It says

____
Returns a fixed-size list backed by the specified array.
____

So it is an `ArrayList`.
Yes and no.
Let&apos;s try the following program:

[source,java]
----
1.         try {
2.             final ArrayList&lt;Integer&gt; x = (ArrayList) Arrays.asList(1, 2, 3, 4);
3.         } catch (ClassCastException cce) {
4.             System.out.println(cce);
5.         }

----

The output will be

[source,text]
----
java.lang.ClassCastException: class java.util.Arrays$ArrayList cannot be cast to class java.util.ArrayList (java.util.Arrays$ArrayList and java.util.ArrayList are in module java.base of loader &apos;bootstrap&apos;)

----

The returned list is an `ArrayList`, but it is a `java.util.Arrays$ArrayList` and not `java.util.ArrayList`.
These are two different classes and are not compatible.
One cannot be converted to the other; only the simple name is the same.

NOTE: Two classes are the same if their _canonical name_ is the same and were loaded by one class loader.
The simple name being the same is not enough.

Why did the implementors of `asList()` create a new `ArrayList` class?
Probably they wanted to create optimized code.
The list this method returns is backed up by an array just like the `java.util` one.
However, this array cannot be resized.
It is the same array that you provided as an argument.
It is not copied or cloned.
It remains in its place and is used by the list implementation.
You can see that in the following code sample:

[source,java]
----
1.         final Integer[] w = {1, 2, 3};
2.         final var wl = Arrays.asList(w);
3.         Assertions.assertEquals(1, wl.get(0));
4.         w[0] = 55;
5.         wl.set(1, 66);
6.         Assertions.assertEquals(55, wl.get(0));
7.         Assertions.assertEquals(66, w[1]);

----

When the code modifies the array, the list also gets modified.
When the list is modified, the array also gets modified.
That is because they are one and the same.

== 10. something != something

Recently a friend (Istvan Kovács) posted a puzzle on link:https://www.linkedin.com/feed/update/urn:li:activity:7022233914991640576/[Linked-in].
What should you write to the place of `???`

[source,java]
----
1.         final var variable = ???;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----

The question was: what should you write into the place of the `???` characters?
Unless you want to have a failing test, you need something which is not equal to itself.

It cannot be an object, because `==` compares the reference &quot;address&quot;, therefore an object is always `==` to itself.
It can only be a primitive value.

The solution comes from the link:https://ieeexplore.ieee.org/document/30711[IEEE 754] standard.
It has the sentence:

____
The exceptions are C predicates “ x == x ” and “ x != x ”, which are respectively 1 and 0 for every
infinite or finite number x but reverse if x is Not a Number ( NaN )
____

Although it talks about the C language, Java has inherited a lot from it.
Java implements the standard as we have already discussed related to the `strictfp` keyword.
That way the code sample is

[source,java]
----
1.         final var variable = Float.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----

or
[source,java]
----
1.         final var variable = Double.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----


== 11. Summary

We have visited ten Java features.
These are not important.
Writing about these was fun, and I hope reading them was also fun.
I tried to be precise, and I could not resist including some information that may also be useful despite the article title.

If you know any other more or less useless facts about Java, please write them down in the comments.</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam</summary></entry><entry><title type="html">Ten Useless Things You Did Not Know About Java</title><link href="https://javax0.github.io/2023/01/23/ten-java.html" rel="alternate" type="text/html" title="Ten Useless Things You Did Not Know About Java" /><published>2023-01-23T00:00:00+01:00</published><updated>2023-01-23T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/23/ten-java</id><content type="html" xml:base="https://javax0.github.io/2023/01/23/ten-java.html">[%collapsible,title=Article Management Technical Details]
====
****
* Code link:https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java[https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java]
* Article source link:https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam[https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam]
****
====

Java is a complex language, and some features that initially seemed a good idea turned out to be useless.
In this article, we will look at ten such Java language features.

== 1. Java Has Labels

You can have labels in your Java code.

[source,java]
----
 1.         LABEL1:
 2.         for (int i = 0; i &lt; 10; i++) {
 3.             for (int j = 0; j &lt; 10; j++) {
 4.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) break LABEL1;
 5.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 6.             }
 7.             System.out.println();
 8.         }
 9.         System.out.println();
10.         System.out.println();
11.         LABEL2:
12.         for (int i = 0; i &lt; 10; i++) {
13.             for (int j = 0; j &lt; 10; j++) {
14.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) {
15.                     System.out.println();
16.                     continue LABEL2;
17.                 }
18.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
19.             }
20.             System.out.println();
21.         }

----

Like you could have them in assembly.
Or when you were programming BASIC numbering the lines.

To interrupt an outer loop, you can reference these labels in the `break` or `continue` command.

The output of the above program is:
[source,text]
----
0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 

0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 
3,0 3,1 3,2 3,3 3,4 3,5 
4,0 4,1 4,2 4,3 
5,0 5,1 5,2 5,3 
6,0 6,1 6,2 
7,0 7,1 7,2 7,3 
8,0 8,1 
9,0 9,1 

----

If you want to compare, here is the version without the labels:

[%collapsible, title=&quot;Click to open the version without labels&quot;]
====
[source,java]
----
 1.         for (int i = 0; i &lt; 10; i++) {
 2.             for (int j = 0; j &lt; 10; j++) {
 3.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) break;
 4.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
 5.             }
 6.             System.out.println();
 7.         }
 8.         System.out.println();
 9.         System.out.println();
10.         for (int i = 0; i &lt; 10; i++) {
11.             for (int j = 0; j &lt; 10; j++) {
12.                 if (i * j &gt; 15 &amp;&amp; (i * j) % 2 == 0) {
13.                     System.out.println();
14.                     continue;
15.                 }
16.                 System.out.print(&quot;%d,%d &quot;.formatted(i, j));
17.             }
18.             System.out.println();
19.         }

----

and the output

[source,text]
----
0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 
3,0 3,1 3,2 3,3 3,4 3,5 
4,0 4,1 4,2 4,3 
5,0 5,1 5,2 5,3 
6,0 6,1 6,2 
7,0 7,1 7,2 7,3 
8,0 8,1 
9,0 9,1 


0,0 0,1 0,2 0,3 0,4 0,5 0,6 0,7 0,8 0,9 
1,0 1,1 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 
2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 


3,0 3,1 3,2 3,3 3,4 3,5 
3,7 
3,9 
4,0 4,1 4,2 4,3 






5,0 5,1 5,2 5,3 
5,5 
5,7 
5,9 
6,0 6,1 6,2 







7,0 7,1 7,2 7,3 
7,5 
7,7 
7,9 
8,0 8,1 








9,0 9,1 
9,3 
9,5 
9,7 
9,9 

----
====

== 2. You can `break` from a Block

Labels make it possible to break from a block.
It does not need to be a loop.

[source,java]
----
 1.         for (int i = 1; i &lt;= 15; i++) {
 2.             FIZZ:
 3.             {
 4.                 System.out.printf(&quot;%d &quot;, i);
 5.                 if (i % 3 != 0) break FIZZ;
 6.                 System.out.print(&quot;fiz&quot;);
 7.             }
 8.             BUZZ:
 9.             {
10.                 if (i % 5 != 0) break BUZZ;
11.                 System.out.print(&quot;buzz&quot;);
12.             }
13.             System.out.println();
14.         }

----

It will print

[source,text]
----
1 
2 
3 fiz
4 
5 buzz
6 fiz
7 
8 
9 fiz
10 buzz
11 
12 fiz
13 
14 
15 fizbuzz

----

== 3. `static` Methods can also be `final`

When a method is final in a class, you cannot redefine it in a child class.
Static methods, however, are not virtual.
They cannot be redefined.
A static method in the child class of the same signature has nothing to do with the method in the parent class.
Or does it?

Actually, it does.
If the static method is `final`, then the child class cannot have a method with the same signature.

To demonstrate this, we compile the test classes dynamically.
We do not want any syntax errors in our demo project.

[source,java]
----
 1.         final var FIZZ = &quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 public class Fizz {
 4.                     static void fizzy(){
 5.                     }
 6.                 }
 7.                 &quot;&quot;&quot;;
 8.         final var BUZZ = &quot;&quot;&quot;
 9.                 package com.javax0.blog.tenjava;
10.                 public class Buzz extends Fizz {
11.                     static void fizzy(){
12.                     }
13.                 }
14.                 &quot;&quot;&quot;;
15.         final var testSet1 = Compiler.java().from(
16.                 FIZZ
17.         ).from(BUZZ).compile().load();
18.         testSet1.get(&quot;Buzz&quot;);
19.         Assertions.assertThrows(Compiler.CompileException.class, () -&gt; Compiler.java().from(
20.                 FIZZ.replaceAll(&quot;static void&quot;, &quot;final static void&quot;)
21.         ).from(BUZZ).compile());

----

We compile FIZZ and BUZZ.
Both classes have a method named `fizzy()`.
No problem.
Then we change the method in the class `Fizz` to `final`.
Now the compilation fails.

You cannot &quot;override&quot; the final method.

== 4. `goto` is a reserved word

There is no `goto` in Java; still, &apos; goto` is a keyword.
The designers of the language thought it to be a good idea.
Future versions of Java may have a `goto` statement.
Let&apos;s reserve this as a keyword.

[source,java]
----
 1.         Compiler.java().from(&quot;&quot;&quot;
 2.                 package com.javax0.blog.tenjava;
 3.                 class NoGotoPlease{
 4.                   public void _goto(){
 5.                   }
 6.                 }
 7.                 &quot;&quot;&quot;
 8.         ).compile();
 9.         Assertions.assertThrows(Compiler.CompileException.class, () -&gt; Compiler.java().from(&quot;&quot;&quot;
10.                 package com.javax0.blog.tenjava;
11.                 class NoGotoPlease{
12.                   public void goto(){
13.                   }
14.                 }
15.                 &quot;&quot;&quot;
16.         ).compile());

----

If we name the method `_goto`, it is okay.
Using it without an underscore in the front: it is a keyword.
It does not compile.

If you consider that `var`, on the other hand, is NOT a keyword...

== 5. `var` is not a keyword in Java

Java 10  introduced `var`.
There are a lot of articles about how you can use `var` and why `var` is not syntactic sugar.
However, `var` is also not a keyword.

If it was a keyword, we could have a program, like

[source,java]
----
 1. public class VarNotKeyword {
 2.     final int var = 13;
 3.
 4.     void myMethod() {
 5.         int var = var().var;
 6.     }
 7.
 8.     VarNotKeyword var() {
 9.         return new VarNotKeyword();
10.     }
11.
12. }

----

which was a valid code before Java 10.
It still is because `var` is not a keyword, but it would be ruined if it was.
Luckily, it is not.

You cannot name a class to be `var`.
This means that even though `var` is not a keyword, we may still have some incompatibility.

== 6. Stream operations are mutating

It is also a Java secret, but at least this knowledge is not useless.
After all, who would like to read an article full of useless things?
As a matter of fact, there was a question on a Java interview, so it may even be essential to know.

When you chain the stream methods, they transform streams.
There is no operation happening until the final terminal operation is chained up and starts to execute.
The stream operations without the terminal operation only build up the operation chain.
They transform one stream into a new stream.

____
Not only!
____

Stream operations, like `map`, also modify the stream they are attached to.
The stream will remember that an operation was already attached to it and will throw an exception if you try to form a stream.
The following code demonstrates this:

[source,java]
----
1.         final Stream&lt;Object&gt; stream = Stream.of(&quot;a&quot;, 2, 3, new Object[2]);
2.         final var stringStream1 = stream.map(Object::toString);
3.         try {
4.             final var stream2 = stream.map(obj -&gt; &quot; &quot; + obj);
5.         } catch (IllegalStateException e) {
6.             System.out.println(e);
7.         }
8.         final var string = stringStream1.collect(Collectors.joining(&quot;\n&quot;));

----

The output of this is:

[source,text]
----
java.lang.IllegalStateException: stream has already been operated upon or closed

----

== 7. Streams do not always run

You know that the intermediary operations on a stream do not run if there is no terminal operation.
The terminal operation is the one that runs the streams invoking all the intermediary ones for the elements.
However, not all terminal operations run the whole chain.
It may lead to surprises in some cases.
To see that, let&apos;s use `peek()`.

`peek()` is a stream intermediary method that does not modify the stream.
The Javadoc of the method in the official JDK documentation says:

____
This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline.
____

The same Javadoc then gives a sample that uses `System.out.println` to print values from a stream in different stages.
We will do the same

[source,java]
----
1.         final var w = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).toArray();
3.         System.out.println(w.length);

----

This sample goes through the elements of the stream.
It prints the elements of the stream and then the number of the elements as we have collected them to an `Object[]`:

[source,text]
----
1
2
3
4
5
apple
bird
3.1415926
8

----

This is nice and dandy.
What if we do not collect the elements?
In the example above, we are only interested in the number of elements; there is no reason to collect them into an array.

[source,java]
----
1.         final long z = Stream.of(1, 2, 3, 4, 5, &quot;apple&quot;, &quot;bird&quot;, 3.1415926)
2.                 .peek(System.out::println).count();
3.         System.out.println(z);

----

We expect to get the same output as before.
The reality, however, is that the output this time is:

[source,text]
----
8

----

Where did the elements go?
Why `peek` does not print the elements?

In this case, the terminal operation `count()` does not execute the stream pipeline.
Therefore, the `peek()` action is not invoked.
There is no magic or secret in it.
The JavaDoc of `count()` explains it.

____
An implementation may choose to not execute the stream pipeline ... if it is capable of computing the count directly from the stream source.
____

In some cases, like the one in the example above, the terminal operation `count()` does not need to iterate through the stream to know the number of elements.
So it does not.

Even the documentation of `peek()` has a link to this fact.
Nobody reads documentation.

== 8. `strictfp` is a modifier

Once upon a time, there was a keyword called `strictfp`.
It was introduced in Java 1.2 and required the floating point calculations to be performed differently.
Floating point calculations traditionally used the format IEEE 754 standard defined.
The early x86 processors with the x87 floating point coprocessor worked differently.
The coprocessor used a longer format, allowing more precision.
The `float` and `double` values were 64bit, but the generated code stored the intermediate values on more bits during a calculation.

Before Java 1.2, the compiler generated machine code modifying the result of every intermediate value to 64bit.
This required extra machine code operations and slowed the calculation down.
It was not only slower but more error-prone to overflow errors.
A calculation result could be okay with the 64-bit precision while some intermediate values overflowed.
Using more precision provided by the hardware could lead to the correct value.

`strictfp` was introduced to let the compiler generate a more effective floating-point code.
With 1.2 and later till Java 17, the compiler generates code using the extra precision unless the class or method is `strictfp`.

.just kidding
____
`strictfp` means that the floating calculation will result in the exact wrong result on all platforms.
____

Times change.
Pentium 4 in 2001 allows the compiler to avoid the extra code for strict floating point.
Java could generate the strict floating point effectively.

Java 17 came 20 years later, and Java changed again.
Java 17 later uses strict arithmetic even when `strictfp` is not specified.

You can still use it, and reflectively query its existence on a class, interface, or non-abstract method, but the Java compiler does not use it anymore.
Maybe, the Java compiler was the only one using `strictfp` even in the past.
At least, I have never met anyone who needed that and used it.

== 9. There are multiple `ArrayList` implementations in the JDK

If you have programmed Java for a long time, you know that you can easily create a list of elements calling `Array.asList()`.
If you look at the implementation of this static method, you can see that it is simply:

[source,java]
----
    @SafeVarargs
    @SuppressWarnings(&quot;varargs&quot;)
    public static &lt;T&gt; List&lt;T&gt; asList(T... a) {
        return new ArrayList&lt;&gt;(a);
    }
----

in the class `java.util.Arrays`.
Although the method&apos;s return type is the interface `List`, the documentation guarantees that the return type is `ArrayList`.
It says

____
Returns a fixed-size list backed by the specified array.
____

So it is an `ArrayList`.
Yes and no.
Let&apos;s try the following program:

[source,java]
----
1.         try {
2.             final ArrayList&lt;Integer&gt; x = (ArrayList) Arrays.asList(1, 2, 3, 4);
3.         } catch (ClassCastException cce) {
4.             System.out.println(cce);
5.         }

----

The output will be

[source,text]
----
java.lang.ClassCastException: class java.util.Arrays$ArrayList cannot be cast to class java.util.ArrayList (java.util.Arrays$ArrayList and java.util.ArrayList are in module java.base of loader &apos;bootstrap&apos;)

----

The returned list is an `ArrayList`, but it is a `java.util.Arrays$ArrayList` and not `java.util.ArrayList`.
These are two different classes and are not compatible.
One cannot be converted to the other; only the simple name is the same.

NOTE: Two classes are the same if their _canonical name_ is the same and were loaded by one class loader.
The simple name being the same is not enough.

Why did the implementors of `asList()` create a new `ArrayList` class?
Probably they wanted to create optimized code.
The list this method returns is backed up by an array just like the `java.util` one.
However, this array cannot be resized.
It is the same array that you provided as an argument.
It is not copied or cloned.
It remains in its place and is used by the list implementation.
You can see that in the following code sample:

[source,java]
----
1.         final Integer[] w = {1, 2, 3};
2.         final var wl = Arrays.asList(w);
3.         Assertions.assertEquals(1, wl.get(0));
4.         w[0] = 55;
5.         wl.set(1, 66);
6.         Assertions.assertEquals(55, wl.get(0));
7.         Assertions.assertEquals(66, w[1]);

----

When the code modifies the array, the list also gets modified.
When the list is modified, the array also gets modified.
That is because they are one and the same.

== 10. something != something

Recently a friend (Istvan Kovács) posted a puzzle on link:https://www.linkedin.com/feed/update/urn:li:activity:7022233914991640576/[Linked-in].
What should you write to the place of `???`

[source,java]
----
1.         final var variable = ???;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----

The question was: what should you write into the place of the `???` characters?
Unless you want to have a failing test, you need something which is not equal to itself.

It cannot be an object, because `==` compares the reference &quot;address&quot;, therefore an object is always `==` to itself.
It can only be a primitive value.

The solution comes from the link:https://ieeexplore.ieee.org/document/30711[IEEE 754] standard.
It has the sentence:

____
The exceptions are C predicates “ x == x ” and “ x != x ”, which are respectively 1 and 0 for every
infinite or finite number x but reverse if x is Not a Number ( NaN )
____

Although it talks about the C language, Java has inherited a lot from it.
Java implements the standard as we have already discussed related to the `strictfp` keyword.
That way the code sample is

[source,java]
----
1.         final var variable = Float.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----

or
[source,java]
----
1.         final var variable = Double.NaN;
2.         if( variable == variable ){
3.             Assertions.fail(&quot;variable is == to variable&quot;);
4.         }

----


== 11. Summary

We have visited ten Java features.
These are not important.
Writing about these was fun, and I hope reading them was also fun.
I tried to be precise, and I could not resist including some information that may also be useful despite the article title.

If you know any other more or less useless facts about Java, please write them down in the comments.</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-23-ten-java Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-23-ten-java.adoc.jam</summary></entry><entry><title type="html">Hidden Classes in Java 15</title><link href="https://javax0.github.io/2023/01/05/hidden-classes.html" rel="alternate" type="text/html" title="Hidden Classes in Java 15" /><published>2023-01-05T00:00:00+01:00</published><updated>2023-01-05T00:00:00+01:00</updated><id>https://javax0.github.io/2023/01/05/hidden-classes</id><content type="html" xml:base="https://javax0.github.io/2023/01/05/hidden-classes.html">[%collapsible,title=Article Management Technical Details]
====
****
* Code link:https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes[https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes]
* Article source link:https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam[https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam]
****
====
== 1. Introduction

Java can have anonymous classes from the very start.
(Well, actually, they came in version 1.1 only.)
However, anonymous classes were not anonymous.
You did not need to name them, but under the hood, they were named by the Java compiler.
If you are familiar with the command `javap`, you can &quot;disassemble&quot; a JAR file and see the name of the compiler generated for the anonymous classes.

Java 15 introduced hidden classes, which do not have a name.
Almost, as you will see.
It is not part of the language but part of the JDK.
There is no language element to create hidden classes, but JDK methods and classes come to the rescue.

In this article, we will discuss

* what hidden classes are, and what is the reason to have them,

* how you can use hidden classes,

* how to load hidden classes using the JDK methods and, finally

* how to easily create and load hidden classes using link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy].

[NOTE]
====
I created SourceBuddy, an Apache v2.0 licensed open-source program.
While creating the code, I learned a few things about hidden classes I wanted to share with you.
You may also look at this article as a SourceBuddy promotion, which is ok if you do that.
Nevertheless, I hope to successfully add extra value to this article so that this is not simply a promo.
====


== 2. What are hidden classes?

There is an easy-to-read link:https://www.baeldung.com/java-hidden-classes[introductory article] about hidden classes on Baeldung.
If you are impatient and do not care about some intricate details, go there and read that article.
Baeldung articles are always short, focusing on the most important and correct.
They give a good starting point, which there would be no reason to repeat.

Hidden classes were proposed in the link:https://openjdk.org/jeps/371[JEP371], and it reads:

____
hidden ... classes that cannot be used directly by the bytecode of other classes
____

It is a bit short and may not be easy to understand.

A hidden class is loaded into the JVM.
When a class is in source code format or byte code, it cannot be &quot;hidden&quot;.
This term can refer only to loaded classes.
Calling them secretly loaded classes could be more appropriate.

A class gets hidden when it is loaded in a particular way so that it remains secret in front of other code parts.
Remaining hidden does not mean that other codes cannot use this class.
They can so long as long they &quot;know&quot; about the secret.
The big difference is that this class is not &quot;advertised&quot; because you cannot find it using the name.

When you load a class the hidden way creating a hidden class, you will have a reference to this class.
Using the reflective methods, you can instantiate the class many times, and then you can invoke methods, set, and get fields.
If the class implements an interface or extends a class, you can cast the instance reference to the interface and class and invoke the methods without reflection.

The class is hidden for two reasons:

* it does not have a name other classes could reference, and

* there is no reference from the class loader to the class.

When you call `getName()` or `getSimpleName()` on a variable referencing a hidden class, you will get some string.
These are names for messages for humans and are irrelevant for the other classes.
When a class refers to another class it needs the canonical name.
`getCanonicalName()` returns `null`.
The canonical name is the actual name of the class, which is non-existent in the case of hidden classes.

Since the class cannot be found through the class loader without the canonical name, there is no reason for the loader to keep a reference to the class.
Why would it keep a reference when it cannot give the class to anyone?
Keeping a reference would have only one side effect: preventing the GC from unloading the class so long as the class loader is alive.

Since there is no reference from the class loader, the GC can unload the class object as soon as it is out of use.


== 3. What is the use of hidden classes?

The link:https://openjdk.org/jeps/371[JEP371] describes the reason for hidden classes.
It says

____
Allow frameworks to define classes as non-discoverable implementation details of the framework so that they cannot be linked against other classes nor discovered through reflection.
____

Many frameworks use dynamically created classes.
They are proxy classes in most cases.
A proxy class implements an interface or extends another class, and when invoked, it calls an instance of the interface or the original class.
It usually does something extra as well, or else there would be no reason for the proxy class and instance.

An example is the Spring framework when your code requires injecting a request bean into a session bean.
(Or any other shorter lifecycle bean into a longer one.)
Several threads can serve different requests at the same time, all belonging to the same session.
All these threads will see the same session bean, but they magically will see their request beans.
The magic is a proxy object extending the request bean&apos;s class.
When you call a method on the request bean, you invoke the proxy instance.
It checks the thread and the request it serves and forwards the call to the appropriate request bean.

Another example is JPA lazy loading.
You can have an SQL table where each row references the previous one.
When you try to load the last record, it will automatically load the previous one, which indeed will load the one before.
It will load the whole table.
It happens unless you annotate the field as lazy.
It means that the actual data from the database has to be loaded only when it is needed.

When you load the record, you get a proxy object.
This proxy object knows which record it refers to and will load the record from the database only when a method is called.

The same mechanism is used for Aspect Oriented Programming and many other cases.

You can create a proxy class using only the JDK reflection API so long as the target class implements the interface you want to proxy.
You can use the link:https://bytebuddy.net/[ByteBuddy] library if there is no such interface.

[NOTE]
====
The link:https://github.com/cglib/cglib[cglib] library is widely used and well-known in many frameworks, but it has been deprecated recently.
====

When you create such classes, you do not need any name for these classes.
You get the reference to the class and the reference to the instance.
The framework injects the reference to the field it has to, and then the code uses them as any object.
It does not need to know the name of the class.
All it needs to know is that it is an instance of the target class or interface.
However, some codes may discover the name.
These classes have some names that reflection can discover.
Some &quot;clever&quot; junior may discover it and play some neat trick that you may have later issues maintaining.
Would it be better if there was no name at all?
Probably yes, it would be cleaner.
Hence: hidden classes.

[NOTE]
====
The proxy classes may also cause issues when you implement the `equals(Object other)` method.
The usual implementation of the link:https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)[equals] method compares the `other` object&apos;s class to the actual class.
It will eventually be `false` when the other object is a proxy instance.
What the `equals()` method should check is the assignability whenever there is a possibility that the `other` object is a proxy.
====

In addition to that, there is another reason to have hidden classes.
As soon as a class has a name, it is possible to discover it by the name.
The class loader has to keep the class alive to keep it discoverable.
The class loader has a reference to the loaded classes.
It means the garbage collector will not be able to collect the class, even when it is no longer in use.

If a class has no name, the class loader does not need to keep a reference to this class.
Class loaders do not keep references to hidden classes unless you explicitly instruct them to do so.
When all instances of a hidden class are collected, and there is no reference to the class, the garbage collector will recognize it as garbage.
The class loader will not keep the class in memory.

That way, the frameworks will not over-consume memory when a long-running code creates a lot of classes.
Better frameworks that collect unused classes do not need to create separate class loaders for these ephemeral classes.
There is no need to create a short-living, disposable class loader to make the class also disposable.

____
Support extending an access control nest with non-discoverable classes.
____

It is the second bullet point in the list of goals in the link:https://openjdk.org/jeps/371[JEP371].
JVM can load hidden classes in a way that they become a member of a nest.
What is a nest?

[NOTE]
====
If you know what a nesting host is and are impatient, jump to the following quote.
====

Well, it is a long story, but since it is Christmas time, I am on holiday, and the press will not print this article on the paper wasting tree, here it goes.
(I wrote this article for weeks. It is still not published, and already next year, January.)

Once upon a time, Java version 1.0 did not have inner classes.
Now, you better stop reading it here if you ask me what inner classes are.
Then Java version 1.1 introduced inner classes but did not change the JVM structure.
The JVM did not know anything about inner classes.
The Java compiler created regular (almost) top-level classes from the inner classes.
It invented some funny names, like `A$B` when there was a class `B` inside `A`.

NOTE: You can try to define an `A$B` top-level class in the same package where the class `A` containing the class `B` is.
`A$B` is a valid name.
You will see what the compiler does.

There was some hacking with the visibility though.
An inner class has the same visibility as the top-level class.
Anything private inside one compilation unit (file) is visible.
Visibility, however, is also enforced by the JVM.
But the JVM sees two top-level classes.
The compiler generated bridge methods in the classes wherever needed to overcome this issue.
They are package level for the JVM, and when called, they pass on the call to the private method.

Then came Java 11 something like 25 years later and link:https://openjdk.org/jeps/181[introduced the nest control].
Since Java 11, every class has a relation to another class or to itself, which is the nest host of the class.
Classes having the same nest host can see each other&apos;s, private members.
The JVM does not need the bridge methods anymore.

When you load a class hidden, you can specify it to become a member of the same nest (having the same nest host) as the class that created the lookup object.

NOTE: We have not yet discussed what a lookup object is and how to load a class hidden.
It will come.
As for now: a lookup object is something that can load a byte array as a hidden class into the JVM memory.
When a lookup object is created from inside a method of a class, the lookup object will belong to that class.
When a class is loaded as hidden using the lookup object, it is possible to pass an option to make the new hidden class belong to the nest in which the code created the lookup object.

Without the hidden class functionality, I do not know any other possibility to load a class that will belong to an already existing nest.
If you know of any possibility, write it in a comment.

The following bullet point reads:
____
Support aggressive unloading of non-discoverable classes, so that frameworks have the flexibility to define as many as they need.
____

It is an important point.
When you create a class, it remains in the memory so long as the classloader is alive.
Classloaders keep references to all the classes they loaded.
These references say that some code may ask the classloader to return the loaded class object by the name.
The application logic may long forget the class; nobody will ever need it.
Still, the garbage collector cannot collect it because there is a reference in the class loader.
A solution is to create a new class loader for every new non-hidden dynamically created class, but that is overkill.

Classloaders loading hidden classes do not keep a reference to the hidden class by default.
As with the nesting host, it is possible to provide an option to differ.

I do not see any reason.
There is no name, not discoverable, but keep an extra reference so the GC cannot throw it away.
If you see any reasonable use case, again: comment.

____
Deprecate the non-standard API sun.misc.Unsafe::defineAnonymousClass, with the intent to deprecate it for removal in a future release.
____

Very well.
Yes.
Absolutely.
Separate articles and many of them.

____
Do not change the Java programming language in any way.
____

Nice point. Sure.

With these, we discussed what hidden classes are.
You should have a firm understanding of their nature and why they are essential.
We also derailed a bit to nest hosting or host nesting, nesting hosting... whatever.
I hope it was of some value.

In the following, I will discuss how we create hidden classes using the JDK API and then using link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy].


== 4. Creating Hidden Classes

Articles and tutorials showing how to load hidden classes use precompiled Java classes.
These are usually part of the running application.
The tutorial calculates the path to the `.class` file and reads the byte code.

Technically this is correct but does not demonstrate the basic need for hidden class loading: load dynamically created classes hidden.
These classes are not dynamically created and could be loaded the usual way.

In this article, we will create a class from text, Java source on the fly -- during run-time -- and then load the resulting byte code as a hidden class.


[%collapsible,title=Code Sample Disclaimer]
====
****
The code samples are available on GitHub in the link:https://github.com/javax0/javax0.github.io/tree/master/_projects[project directory].
Each article has a project directory named `YYYY-MM-DD-article-title` where the project code files are.

For this article it is ``2023-01-05-hidden-classes``.

The samples are automatically copied from the project directory to the article using Jamal.
No manual copy, no outdated stale samples.
****
====

The sample project for this article contains only unit test files.
The class is `TestHiddenClassLoader`.
We have the source code for the hidden class stored in a field variable.

[source,java]
----
 1.     private static final String CODE1 = &quot;&quot;&quot;
 2.             package com.javax0.blog.hiddenclasses;
 3.
 4.             public class MySpecialClass implements TestHiddenClassLoader.Hello {
 5.
 6.                 @Override
 7.                 public void hello() {
 8.                     System.out.println(&quot;Hello, from the hidden class.&quot;);
 9.                 }
10.             }
11.             &quot;&quot;&quot;;

----

The interface is also inside the same class.

[source,java]
----
1.     interface Hello {
2.         void hello();
3.     }
4.

----

The following code is from one of the unit tests:

[source,java]
----
1.         final var byteCode = Compiler.java().from(CODE1).compile().get();
2.         final var lookup = MethodHandles.lookup();
3.         final var classLookup = lookup.defineHiddenClass(byteCode, true);
4.         final var helloClass = (Class&lt;Hello&gt;) classLookup.lookupClass();
5.
6.         final var hello = helloClass.getConstructor().newInstance();
7.         hello.hello();

----

We use the link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] library in this code to compile the Java source to byte code.
The first line of the sample does that.
We use link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] version 2.1.0.

We need a lookup object to load the compiled byte code as a hidden class.
This object is created on the second line.
The lookup object is used on the third and fourth lines to load the class hidden.
Line 3 defines the class loading it into the JVM.
The second argument, `true`, initializes the class.
That is when the `static{}` blocks execute.
The last line invokes the interface-defined method `hello()`.

Now the local variable `hello` is an instance of an object, a hidden class.
What are a hidden class&apos;s name, simple name, and canonical name?
Let&apos;s print it out.

[source,java]
----
1.         System.out.println(&quot;1. &quot; + hello.getClass());
2.         System.out.println(&quot;2. &quot; + hello.getClass().getClassLoader());
3.         System.out.println(&quot;3. &quot; + this.getClass().getClassLoader());
4.         System.out.println(&quot;4. &quot; + hello.getClass().getSimpleName());
5.         System.out.println(&quot;5. &quot; + hello.getClass().getName());
6.         System.out.println(&quot;6. &quot; + hello.getClass().getCanonicalName());
7.         System.out.println(&quot;7. &quot; + lookup.getClass());
8.         System.out.println(&quot;8. &quot; + lookup.getClass().getClassLoader());

----


[%collapsible,title=Output Disclaimer, sidebar]
====
[sidebar]
The output in the unit tests is redirected calling `System.setOut()`.
The output is collected to a file and then this file is included calling `include [verbatim]` Jamal macro into the article.
====

[source,text]
----
Hello, from the hidden class.
1. class com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b0c00
2. jdk.internal.loader.ClassLoaders$AppClassLoader@5b37e0d2
3. jdk.internal.loader.ClassLoaders$AppClassLoader@5b37e0d2
4. MySpecialClass/0x00000008011b0c00
5. com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b0c00
6. null
7. class java.lang.invoke.MethodHandles$Lookup
8. null

----

You can see the output from calling `hello()` and then the name as printed from the implicit `toString()` from the class object, the class loader that loaded the hidden class, the simple name, the name, and in the last line the canonical name.
This last one is interesting as it is `null`, showing no class name.
It is hidden.

The class, although hidden, has a reference to the class loader that loaded it.
It is needed when there is anything to resolve during the execution of the code.
The difference is that the class loader does not have a reference to the class.
One direction from the class to the loader exists, but the other direction from the loader to the class does not.

The class loader is the same as the one that loaded the class calling `MethodHandles.lookup()`.
You can see that since we printed out the class loader of the `this` object in the test.

Finally, we also print out the class of the lookup object and the class loader.
The latter is `null`, which means the bootstrap class loader loaded it. (For more information on class loaders, I can recommend reading the article link:https://www.baeldung.com/java-classloaders[class loaders] from the Baeldung blog.)

You should also note that the interface `hello` is package private.
It is still visible for the dynamically created code because it is in the same package and module.

[NOTE]
====
Starting with Java 9, there is a module system in Java.
Many developers I meet say they are not interested in JPMS; they do not need to use it.

The fact is that you DO use it, whether you want it or not.
It is the same as concurrent programming.
Java is concurrent; at least there are three threads in a JVM, so your code runs in a concurrent environment, whether you want it or not.
You may not have trouble understanding the details for a long time.
However, when you start digging deeper and creating code that uses some &quot;tricks&quot; or does something special, you almost certainly face some weird errors.
You must know and understand the underlying theory to understand the errors, handle them, mitigate the cause, and fix the bug.

Loading hidden classes dynamically created is precisely such a trick.
You should learn Java Modules.
====

When the hidden class is loaded, it is in the same package as the one where the interface is defined.
It is not enough, however, as we will see an example in the next section.
It is also a requirement that the same class loader loads the interface and the hidden class.
That way, the interface, and the hidden class are in the same module, in this case, the same unnamed module.
The different class loaders load classes into different modules; thus, when you load a class using a different class loader, it may not see the package fields, methods, interfaces, etc., even if they are in the same package.

It is not the only requirement that the lookup object is from the same module.
It is also a requirement that it is from the same package as the class to be loaded.
We must stop here to clarify things, to be painfully precise, because it is easy to confuse things at this point.

The lookup object is an instance of a class in the `java.lang.invoke` package.
The class loader loaded this class is `null` as shown in the output.
It means the bootstrap class loader.
The bootstrap class loader is implemented in C/C++ and not in Java.
No corresponding Java object represents this class loader; thus, there cannot be a reference to it.
It is solved by returning `null` from `getClassloader()`.
There is a module, package, and class that &quot;belongs&quot; to the lookup object.
The code&apos;s module, package, and class were called the `MethodHandles.lookup()` method.

You cannot create a hidden class from one package for another.
If you try that, like in the following sample code:

[source,java]
----
1.         try {
2.             final var byteCode = Compiler.java()
3.                     .from(&quot;package B; class A{}&quot;).compile().get();
4.             MethodHandles.lookup().defineHiddenClass(byteCode, true);
5.         } catch (Throwable t) {
6.             System.out.println(t);
7.         }

----

still from the test class `com.javax0.blog.hiddenclasses.TestHiddenClassLoader`.
The class to be loaded is NOT in the same package as the caller for `MethodHandles.lookup()`.
It will result in the printout:

[source,text]
----
java.lang.IllegalArgumentException: B.A not in same package as lookup class

----

== 5. Creating hidden classes the easy way

In the previous section, we created a new class dynamically and loaded the new class hidden.
The loading was done using lookup objects we acquired from the `MethodHandles` class.
In this section, we will see how we can do the same by calling the fluent API of link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy].

The code creating a class saying hello is the following:

[source,java]
----
1.         final var hello = Compiler.java()
2.                 .from(CODE1.replaceAll(&quot;\\.Hello&quot;, &quot;.PublicHello&quot;)).hidden()
3.                 .compile().load().newInstance(PublicHello.class);
4.         hello.hello();

----

In this code, we replaced the interface from `Hello` to `PublicHello`, which you may guess:

[source,java]
----
1.     public interface PublicHello {
2.         void hello();
3.     }

----

It is essentially the same as the previous interface but is `public`.
The process is much more straightforward than before.
We specify the source code; we declare that it is a hidden class calling `hidden()`, and we compile, load, and ask for an instance cast to `PublicHello`.

If we want to use the package-private interface, like (not replacing `Hello` to `PublicHello`):

[source,java]
----
1.         Assertions.assertThrows(IllegalAccessError.class, () -&gt;
2.                 Compiler.java().from(CODE1).hidden().compile().load().newInstance(PublicHello.class));

----

we will get an error.

[source,text]
----
java.lang.IllegalAccessError: class com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b1c00 cannot access its superinterface com.javax0.blog.hiddenclasses.TestHiddenClassLoader$Hello (com.javax0.blog.hiddenclasses.MySpecialClass/0x00000008011b1c00 is in unnamed module of loader com.javax0.sourcebuddy.ByteClassLoader @4e5ed836; com.javax0.blog.hiddenclasses.TestHiddenClassLoader$Hello is in unnamed module of loader &apos;app&apos;)

----

The reason is explained clearly in the error message.
The interface and the class implementing it are in two different modules.
Both are unnamed modules, but they are not the same.
In Java, starting with Java 9, there are modules, and when the application does not use modules, it essentially creates pseudo modules putting the classes there.
The JDK classes are still in modules, like `java.base`.

The hidden class creation, as created above, uses a separate class loader to load the dynamically written Java class.
The separate class loader loads classes to its module.
Code in different modules cannot see classes from other modules unless they are public.

Although link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] does a little trick to load a class hidden, it cannot overcome this restriction.

Loading a hidden class needs a lookup object.
The application usually provides this object.
The calls above do not specify any lookup object, but link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] still needs one.
To have one, it creates one.
The lookup object remembers the class called `MethodHandles.lookup()` to create one.
When loading a class hidden, it is required that the lookup object &quot;belongs&quot; to the class&apos;s package.
The lookup object was created, calling for it from a class, which is *in* that package.
The lookup object will &quot;belong&quot; to that class and hence to the class&apos;s package.

To have a lookup object that comes from a class from a specific package we need a class in that package that can give us one.
If there is none in the code, we must create one dynamically.
link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] does that exactly.
It creates the Java source code for the class, compiles it and loads it, instantiates it, and calls the  `Supplier&lt;MethodHandles.Lookup&gt;` defined `get()` method the class implements.

It is a kind of trick that seems to violate the access control built-in to Java.
We seem to get a new hidden class in a package that was not prepared for it.
A package is protected from external access in Java (trivial).
Only public and protected members and classes can be used from outside the package.
The package can be accessed using reflection from the outside, but only in the same module, or the module has to be opened explicitly.
Similarly, an object loaded using a lookup object should be in the same package and access the package&apos;s internal members and whatnot if a class in the package provided that lookup.

As we can see from the error message, it only seems to be the package.
In reality, the new hidden class is in a package with the same name but in a different module.

If you want to have a hidden class in the same package and not only a package with the same name, you need a lookup object from that package.

In our example, it is simple.
Our `Hello` interface is in the same package as the test code so that we can create the lookup object ourselves:

[source,java]
----
1.         final var hi = Compiler.java().from(CODE1).hidden(MethodHandles.lookup()).compile()
2.                 .load().newInstance(Hello.class);
3.         hi.hello();

----

Access to a lookup object may be a bit more complex in real-life examples.
When the code calling link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] is in a different package than the code generated, the lookup object creation cannot be in the link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] calling code.

In the following example, we will see how that will be done.

We have a class `OuterClass` in the package `com.javax0.blog.hiddenclasses.otherpackage`.

[source,java]
----
 1. package com.javax0.blog.hiddenclasses.otherpackage;
 2.
 3. import java.lang.invoke.MethodHandles;
 4.
 5. public class OuterClass {
 6.
14.     public static MethodHandles.Lookup lookup() {
15.         return MethodHandles.lookup();
16.     }
17. }

----


NOTE: Some lines are skipped from the class. We will use those later.

This class has a method, `lookup()`.
It creates a lookup object and returns it.
We will have a proper lookup object if we call this method from our code.
Note that this class is in a different package and not the same as our test code.
Our test code is in `com.javax0.blog.hiddenclasses`, and `OuterClass` is a package deeper.
Essentially in a different package.

We also have another class for the demonstration.

[source,java]
----
1. package com.javax0.blog.hiddenclasses.otherpackage;
2.
3. class MyPackagePrivateClass {
4.
5.     void sayHello(){
6.         System.out.println(&quot;Hello from package private.&quot;);
7.     }
8.
9. }

----

It is a package-private class with a package-private method in it.
If we dynamically create a hidden class, as in the following example:

[source,java]
----
 1.         final var hidden = Compiler.java().from(&quot;&quot;&quot;
 2.                 package com.javax0.blog.hiddenclasses.otherpackage;
 3.
 4.                 public class AnyName_ItWillBeDropped_Anyway {
 5.                     public void hi(){
 6.                         new MyPackagePrivateClass().sayHello();
 7.                     }
 8.                 }&quot;&quot;&quot;).hidden(OuterClass.lookup()).compile().load().newInstance();
 9.         final var hi = hidden.getClass().getDeclaredMethod(&quot;hi&quot;);
10.         hi.invoke(hidden);

----

It will work.

There is one topic that we have not touched on.
It is how to create a nestmate.

When you have a binary class file, you can load it as a nestmate to a class that provides a lookup object.
The JVM does not care how that class was created.
When we compile Java sources, we only have one possibility.
The class has to be an inner class.

When you use link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy], you have to provide your source code as an inner class to the one you want the hidden to be nest mate with.
The source code and the class was already provided when you compiled your code.
It is not possible to insert into THAT source code any new inner class.
We have to fool the compiler.

We provide a class having the same name as the one we want to insert our inner class later.
When the compilation is done, we have the outer class and the inner class as well.
We tell the class loading to forget the outer and only to load the inner one, hidden.

It is what we will do.
This time we display here the whole outer class that we use for demonstration including the skipped lines.

[source,java]
----
 1. package com.javax0.blog.hiddenclasses.otherpackage;
 2.
 3. import java.lang.invoke.MethodHandles;
 4.
 5. public class OuterClass {
 6.
 7.     // skip lines
 8.     private int z = 55;
 9.
10.     public int getZ() {
11.         return z;
12.     }
13.     // end skip
14.     public static MethodHandles.Lookup lookup() {
15.         return MethodHandles.lookup();
16.     }
17. }

----

As you will see, it has a private field and a getter to test the changed value effectively.
It also has the before-mentioned `lookup()` method.
The code dynamically creating an inner class is the following:

[source,java]
----
 1.         final var inner = Compiler.java().from(&quot;&quot;&quot;
 2.                         package com.javax0.blog.hiddenclasses.otherpackage;
 3.
 4.                         public class OuterClass
 5.                                                 {
 6.                             private int z;
 7.
 8.                             public static class StaticInner {
 9.                                public OuterClass a(){
10.                                  final var outer = new OuterClass();
11.                                  outer.z++;
12.                                  return outer;
13.                                }
14.                             }
15.
16.                         }&quot;&quot;&quot;).nest(MethodHandles.Lookup.ClassOption.NESTMATE).compile().load()
17.                 .newInstance(&quot;StaticInner&quot;);
18.         final var m = inner.getClass().getDeclaredMethod(&quot;a&quot;);
19.         final var outer = (OuterClass)m.invoke(inner);
20.         Assertions.assertEquals(56, outer.getZ());

----

There is an `OuterClass` in the source, but it is only to help the compilation and to tell link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] the name of the nesting host.
When we call the method `nest()` with the option `NESTMATE`, it knows that the class `OuterClass` is the nesting host.
It also marks the class not to be loaded by the class loader ever.
The inner class compiles to a different byte code, and when it is loaded, it becomes a nestmate of `OuterClass`.

If you pay attention to the intricate details of Java access control discussed in this article, you will notice that we do not provide a lookup object.
And the example above still works.
How is it possible?
There is no magic.
When you call `nest()`, link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] looks for the already loaded version of `OuterClass` and fetches the lookup object using reflection.
To do that the outer class has to have a static field or method of type `MethodHandles.Lookup`.
`OuterClass` has a method, so link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy] calls this method to get the lookup object.

The example above creates a static inner class.
You can create the same way a non-static inner class as well.

[NOTE]
====
The difference between static and non-static inner classes in Java is that non-static inner class instances have a reference to an outer class instance.
Static inner classes do not.
It is where the name comes from.
Static inner class instances belong to the class.
Non-static belongs to an instance of the outer class.

To get the reference to the outer class instance, the inner class&apos;s constructor is modified.
When you specify a constructor for an inner class, the compiled adds an extra parameter in front of the other parameters specified in the Java source code.
This extra first parameter is the reference to the outer class instance.
This reference is stored in a field not available at the source level but used by the code to access the fields and methods of the outer instance.
====

The creation of a non-static inner class looks very much the same as the creation of a static inner class:

[source,java]
----
 1.         final var outer = new OuterClass();
 2.         final var inner = Compiler.java().from(&quot;&quot;&quot;
 3.                         package com.javax0.blog.hiddenclasses.otherpackage;
 4.
 5.                         public class OuterClass {
 6.                             private int z;
 7.
 8.                             public class Inner {
 9.                                public void a(){
10.                                  z++;
11.                                }
12.                             }
13.
14.                         }&quot;&quot;&quot;).nest(MethodHandles.Lookup.ClassOption.NESTMATE).compile().load()
15.                 .newInstance(&quot;Inner&quot;, classes(OuterClass.class), args(outer));
16.         final var m = inner.getClass().getDeclaredMethod(&quot;a&quot;);
17.         m.invoke(inner);
18.         Assertions.assertEquals(56, outer.getZ());

----

We need an instance of the outer class to instantiate the inner class.
It is the variable `outer`.
We must pass this variable to the constructor through the `newInstance()` API of link:https://github.com/sourcebuddy/sourcebuddy[SourceBuddy].
This method call has a version that accepts a `Class[]` and an `Object[]` array specifying the constructor argument types and values.
In the case of an inner class, it is the outer class and an instance.


== 6. Summary

This article discussed some details of the hidden classes introduced in Java 15.
We went a little deeper than the usual introductory articles.
Now you understand how hidden classes work and how to use them in your projects.


[%collapsible,title=&quot;How to Comment&quot;, sidebar]
====
****
Use the Disqus commenting possibility to comment.
If you find any incorrectness in the article, you are welcome to mention it.
You can also access the source code of the article on github at

link:https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam[`https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam`]

You are welcome to create a link:https://github.com/javax0/javax0.github.io/issues/new[ticket], create a  link:https://github.com/javax0/javax0.github.io/fork[fork], suggest modification via pull requests.
Note that this repository also contains the demonstration sample source code.

For other aspects of commenting read the link:https://javax0.github.io/about/[ABOUT] page of this blog.
****
====</content><author><name></name></author><summary type="html">Article Management Technical Details Code https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-01-05-hidden-classes Article source https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-01-05-hidden-classes.adoc.jam 1. Introduction</summary></entry><entry><title type="html">Technology behind this post</title><link href="https://javax0.github.io/2022/12/07/blog-posting.html" rel="alternate" type="text/html" title="Technology behind this post" /><published>2022-12-07T00:00:00+01:00</published><updated>2022-12-07T00:00:00+01:00</updated><id>https://javax0.github.io/2022/12/07/blog-posting</id><content type="html" xml:base="https://javax0.github.io/2022/12/07/blog-posting.html">== 1. Introduction

This blog is the continuation of the blog post at the WordPress-hosted javax0 blog that was at https://javax0.wordpress.com[javax0.wordpress.com].
The technology, the hosting, and all were okay by that time, but times changed.
This blog post describes why I changed the blog technology and what technology I use here to write these blog posts.

== 2. Problems with WordPress

First, I have to state that I am not saying or implying that WordPress would not be an excellent platform.
It is a well-established and a kind of one of its kind, de-facto number-one blogging forum.
The problems are specific to my particular needs for this blog.
These needs may not be specific to my person, but a bit more general: technical blogging.

It is like Opel, Toyota, VW, or any other average, workhorse car type.
Opel is a good car; it runs, is reliable, and is reasonably priced.
However, if I am a farmer and need to plow my fields, I will probably choose a tractor instead.
In this analogy, the farmer is a __technical__ blogger.
Emphasis is on __technical__.
For anybody else: WordPress is an excellent choice.

Let&apos;s have a look at the issues that I had.

=== 2.1. Markup

When I write anything, I like to edit some markup.
I can use Word or LibreOffice.
I was using DEC Write in the early 1990-is if you are old enough to know what that is but not too old to forget things and still remember.
Even at that time, I preferred markups, which at that time were TeX and LaTeX.

[NOTE]
====
I even wrote a hyphenation preprocessor for Tex for the Hungarian language, and it became a standard part of some Linux distributions.
Since they installed Linux on  Mars Rovers, sometimes I entertain myself with the idea that some of my code got as far as planet Mars.
Please let me have this fantasy, and do not correct me if I am wrong.
====

We could use other markups, like APT, Markdown, Asciidoc, and many others over the years.
These days two of those are used mainly, Markdown and Asciidoc.
WordPress hosted site supported or still supports Markdown, but I started to prefer Asciidoc for these blogs.
The only problem was that I could not.

=== 2.2. Code Samples

When I write some technical blogs, I include code samples.
I develop the code first, and then I write the article.
That is the principle.

However, the practice is that after I started to write the article, I realized that the code was not perfect.
So I changed the code and copied the relevant part to the article sample displays.
Unless I forget to update some of those after a few iterations.

It was also the case when I wrote my first book, and I have sworn that it will never happen again.

=== 2.3. Version Control

Editing on WordPress works, and you can look at the different versions.
But it is not comparable with the possibilities provided by a Git repository.

== 3. The New Blog Technology

=== 3.1. Github Pages and Jekyll

The new technology stack for blogging is based on GitHub pages.
It is not unique, and it has support for Jekyll, which is a static blogging engine.
Setting up a Jekyll-based blog is pretty straightforward.
I already had the organization name `javax0` on GitHub.
It only seemed logical to use this as `javax0.github.io` for blogging.
Later I may use the `javax0.com` domain that I also keep.

Installing Jekyll on my MacBook was a bit tricky.
First, I had to install the newest Ruby.
An old version of Ruby comes preinstalled on every macOS.
This old version is not suitable for running Jekyll.
I used brew, but it failed, complaining that I was not on the sudoer list.
It took a while until I realized that, for some reason, two `sudo` programs were installed on my machine.
The brew installer used a different one than what I reached from the command line.
I had to add myself to the other sudoer&apos;s list as well.
The last trick was to tweak the `PATH` so Jekyll would use the newest Ruby version.
After that, there was still some problem when I configured Jekyll to run locally and on GitHub.
It was executing some commands following some StackOverflow page suggestions.

Sometimes I had no idea what I was doing.
I can only hope that I did not install malware during the process.
You, AsciiDoc, Jekyll, and other tool developers have all my trust.

I integrated JRuby into Jamal, but I do not program in Ruby.

=== 3.2. Jekyll Asciidoc Plugin

In addition to Jekyll, I also installed the Asciidoc plugin for Jekyll.
Since both Asciidoctor and Jekyll are written in Ruby, it was nothing more than issuing a few commands.

=== 3.3. Jamal

The extra part, which is not a standard Asciidoc-boosted Jekyll installation, is my use of Jamal.
The main reason to use Jamal is to include the code samples in the blog posts, but it does much more than that.

I wrote above that I struggled with maintaining the code samples when writing my books.
I created the pyama tool in Python for the second book I wrote.
It copies the code snippets into the text file that I edited.
Later I developed the snippet module for Jamal, which revolves around this concept.
Keep the source in the code files, have only a reference in the document, and copy it in the CI/CD process.
I hesitated to use Jamal and the snipped module myself for a long time.
It is easier to edit a file showing some code when the code is there a few lines above.
Pyama was copying the code into the edited file.
Jamal does not do that.
Jamal can also do that, but I do not recommend using that feature.
A source file is a source file.

When I created the Asciidoctor Jamal plugin that can plug Jamal functionality into Asciidoctor and delivers Jamal WYSIWYG editing in IntelliJ, the situation changed drastically.
There was no reason more to use something like pyama.

NOTE: Pyama is still available in my GitHub, but there are much better tools for the purpose.

Using Jamal, I can include code snippets and delete or keep some lines by selecting regular expressions or line numbers.
I can number the lines, and I can still use all the Asciidoctor formatting features at the same time.

=== 3.4. Installing Jamal

Installing Jamal to use in IntelliJ is very simple.
All it takes to download a ZIP file and extract the content into the projects `.asciidoctor/lib` directory.
You should open IntelliJ settings and associate the `.jam` extension with the Asciidoctor plugin (in addition to the other default extensions already there).
Restart IntelliJ, and you can start editing your first Jamal-enabled Asciidoc file.

As you edit the file on the left pane, you see the formatted text on the right pane.
It is how the plugin works, but you can also use Jamal macros now.

image::https://javax0.github.io/assets/images/image-2022-12-09-16-47-43-394.png[width=500]

=== 3.5. Blogging Macros

There are not too many specific macros that differ from other documentation macros.
Most of the macros I use in Jamal are snippet macros and built-in core ones.
Some macros help scan the snippets following the directory naming conventions of the site.
There are some macros to reference one article from another easily.

=== 3.6. Deploying the Site

Deployment of the site is simply a git push.
Almost.
The site has to be built before.
There is a simple build script:


[source,bash]
----
#!/bin/sh
./build
git add --all docs
git commit -m &quot;deploy&quot;
git push
open https://javax0.github.io
----

This script builds the site, adds all the new and modified generated files, and then pushes it to the git server.
It also opens the web page, so I can immediately see the blog&apos;s opening page after it is deployed.

I tried to let GitHub pages do the building of the Jekyll site.
After all, it supports Jekyll.
The problem is that GitHub does not support the Jekyll Asciidoc plugin.
It is a bit strange: Asciidoc is natively supported by GitHub, and any readme or other files can be Asciidoc.
Still, GitHub Sites cannot be, except if they are built and deployed elsewhere.

.update at 2023-01-25
== 4. Building the site

Building the site was first was a simple `Makefile` starting Jamal via `jbang` to convert all the `.adoc.jam` files to `.adoc` from the directory `_posts`.
This, however, resulted almost 400 files in the directory.
During the course of the last ten years I wrote 180 articles.
All their `.adoc.jam` and the generated `.adoc` files got into one flat directory.

To mitigate this situation I decided to group the articles into subdirectories by years.
It means eleven subdirectories now and 15 to 20 more in my lifetime.
It is manageable.
The problem was I did not know how to write a general `make` rule that says `.adoc.jam` files in the subdirectories should be compiled to `.adoc` files in the `_posts` directory.

I used Jamal to the rescue.
What else?
I created a `Makefile.jam` with the following content:

[source,bash]
----
{@sep [% %] }[%@import tab.jim%]\
all:  [%!@for [evalist] $file in `//` [%@listDir (pattern=&quot;\\.adoc\\.jam$&quot;) _posts%]`//` =[%@comment%]\
 _posts/[%@file (format=$naked1)$file%]%]\

[%!!#for $dir in ([%@listDir (maxDepth=1 pattern=&quot;/\\d{4}$&quot;)_posts%])=[%@comment%]\
  [%@ident
    [%@for [evalist] $file in `//` [%@listDir (maxDepth=1 pattern=&quot;\\.adoc\\.jam$&quot;) $dir%]`//` =[%@comment%]\
    [%#define YYYY=[%#replace (regex)|$dir|.*/_posts/||%]%]\
    [%#define SOURCE=_posts/[%YYYY%]/[%#file (format=$simpleName)$file%]%]\
    [%#define TARGET=_posts/[%@file (format=$naked1)$file%]%]
[%TARGET%] : [%SOURCE%]
[%tab%]jbang jamal@verhas -open=&apos;{%&apos; -close=&apos;%}&apos; [%SOURCE%] [%TARGET%]
    %]%]%]

----

I do not expect you to understand this structure.
It is fairly complex,but it shows the power of Jamal in some way.
You should not feel intimidated.
If you decide to use Jamal only for 10% of what it can do, it is fine.
It is a tool to provide value and not something you need to master.

This Jamal code lists all the files and generates `Makefile` rules for each `.adoc.jam` article.
I struggled a bit with spaces and tabs.
IntelliJ does not preserve the tabs, except when it is a `Makefile`.
However, `Makefile.jam` is NOT `Makefile`.
As a workaround I created a `tab.jim` file:

[source,bash]
----
{@define tab=	} &lt;- this is a tab character
A simple tab character.

This file is not to be edited other than vi.
Other editors may replace the TAB character with spaces.
Files can import this file and use {tab} in Makefiles.
To exit vi press the escape key and then capital Z twice.
Without saving: escsape and then :q!

----

The comment in the file says it all, I wil not repeat here.

I may later move the `YYYY` yearly subdirectories from `_posts` to make the `_posts` directory something that I never need to open in the editor.
Look at the GitHub repo to see if I did that.

== 5. What will be Missing

WordPress very neatly showed the statistics of the site.
I do not know if I can get such statistics here.
Probably not.

On the other hand, most of the readers for my articles came from the republishing sites DZone and Java Code Geeks.
I will keep them.
(Note to myself: I have to inform them about the blog&apos;s new location officially.)
They automatically fetch the blog posts.
So I do not need to do anything.
They select from the published articles.
They only repost the good ones.

If you know any other aggregator I should contact, give me some advice. I am open.

== 6. Summary

I hope blogging using this toolset will be much more fun than the old technology.
At least, I am less likely to end up in some articles with `&amp;amp;lt;` and `&amp;amp;gt;` infested source codes.
(I had to apply a unique trick to get them here.)

This type of blogging using Asciidoc, Jekyll, and Jamal is more a Doc as a Code that I advocate heavily.
We will see how it will work.</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Technology behind this post</title><link href="https://javax0.github.io/2022/12/07/blog-posting.html" rel="alternate" type="text/html" title="Technology behind this post" /><published>2022-12-07T00:00:00+01:00</published><updated>2022-12-07T00:00:00+01:00</updated><id>https://javax0.github.io/2022/12/07/blog-posting</id><content type="html" xml:base="https://javax0.github.io/2022/12/07/blog-posting.html">== 1. Introduction

This blog is the continuation of the blog post at the WordPress-hosted javax0 blog that was at https://javax0.wordpress.com[javax0.wordpress.com].
The technology, the hosting, and all were okay by that time, but times changed.
This blog post describes why I changed the blog technology and what technology I use here to write these blog posts.

== 2. Problems with WordPress

First, I have to state that I am not saying or implying that WordPress would not be an excellent platform.
It is a well-established and a kind of one of its kind, de-facto number-one blogging forum.
The problems are specific to my particular needs for this blog.
These needs may not be specific to my person, but a bit more general: technical blogging.

It is like Opel, Toyota, VW, or any other average, workhorse car type.
Opel is a good car; it runs, is reliable, and is reasonably priced.
However, if I am a farmer and need to plow my fields, I will probably choose a tractor instead.
In this analogy, the farmer is a __technical__ blogger.
Emphasis is on __technical__.
For anybody else: WordPress is an excellent choice.

Let&apos;s have a look at the issues that I had.

=== 2.1. Markup

When I write anything, I like to edit some markup.
I can use Word or LibreOffice.
I was using DEC Write in the early 1990-is if you are old enough to know what that is but not too old to forget things and still remember.
Even at that time, I preferred markups, which at that time were TeX and LaTeX.

[NOTE]
====
I even wrote a hyphenation preprocessor for Tex for the Hungarian language, and it became a standard part of some Linux distributions.
Since they installed Linux on  Mars Rovers, sometimes I entertain myself with the idea that some of my code got as far as planet Mars.
Please let me have this fantasy, and do not correct me if I am wrong.
====

We could use other markups, like APT, Markdown, Asciidoc, and many others over the years.
These days two of those are used mainly, Markdown and Asciidoc.
WordPress hosted site supported or still supports Markdown, but I started to prefer Asciidoc for these blogs.
The only problem was that I could not.

=== 2.2. Code Samples

When I write some technical blogs, I include code samples.
I develop the code first, and then I write the article.
That is the principle.

However, the practice is that after I started to write the article, I realized that the code was not perfect.
So I changed the code and copied the relevant part to the article sample displays.
Unless I forget to update some of those after a few iterations.

It was also the case when I wrote my first book, and I have sworn that it will never happen again.

=== 2.3. Version Control

Editing on WordPress works, and you can look at the different versions.
But it is not comparable with the possibilities provided by a Git repository.

== 3. The New Blog Technology

=== 3.1. Github Pages and Jekyll

The new technology stack for blogging is based on GitHub pages.
It is not unique, and it has support for Jekyll, which is a static blogging engine.
Setting up a Jekyll-based blog is pretty straightforward.
I already had the organization name `javax0` on GitHub.
It only seemed logical to use this as `javax0.github.io` for blogging.
Later I may use the `javax0.com` domain that I also keep.

Installing Jekyll on my MacBook was a bit tricky.
First, I had to install the newest Ruby.
An old version of Ruby comes preinstalled on every macOS.
This old version is not suitable for running Jekyll.
I used brew, but it failed, complaining that I was not on the sudoer list.
It took a while until I realized that, for some reason, two `sudo` programs were installed on my machine.
The brew installer used a different one than what I reached from the command line.
I had to add myself to the other sudoer&apos;s list as well.
The last trick was to tweak the `PATH` so Jekyll would use the newest Ruby version.
After that, there was still some problem when I configured Jekyll to run locally and on GitHub.
It was executing some commands following some StackOverflow page suggestions.

Sometimes I had no idea what I was doing.
I can only hope that I did not install malware during the process.
You, AsciiDoc, Jekyll, and other tool developers have all my trust.

I integrated JRuby into Jamal, but I do not program in Ruby.

=== 3.2. Jekyll Asciidoc Plugin

In addition to Jekyll, I also installed the Asciidoc plugin for Jekyll.
Since both Asciidoctor and Jekyll are written in Ruby, it was nothing more than issuing a few commands.

=== 3.3. Jamal

The extra part, which is not a standard Asciidoc-boosted Jekyll installation, is my use of Jamal.
The main reason to use Jamal is to include the code samples in the blog posts, but it does much more than that.

I wrote above that I struggled with maintaining the code samples when writing my books.
I created the pyama tool in Python for the second book I wrote.
It copies the code snippets into the text file that I edited.
Later I developed the snippet module for Jamal, which revolves around this concept.
Keep the source in the code files, have only a reference in the document, and copy it in the CI/CD process.
I hesitated to use Jamal and the snipped module myself for a long time.
It is easier to edit a file showing some code when the code is there a few lines above.
Pyama was copying the code into the edited file.
Jamal does not do that.
Jamal can also do that, but I do not recommend using that feature.
A source file is a source file.

When I created the Asciidoctor Jamal plugin that can plug Jamal functionality into Asciidoctor and delivers Jamal WYSIWYG editing in IntelliJ, the situation changed drastically.
There was no reason more to use something like pyama.

NOTE: Pyama is still available in my GitHub, but there are much better tools for the purpose.

Using Jamal, I can include code snippets and delete or keep some lines by selecting regular expressions or line numbers.
I can number the lines, and I can still use all the Asciidoctor formatting features at the same time.

=== 3.4. Installing Jamal

Installing Jamal to use in IntelliJ is very simple.
All it takes to download a ZIP file and extract the content into the projects `.asciidoctor/lib` directory.
You should open IntelliJ settings and associate the `.jam` extension with the Asciidoctor plugin (in addition to the other default extensions already there).
Restart IntelliJ, and you can start editing your first Jamal-enabled Asciidoc file.

As you edit the file on the left pane, you see the formatted text on the right pane.
It is how the plugin works, but you can also use Jamal macros now.

image::https://javax0.github.io/assets/images/image-2022-12-09-16-47-43-394.png[width=500]

=== 3.5. Blogging Macros

There are not too many specific macros that differ from other documentation macros.
Most of the macros I use in Jamal are snippet macros and built-in core ones.
Some macros help scan the snippets following the directory naming conventions of the site.
There are some macros to reference one article from another easily.

=== 3.6. Deploying the Site

Deployment of the site is simply a git push.
Almost.
The site has to be built before.
There is a simple build script:


[source,bash]
----
#!/bin/sh
./build
git add --all docs
git commit -m &quot;deploy&quot;
git push
open https://javax0.github.io
----

This script builds the site, adds all the new and modified generated files, and then pushes it to the git server.
It also opens the web page, so I can immediately see the blog&apos;s opening page after it is deployed.

I tried to let GitHub pages do the building of the Jekyll site.
After all, it supports Jekyll.
The problem is that GitHub does not support the Jekyll Asciidoc plugin.
It is a bit strange: Asciidoc is natively supported by GitHub, and any readme or other files can be Asciidoc.
Still, GitHub Sites cannot be, except if they are built and deployed elsewhere.

.update at 2023-01-25
== 4. Building the site

Building the site was first was a simple `Makefile` starting Jamal via `jbang` to convert all the `.adoc.jam` files to `.adoc` from the directory `_posts`.
This, however, resulted almost 400 files in the directory.
During the course of the last ten years I wrote 180 articles.
All their `.adoc.jam` and the generated `.adoc` files got into one flat directory.

To mitigate this situation I decided to group the articles into subdirectories by years.
It means eleven subdirectories now and 15 to 20 more in my lifetime.
It is manageable.
The problem was I did not know how to write a general `make` rule that says `.adoc.jam` files in the subdirectories should be compiled to `.adoc` files in the `_posts` directory.

I used Jamal to the rescue.
What else?
I created a `Makefile.jam` with the following content:

[source,bash]
----
{@sep [% %] }[%@import tab.jim%]\
all:  [%!@for [evalist] $file in `//` [%@listDir (pattern=&quot;\\.adoc\\.jam$&quot;) _posts%]`//` =[%@comment%]\
 _posts/[%@file (format=$naked1)$file%]%]\

[%!!#for $dir in ([%@listDir (maxDepth=1 pattern=&quot;/\\d{4}$&quot;)_posts%])=[%@comment%]\
  [%@ident
    [%@for [evalist] $file in `//` [%@listDir (maxDepth=1 pattern=&quot;\\.adoc\\.jam$&quot;) $dir%]`//` =[%@comment%]\
    [%#define YYYY=[%#replace (regex)|$dir|.*/_posts/||%]%]\
    [%#define SOURCE=_posts/[%YYYY%]/[%#file (format=$simpleName)$file%]%]\
    [%#define TARGET=_posts/[%@file (format=$naked1)$file%]%]
[%TARGET%] : [%SOURCE%]
[%tab%]jbang jamal@verhas -open=&apos;{%&apos; -close=&apos;%}&apos; [%SOURCE%] [%TARGET%]
    %]%]%]

----

I do not expect you to understand this structure.
It is fairly complex,but it shows the power of Jamal in some way.
You should not feel intimidated.
If you decide to use Jamal only for 10% of what it can do, it is fine.
It is a tool to provide value and not something you need to master.

This Jamal code lists all the files and generates `Makefile` rules for each `.adoc.jam` article.
I struggled a bit with spaces and tabs.
IntelliJ does not preserve the tabs, except when it is a `Makefile`.
However, `Makefile.jam` is NOT `Makefile`.
As a workaround I created a `tab.jim` file:

[source,bash]
----
{@define tab=	} &lt;- this is a tab character
A simple tab character.

This file is not to be edited other than vi.
Other editors may replace the TAB character with spaces.
Files can import this file and use {tab} in Makefiles.
To exit vi press the escape key and then capital Z twice.
Without saving: escsape and then :q!

----

The comment in the file says it all, I wil not repeat here.

I may later move the `YYYY` yearly subdirectories from `_posts` to make the `_posts` directory something that I never need to open in the editor.
Look at the GitHub repo to see if I did that.

== 5. What will be Missing

WordPress very neatly showed the statistics of the site.
I do not know if I can get such statistics here.
Probably not.

On the other hand, most of the readers for my articles came from the republishing sites DZone and Java Code Geeks.
I will keep them.
(Note to myself: I have to inform them about the blog&apos;s new location officially.)
They automatically fetch the blog posts.
So I do not need to do anything.
They select from the published articles.
They only repost the good ones.

If you know any other aggregator I should contact, give me some advice. I am open.

== 6. Summary

I hope blogging using this toolset will be much more fun than the old technology.
At least, I am less likely to end up in some articles with `&amp;amp;lt;` and `&amp;amp;gt;` infested source codes.
(I had to apply a unique trick to get them here.)

This type of blogging using Asciidoc, Jekyll, and Jamal is more a Doc as a Code that I advocate heavily.
We will see how it will work.</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Docs as Code is not enough</title><link href="https://javax0.github.io/2022/05/24/docs-as-code.html" rel="alternate" type="text/html" title="Docs as Code is not enough" /><published>2022-05-24T00:00:00+02:00</published><updated>2022-05-24T00:00:00+02:00</updated><id>https://javax0.github.io/2022/05/24/docs-as-code</id><content type="html" xml:base="https://javax0.github.io/2022/05/24/docs-as-code.html">== 1. Docs as Code


=== 1.1. it is the first step to the right direction

The approach to treating your documentation the same way as program code is a step in the right direction, but it is far from state-of-the-art. The practice is detailed on many websites that advocate the use of docs-as-code (DAC). For example the link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs] community has a great article on docs-as-code. The article lists

 	* Issue Trackers
 	* Version Control (Git)
 	* Plain Text Markup (Markdown, reStructuredText, Asciidoc)
 	* Code Reviews
 	* Automated Tests

as required tools to this approach. Another example is link:https://docs-as-co.de/[docs-as-code], which is a toolset for documentation maintenance. They write
[quote]
____

With docs-as-code, you treat your documentation the same way as your code.

You use…

your IDE to write it
your version control system to store and version it
your test-runner to test it
your build system to build and deploy it&quot;
____

This is very much the same as the approach of link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs].

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-3.svg[]

You have to have your documents in a format supported by the DAC tools. Use version control, document review, automated build, issue tracker, and automated tests. It is very much the same approach we use in code development.

Essentially it is a copy of the professional software development process&apos; coding part. Documentation, however, is not coding. While it is a good idea to reuse some parts of the coding methodology technics, there is more to it.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-4.svg[]

== 2. What docs-as-code Ignores

Coding is a transformation process converting documentation, namely the requirement documentation, into code. The requirement documentation may not be documentation in the classical sense. It may be some note, a list of wishes on a jot of paper. Still, the essence is to convert some human affine into machine affine. Some techniques try to support this process, but most of these techniques die when in production. For example, creating the documentation as UML and making it so precise that the code generation is automatic afterward is not feasible. You could do it in principle, but the cost of the effort is too high. It is cheaper to create the code than documentation that defines the functionality with mathematical precision.

Documenting an application is precisely the opposite direction.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-5.svg[]

Something that failed in one direction does not necessarily fail when we try to go the other direction. You may not be able to jump from the river to the bridge, but the other way is very much possible.

When creating the program documentation, our source is precisely describing the functionality we want to document. After all, the code is the most precise documentation of the application functionality. We already have the precision, which was not feasible to have for the other way around.

The docs-as-code approach, as described by most articles, ignores it. However, it can be amended, and it should be. We can look at it as the next step in the docs-as-code evolution.

=== 2.1. The next step

We can categorize documentation into two categories.

 	* Explanatory, and
 	* Reference

Sometimes a document belongs to one of the categories, but documents are a mix of the two most of the time. It may even happen that you cannot even tell if a sentence in a document belongs to one category or the other.

Creating an explanatory style text cannot be automated. It needs human effort to create sentences that are clear and easily understandable. The importance is demonstrated by the lack of them in this article, as you may have noticed.

However, creating the reference text is more or less a mechanical task. The documentarian (a term from write-the-docs) copies the key&apos;s name to explain how to configure the system and writes a sentence around it. Copies some sample code from the unit tests into a code segment into the Asciidoc documentation and adds explanation. The reference is taken from the code verbatim in these examples, and the explanatory part is added.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-1.svg[]

You can automate the copy of the reference information. Most of the time, it is not automated.

The catch is that automation, just as in the case of tests, is more expensive than doing manual work once. It pays back when the actual operation (copy and paste) happens many times.

And it usually does. To be more precise, it is supposed to happen. However, the documentation maintenance misses the task in practice, and the document becomes stale. It is where the docs-as-code automated test may help. In principle, it is possible to create a test checking the documentation and find discrepancies between the names in the code and the documentation. It can be heuristic, or it can be exact. To do it the exact way, the documentation and/or the code needs meta-information helping the test to perform the consistency check.

Such a test can signal that the documentation may be outdated and need change. For example, it may give a warning, like
[quote]
____
&quot;The name of the field XYZ is not the same as in the documentation ZZZ. Change ZZZ in the documentation to XYZ&quot;.
____

It is a foolish and outrageous error message. I immediately know that the program architecture is messed up when I see such an error message. If the test can tell me what to do with such precision, it could fix the problem with the same effort.

It is much better if we let the automated build copy the actual name instead of checking that the human did it correctly. To do that, the documentarian should put the meta-information into the documentation instead of the copied value. The meta-information is read by the automated build tool, and using that; it copies the actual value or values.

If the value changes, the build process will automatically change it.

Another advantage is the lesser possibility for error. If the documentarian makes a mistake copying the field&apos;s name, the text will not complain. If he writes XXY instead of XYZ, the documentation will contain the wrong name unless some human review process discovers and fixes the bug. If the documentarian inserts the meta information and makes a mistake, the build process will likely fail. If instead of XYZ, I have to write `{java:field com.javax0.jamal.api#XYZ}` any simple typo will be detected. If there is a field  `com.javax0.jamal.api#XYZ` it is unlikely to have also `com.javax0.jamal.api#XXY`.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-2.svg[]

With this approach, the docs-as-code workflow is extended. The documentation&apos;s &quot; source code &quot; starts behaving as a source code. The automated build is no longer simply formatting and executing language checks. The goal is to automate everything that you can automate. It may not be cheaper than doing the work manually, but certainly less error-prone.

== 3. Tools

All the above theory is pleasant and attractive but worth nothing unless there are tools to implement them. My motivation writing this article is partly to advocate the use of the open-source tool link:https://github.com/verhas/jamal[Jamal]. Although Jamal is a general-purpose macro language and can be used in many areas, its primary purpose is document maintenance support. It is a simple to write, non-intrusive macro language. Using it, you can insert meta-information into the documentation to be processed by the automated build. You can use it with any plain text document format, like Asciidoc, markdown, apt, etc. The latest releases also support the DOCX format to use it even with Microsoft Word.

The set of the macros is quite extensive, and it is easy to add your own. The documentation support module can gather information from the application&apos;s source code as snippets. Snippets can then be transformed, extracted, and inserted into the documentation. Information from the code can be extracted using text tools using the source code text. However, in the case of Java applications, the document transformation may also collect information using reflection. It can be done because Jamal itself is a Java application.

It can be started on the command line as a maven plugin and a maven extension. It is also embedded as a doclet and a taglet to allow Jamal macros in the JavaDoc documentation.

You can use macros to check the consistency of the documentation and the code. You can mark some part of the code as a snippet, and the documentation related to the specific region may contain the hash code of the piece. When the part changes in the source code, the macro evaluation will automatically signal an error.

The application of Jamal is independent of build automation. It can be antora, jBake, or simply a maven project with different plugins. The application of Jamal is also independent of the documentation format. It can be Asciidoc, markdown, apt, etc., as long as the documentation format is text. Using the Word extension included in the command line version, it can even be Microsoft DOCX Word format.

== 4. Conclusion

Treating documentation as source code is a good idea and a good start. It can, and should, however, be extended to include more features. When you treat your documentation as a source code, you should not stop simply using built automation, automated testing, review processes, and versioning. You should also apply techniques like Don&apos;t Repeat Yourself (DRY). Extra tools exist and seamlessly integrate with the already existing build and formatting tools to do that.

=== Comments imported from Wordpress


*Docs as Code is not enough - Java Code Geeks - R4 News* 2022-04-04 05:02:00





[quote]
____
[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Docs as Code is not enough [&amp;#8230;]
____</content><author><name></name></author><summary type="html">1. Docs as Code</summary></entry><entry><title type="html">Docs as Code is not enough</title><link href="https://javax0.github.io/2022/05/24/docs-as-code.html" rel="alternate" type="text/html" title="Docs as Code is not enough" /><published>2022-05-24T00:00:00+02:00</published><updated>2022-05-24T00:00:00+02:00</updated><id>https://javax0.github.io/2022/05/24/docs-as-code</id><content type="html" xml:base="https://javax0.github.io/2022/05/24/docs-as-code.html">== 1. Docs as Code


=== 1.1. it is the first step to the right direction

The approach to treating your documentation the same way as program code is a step in the right direction, but it is far from state-of-the-art. The practice is detailed on many websites that advocate the use of docs-as-code (DAC). For example the link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs] community has a great article on docs-as-code. The article lists

 	* Issue Trackers
 	* Version Control (Git)
 	* Plain Text Markup (Markdown, reStructuredText, Asciidoc)
 	* Code Reviews
 	* Automated Tests

as required tools to this approach. Another example is link:https://docs-as-co.de/[docs-as-code], which is a toolset for documentation maintenance. They write
[quote]
____

With docs-as-code, you treat your documentation the same way as your code.

You use…

your IDE to write it
your version control system to store and version it
your test-runner to test it
your build system to build and deploy it&quot;
____

This is very much the same as the approach of link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs].

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-3.svg[]

You have to have your documents in a format supported by the DAC tools. Use version control, document review, automated build, issue tracker, and automated tests. It is very much the same approach we use in code development.

Essentially it is a copy of the professional software development process&apos; coding part. Documentation, however, is not coding. While it is a good idea to reuse some parts of the coding methodology technics, there is more to it.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-4.svg[]

== 2. What docs-as-code Ignores

Coding is a transformation process converting documentation, namely the requirement documentation, into code. The requirement documentation may not be documentation in the classical sense. It may be some note, a list of wishes on a jot of paper. Still, the essence is to convert some human affine into machine affine. Some techniques try to support this process, but most of these techniques die when in production. For example, creating the documentation as UML and making it so precise that the code generation is automatic afterward is not feasible. You could do it in principle, but the cost of the effort is too high. It is cheaper to create the code than documentation that defines the functionality with mathematical precision.

Documenting an application is precisely the opposite direction.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-5.svg[]

Something that failed in one direction does not necessarily fail when we try to go the other direction. You may not be able to jump from the river to the bridge, but the other way is very much possible.

When creating the program documentation, our source is precisely describing the functionality we want to document. After all, the code is the most precise documentation of the application functionality. We already have the precision, which was not feasible to have for the other way around.

The docs-as-code approach, as described by most articles, ignores it. However, it can be amended, and it should be. We can look at it as the next step in the docs-as-code evolution.

=== 2.1. The next step

We can categorize documentation into two categories.

 	* Explanatory, and
 	* Reference

Sometimes a document belongs to one of the categories, but documents are a mix of the two most of the time. It may even happen that you cannot even tell if a sentence in a document belongs to one category or the other.

Creating an explanatory style text cannot be automated. It needs human effort to create sentences that are clear and easily understandable. The importance is demonstrated by the lack of them in this article, as you may have noticed.

However, creating the reference text is more or less a mechanical task. The documentarian (a term from write-the-docs) copies the key&apos;s name to explain how to configure the system and writes a sentence around it. Copies some sample code from the unit tests into a code segment into the Asciidoc documentation and adds explanation. The reference is taken from the code verbatim in these examples, and the explanatory part is added.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-1.svg[]

You can automate the copy of the reference information. Most of the time, it is not automated.

The catch is that automation, just as in the case of tests, is more expensive than doing manual work once. It pays back when the actual operation (copy and paste) happens many times.

And it usually does. To be more precise, it is supposed to happen. However, the documentation maintenance misses the task in practice, and the document becomes stale. It is where the docs-as-code automated test may help. In principle, it is possible to create a test checking the documentation and find discrepancies between the names in the code and the documentation. It can be heuristic, or it can be exact. To do it the exact way, the documentation and/or the code needs meta-information helping the test to perform the consistency check.

Such a test can signal that the documentation may be outdated and need change. For example, it may give a warning, like
[quote]
____
&quot;The name of the field XYZ is not the same as in the documentation ZZZ. Change ZZZ in the documentation to XYZ&quot;.
____

It is a foolish and outrageous error message. I immediately know that the program architecture is messed up when I see such an error message. If the test can tell me what to do with such precision, it could fix the problem with the same effort.

It is much better if we let the automated build copy the actual name instead of checking that the human did it correctly. To do that, the documentarian should put the meta-information into the documentation instead of the copied value. The meta-information is read by the automated build tool, and using that; it copies the actual value or values.

If the value changes, the build process will automatically change it.

Another advantage is the lesser possibility for error. If the documentarian makes a mistake copying the field&apos;s name, the text will not complain. If he writes XXY instead of XYZ, the documentation will contain the wrong name unless some human review process discovers and fixes the bug. If the documentarian inserts the meta information and makes a mistake, the build process will likely fail. If instead of XYZ, I have to write `{java:field com.javax0.jamal.api#XYZ}` any simple typo will be detected. If there is a field  `com.javax0.jamal.api#XYZ` it is unlikely to have also `com.javax0.jamal.api#XXY`.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-2.svg[]

With this approach, the docs-as-code workflow is extended. The documentation&apos;s &quot; source code &quot; starts behaving as a source code. The automated build is no longer simply formatting and executing language checks. The goal is to automate everything that you can automate. It may not be cheaper than doing the work manually, but certainly less error-prone.

== 3. Tools

All the above theory is pleasant and attractive but worth nothing unless there are tools to implement them. My motivation writing this article is partly to advocate the use of the open-source tool link:https://github.com/verhas/jamal[Jamal]. Although Jamal is a general-purpose macro language and can be used in many areas, its primary purpose is document maintenance support. It is a simple to write, non-intrusive macro language. Using it, you can insert meta-information into the documentation to be processed by the automated build. You can use it with any plain text document format, like Asciidoc, markdown, apt, etc. The latest releases also support the DOCX format to use it even with Microsoft Word.

The set of the macros is quite extensive, and it is easy to add your own. The documentation support module can gather information from the application&apos;s source code as snippets. Snippets can then be transformed, extracted, and inserted into the documentation. Information from the code can be extracted using text tools using the source code text. However, in the case of Java applications, the document transformation may also collect information using reflection. It can be done because Jamal itself is a Java application.

It can be started on the command line as a maven plugin and a maven extension. It is also embedded as a doclet and a taglet to allow Jamal macros in the JavaDoc documentation.

You can use macros to check the consistency of the documentation and the code. You can mark some part of the code as a snippet, and the documentation related to the specific region may contain the hash code of the piece. When the part changes in the source code, the macro evaluation will automatically signal an error.

The application of Jamal is independent of build automation. It can be antora, jBake, or simply a maven project with different plugins. The application of Jamal is also independent of the documentation format. It can be Asciidoc, markdown, apt, etc., as long as the documentation format is text. Using the Word extension included in the command line version, it can even be Microsoft DOCX Word format.

== 4. Conclusion

Treating documentation as source code is a good idea and a good start. It can, and should, however, be extended to include more features. When you treat your documentation as a source code, you should not stop simply using built automation, automated testing, review processes, and versioning. You should also apply techniques like Don&apos;t Repeat Yourself (DRY). Extra tools exist and seamlessly integrate with the already existing build and formatting tools to do that.

=== Comments imported from Wordpress


*Docs as Code is not enough - Java Code Geeks - R4 News* 2022-04-04 05:02:00





[quote]
____
[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Docs as Code is not enough [&amp;#8230;]
____</content><author><name></name></author><summary type="html">1. Docs as Code</summary></entry><entry><title type="html">Docs as Code is not enough</title><link href="https://javax0.github.io/2022/03/24/2626.html" rel="alternate" type="text/html" title="Docs as Code is not enough" /><published>2022-03-24T00:00:00+01:00</published><updated>2022-03-24T00:00:00+01:00</updated><id>https://javax0.github.io/2022/03/24/2626</id><content type="html" xml:base="https://javax0.github.io/2022/03/24/2626.html">== 1. Docs as Code


=== 1.1. it is the first step to the right direction

The approach to treating your documentation the same way as program code is a step in the right direction, but it is far from state-of-the-art. The practice is detailed on many websites that advocate the use of docs-as-code (DAC). For example the link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs] community has a great article on docs-as-code. The article lists

 	* Issue Trackers
 	* Version Control (Git)
 	* Plain Text Markup (Markdown, reStructuredText, Asciidoc)
 	* Code Reviews
 	* Automated Tests

as required tools to this approach. Another example is link:https://docs-as-co.de/[docs-as-code], which is a toolset for documentation maintenance. They write
[quote]
____

With docs-as-code, you treat your documentation the same way as your code.

You use…

your IDE to write it
your version control system to store and version it
your test-runner to test it
your build system to build and deploy it&quot;
____

This is very much the same as the approach of link:https://www.writethedocs.org/guide/docs-as-code/[Write the Docs].

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-3.svg[]

You have to have your documents in a format supported by the DAC tools. Use version control, document review, automated build, issue tracker, and automated tests. It is very much the same approach we use in code development.

Essentially it is a copy of the professional software development process&apos; coding part. Documentation, however, is not coding. While it is a good idea to reuse some parts of the coding methodology technics, there is more to it.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-4.svg[]

== 2. What docs-as-code Ignores

Coding is a transformation process converting documentation, namely the requirement documentation, into code. The requirement documentation may not be documentation in the classical sense. It may be some note, a list of wishes on a jot of paper. Still, the essence is to convert some human affine into machine affine. Some techniques try to support this process, but most of these techniques die when in production. For example, creating the documentation as UML and making it so precise that the code generation is automatic afterward is not feasible. You could do it in principle, but the cost of the effort is too high. It is cheaper to create the code than documentation that defines the functionality with mathematical precision.

Documenting an application is precisely the opposite direction.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-5.svg[]

Something that failed in one direction does not necessarily fail when we try to go the other direction. You may not be able to jump from the river to the bridge, but the other way is very much possible.

When creating the program documentation, our source is precisely describing the functionality we want to document. After all, the code is the most precise documentation of the application functionality. We already have the precision, which was not feasible to have for the other way around.

The docs-as-code approach, as described by most articles, ignores it. However, it can be amended, and it should be. We can look at it as the next step in the docs-as-code evolution.

=== 2.1. The next step

We can categorize documentation into two categories.

 	* Explanatory, and
 	* Reference

Sometimes a document belongs to one of the categories, but documents are a mix of the two most of the time. It may even happen that you cannot even tell if a sentence in a document belongs to one category or the other.

Creating an explanatory style text cannot be automated. It needs human effort to create sentences that are clear and easily understandable. The importance is demonstrated by the lack of them in this article, as you may have noticed.

However, creating the reference text is more or less a mechanical task. The documentarian (a term from write-the-docs) copies the key&apos;s name to explain how to configure the system and writes a sentence around it. Copies some sample code from the unit tests into a code segment into the Asciidoc documentation and adds explanation. The reference is taken from the code verbatim in these examples, and the explanatory part is added.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-1.svg[]

You can automate the copy of the reference information. Most of the time, it is not automated.

The catch is that automation, just as in the case of tests, is more expensive than doing manual work once. It pays back when the actual operation (copy and paste) happens many times.

And it usually does. To be more precise, it is supposed to happen. However, the documentation maintenance misses the task in practice, and the document becomes stale. It is where the docs-as-code automated test may help. In principle, it is possible to create a test checking the documentation and find discrepancies between the names in the code and the documentation. It can be heuristic, or it can be exact. To do it the exact way, the documentation and/or the code needs meta-information helping the test to perform the consistency check.

Such a test can signal that the documentation may be outdated and need change. For example, it may give a warning, like
[quote]
____
&quot;The name of the field XYZ is not the same as in the documentation ZZZ. Change ZZZ in the documentation to XYZ&quot;.
____

It is a foolish and outrageous error message. I immediately know that the program architecture is messed up when I see such an error message. If the test can tell me what to do with such precision, it could fix the problem with the same effort.

It is much better if we let the automated build copy the actual name instead of checking that the human did it correctly. To do that, the documentarian should put the meta-information into the documentation instead of the copied value. The meta-information is read by the automated build tool, and using that; it copies the actual value or values.

If the value changes, the build process will automatically change it.

Another advantage is the lesser possibility for error. If the documentarian makes a mistake copying the field&apos;s name, the text will not complain. If he writes XXY instead of XYZ, the documentation will contain the wrong name unless some human review process discovers and fixes the bug. If the documentarian inserts the meta information and makes a mistake, the build process will likely fail. If instead of XYZ, I have to write `{java:field com.javax0.jamal.api#XYZ}` any simple typo will be detected. If there is a field  `com.javax0.jamal.api#XYZ` it is unlikely to have also `com.javax0.jamal.api#XXY`.

image::https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/articleimages/docs-as-code-2.svg[]

With this approach, the docs-as-code workflow is extended. The documentation&apos;s &quot; source code &quot; starts behaving as a source code. The automated build is no longer simply formatting and executing language checks. The goal is to automate everything that you can automate. It may not be cheaper than doing the work manually, but certainly less error-prone.

== 3. Tools

All the above theory is pleasant and attractive but worth nothing unless there are tools to implement them. My motivation writing this article is partly to advocate the use of the open-source tool link:https://github.com/verhas/jamal[Jamal]. Although Jamal is a general-purpose macro language and can be used in many areas, its primary purpose is document maintenance support. It is a simple to write, non-intrusive macro language. Using it, you can insert meta-information into the documentation to be processed by the automated build. You can use it with any plain text document format, like Asciidoc, markdown, apt, etc. The latest releases also support the DOCX format to use it even with Microsoft Word.

The set of the macros is quite extensive, and it is easy to add your own. The documentation support module can gather information from the application&apos;s source code as snippets. Snippets can then be transformed, extracted, and inserted into the documentation. Information from the code can be extracted using text tools using the source code text. However, in the case of Java applications, the document transformation may also collect information using reflection. It can be done because Jamal itself is a Java application.

It can be started on the command line as a maven plugin and a maven extension. It is also embedded as a doclet and a taglet to allow Jamal macros in the JavaDoc documentation.

You can use macros to check the consistency of the documentation and the code. You can mark some part of the code as a snippet, and the documentation related to the specific region may contain the hash code of the piece. When the part changes in the source code, the macro evaluation will automatically signal an error.

The application of Jamal is independent of build automation. It can be antora, jBake, or simply a maven project with different plugins. The application of Jamal is also independent of the documentation format. It can be Asciidoc, markdown, apt, etc., as long as the documentation format is text. Using the Word extension included in the command line version, it can even be Microsoft DOCX Word format.

== 4. Conclusion

Treating documentation as source code is a good idea and a good start. It can, and should, however, be extended to include more features. When you treat your documentation as a source code, you should not stop simply using built automation, automated testing, review processes, and versioning. You should also apply techniques like Don&apos;t Repeat Yourself (DRY). Extra tools exist and seamlessly integrate with the already existing build and formatting tools to do that.

=== Comments imported from Wordpress


*Docs as Code is not enough - Java Code Geeks - R4 News* 2022-04-04 05:02:00





[quote]
____
[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Docs as Code is not enough [&amp;#8230;]
____</content><author><name></name></author><summary type="html">1. Docs as Code</summary></entry><entry><title type="html">Lambda and Final Parameters</title><link href="https://javax0.github.io/2021/12/08/lambda-and-final-parameters.html" rel="alternate" type="text/html" title="Lambda and Final Parameters" /><published>2021-12-08T00:00:00+01:00</published><updated>2021-12-08T00:00:00+01:00</updated><id>https://javax0.github.io/2021/12/08/lambda-and-final-parameters</id><content type="html" xml:base="https://javax0.github.io/2021/12/08/lambda-and-final-parameters.html">== 1. Introduction




Lambda expressions can use the variables in the scope of the lambda expression, but only if they are final or effectively final. What is the reason for that? Why is that? It is an interesting question because the answer is not apparent and opinionated.



There is only one ultimate answer, though: because that is what the Java Language Specification says. But saying that is boring. True, but boring. I prefer the answer that says lambdas can only use final and effectively final local variables because lambdas are not closures.



In the following, I will discuss what final and effectively final mean, the differences between closures and lambdas, and finally, how we can create closures in Java using lambda expressions. I am not advocating the creation of lambda expression-based closures in Java, nor the abandonment of the idea.




== 2. `final` and effectively final




When declaring it, a local variable is final if we use the `final` keyword. The compiler will also require that the variable get a value only once. This value assignment may happen at the location of the declaration but can be a bit later. There can be multiple lines that assign value to the final variable so long as long only one of them can execute for each method invocation. The typical case is when you declare a final variable without assigning value to it, and then you have an `if` statement giving different values in the &quot;then&quot; and the &quot;else&quot; branch.



Needless to say that the variable has to be initialized before the lambda expression is created.



A variable is effectively final if not final, but it could be. It gets an assigned value at the declaration or can get a given value only once.




== 3. Life of a Lambda




A lambda expression is a kind of anonymous class. The JVM handles it differently, and it is more efficient than an anonymous class, not to mention that it is more readable. However, from our point of view, we can think of it as an inner class.



[source]
----
public class Anon {

    public static Function&amp;lt;Integer, Integer&amp;gt; incrementer(final int step) {
        return (Integer i) -&amp;gt; i + step;
    }
    public static Function&amp;lt;Integer, Integer&amp;gt; anonIncrementer(final int step) {
        return new Function&amp;lt;Integer, Integer&amp;gt;() {
            @Override
            public Integer apply(Integer i) {
                return i + step;
            }
        };
    }
}
----




When the lambda expression is created, the JVM makes an instance of the lambda class that implements the `Function` interface.



[source]
----
var inc = Anon.incrementer(5);
assertThat(inc.getClass().getName()).startsWith(&quot;javax0.blog.lambdas.Anon$$Lambda$&quot;);
assertThat(inc.getClass().getSuperclass().getName()).isEqualTo(&quot;java.lang.Object&quot;);
assertThat(inc.getClass().getInterfaces()).hasSize(1);
assertThat(inc.getClass().getInterfaces()[0]).isEqualTo(java.util.function.Function.class);
----




The JVM will place this object on the heap. In some cases, the compiler may realize that the object cannot get out of the method&apos;s scope, and in this case, it may store it in the stack. It is called local variable escape analysis, which can just put any object on the stack, which cannot escape from the method and may die together with the method return. However, for our discussion, we can forget this advanced feature of the Java environment.



The lambda is created in the method and stored in the heap. It is alive so long as long there is a hard reference to this object and is not collected. If a lambda expression could reference and use a local variable, which lives in the stack, it would need access to something gone after the method returns. It is not possible.



There are two solutions to overcome this discrepancy. One is what Java follows, creating a copy of the variable&apos;s value. The other one is creating a closure.




== 4. Closure and Groovy




We will look at Groovy examples when talking about closures. The reason to select Groovy is that it is very close to Java. We will look at some Groovy examples, and for the matter of demonstration, we will use Java-style as much as possible. Groovy is more or less compatible with Java; any Java code can be compiled as a Groovy source. The actual semantic may, however, be different slightly.



Groovy solved the issue of local variable accessibility creating closures. The closure closes the functionality and the environment into a single object. For example, the following Groovy code:



[source]
----
class MyClosure {
    static incrementer() {
        Integer z = 0
        return { Integer x -&amp;gt; z++; x + z }
    }
}
----




creates a closure, similar to our lambda expression, but it also uses the local variable `z`. This local variable is not final and not effectively final. What happens here is that the compiler creates a new class that contains a field for each local variable used in the closure. A new local variable references an instance of this new class, and the local variable uses all references to this object and its fields. This object, along with the &quot;lambda expression&quot; code, is the closure.



Since the object is on the heap, it stays alive as long as there is a hard reference. The object, which holds the described function has one, so this object will be available so long as long the closure is alive.



[source]
----
def inc = MyClosure.incrementer();
assert inc(1) == 2
assert inc(1) == 3
assert inc(1) == 4
----




It is clearly shown in the test execution where the closure increases the `z` amount at each execution.



Closures are lambdas with state.




== 5. Lambda in Java




Java approaches this problem differently. Instead of creating a new synthetic object to hold the referenced local variables, it simply uses the values of the variables. Lambdas seem to use the variables, but they don&apos;t. They use only constants copying the value of the variables.



When designing lambdas, there were two options. I was not part of the team making the decisions, so what I write here is only my opinion, guessing, but it may help you understand why the decision was made. One option could be to copy the variable&apos;s value when the lambda is created, not caring about the later value change of the local variable. Could it work? Inevitably. Would it be readable? In many cases, it would not be. What if the variable changes later? Will the lambda use the changed value? No, it will use the copied, frozen value. It is different from how variables work usually.



Java requires the variable to be final or effectively final to solve this discrepancy. The disturbing case having the different variable value when the lambda is used is avoided.



When designing language elements, there are always tradeoffs. On one end, some constructs provide great power to the hands of the developers. However, great power requires great responsibility. Most of the developers are not mature enough to take on the responsibility.



On the other side of the scale are the simple constructs providing less functionality. It may not solve some problems so elegantly, but you also cannot create unreadable code so easily. Java is usually going this way. There has been an obfuscated C contest almost since the language C started. Who can write less readable code in that programming language? Since then, almost all languages started the contest, except two. Java and Perl. In the case of Java, the contest would be dull, as you cannot write obfuscated code in Java. In the case of Perl, the contest is pointless.




== 6. Closure in Java




If you want to have a closure in Java, you can create one yourself. The good old way is to use anonymous, or for that matter, regular classes. The other is to mimic the behavior of the Groovy compiler and create a class that encapsulates the closure data.



The Groovy compiler creates the class for you to enclose the local variables, but nothing stops you from making it manually if you want it in Java. You have to do the same thing. Move every local variable that the closure uses into a class as an instance field.



[source]
----
public static Function&amp;lt;Integer, Integer&amp;gt; incrementer() {
    AtomicInteger z = new AtomicInteger(0);
    return x -&amp;gt; {
        z.set(z.get() + 1);
        return x + z.get();
    };
}
----




We only had one local variable, `int z`, in our example. We need a class that can hold an int. The class for that is `AtomicInteger`. It does many other things, and it is usually used when concurrent execution is an issue. Because of that, some overhead may slightly affect the performance, which I abjectly ignore for now.



If there are more than one local variables, we need to craft a class for them.



[source]
----
public static Function&amp;lt;Integer, Integer&amp;gt; incrementer() {
    class DataHolder{int z; int m;}
    final var dh = new DataHolder();
    return x -&amp;gt; {
        dh.z++;
        dh.m++;
        return x + dh.z*dh.m;
    };
}
----




As you can see in this example, we can declare a class even inside the method, and for the cohesion of the code, it is the right place. Eventually, it is easy to see that this approach is working.



[source]
----
final var inc = LambdaComplexClosure.incrementer();
assertThat(inc.apply(1)).isEqualTo(2);
assertThat(inc.apply(1)).isEqualTo(5);
assertThat(inc.apply(1)).isEqualTo(10);
----




It is, however, questionable if you want to use this approach. Lambdas generally should be stateless. When you need a state that a lambda uses, in other words, when you need a closure, which the language does not directly support, you should use a class.




== 7. Summary




* This article discussed why a lambda expression can access only final and effectively final local variables.* We also discussed the reason and how different languages approach this issue.* Finally, we looked at a Groovy example and how Java can mimic this.



Therefore, if anyone asks you the interview question, why a lambda expression can access only final and effectively final local variables, you will know the answer. Because the Java Language Specification says so. Everything else is speculation.



You an find the code for this article along with the article text source code at https://github.com/verhas/demo/tree/master/LambdaFinal</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Lambda and final variables</title><link href="https://javax0.github.io/2021/12/08/lambda-and-final-variables.html" rel="alternate" type="text/html" title="Lambda and final variables" /><published>2021-12-08T00:00:00+01:00</published><updated>2021-12-08T00:00:00+01:00</updated><id>https://javax0.github.io/2021/12/08/lambda-and-final-variables</id><content type="html" xml:base="https://javax0.github.io/2021/12/08/lambda-and-final-variables.html">== 1. Introduction




Lambda expressions can use the variables in the scope of the lambda expression, but only if they are final or effectively final. What is the reason for that? Why is that? It is an interesting question because the answer is not apparent and opinionated.



There is only one ultimate answer, though: because that is what the Java Language Specification says. But saying that is boring. True, but boring. I prefer the answer that says lambdas can only use final and effectively final local variables because lambdas are not closures.



In the following, I will discuss what final and effectively final mean, the differences between closures and lambdas, and finally, how we can create closures in Java using lambda expressions. I am not advocating the creation of lambda expression-based closures in Java, nor the abandonment of the idea.




== 2. `final` and effectively final




When declaring it, a local variable is final if we use the `final` keyword. The compiler will also require that the variable get a value only once. This value assignment may happen at the location of the declaration but can be a bit later. There can be multiple lines that assign value to the final variable so long as long only one of them can execute for each method invocation. The typical case is when you declare a final variable without assigning value to it, and then you have an `if` statement giving different values in the &quot;then&quot; and the &quot;else&quot; branch.



Needless to say that the variable has to be initialized before the lambda expression is created.



A variable is effectively final if not final, but it could be. It gets an assigned value at the declaration or can get a given value only once.




== 3. Life of a Lambda




A lambda expression is a kind of anonymous class. The JVM handles it differently, and it is more efficient than an anonymous class, not to mention that it is more readable. However, from our point of view, we can think of it as an inner class.



[source]
----
public class Anon {

    public static Function&lt;Integer, Integer&gt; incrementer(final int step) {
        return (Integer i) -&gt; i + step;
    }
    public static Function&lt;Integer, Integer&gt; anonIncrementer(final int step) {
        return new Function&lt;Integer, Integer&gt;() {
            @Override
            public Integer apply(Integer i) {
                return i + step;
            }
        };
    }
}
----




When the lambda expression is created, the JVM makes an instance of the lambda class that implements the `Function` interface.



[source]
----
var inc = Anon.incrementer(5);
assertThat(inc.getClass().getName()).startsWith(&quot;javax0.blog.lambdas.Anon$$Lambda$&quot;);
assertThat(inc.getClass().getSuperclass().getName()).isEqualTo(&quot;java.lang.Object&quot;);
assertThat(inc.getClass().getInterfaces()).hasSize(1);
assertThat(inc.getClass().getInterfaces()[0]).isEqualTo(java.util.function.Function.class);
----




The JVM will place this object on the heap. In some cases, the compiler may realize that the object cannot get out of the method&apos;s scope, and in this case, it may store it in the stack. It is called local variable escape analysis, which can just put any object on the stack, which cannot escape from the method and may die together with the method return. However, for our discussion, we can forget this advanced feature of the Java environment.



The lambda is created in the method and stored in the heap. It is alive so long as long there is a hard reference to this object and is not collected. If a lambda expression could reference and use a local variable, which lives in the stack, it would need access to something gone after the method returns. It is not possible.



There are two solutions to overcome this discrepancy. One is what Java follows, creating a copy of the variable&apos;s value. The other one is creating a closure.




== 4. Closure and Groovy




We will look at Groovy examples when talking about closures. The reason to select Groovy is that it is very close to Java. We will look at some Groovy examples, and for the matter of demonstration, we will use Java-style as much as possible. Groovy is more or less compatible with Java; any Java code can be compiled as a Groovy source. The actual semantic may, however, be different slightly.



Groovy solved the issue of local variable accessibility creating closures. The closure closes the functionality and the environment into a single object. For example, the following Groovy code:



[source]
----
class MyClosure {
    static incrementer() {
        Integer z = 0
        return { Integer x -&gt; z++; x + z }
    }
}
----




creates a closure, similar to our lambda expression, but it also uses the local variable `z`. This local variable is not final and not effectively final. What happens here is that the compiler creates a new class that contains a field for each local variable used in the closure. A new local variable references an instance of this new class, and the local variable uses all references to this object and its fields. This object, along with the &quot;lambda expression&quot; code, is the closure.



Since the object is on the heap, it stays alive as long as there is a hard reference. The object, which holds the described function has one, so this object will be available so long as long the closure is alive.



[source]
----
def inc = MyClosure.incrementer();
assert inc(1) == 2
assert inc(1) == 3
assert inc(1) == 4
----




It is clearly shown in the test execution where the closure increases the `z` amount at each execution.



Closures are lambdas with state.




== 5. Lambda in Java




Java approaches this problem differently. Instead of creating a new synthetic object to hold the referenced local variables, it simply uses the values of the variables. Lambdas seem to use the variables, but they don&apos;t. They use only constants copying the value of the variables.



When designing lambdas, there were two options. I was not part of the team making the decisions, so what I write here is only my opinion, guessing, but it may help you understand why the decision was made. One option could be to copy the variable&apos;s value when the lambda is created, not caring about the later value change of the local variable. Could it work? Inevitably. Would it be readable? In many cases, it would not be. What if the variable changes later? Will the lambda use the changed value? No, it will use the copied, frozen value. It is different from how variables work usually.



Java requires the variable to be final or effectively final to solve this discrepancy. The disturbing case having the different variable value when the lambda is used is avoided.



When designing language elements, there are always tradeoffs. On one end, some constructs provide great power to the hands of the developers. However, great power requires great responsibility. Most of the developers are not mature enough to take on the responsibility.



On the other side of the scale are the simple constructs providing less functionality. It may not solve some problems so elegantly, but you also cannot create unreadable code so easily. Java is usually going this way. There has been an obfuscated C contest almost since the language C started. Who can write less readable code in that programming language? Since then, almost all languages started the contest, except two. Java and Perl. In the case of Java, the contest would be dull, as you cannot write obfuscated code in Java. In the case of Perl, the contest is pointless.




== 6. Closure in Java




If you want to have a closure in Java, you can create one yourself. The good old way is to use anonymous, or for that matter, regular classes. The other is to mimic the behavior of the Groovy compiler and create a class that encapsulates the closure data.



The Groovy compiler creates the class for you to enclose the local variables, but nothing stops you from making it manually if you want it in Java. You have to do the same thing. Move every local variable that the closure uses into a class as an instance field.



[source]
----
public static Function&lt;Integer, Integer&gt; incrementer() {
    AtomicInteger z = new AtomicInteger(0);
    return x -&gt; {
        z.set(z.get() + 1);
        return x + z.get();
    };
}
----




We only had one local variable, `int z`, in our example. We need a class that can hold an int. The class for that is `AtomicInteger`. It does many other things, and it is usually used when concurrent execution is an issue. Because of that, some overhead may slightly affect the performance, which I abjectly ignore for now.



If there are more than one local variables, we need to craft a class for them.



[source]
----
public static Function&lt;Integer, Integer&gt; incrementer() {
    class DataHolder{int z; int m;}
    final var dh = new DataHolder();
    return x -&gt; {
        dh.z++;
        dh.m++;
        return x + dh.z*dh.m;
    };
}
----




As you can see in this example, we can declare a class even inside the method, and for the cohesion of the code, it is the right place. Eventually, it is easy to see that this approach is working.



[source]
----
final var inc = LambdaComplexClosure.incrementer();
assertThat(inc.apply(1)).isEqualTo(2);
assertThat(inc.apply(1)).isEqualTo(5);
assertThat(inc.apply(1)).isEqualTo(10);
----




It is, however, questionable if you want to use this approach. Lambdas generally should be stateless. When you need a state that a lambda uses, in other words, when you need a closure, which the language does not directly support, you should use a class.




== 7. Summary




* This article discussed why a lambda expression can access only final and effectively final local variables.* We also discussed the reason and how different languages approach this issue.* Finally, we looked at a Groovy example and how Java can mimic this.



Therefore, if anyone asks you the interview question, why a lambda expression can access only final and effectively final local variables, you will know the answer. Because the Java Language Specification says so. Everything else is speculation.



You an find the code for this article along with the article text source code at https://github.com/verhas/demo/tree/master/LambdaFinal


=== Comments imported from Wordpress


*Peter Verhas* 2021-12-30 21:49:42





[quote]
____
Good catch! I fixed that sentence. It has to be &quot;The JVM will place this object on the heap.&quot;

Thanks.
____





*Filip* 2021-12-30 20:46:14





[quote]
____
Is lambda stored on heap or on stack? In paragraph four of &quot;Life of lambda&quot; it is said that lambda is created on a stack, but description is suggesting that it is created on a heap.
____





*Lambda and final variables - Java Code Geeks - R4 News* 2021-12-19 14:24:08





[quote]
____
[&amp;#8230;] Posted on Java Code Geeks with the permission of Peter Verhas, partner of our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]
____





*Lambda and final variables &amp;#8211; Java Code Geeks &amp;#8211; Munaf Sheikh* 2021-12-19 14:30:58





[quote]
____
[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]
____





*Lambda and final variables – Java Code Geeks &amp;#8211; Munaf Sheikh* 2021-12-19 17:35:51





[quote]
____
[&amp;#8230;] Published on Java Code Geeks with permission by Peter Verhas, partner at our JCG program. See the original article here: Lambda and final variables [&amp;#8230;]
____</content><author><name></name></author><summary type="html">1. Introduction</summary></entry></feed>