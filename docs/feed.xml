<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://javax0.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://javax0.github.io/" rel="alternate" type="text/html" /><updated>2023-08-08T18:36:04+02:00</updated><id>https://javax0.github.io/feed.xml</id><title type="html">Java Deep, mostly Java</title><subtitle>javax0 is a technical Java oriented blog. Whenever I find something interesting, in the mood and feel the power to publish it, you will get it here. Publications are usually released on Wednesday 15:00am GMT. Earlier posts of the blog were published on Javax0 Wordpress Site at https://javax0.wordpress.com</subtitle><entry><title type="html">Do not stop threads</title><link href="https://javax0.github.io/2023/08/07/do-not-stop-thread.html" rel="alternate" type="text/html" title="Do not stop threads" /><published>2023-08-07T00:00:00+02:00</published><updated>2023-08-07T00:00:00+02:00</updated><id>https://javax0.github.io/2023/08/07/do-not-stop-thread</id><content type="html" xml:base="https://javax0.github.io/2023/08/07/do-not-stop-thread.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;I dedicate this article to László Fekete, my former boss and director at T-Mobile Hungary.
He plays a significant role in this story as he was the one who made the decision to cancel our contract.
I must acknowledge that he made the right call, and it was the correct course of action.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;However, I also remember some instances where he seemed less concerned about his health, disregarding his blood pressure and cholesterol levels, despite my concerns, which we discussed a few times.
Sadly, László passed away in 2017 at the young age of 57 due to a heart attack.
It&amp;#8217;s a stark reminder of the importance of taking care of our well-being and not neglecting warning signs.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Now, as I find myself at the same age László was when he left us, it serves as a poignant reminder of the fragility of life and the need to prioritize our health and well-being.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction-topic&quot;&gt;1. Introduction, Topic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am 57, and I recently made some bad moves, and my back aches.
I cannot sit for a long time, and I suddenly had ample time at my hand watching YouTube videos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my exploration, I stumbled upon an impressive channel called &lt;a href=&quot;https://www.youtube.com/@ThePrimeTimeagen&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/@ThePrimeTimeagen&lt;/a&gt;.
The creator of this channel is a remarkable young individual who possesses wisdom beyond his years.
His videos exhibit a profound understanding of technology, which captivates me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I appreciate how he simply sits and discusses other videos or articles without feeling the need to over-explain things.
It&amp;#8217;s a &quot;take it or leave it&quot; approach.
Those who comprehend his content gain valuable insights, and those who don&amp;#8217;t: sorry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I very much enjoy when I understand what he says and feel that probably not many do.
It is a snug but somewhat arrogant feeling that one should be careful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, I could hardly find any of his statements I would strongly disagree.
Sometimes I feel we could have some discussion, but generally I can agree to, or accept his points.
Go and watch him!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently I saw a video where he was commenting an article that was about a story how someone almost accidentally corrupted PayPal in the early days.
I will not talk about that, it is here &lt;a href=&quot;https://www.youtube.com/watch?v=MzescXc5SW0&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=MzescXc5SW0&lt;/a&gt;.
It is a story with lots of technical details you can learn from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being 57 does not only mean backache.
It also means that I have seen and done a few things that sometimes I tell younger people in the office.
Why not write articles about these?
So I decided I will write a few articles about things that I have seen and done and that I think are worth sharing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here we go.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-disclaimer&quot;&gt;2. Disclaimer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the story is true and based on real events.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-stopping-threads&quot;&gt;3. Stopping threads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said, I have time to watch YouTube videos.
I came across the video &lt;a href=&quot;https://www.youtube.com/shorts/f4fajEBqY0g&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/shorts/f4fajEBqY0g&lt;/a&gt;.
It is a short video about how to stop a thread, which you should not.
This is one minute, and it does say you should not, and a sentence why, but one minute is too limited to explain the reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I know why you should not stop a thread and not only what the documentation says.
It cost me 20,000$ in lost revenue in 2006 when the GDP per capita per year in my country was less than that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-background&quot;&gt;4. Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started programming in 1980.
My father was a professor at TU Budapest in Hungary and could access a &lt;a href=&quot;https://en.wikipedia.org/wiki/TI-30&quot;&gt;TI-30&lt;/a&gt; calculator.
It was a programmable calculator.
I remember I tried to write a program to crack an RSA encoded text published to be cracked.
Although the prime numbers were only 10 digits long, and the calculator had 1024-step program memory, registers were perhaps 16bit integers, and I had to implement multi precision arithmetic in my code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I never succeeded with this one, but the exposure to programming &quot;infected&quot; me.
I was 14.
Later I programmed the Swedish ABC80, the Hungarian C64 clone, and the Hungarian VT-1080z that resembled the &lt;a href=&quot;https://en.wikipedia.org/wiki/Enterprise_(computer)&quot;&gt;Enterprise&lt;/a&gt; computer, ZX Sinclair Spectrum, and many others.
That time we programmed whatever we could get our hands on.
My Unix exposure was minimal because the chair I was volunteering had VAX VMS machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I finished TU Budapest Electric Engineer and started to work as a sales rep for Digital Equipment Corporation in Hungary in 1991.
Does not fit a programming carrier, does it.
That the time paid programming in Hungary was mainly crafting bookkeeping applications in BDase, and it did not pay well.
I was already married and had a child with the twins on the way, so I needed a respectable wage.
You can afford to live your hobby as a profession if you can afford it.
My priorities were different.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I kept programming in C and Perl that time as a hobby.
I even wrote a small book in Hungarian about perl, which was the first such, and many learned Perl programming that time from my book.
So much that when &lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Wall&quot;&gt;Larry Wall&lt;/a&gt; visited the Budapest Perl conference in the late 90s, I was invited as a keynote speaker.
The title of my talk was &quot;Forbid Perl&quot;, and I was talking about how Perl makes you so productive that using Perl eliminates the need of too many other programmers, and therefore it has to be forbidden to be used for real applications.
I was saying that in front of the father of Perl sitting in the first row.
I intended that as humor, but after a few decades I see that I was right.
At the time, I did not see the benefit of professional software development overhead versus hacking something together in Perl.
It is not the trait of the language per se, but Perl usually was used to script things in a hacky way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I left DEC in 1999 and joined index.hu as CIO.
It was a small startup, the first only online news site founded by a few university friends of mine.
We wanted to make history and get rich.
We achieved the first one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also programmed the advertisement engine of the site, which is a story on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the dotcom bubble burst, we had to lay off people, restructure the operation from investment oriented growing to sustainable operation.
There were a lot of things I learned there, but those were management lessons, not programming.
The last step was to give in my own notice, and I left the company in 2001.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I started to work for T-Mobile, but they did not hire me as a programmer.
I had no prior professional experience and &quot;hobby programming&quot; did not count.
I was hired as a project manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was working in that position, I even ignited the development of a reformed project management methodology, but this was not my piece of cake.
Five years later, my brother told me to create our own company.
He was one sixth owner of a small company that was doing software development, and the other five developers moved towards SQL and stored-procedure direction.
My brother thought that Java development is more interesting and more prospective, so he wanted to start a new company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why we decided to go to the Java direction and not Microsoft is again another topic that deserves an article on its own.
It was more political/philosophical than a technical decision.
I will write an article about that later, as well as about why we chose to trade in our old Linux and Windows machines to MacBooks with MacOS.
These are interesting topics because people approach such decisions based on belief, and it can lead to heated discussions.
Not now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We started the company in 2006.
One of our first clients was T-Mobile.
We knew the people there, they knew me, and they needed an advertisement engine.
I wrote the one for index.hu, and it was still in production six years later, delivering millions of HTTP responses per day.
Not only it was the far largest traffic web server in the country, but it was also the most reliable one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Much later at a conference, a speaker said that back in the days they checked their Internet connection by pinging the adserver of index.hu.
Other sites can be down, but if the adserver is not reachable then it is more likely they have a connection problem.
He did not know I was sitting there in the audience.
It was a great feeling hearing that.
That ad server ran for nine years uninterrupted and without any code modification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-thread-stopping-adserver&quot;&gt;5. Thread Stopping AdServer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we got the contract to develop an ad server for T-Mobile.
The contract size was around 30,000$.
I did not know any Java that time.
I had limited OOP experience.
I was mainly programming in C and Perl and not commercial.
But I was a good programmer, at least I though so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We created the application in Java while I was learning it.
The users were authenticated, and we had a backing database with user data.
The ad engine had to select the ads based on the mobile subscription, number of used minutes, phone type, and other parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We used PostgreSQL as the database in the dev environment and Hibernate on a Tomcat.
An advertisement had to be displayed in two seconds.
If the selection process was running longer, then a default ad was displayed.
To achieve this, we executed the selection logic in a separate thread using the ExecutorService and waiting on a Future object.
We also used the database connection pool available from the Hibernate library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We manually tested the application, and it worked fine.
We ran some load test and it worked fine.
But I wanted to deliver perfect software, so I decided to play a bit with the case when the selection times out.
In that case, the request serving thread sends a response, but the selection thread is still running putting a useless load on an already overloaded system.
We can call &apos;stop&apos; on the thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We tested this scenario, and it worked fine.
The connection pool realized that the thread was stopped and closed the connection and created a new one in these cases.
I knew that the production will use ORACLE database and the connection pool will also be the one provided by ORACLE.
We did not have a test environment with these components, therefore, I decided not to use this performance-saving trick in the production system.
But I was proud of my code, and I did not want to delete the line stopping the thread.
Instead, I put it into an if statement that was never true, with a comment something like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// this &apos;if&apos; is always false but I keep it here to show that I know how to stop a thread
if( true ){
    thread.stop();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you already get a clue, especially if you skip over the line reading it not realizing that the ACTUAL value is &apos;true&apos;.
The code went into production and worked fine.
It worked fine for a while, except when the load went up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the load went up, the application started to deliver the default ad.
The weird thing was that after the load went down, the application still delivered the default ad.
Operation had to restart the application to work again.
We did not have a clue what was going on, and we responded suggesting to increase the hardware capacity.
It was clearly needed to handle the peak load, but there was another problem eventually.
We tried to ignore it.
Being a small company, we were already occupied with the next project.
Putting new hardware under a service in a large corporation does not happen from one day to the other.
The service needed to restart a few times every day.
It went on between us and the project manager till he escalated the issue, and we could not ignore it anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had the log files, and we started to investigate.
The log clearly showed that the application allocated connection from the pool when a selection started.
The log also showed that the connection was returned to the pool when the selection finished even when the selection timed out.
I strongly believed that this could not be the problem, especially because we did not stop the threads in the case of timeout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At least that was what I thought.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We added more logging to the code, deployed it to production which essentially made it a bit slower, making the client even less happy, but it was needed.
There were log items for each request and response, we knew when a request timed out, the connection id, thread id and so on.
The log was huge, and I wrote Perl scripts to analyze it.
It took a week and a lot of diagrams until I realized that whenever a thread timed out, that connection ID never appeared later in the log.
The connection never returned to the pool, even though the library falsely reported that it was.
But why?
We did not stop the threads, and the log showed that these threads always stopped a few milliseconds after the selection timed out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was the first clue.
It seemed fishy.
When the selection using a few SQL selects timed out, why was it always only a little bit late?
The fact that we first tried to increase the timeout from two seconds to two and a half seconds shows how clueless we were.
It made the time outing threads to finish in two and a half second plus a few milliseconds.
Always the timeout time plus a few milliseconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Didn&amp;#8217;t you leave the code in that stops the thread?&quot; asked my brother.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Sure, I didn&amp;#8217;t, see, it is in an if statement that is never true.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;No. That is what the comment says.&quot;&amp;#8201;&amp;#8212;&amp;#8201;he replied.&amp;#8201;&amp;#8212;&amp;#8201;&quot;But the code is there, and it stops the thread.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was looking at that code hundreds of times blindly during those past two weeks.
I read the comment and skipped the code.
I read what I wanted to be there and not what really was there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time I deleted the line and the comment, and we deployed the code.
It worked fine, unlike our relationship with the client.
They canceled our contract for the further development of the ad server.
We have lost a 20,000$ contract, and we were told that we will never get any contract from them again.
I could not blame them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &quot;never&quot; lasted three years when partnering with another company, we delivered a system they used to electronically sign four million invoices every month.
Do you remember what my very first program was on that TI-30 calculator?
That delivery I am not ashamed of.
I learned a lot during those three years.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-conclusion&quot;&gt;6. Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many things to learn from this story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;6-1-dont-stop-threads&quot;&gt;6.1. Don&amp;#8217;t stop threads&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though you technically can stop threads, you MUST not.
If you MUST not, then why experiment with it?
You can tell the thread that it can stop if it feels so.
You can use some shared state for the thread to check periodically and stop when it can do safely.
Calling &lt;code&gt;interrupt()&lt;/code&gt; on a thread is a good way to tell the thread that it can stop.
Documentations list a lot of things that may happen when you call &lt;code&gt;stop()&lt;/code&gt; on a thread, but reading it is one thing and when it happens to you is another.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everybody has to burn the hands a few times.
The cleverer you are, the less you need to burn your hands.
There are some Mucius Scaevolas out there, not learning from their mistakes.
Do not be one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;6-2-logs-are-only-logs&quot;&gt;6.2. Logs are only logs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logs contain the messages that the application writes about what it does and not what really happens.
Programmers make bugs, including misleading logs.
Even when you use a high reputation library, you can still face bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;6-3-comments-can-be-dangerous&quot;&gt;6.3. Comments can be dangerous&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comments can be dangerous.
Comments are in English and no matter how nerd you are, your eyes will read the human text first.
In this case, non-native English speakers may have a slight advantage.
If the comment is outdated, misleading or plain wrong, it may lead the maintainers&apos; eyes away from the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good comment does not explain what the code does.
The code precisely describes that.
You should explain why it does what it does and how other parts of the code should use, and interface the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case not having any comment before the &lt;code&gt;if&lt;/code&gt; statement, or just&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// we can switch experimental thread stopping on and off here
if( true ){
    thread.stop();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;would have been better.
My today wisdom says to delete the line and the comment.
If you want to keep the line as a legacy, do it in a separate branch or tag in the version control system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;6-4-you-do-not-know-when-you-are-stupid&quot;&gt;6.4. You do not know when you are stupid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At that point, writing my first commercial application, I was at the peak of my Dunner-Kruger curve.
You do not know when you are there.
If you feel you are an expert, you know everything, you are the best: be very careful.
You are probably at that dangerous peek.
Don&amp;#8217;t stay there, climb off on the right side and start to climb up on the peek-less long slope to the right, always with a healthy level of self-doubt.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;6-5-customer-is-always-right&quot;&gt;6.5. Customer is always right&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the customer says that you are wrong, you are wrong.
They complained that the application does not come back from the overloaded state and our first response was to ask for more hardware.
Technically, we were right.
If the system does not ever get into the overloaded state, then there is no problem not getting back to normal from it.
However, you see how arrogant this standpoint was.
Probably this was the number one reason we lost the contract.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We learned from this mistake.
We learned many more mistakes after that, and this is a process that I have not finished yet.
Learning from mistakes may be the most perpetual thing in my life, and I think it is important for everyone.
I have many similar stories, and if you liked this one then leave a comment, give some feedback that will make me know that I should write more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">I dedicate this article to László Fekete, my former boss and director at T-Mobile Hungary. He plays a significant role in this story as he was the one who made the decision to cancel our contract. I must acknowledge that he made the right call, and it was the correct course of action.</summary></entry><entry><title type="html">Will AI take your job?</title><link href="https://javax0.github.io/2023/07/07/ai-will-take-your-job.html" rel="alternate" type="text/html" title="Will AI take your job?" /><published>2023-07-07T00:00:00+02:00</published><updated>2023-07-07T00:00:00+02:00</updated><id>https://javax0.github.io/2023/07/07/ai-will-take-your-job</id><content type="html" xml:base="https://javax0.github.io/2023/07/07/ai-will-take-your-job.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are numerous articles on the internet attempting to predict the future of AI, with many forecasting the disappearance of numerous jobs, leading to significant changes in the world.
In this article, I aim to explore an aspect of the economy that has yet to be extensively discussed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-what-are-you-afraid-of&quot;&gt;1. What are you afraid of?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When individuals express concerns about AI taking their jobs, their worry stems not from the work itself, but rather from the potential impact on their income and the life they can lead.
This includes meeting basic needs as well as the ability to have a comfortable home, relax, spend time with loved ones, and pursue personal fulfillment—needs driven by our fundamental human instincts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hence, the crucial question to ask is not whether AI will take your job, but rather how AI will transform our lives.
Even when we acknowledge that it&amp;#8217;s not solely about the job, the question remains ambiguous.
We can consider both the near future and the distant future: How will AI affect our lives in the next few years, and how will it impact our lives in the next few decades?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/OIG.e07ooq5PbXIziXNWuToB.jpg&quot; alt=&quot;OIG.e07ooq5PbXIziXNWuToB&quot; width=&quot;500px&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Image generated by AI (Paint me a picture of a software developer who looks said, and he is looking at some program printout, which is machine code, hexa codes, and there is an AI machine nearby that emits a lot of such code in electronic format stylized as clouds.)&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following section, we will delve into these two timeframes, attempting to imagine what may unfold by reflecting on the past and considering previous instances of significant change.
It&amp;#8217;s worth noting that similar transformative shifts have occurred before, and the current one is not the first, though it may be vastly different from its predecessors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-short-term&quot;&gt;2. Short Term&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the short term, AI will not take away your job, though determining the exact duration of this &quot;short term&quot; is uncertain.
AI is still in a developmental stage and can be seen as a sort of toy, but many individuals, including those in control of resources, recognize its potential to reshape the world.
While it has its flaws and limitations, such as generating images of programmers with three hands, it continues to improve.
Funding is readily available, and money drives the technological advancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What you will observe is that AI will initially change the nature of your job, particularly in terms of how you communicate with others.
It will assist you in performing your tasks, thereby increasing your effectiveness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This brings us to the point where your job may be at risk.
If a task previously required 10 individuals but can now be accomplished by just 2 people using AI, then either the business can expand or 8 people may lose their jobs, or perhaps a combination of the two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AI itself doesn&amp;#8217;t take away jobs; rather, those individuals who can effectively utilize AI and enhance their productivity will thrive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Numerous articles mention various professions that are deemed to be in danger.
Is your job among them?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pose yourself the following question: &quot;How much time do you spend on tasks that feel routine?&quot; If the majority of your time is spent on such routine activities, AI will likely eliminate these parts and enable you to be more productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, in my case, when writing articles like the ones I have composed over the past decade, I encountered a great deal of repetitive work.
Checking spelling, grammar, and style proved to be a tedious task since English is not my native language.
When I authored books for Packt four years ago, considerable effort was invested by editors to improve my English, followed by my own revisions to the text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few years later, I embarked on writing another book, (although I only completed the first chapter, with the rest left unfinished).
This time, I employed an AI-enhanced grammar checker.
The language editor made only one alteration to the entire chapter.
Nevertheless, as a native speaker, one can still discern that English is not my first language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To improve that, I write this article, I request ChatGPT to assist me by saying, &quot;Please rewrite the following paragraph in proper English.&quot; And it does.
In this case, there is no job at risk, as I have never had the luxury of having an editor review my articles.
Nonetheless, I hope the quality has improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing articles is indeed one area where AI can assist in eliminating routine tasks, and another example worth considering is the field of law.
There has been recent hype suggesting that AI could replace lawyers, with claims that ChatGPT could even pass the bar exam.
However, it is essential to reevaluate the definition of a lawyer in light of technological advancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, a lawyer could be defined as someone who passed the bar exam and practiced law.
This definition was as valid as saying &quot;everything that flies is a bird&quot; until airplanes were invented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, it is crucial to reconsider that definition.
Traditionally, a significant part of a lawyer&amp;#8217;s work involved knowledge of the law, finding relevant cases for references, and similar tasks.
However, this aspect of the work was not the primary source of value added.
Such tasks could be performed by assistants or paralegals.
The true value lies elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a non-lawyer, I cannot pinpoint exactly where this value lies within the legal profession.
Nonetheless, I am confident that the most critical aspect of their work is human communication.
This element cannot be replaced by AI because AI is not human and never will be.
While we can interact with AI and may not even notice the difference, most people would not trust an AI to be their lawyer, doctor, or any other profession where high stakes are involved.
Any potential change in this regard would be gradual and slow, as it depends on people&amp;#8217;s perception rather than technological advancements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In summary, it is evident that short-term changes are inevitable.
There will be shifts in the way we work, and certain jobs will gradually disappear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moving forward, let&amp;#8217;s now shift our focus to the long term.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-long-term&quot;&gt;3. Long Term&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the long term, AI is expected to become significantly more powerful.
Presently, we have standalone AI tools that possess various limitations.
However, as time progresses, many of these limitations are likely to diminish, and integration of AI applications will become more prevalent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, I engage in a process where I copy and paste my basic sentences into ChatGPT for rewriting, and then transfer them back to my text editor.
I already have two AI tools, Co-Pilot (a code completion tool) and Grazie (a grammar checker), integrated into my text editor.
Looking ahead, it is foreseeable that I will be able to write directly within ChatGPT, with seamless integration into my text editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What will be the consequences of the AI development considering jobs?
Let&amp;#8217;s imagine a future, where AI is an advancement and can do 90% of what humans can do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When such technology changes happened in the past, the eliminated professions were replaced by new ones.
We started agriculture and there was no need for hunters.
Instead, we needed farmers.
We invented the steam engine and there was no need for horses.
Instead, we needed engineers.
We invented the computer and there was no need for typists.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">There are numerous articles on the internet attempting to predict the future of AI, with many forecasting the disappearance of numerous jobs, leading to significant changes in the world. In this article, I aim to explore an aspect of the economy that has yet to be extensively discussed.</summary></entry><entry><title type="html">Managing IntelliJ Live templates</title><link href="https://javax0.github.io/2023/07/05/live-templates.html" rel="alternate" type="text/html" title="Managing IntelliJ Live templates" /><published>2023-07-05T00:00:00+02:00</published><updated>2023-07-05T00:00:00+02:00</updated><id>https://javax0.github.io/2023/07/05/live-templates</id><content type="html" xml:base="https://javax0.github.io/2023/07/05/live-templates.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I primarily use IntelliJ for the majority of my work nowadays.
This integrated editor and development environment offers numerous excellent features, one of which is the live templates feature.
I have chosen to assist Jamal with the implementation of live templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Within this article, I will elucidate the methodology I have devised for editing and maintaining the live templates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-problem-statement&quot;&gt;1. Problem Statement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IntelliJ supports the editing of live templates.
It is designed to make the creation of live templates easier for beginners rather than being highly effective for power users.
Solutions and usability can always be designed to prioritize ease of use for beginners or effectiveness for power users.
Typically, these two aspects are mutually exclusive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of IntelliJ and live templates, it appears that the decision was made to prioritize the initial version.
To edit the live templates, you can navigate to the menu &lt;code&gt;Settings&lt;/code&gt; &amp;#8594; &lt;code&gt;Live Templates&lt;/code&gt;.
The templates are organized by the language they are used in, and by selecting one or clicking on the plus sign to add a new template, you will be presented with a form to edit the different parts of the template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/image-2023-07-05-11-40-53-991.png&quot; alt=&quot;image 2023 07 05 11 40 53 991&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have the ability to edit several aspects of the live templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Abbreviation: This is the text you type in the editor to trigger the template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Description: A short text that appears in the popup when you type the abbreviation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template text: The actual content that gets inserted into the editor when the template is triggered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Context: Specifies where the template can be triggered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variables: Parts of the template that can be edited when the template is triggered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To save a template, you can click on either &quot;Apply&quot; or &quot;OK,&quot; and then proceed to add a new one.
However, when dealing with a large number of templates, such as the initial release that Jamal is working on, editing them can involve a significant number of clicks and mouse navigation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not the only challenge, though.
Maintaining the templates poses additional concerns.
Live templates are stored in ZIP files, and uploading them to a repository makes them accessible to users.
However, editing the templates and keeping track of changes can be tricky.
How can you efficiently make modifications to the templates?
How do you track and compare changes between different versions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Programmers have become accustomed to tools that support them in maintaining program code, which is essentially text-based.
Similarly, we desire the same level of support when it comes to maintaining live templates.
How shall we reach that?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-approach-to-solve-the-problem&quot;&gt;2. Approach to Solve the problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The live templates are stored as XML files within a ZIP file.
It is possible to import a ZIP file containing live templates, which will add the templates to the existing ones.
Each group of templates is stored in a separate XML file.
If a group with the same name already exists in the editor, it will be overwritten by the imported group.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One approach to editing the templates involves exporting them, modifying the XML files, and then importing them back.
By keeping the expanded files in a version control system, changes can be tracked.
The build process can generate the ZIP file from the expanded files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this process is not ideal.
Editing XML files is not preferred, as it can be cumbersome and unintuitive.
Nobody wants to spend their time editing XML files, especially when there are other enjoyable activities to pursue, such as going to the gym, swimming pool, enjoying an apéritif, or having a barbecue, or spending time with their children.
&quot;I am going to edit some XML files, what a joy!&quot; is not a phrase commonly heard (not to mention YAML!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we need is a better solution.
We require a Domain-Specific Language (DSL).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following section, I will describe the approach I took to create a DSL specifically for this purpose and how I utilized it effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-suggested-solution-tools&quot;&gt;3. Suggested Solution, Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating a DSL can be approached in various ways.
The most well-known option is to use Groovy, which is frequently used for this purpose.
However, Kotlin is also a viable choice.
Notably, Groovy includes an XML builder structure that facilitates the creation of XML files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this particular case, I opted for a different approach, driven by several reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary reason is that the live templates I developed are specifically for Jamal.
Jamal can serve as a DSL and supports multiple integrations.
One such integration involves running Jamal interactively while editing an Asciidoc file in IntelliJ using the Asciidoctor plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this setup, you can also edit XML files.
IntelliJ and the Asciidoctor plugin will recognize the file as an Asciidoctor file, but Jamal will identify it as both a Jamal and XML file.
When editing a file with the &lt;code&gt;.xml.jam&lt;/code&gt; extension in IntelliJ, Jamal will save the processed XML into a file while simultaneously sending an Asciidoc document containing the XML as a fenced code block to the Asciidoctor plugin.
This allows you to edit the enhanced XML with macros in the left pane of the editor while observing the final, syntax-highlighted XML in the right pane.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no separate compilation phase involved.
When you edit the &lt;code&gt;.xml.jam&lt;/code&gt; file, you are simultaneously modifying the XML file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Creating the DSL is remarkably simple.
You only need to define a few Jamal macros.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{%@sep {! !} %}
{!@define asciidoc:output=live-templates/templates/Jamal.xml!}
{!@comment This is a definition for the Jamal live macro templates for IntelliJ!}
{!@define template($name,$content,$desc,$variables)=
&amp;lt;template name=&quot;jm-$name&quot; value=&quot;{%{!#if /{!@string:startsWith/$content/#!}//@!}{!@replace /$content/\n/&amp;amp;#10;!}%}&quot; description=&quot;$desc&quot; toReformat=&quot;false&quot; toShortenFQNames=&quot;true&quot;&amp;gt;
$variables
&amp;lt;context&amp;gt;
&amp;lt;option name=&quot;AsciiDoc&quot; value=&quot;true&quot; /&amp;gt;
&amp;lt;/context&amp;gt;
&amp;lt;/template&amp;gt;
!}
{!@define variable($name,$default)=&amp;lt;variable name=&quot;$name&quot; expression=&quot;{!@replace `///`$default///&quot;///&amp;amp;quot;!}&quot; alwaysStopAt=&quot;true&quot; /&amp;gt;!}\&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To prevent conflicts with the Jamal plugin in Asciidoctor, the first line in the DSL sets the macro start and end strings to &lt;code&gt;{!&lt;/code&gt; and &lt;code&gt;!}&lt;/code&gt; respectively. By using these distinct macro delimiters, any potential clashes with the default &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;%}&lt;/code&gt; delimiters used by the Jamal plugin can be avoided. This ensures a smooth integration and usage of both the DSL and the Jamal plugin within Asciidoctor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To clarify the process further, the &lt;code&gt;asciidoc:output&lt;/code&gt; macro is used to specify the output file in the DSL.
Without this definition, the conversion from &lt;code&gt;.xml.jam&lt;/code&gt; to &lt;code&gt;.xml&lt;/code&gt; would create a file in the same location as the source file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the &lt;code&gt;asciidoc:output&lt;/code&gt; macro, two macros are used to define the template:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;template&lt;/code&gt;: This macro is utilized to define the structure and content of the template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;variable&lt;/code&gt;: This macro is used to specify the variables within the template that can be customized when the template is triggered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These macros, namely &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;variable&lt;/code&gt;, play a crucial role in creating and customizing the live templates within the DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is important to note that the abbreviation (name) of the live templates always begins with the letters &lt;code&gt;jm-&lt;/code&gt;, which stands for Jamal Macro.
This prefix is used to avoid conflicts with existing live templates and follows the same practice as the Asciidoctor plugin, which uses &lt;code&gt;ad-&lt;/code&gt; as a prefix for their live templates (where &lt;code&gt;ad&lt;/code&gt; stands for Asciidoctor).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simplify the editing process and reduce the risk of errors, it is undesirable to manually insert this prefix every time when working with the templates.
Doing so would be a tedious and error-prone task.
Therefore, the DSL provides a macro that handles this automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; attribute of the &lt;code&gt;template&lt;/code&gt; element stores the text that will be inserted into the editor when the template is triggered.
The macro processing the content parameter is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{%{!#if /{!@string:startsWith/$content/#!}//@!}{!@replace /$content/\n/&amp;amp;#10;!}%}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Asciidoc file, macros will begin with the &lt;code&gt;{%&lt;/code&gt; delimiter.
However, just like the &lt;code&gt;jm-&lt;/code&gt; prefix for live templates, we don&amp;#8217;t want to type this delimiter every time.
Since these macros are not user-defined macros, they can be invoked using the &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@&lt;/code&gt; prefix is used when there is no need to evaluate the content of the macro before the macro itself is evaluated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;#&lt;/code&gt; prefix is used when the content of the macro needs to be evaluated before the macro is evaluated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically, the &lt;code&gt;@&lt;/code&gt; prefix is used to optimize computing power and for aesthetic reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This notation was not taken from JavaDoc.
Jamal&amp;#8217;s first version, with this syntax, was designed in the mid-1990s, before or around the same time as Java was born.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To avoid typing the &lt;code&gt;@&lt;/code&gt; prefix every time, a macro is implemented to automatically handle it.
However, in cases where the &lt;code&gt;#&lt;/code&gt; prefix is needed, we want to be able to use it.
To handle this, the content is checked within the macro.
If the content starts with &lt;code&gt;#&lt;/code&gt;, the &lt;code&gt;@&lt;/code&gt; prefix is not prepended.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another macro called &lt;code&gt;replace&lt;/code&gt; is used to replace escaped new line characters with their XML equivalents.
This feature was not part of the initial version but was developed to simplify editing multi-line templates, as it proved to be a handy addition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, the macro string closing &lt;code&gt;%}&lt;/code&gt; is added to the template value to ensure proper syntax completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After defining these macros, the templates will have the following structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;templateSet group=&quot;Jamal&quot;&amp;gt;
{!template |begin|begin $M$|mark the beginning of a named or anonymous block|
  {!variable |M|&quot;[marker]&quot;!}
!}
...
{!template |platUml|plantUml ($O$) $I$ \n $C$|create a PlantUml diagram|
  {!variable |O|&quot;folder=... format=... template=...&quot;!}
  {!variable |I|&quot;xyz.svg&quot;!}
  {!variable |C|&quot;...&quot;!}
!}
&amp;lt;/templateSet&amp;gt;
{!@xmlFormat!}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of the DSL, the &lt;code&gt;xmlFormat&lt;/code&gt; macro is used to format the resulting XML and also check for any errors.
With this macro, there is no need for a separate compilation phase to identify mistakes.
Any errors will be promptly displayed in the right editor pane, providing immediate feedback on the validity of the generated XML.
Additionally, the &lt;code&gt;xmlFormat&lt;/code&gt; macro ensures that the XML output is properly formatted, enhancing readability and ensuring a well-structured final result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the editing process is ready, can zip the DSL, publish to the repository or import it into IntelliJ directly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-summary-and-takeaway&quot;&gt;4. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I have outlined a method for managing IntelliJ live templates using a DSL.
While it may not be worth the effort if you only need to edit a few templates, it becomes more valuable when dealing with a larger number of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key takeaway from this article is that the concept and approach demonstrated here can be applied to other applications as well.
Whether you have a binary or text-based dataset that is difficult to edit directly, you can create a DSL using Jamal to simplify the editing process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By utilizing a DSL, you can enhance productivity and streamline the editing of complex templates or datasets, making it easier to maintain and update them efficiently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamal is an excellent tool for it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-references&quot;&gt;5. References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I maintain the Jamal sources and documentation on GitHub:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation for the Asciidoctor Jamal plugin can be found at:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/master/jamal-asciidoc/README.adoc&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/master/jamal-asciidoc/README.adoc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This documentation provides instructions on how to install Jamal after installing Asciidoctor, as well as where to download the live templates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">I primarily use IntelliJ for the majority of my work nowadays. This integrated editor and development environment offers numerous excellent features, one of which is the live templates feature. I have chosen to assist Jamal with the implementation of live templates.</summary></entry><entry><title type="html">Adding Diagrams to Markdown Documents</title><link href="https://javax0.github.io/2023/06/19/kroki-in-jamal.html" rel="alternate" type="text/html" title="Adding Diagrams to Markdown Documents" /><published>2023-06-19T00:00:00+02:00</published><updated>2023-06-19T00:00:00+02:00</updated><id>https://javax0.github.io/2023/06/19/kroki-in-jamal</id><content type="html" xml:base="https://javax0.github.io/2023/06/19/kroki-in-jamal.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few weeks back, I wrote an article about how you can add Mermaid diagrams to your Markdown document.
In this document, I will extend that technology and explain how you can add&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;BlockDiag  BPMN️  Bytefield️  SeqDiag  ActDiag  NwDiag  PacketDiag  RackDiag
C4 with PlantUML  D2  DBML  Ditaa  Erd Excalidraw️  GraphViz  Mermaid  Nomnoml
Pikchr️  PlantUML  Structurizr  Svgbob  TikZ  UMlet  Vega  Vega-Lite  WaveDrom
WireViz&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To your markdown, Asciidoc, or any other document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-problem-statement&quot;&gt;1. Problem Statement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem statement is the same as in the previous article.
You want diagrams in your document, but the formatting tool does not support the diagramming tool you want to use.
It is an architectural problem that cannot be solved until we combine the different responsibilities: formatting and information content management.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-approach-to-solve-the-problem&quot;&gt;2. Approach to Solve the problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The approach is the same again; I am talking about the same tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic idea is, again: the separation of concerns.
The document markup language should be responsible for the document structure and content.
The diagramming tool should be responsible for the diagramming.
The meta markup should be responsible for the integration of the two.
I will not repeat here all the arguments why this is a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-suggested-solution-tools&quot;&gt;3. Suggested Solution, Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The suggested solution is to use Jamal as the meta markup.
However, this time we will not use Mermaid as a diagramming tool locally.
Instead, we will enjoy the services of the diagramming tool Kroki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-what-is-kroki&quot;&gt;3.1. What is Kroki&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kroki is a simple tool, and it is as genial as simple as the idea is.
It is nothing else than a web service implementing one &lt;code&gt;GET&lt;/code&gt; endpoint to execute 27 different diagramming tools.
If you&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;create your diagram text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;convert the text to base64 encoded&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open the URL &lt;code&gt;&lt;a href=&quot;https://kroki.io/&amp;lt;tool&amp;gt;/&amp;lt;format&amp;gt;/&amp;lt;base64&quot; class=&quot;bare&quot;&gt;https://kroki.io/&amp;lt;tool&amp;gt;/&amp;lt;format&amp;gt;/&amp;lt;base64&lt;/a&gt; encoded text&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then you will get the diagram in the format you requested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Brilliant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you develop something for open source, you can use Kroki for free.
If you develop something secret, afraid that your secret gets out to the internet, you can start Kroki on-premise.
Kroki is available as a docker image and also in other modes.
I recommend Docker if you do not trust the public service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why do we need Jamal?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, what happens if the service is temporarily not available?
Why should you pull the image all the time from the internet?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-2-need-for-jamal&quot;&gt;3.2. Need for Jamal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the first few iterations of editing the diagram file, converting it to base64, and opening the URL, you will realize that it is simple but repetitive work.
Precisely the type of work that should be automatized.
And that is what Jamal is for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next release of Jamal 2.3.0 will come with a new macro, including a file that you can import as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{@import res:kroki.jim}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It defines a macro &lt;code&gt;kroki&lt;/code&gt; that you can use to include the diagram in your document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The beauty of this solution is that the implementation did not need any Kroki-specific Java code.
It was all already there.
The macros used in that file are available from &lt;a href=&quot;https://raw.githubusercontent.com/verhas/jamal/master/jamal-snippet/src/main/resources/kroki.jim&quot;&gt;github&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{@comment }
define the macro kroki to download the image from kroki.io and reference it either Asciidoc or Markdown syntax

{@define [tail] kroki($name,$dt,$ft,$x)={#if /{#string:equals/md.jam/{#file (format=&quot;$extension2&quot;) {@pos (top format=%f)}}}/![]({kroki:download |$name|$dt|$ft|$x})/image::{kroki:download |$name|$dt|$ft|$x}[]}}

{@define kroki:download($name,$dt,$ft,$x)={#define URL={kroki:url|$dt|$ft|$x}}\
{#memoize (file=&quot;$name.$ft&quot; hashFile=&quot;$name.$ft.hash&quot; hashCode=&quot;{#hashCode {URL}}&quot;)
{@ident {#download (file=&quot;$name.$ft&quot;) {URL}}}}$name.$ft}

{@define kroki:url($dt,$ft,$x)=https://kroki.io/$dt/$ft/{@base64 (compress url)$x}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The macros check whether the included file is &lt;code&gt;md.jam&lt;/code&gt; (Markdown) or not; based on that, it generates a Markdown image reference or Asciidoc.
It also checks if the diagram has been downloaded and changed since the last time it was edited.
It downloads the diagram only if it has changed since the last time it was generated.
To do that, it uses the general purpose &lt;code&gt;memoize&lt;/code&gt;, &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; macros.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tooling also allows you to use variables in the diagram text.
Whether the diagram supports arithmetical, macro, or string operations does not matter.
Jamal provides it before the diagram text is sent to Kroki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to see some excellent examples, please visit the sample pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/master/jamal-snippet/KROKI.md.jam&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/master/jamal-snippet/KROKI.md.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/master/jamal-snippet/KROKI.adoc.jam&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/master/jamal-snippet/KROKI.adoc.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the URL without the &lt;code&gt;.jam&lt;/code&gt; at the end to see the GitHub-rendered versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-summary-and-takeaway&quot;&gt;4. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article discussed integrating 27 diagram types into your Asciidoc, Markdown, or any other markup document.
There is no excuse anymore for any outdated diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">A few weeks back, I wrote an article about how you can add Mermaid diagrams to your Markdown document. In this document, I will extend that technology and explain how you can add</summary></entry><entry><title type="html">Adding Mermaid Diagrams to Markdown Documents</title><link href="https://javax0.github.io/2023/06/05/mermaid-in-jamal.html" rel="alternate" type="text/html" title="Adding Mermaid Diagrams to Markdown Documents" /><published>2023-06-05T00:00:00+02:00</published><updated>2023-06-05T00:00:00+02:00</updated><id>https://javax0.github.io/2023/06/05/mermaid-in-jamal</id><content type="html" xml:base="https://javax0.github.io/2023/06/05/mermaid-in-jamal.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mermaid is a trendy diagramming tool.
A year ago, it was integrated into the Markdown rendering of Github.
(see &lt;a href=&quot;https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/&quot; class=&quot;bare&quot;&gt;https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/&lt;/a&gt;)
It is also integrated into several editors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What can you do, however, if you use a different editor?
What if you want to use your Markdown document in an environment that does not integrate Mermaid yet?
What can you do if the diagram is not Mermaid but PlantUML, Graphviz, or any other diagramming tool?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article will show how you can integrate ANY diagram-as-code tool into your documents.
The technique works for Markdown, Asciidoc, APT, or any other text-based markup language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, before anything else, here is a demonstration image, which was created the way I will describe in this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/e8a96c341e35bf3594a44f6a47e198b17c60affc393db847a4e26f7ed05708b5.svg&quot; alt=&quot;e8a96c341e35bf3594a44f6a47e198b17c60affc393db847a4e26f7ed05708b5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-problem-statement&quot;&gt;1. Problem Statement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When documenting some systems, it is often necessary to include diagrams.
Keeping diagrams in separate files has advantages but also disadvantages.
It is easier to keep the consistency of the documentation when the different parts are close together.
The more distanced the two corresponding and related parts are, the more likely that one or the other becomes stale when the other is updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also a good idea if you can parameterize the diagram, and you could avoid copy-pasting diagram parameters from the document, the documented code, or the other way around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve these problems, more and more markup languages support selected diagramming tool markups to embed in the text.
You can include Mermaid in Markdown documents if you target GitHub hosting for your document.
You can include PlantUML diagrams in Asciidoc documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happens, however, if you want to include Mermaid in Asciidoc?
What if you need PlantUML in Markdown?
How do you solve the issue if you want to host your Markdown elsewhere besides GitHub?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can abandon your ideas, stick to the available tools or wait for a solution.
The latter approach, however, will always remain an issue.
There will always be a new tool you want to use, and you will have to wait for the support of that tool in your favorite markup language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The principal reason for this is an architectural mismatch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Document markup languages must be responsible only for document structure and content and nothing else.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Embedding a diagramming tool into the markup language must not be implemented in these languages.
It is a separate concern with the document&amp;#8217;s programmability ensuring document consistency automation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution is to use a meta markup above the document markup.
This meta markup can be document markup agnostic and support all the diagramming tools you want to use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-ideas-and-approach-to-solve-the-problem&quot;&gt;2. Ideas and Approach to Solve the problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic idea is not new: separation of concerns.
The document markup language should be responsible for the document structure and content.
The diagramming tool should be responsible for the diagramming.
The meta markup should be responsible for the integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the meta markup is language agnostic, it can be used with any existing and future document markup languages.
There is no need to wait for the support of the diagramming tool in the document markup language.
The only question is the integration of the meta markup into the document markup language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest and loosest way to integrate the meta markup is to use a preprocessor.
Processing the meta markup, we read and generate a text file.
The document markup processing tool catches where the meta markup has left off.
It has no idea that a program generates the document markup and is not manually edited.
Strictly speaking, when you edit a document markup, then the editor is the program that generates the file.
Technically, there is no difference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are other possibilities.
Most document markups support different editors to deliver some form of WYSIWYG editing.
The meta markup preprocessor can be integrated into these editors.
That way, the document markup enriched with the meta markup can seamlessly be edited in the WYSIWYG editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The proposed meta markup and the implementing tool, Jamal, follow both approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-suggested-solution-tools&quot;&gt;3. Suggested Solution, Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The suggested solution is to use Jamal as the meta markup.
Jamal is a general-purpose macro processor.
There are other meta markup processing tools, like &lt;a href=&quot;https://facelessuser.github.io/pymdown-extensions/&quot;&gt;PyMdown&lt;/a&gt;.
These tools usually target a specific document markup and a specific purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamal is a general-purpose, turning complete macro processor with more than 200 macros for different purposes.
These macros make your documents programmable to automate manual document maintenance tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The general saying is: if you could give a task to an assistant to do, then you can automate it with Jamal.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamal has a PlantUML module.
PlantUML is written in Java, the development language I used to create Jamal.
It makes the integration of PlantUML into Jamal easy, and PlantUML diagrams embedded into the documentation can be converted in the process.
Jamal, however, is not limited to using only tools written in Java.
To demonstrate it, we will use the Mermaid diagramming tool, written in JavaScript and running with node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Mermaid is not a Java program, it cannot be executed inside the JVM.
We will create our documentation to execute Mermaid as a separate process.
Other diagramming tools can be integrated similarly if executed on the document processing machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-install-mermaid&quot;&gt;3.1. Install Mermaid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step is to install Mermaid.
The steps are documented on the &lt;a href=&quot;https://mermaid.sj.org&quot;&gt;Mermaid site&lt;/a&gt;.
I will not repeat the steps here because I do not want to create a document that gets outdated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On my machine, the installation creates the  &lt;code&gt;/usr/local/bin/mmdc&lt;/code&gt; executable.
This file is a JavaScript script that starts the Mermaid diagramming tool.
While executing from Jamal, I realized the process has a different environment than my login script.
To deal with that, I had to edit the file.
Instead of using the &lt;code&gt;env&lt;/code&gt; command to find the node interpreter, I specified the full path to the node executable.
Other installations may be different, and it does not affect the rest of the article.
It is a technical detail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-2-install-jamal&quot;&gt;3.2. Install Jamal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use Jamal as the meta markup processor.
The installation is detailed in the &lt;a href=&quot;https://github.com/verhas/jamal&quot;&gt;documentation of Jamal&lt;/a&gt;.
You can start it from the command line, as a Maven plugin, using Jbang and many other ways.
I recommend using it as a preprocessor integrated into the IntelliJ Asciidoctor plugin.
It will provide you with WYSIWYG editing of your document in Markdown and Asciidoc enriched with Jamal macros.
Also, the installation is nothing more than executing the command line&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn com.javax0.jamal:jamal-maven-plugin:2.1.0:jamalize&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which will download the version 2.1.0 we use in this article by the time pre-release and copy all the needed files into your project&amp;#8217;s &lt;code&gt;.asciidoctor/lib&lt;/code&gt; directory.
It will make the macros available for the Asciidoctor plugin.
What needs manual work is configuring IntelliJ to treat all &lt;code&gt;.jam&lt;/code&gt; files as Asciidoc files.
That way, the editor will invoke the Asciidoctor plugin and use the Jamal preprocessor.
It is the setup that I also use to write the articles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-3-create-the-macros-for-mermaid&quot;&gt;3.3. Create the macros for Mermaid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To have a mermaid document inside the document, we should do three things using macros:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Save the Mermaid text into a file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the Mermaid tool to convert the text into an SVG file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference the SVG file as an image in the document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Later, we will see how to save on Mermaid processing, executing it only when the Mermaid text changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use the &lt;code&gt;io:write&lt;/code&gt; macro to save the Mermaid text into a file.
This macro is in a package that is not loaded by default.
We have to load it explicitly.
To do that, we use the &lt;code&gt;maven:load&lt;/code&gt; macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{@maven:load com.javax0.jamal:jamal-io:2.1.0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This macro package has to be configured as safe for the document in the &lt;code&gt;.jamal/settings.properties&lt;/code&gt; file as it is documented.
The macros in this package can read and write files and execute commands configured.
To use a macro package like that from an untrusted source is a security risk.
For this reason, every package loaded by the &lt;code&gt;maven:load&lt;/code&gt; macro has to be configured as safe.
The configuration specifies the package and the documents where it can be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time, the io package also needs configuration to be able to execute the &lt;code&gt;mmdc&lt;/code&gt; command.
To do that, the configuration file contains a&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mermaid=/usr/local/bin/mmdc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;line assigning a symbolic name to the actual command.
The &lt;code&gt;io:exec&lt;/code&gt; macro will use this symbolic name to find the command to execute.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the macro package is loaded, we can use the &lt;code&gt;io:write&lt;/code&gt; macro as in the following sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{#define CHART=flowchart TD
A[Christmas] --&amp;gt;|Get money| B(Go shopping)
B --&amp;gt; C{Let me think}
C --&amp;gt;|One| D[Laptop]
C --&amp;gt;|Two| E[iPhone]
C --&amp;gt;|Three| F[fa:fa-car Care]
}
{#io:write (output=&quot;aaa.mmd&quot;) {CHART}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the file is created, we can execute the Mermaid tool to convert it into an SVG file, as the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{#io:exec command=&quot;&quot;&quot;mermaid
-i
aaa.mmd
-o
aaa.svg
&quot;&quot;&quot; cwd=&quot;.&quot; error=&quot;convert.err.txt&quot; output=&quot;convert.out.txt&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By that, we have the file.
Whenever the Mermaid text changes, the SVG file will be recreated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a matter of fact, whenever the document changes, the SVG file will be recreated.
It wastes resources when the diagram remains the same and the processing runs interactively.
To help with that, we can use the &lt;code&gt;hashCode&lt;/code&gt; macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The macro &lt;code&gt;hashCode&lt;/code&gt; calculates the hash code of the text.
We will use the hash code to name the file.
Whenever the diagram changes, the file&amp;#8217;s name changes.
Also, if the file exists, it should contain the diagram for the current text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To check that the file exists, we include it in the document.
Because we do not want the SVG text in the document, we surround the &lt;code&gt;include&lt;/code&gt; with the &lt;code&gt;block&lt;/code&gt; macro.
If the file does not exist, then an error will occur.
The macro &lt;code&gt;try&lt;/code&gt; will handle this error, and the execution will continue.
However, the macro &lt;code&gt;CREATE&lt;/code&gt; will be set to &lt;code&gt;true&lt;/code&gt; in this case.
If there is no error, when the file already exists, the macro &lt;code&gt;CREATE&lt;/code&gt; will be set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; macro will check the value of the macro &lt;code&gt;CREATE&lt;/code&gt;.
If it is &lt;code&gt;true&lt;/code&gt;, it will execute the &lt;code&gt;io:write&lt;/code&gt; and &lt;code&gt;io:exec&lt;/code&gt; macros to create the file.
If it is &lt;code&gt;false,&lt;/code&gt; then it will do nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-jamal&quot; data-lang=&quot;jamal&quot;&gt;{#define KEY={#hashCode {CHART}}}{@define CREATE=true}
{@try {#block{#include images/{KEY}.svg}}{@define CREATE=false}}
{#if `//`{CREATE}//
{#io:write (mkdir output=&quot;images/aaa.mmd&quot;) {CHART}}
{#io:exec command=&quot;&quot;&quot;mermaid
-i
images/aaa.mmd
-o
images/{KEY}.svg
&quot;&quot;&quot; cwd=&quot;.&quot; error=&quot;convert.err.txt&quot; output=&quot;convert.out.txt&quot;
}//}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details using these macros, please refer to the documentation.
If you intend to use multiple diagrams, you may want to create a macro that does all the steps above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-summary-and-takeaway&quot;&gt;4. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article discussed integrating Mermaid diagrams into your Asciidoc, Markdown, or any other markup document.
We selected Mermaid for two reasons.
First, usually, this is the tool people ask for.
Second, this is an excellent example of a non-Java tool that can be integrated into document processing.
The described way can be applied to any external tool capable of running as a process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The samples also demonstrate a complex structure of macros showing the power of the Jamal macro processor.
Such complexity is rarely needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the technology, I discussed, though only briefly, the separation of concerns for document handling and how the document formatting markup should be separated from the processing meta markup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to have diagrams in your documentation, download Jamal, and start enhancing your documents.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author></entry><entry><title type="html">Will AI Wipe off Humanity?</title><link href="https://javax0.github.io/2023/06/05/ai-doomsday.html" rel="alternate" type="text/html" title="Will AI Wipe off Humanity?" /><published>2023-06-05T00:00:00+02:00</published><updated>2023-06-05T00:00:00+02:00</updated><id>https://javax0.github.io/2023/06/05/ai-doomsday</id><content type="html" xml:base="https://javax0.github.io/2023/06/05/ai-doomsday.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, I want to frighten you.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines&quot;&gt;Betteridge&amp;#8217;s law of headlines&lt;/a&gt; does not apply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This law states that any headline ending with a question mark can be answered with &quot;No.&quot; Now, you might become alarmed, unless you are acquainted with formal logic and understand that if the response to a question is not &quot;No,&quot; it does not necessarily imply that the answer is &quot;Yes.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/image-2023-06-13-11-48-14-678.png&quot; alt=&quot;image 2023 06 13 11 48 14 678&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We may feel compelled to believe frightening news, and AI tools can be intimidating due to their novelty and complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In short, the answer can be both yes and no simultaneously.
The world is constantly evolving, as it has always done.
Let&amp;#8217;s not adhere to the beliefs of Kohelet (Ecclesiastes) or Shakespeare:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Sonnet 59, Shakespeare wrote:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there be nothing new, but that which is&lt;br&gt;
Hath been before,&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are periods when change happens slowly, and there are times when it occurs rapidly.
During slow-changing periods, people may fail to notice and may believe, like King David, that there is nothing new under the sun.
However, there are moments when change happens swiftly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rapid changes often lead to the end of certain things.
Some aspects of our lives will never be the same again.
This can be frightening, causing us to feel a loss of control and a sense that everything is coming to an end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Not everything is going to end just because things change fast and the word is changing even when things go slow.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Step back, take a deep breath and try to think rationally suppressing emotions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will try to give some ideas to think about when seeing the question in the title.
I will not give an answer.
I have my own answers, but there are questions that you have to answer yourself.
As a matter of fact: the difference between the wise and the fool is the ability to tell the important from the non-important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have to answer the important questions yourself for yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is interesting that many times when you can ask the important questions, you may realize that you do not need the answers.
Reading this article may help you see the title question calm, rational, and without fear.
It may also not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-problem-statement&quot;&gt;1. Problem Statement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-1-why-to-fear&quot;&gt;1.1. Why to Fear?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We, humans know that we are mortals.
Everybody who has been born will die.
The problem with this is that we do not want to die.
We have instincts that make us want to live.
It is biology.
It is evolution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we did not mind dying, then we eventually would not mind.
Tautology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But evolution itself is the ultimate tautology in the history of science.
It selected the species that want to live.
In humans this is driven by bad feelings, like fear of death that repels us from dangerous things, like suicide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time, we also have an instinct called survival of the species.
This leads to sex, which is associated with rewarding feelings.
It also leads to nepotism, and to a certain extent one can blame racism on it.
This would lead too far and off-rail of our topic.
In short:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to live, and we want humanity to survive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-2-what-do-we-fear&quot;&gt;1.2. What do we Fear?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, there are two major topics in this field.
One is the fear of human extinction.
I will talk about it in the next section.
The other is losing your job.
Let&amp;#8217;s take these in their order of importance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-3-the-killing-animal&quot;&gt;1.3. The Killing Animal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are animals.
A special kind of animals, but animals.
Animals kill other animals of different species and many times the same species.
We kill animals for food, for their skin, bones, etc.
We also kill animals to protect ourselves.
Sometimes these animals are the same species as we are, although cannibalism is not very common these days luckily, but using human skin for lamp shades is not so far back in history.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the history of civilization, there were numerous events where some group of humans killed other humans in large amounts.
We usually refer to these events as wars.
Driven by the instincts, we developed tools to enhance our daily activities, including the killing of other humans.
By the XX. century we developed tools that could kill all humans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have learned that we, humanity are capable of developing tools that can lead to the extinction of humanity.
We are capable of committing suicide as a specie.
Such capability is unique in the history.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Individual animals can die by suicide, especially when they are humans.
Some insects show altruistic behavior sacrificing their individual lives protecting colonies.
Some animals grieve and stop eating.
Scientists debate if these acts are suicidal or not, but without any doubt: none of the species except humans can eradicate all life on this planet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also have learned that there is no wiring in the human race guaranteeing to stop doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have a Doberman, and I can see how easily she can chew up the cow&amp;#8217;s tibia I used to cook in a soup.
But I am not afraid to play with her when she playfully mimics biting on my hands.
There is an instinct that stops the dog biting on my arm and to cause harm.
I would not play the same game with a hydraulic press.
Not even if controlled by AI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nuclear weapons are not dogs.
They are more like hydraulic presses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Broken Arrow incidents also taught us that these tools could kill us all by mistake, even if no one intended that.
Now we created something that we barely understand and fear.
Will it be the next invention capable of wiping off humanity from the face of the earth?
Maybe it will.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-4-losing-jobs&quot;&gt;1.4. Losing Jobs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Losing your job after we discussed the human extinction may not seem important anymore, does it.
Still, one is a serious and important future thing.
The other may affect your personal life in a few years.
This latter one is much more specific, and you may stop worrying about the future generations when you have nothing to eat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know from history that economy changes restructure the work structure.
Jobs disappear and new jobs get created.
Today nobody faces the problem of not being employed as a horse rider or sword fighter.
You may worry about losing your job as a software developer, and you should.
It will help you agile, learn new things and find a different occupation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you lose your job because AI can do the task better, it means that your job does not produce value anymore.
You cannot compete on the cost of an AI.
You will find some other profession, or better the aspects of your professions that AI cannot do.
If you were a developer creating assembly code, you may program higher level and let an AI convert your commands into assembly.
You will become a &quot;prompt engineer&quot; talking to an AI, like a subordinate to do the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, AI cannot write programs.
It looks like if it could, but the reality is that it does not.
It simply analyzes the task description and creates some program code that would be the most probable response from a developer.
The response and selection probability value are collected from millions of samples, but it does not produce anything that is not there.
Luckily, a huge majority of the development tasks do not need programming.
It only needs AI doable code generation.
It is an intelligent copy and paste.
Shockingly intelligent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you cannot do something that is real programming the AI cannot do, then you have never been a programmer/developer.
You were a coder.
Become a programmer or find some other profession!
Adapt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are people who cannot adapt.
I have seen a lot of people in Hungary after the communist regime fell apart and a lot of state guaranteed jobs diminished.
After losing their jobs, they could not find another profession.
These people were usually in their forties and fifties.
They lived their remaining one or two decade-long life jobless many times abusing alcohol.
(Drogs were expensive and were not so common in the early 90-ies.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can expect similar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-5-should-we-fear&quot;&gt;1.5. Should we Fear?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before answering that question, let me tell you that in my opinion, this fear is greatly emphasized by the media.
The media is a business.
They want to sell.
Fear sells through fight or flight instinct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When in fear, the brain focuses on a narrow set of things which we see as threats.
We, animals are molded this way by the great tautology: evolution.
If your focus narrows and focus on a small set of the surrounding reality, you are more likely to survive.
At the same time, if that narrow focus is pointed to something artificially fabricated, you can be manipulated easier in other aspects.
This is a major principle of politics, including religion and media in their tool box.
Media uses this to make you focus on their topic and consume more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some fear is okay.
It helps us keep attention on important and dangerous things and to avoid the danger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-summary-and-takeaway&quot;&gt;2. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">First of all, I want to frighten you. The Betteridge&amp;#8217;s law of headlines does not apply.</summary></entry><entry><title type="html">About the Questions on Linked In Java Developers Community</title><link href="https://javax0.github.io/2023/05/26/questions-on-linkedin.html" rel="alternate" type="text/html" title="About the Questions on Linked In Java Developers Community" /><published>2023-05-26T00:00:00+02:00</published><updated>2023-05-26T00:00:00+02:00</updated><id>https://javax0.github.io/2023/05/26/questions-on-linkedin</id><content type="html" xml:base="https://javax0.github.io/2023/05/26/questions-on-linkedin.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a rant about the questions that are posted on the Linked In Java Developers Community.
I see many times questions that are not well formulated, and the answers are not well thought through.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is some good in it.
Being brave to go ahead and publish may be a good thing, but there is also some bad in it.
I face candidates during Java technical interviews many times giving &quot;typical&quot; wrong answers to some questions.
The source of that is the spread of these false and half, easy to misunderstand information.
One forum for them is LinkedIn Java Developers Community.
Presumably, there are other platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What makes me really sad is that this community is moderated.
Still, questions of questionable quality are published.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My aim with this article is to raise awareness in the vain hope that this will change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-examples&quot;&gt;1. Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section, I will display and discuss two examples.
After that I will write a few words of conclusion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-1-example-1&quot;&gt;1.1. Example 1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The very first question that I faced recently is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Which one of the following loop cannot be used to change the value of any element in an array variable&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The While Loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ForEach Loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The For Loop&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A simple grammar checker could also help a bit, but that is not an issue worth mentioning.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/linked-in-question-example-1.png&quot; alt=&quot;linked in question example 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can understand the intention of the question.
The author really wanted to draw attention to the fact that a simple for-each loop cannot be used to modify the array elements it is looping through in a naive way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.     void testForEachLoop0() {
2.         int[] array = {0, 0, 0, 0, 0, 0};
3.         for (int a : array) {
4.             a = 55; // does nothing
5.         }
6.         Assertions.assertArrayEquals(new int[]{0, 0, 0, 0, 0, 0}, array);
7.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As clearly demonstrated by the above example, when we loop over an array using a for-each loop, the loop variable is NOT the array element.
It is the value of the array element.
In the case of a primitive value, this is a copy of the value.
In the case of an object array, this is a copy of the reference to the object.
Which, indeed, in some sense is the copy of the value but not the copy of the object, rather the reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we can do is to modify the object that the reference points to.
I can even say that if the value is an object (reference), then we can modify the object, hence the value.
For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.     void testForEachLoop1() {
 2.         class X {
 3.             int value;
 4.
 5.             X(int value) {
 6.                 this.value = value;
 7.             }
 8.
 9.             @Override
10.             public boolean equals(Object o) {
11.                 return ((X) o).value == value;
12.             }
13.         }
14.         final var array = new X[]{new X(0), new X(0), new X(0)};
15.         for (final var a : array) {
16.             a.value = 55;
17.         }
18.         Assertions.assertArrayEquals(new X[]{new X(55), new X(55), new X(55)}, array);
19.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;will modify the field &lt;code&gt;value&lt;/code&gt; in the object array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Just for the shake of brevity I created an overly simplistic &lt;code&gt;equals&lt;/code&gt; method.
Don&amp;#8217;t do that in production code.
Don&amp;#8217;t do that even in test code.
Creating a &lt;code&gt;equals()&lt;/code&gt; method without a matching &lt;code&gt;hashCode()&lt;/code&gt; is a deadly sin.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can say that blaming the author on the language and the precision is nitpicking.
Do not forget, however, that these questions are targeting Java juniors, who can be confused by the imprecise language very easily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as a bonus, here is another example that modifies the original array.
If you look at it, you may realize that this is the same as the previous example, just overcomplicated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1.     void testForEachLoop() {
2.         int[] array = {0, 0, 0, 0, 0, 0};
3.         for (int[] j : IntStream.range(0, array.length).mapToObj(i -&amp;gt; array).toArray(int[][]::new)) {
4.             j[j[0]] = j[0];
5.             j[0]++;
6.         }
7.         Assertions.assertArrayEquals(new int[]{6, 1, 2, 3, 4, 5}, array);
8.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;1-2-example-2&quot;&gt;1.2. Example 2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next question is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What is the access modifier for an interface in Java?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No modifier&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At least in this question, there is no grammar error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/linked-in-question-example-2.png&quot; alt=&quot;linked in question example 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if I do not know too much about Java, the question is fishy.
A modifier is something that modifies something.
Java is a well-designed language.
There is some clutter in it.
It could cut some things shorter, like writing &lt;code&gt;public static void&lt;/code&gt; in front of &lt;code&gt;main&lt;/code&gt; and decorating it with a whole class surrounding it.
However, if something is not needed, it is not there.
There is nothing like mandatory modifiers that you HAVE TO write.
There is no &quot;general and universal&quot; access modifier for an interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some answers pointed out that an interface can be public, private, protected or package-private.
Not any of the interfaces though, because only nested interfaces can be private or protected, and only inside a class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What the author wanted to ask, I assume, was the default visibility of the members in an interface.
That is public.
From the votes, as depicted below, it seems that three quarters of the people answered the question according to the intention of the author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/linked-in-question-example-3.png&quot; alt=&quot;linked in question example 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, a significant number of people said that there is no need for a modifier, which is also true.
By default, the members are public, and for a long time in the history of Java that was the only option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-conclusion&quot;&gt;2. Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Asking questions is a good thing.
Usually, people ask questions because they want to learn.
StackOverflow is an excellent platform for that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These questions, however, more like exams.
Professors ask such questions.
It is a profession.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To ask an &quot;exam&quot; question, you have to be an expert in the field.
But that is not enough.
You also have to be precise and know what and how to ask.
You have to understand what the readers will learn from your question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel that many of these authors evaluate this latter assuming that all the readers will read the questions and also the answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all: there is no answer.
People vote and hardly ever go back when the voting finishes.
The answer is simply the result, but no explanation for the details.
The explanation is in the comments.
Many times there are some good comments but also many misleading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It reminds me of a Peter Bruegel painting from 1568, &quot;The Blind Leading the Blind&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/%D0%9F%D1%80%D0%B8%D1%82%D1%87%D0%B0_%D0%BE_%D1%81%D0%BB%D0%B5%D0%BF%D1%8B%D1%85.jpeg/2560px-%D0%9F%D1%80%D0%B8%D1%82%D1%87%D0%B0_%D0%BE_%D1%81%D0%BB%D0%B5%D0%BF%D1%8B%D1%85.jpeg&quot; alt=&quot;2560px %D0%9F%D1%80%D0%B8%D1%82%D1%87%D0%B0 %D0%BE %D1%81%D0%BB%D0%B5%D0%BF%D1%8B%D1%85&quot; width=&quot;600&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to ask a question: do it.
However, do it right.
Before publishing it for thousands of people, ask a few friends to read it.
If more than one misunderstands it, then you have to rephrase it.
If some of them give a wrong answer and then seeing the right one, they start to argue about the question and the correctness: the question is wrong.
You may believe that they are wrong and not the question, but you cannot change your audience.
You can change your question.
Your question can hypothetically be correct, but wrong for the given audience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">This article is a rant about the questions that are posted on the Linked In Java Developers Community. I see many times questions that are not well formulated, and the answers are not well thought through.</summary></entry><entry><title type="html">Rearrange and array in place</title><link href="https://javax0.github.io/2023/05/24/inplace-rearrange.html" rel="alternate" type="text/html" title="Rearrange and array in place" /><published>2023-05-24T00:00:00+02:00</published><updated>2023-05-24T00:00:00+02:00</updated><id>https://javax0.github.io/2023/05/24/inplace-rearrange</id><content type="html" xml:base="https://javax0.github.io/2023/05/24/inplace-rearrange.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is about an algorithmic problem.
I did not find a solution to this problem either thinking about it, searching the net or talking to friends.
The problem itself is simple.
At the first reading, it may lure the reader into a false sense of simplicity.
You may feel that this should not be an issue.
But it is.
At least for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing Java.
Nothing programming other than it is about an algorithmic problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-problem-statement&quot;&gt;1. Problem Statement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an array of \(2n\) elements.
The array is \(A=\{a_1,a_2, ... , a_n, b_1, b_2, ... , b_b\}\).
What steps should be taken to rearrange the array so that \(A=\{a_1,b_1,a_2,b_2, ... , a_n,b_n\}\) with limited, maximum \(O(1)\) memory, and \(O(n)\) time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-chatgpt-solution&quot;&gt;2. ChatGPT solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sine generative AI is sweeping the media and the internet; I thought that I should try to use it to solve the problem.
After all, if it takes my job just in a few years, at least we can let it do some work for us till then.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the answer, no surprise: totally wrong:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wrong answer from ChapGPT&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To rearrange the array \(A=\{a_1,a_2, ... , a_n, b_1, b_2, ... , b_n\}\) into \(A=\{a_1,b_1,a_2,b_2, ... , a_n,b_n\}\) with limited, maximum O(1) memory, and \(O(n)\) time you can follow the steps below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traverse the array and for each element at index \(i\), swap it with the element at index \(i+n\).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;For i=1 to n:
  Swap A[i] with A[i+n]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the traversal is complete, the array will be rearranged as \(A=\{a_1,b_1,a_2,b_2, ... , a_n,b_n\}\).
The above algorithm has a time complexity of O(n) and uses only O(1) memory as only a constant number of variables are used for swapping elements in the array.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After following these steps, the original array \(A=\{a_1,a_2, ... , a_n, b_1, b_2, ... , b_n\}\) would be rearranged as \(A=\{a_1,b_1,a_2,b_2, ... , a_n,b_n\}\).&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The described algorithm is \(O(n)\) time and \(O(1)\) memory, but the resulting array will be \(A=\{b_1,b_2, ... , b_n,a_1,a_2, ... , a_n\}\).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I am not worried about being replaced by an AI as a software engineer. Yet.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-without-the-o1memory-constraint&quot;&gt;3. Without the \( O(1)\)memory constraint&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem is not that hard if you do not have the \(O(1)\) memory constraint.
As a matter of fact it is so easy that it can be solved even by ChapGPT.
Or can it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Simpler problem, still not good answer from ChapGPT&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To rearrange the array \(A={a_1,a_2, ... , a_n, b_1, b_2, ... , b_n}\) into \(A={a_1,b_1,a_2,b_2, ... , a_n,b_n}\), you can follow the steps below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create two new arrays, one for the \(a\) values and another for the \(b\) values.
Initialize an empty array for the \(a\) values, say \(a_{new}\).
Initialize an empty array for the \(b\) values, say \(b_{new}\).
Traverse the original array and separate the \(a\) and \(b\) values into two separate arrays.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;For i=1 to n:&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(a_i\) &lt;code&gt;to&lt;/code&gt; \(a_{new}\)&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(b_i\) &lt;code&gt;to&lt;/code&gt; \(b_{new}\)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;For i=n+1 to 2n:&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(b_i\) &lt;code&gt;to&lt;/code&gt; \(a_{new}\)&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(a_i\) &lt;code&gt;to&lt;/code&gt; \(b_{new}\)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concatenate the two new arrays in the desired order to get the final result.
Concatenate \(a_{new}\) and \(b_{new}\) in the order \(a_{new}, b_{new}\) to get the desired result.
After following these steps, the original array \(A={a_1,a_2, ... , a_n, b_1, b_2, ... , b_n}\) would be rearranged as \(A={a_1,b_1,a_2,b_2, ... , a_n,b_n}\).&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I believe there is no need to explain why the solution is wrong, and overly complicated.
The allocation of the two arrays is unnecessary.
We need only one extra array of length \(2n\), say \(T\).
Then the code will look:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;For i=1 to n:&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(a_i\) &lt;code&gt;to&lt;/code&gt; \(T\)&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Add&lt;/code&gt; \(b_i\) &lt;code&gt;to&lt;/code&gt; \(T\)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voilà, you have the result in \(T\).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Still not worried.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-without-the-on-time-constraint-on2&quot;&gt;4. Without the \( O(n)\) time constraint: \(O(n^2)\)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How about giving some extra time instead of extra memory?
Let&amp;#8217;s keep the \(O(1)\) memory constraint, but allow \(O(n^2)\) time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This problem is also simple to solve, but for some reason, ChatGPT gave such a foolish answer that I decided not to copy here.
I know, you are curious, but it has no value, totally gibberish.
The solution is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;to take \(b_i\)out from the array for every \(i=1,n\)one by one,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;push every element one position higher below \(b_i\) until we get to the place where \(b_i\) will get&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;put \(b_i\) to its place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/insert-rearrange.png&quot; alt=&quot;insert rearrange&quot; width=&quot;50%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;For i=1 to n:&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Store&lt;/code&gt; \(b_i\) &lt;code&gt;being at the position&lt;/code&gt; \( n+i\)&lt;code&gt;to a variable named&lt;/code&gt; \(x\)&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Move all objects from&lt;/code&gt; \( 2i\) &lt;code&gt;till&lt;/code&gt; \(n+i\) &lt;code&gt;to the next position&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Put &lt;/code&gt; \(b_i\)&lt;code&gt;from the variable&lt;/code&gt; \(x\)&lt;code&gt;to the position 2i&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the first step, we have to move \(n-1\) objects.
During the second step, we have to move \(n-2\) objects, and so on.
Moving all the \(b_i; i=1,n\)elements will need \( \sum_{i=1}^{n-1} (n-i) = \frac{n(n-1)}{2}\) moves.
It means that this algorithm is \(O(n^2)\) time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-without-the-on-time-constraint-on-log-n&quot;&gt;5. Without the \( O(n)\) time constraint: \(O(n \log n)\)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We know that there is a faster, more complex solution that is \(O(n \log n)\) time.
Let&amp;#8217;s have a look at that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the array length is 2, in other words, the array is \(A=\{a_1,b_1\}\), then the solution is trivial.
In that case do not need to do anything, just return the array as it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Funny (wrong) suggestion from CoPilot&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;If the array is longer, then we can split it into two parts, rearrange them separately, and then merge the results.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above sentence is not part of the normal flow of this article.
I write this article with CoPilot switched on.
The above sentence was suggested by CoPilot for this location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is fun to write articles with CoPilot switched on (pronounce it as Copy-a-Lot).
I do not say it is easier, or less work.
Sometimes it feels like a little kid running around and making a mess while you try to clean your flat.
Rather the contrary, but undeniably &lt;em&gt;more fun.&lt;/em&gt;
Cursive words in the above paragraphs all were suggested by CoPilot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now, just let&amp;#8217;s go on with the normal text of the article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assume that the array length is \(n=2^m\).
Divide the array into four parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\(Q_1=[a_1-a_\frac n2\)],&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\(Q_2=[a_{\frac n2+1},a_n\)],&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\(Q_3=[b_1-b_\frac n2\)],&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\(Q_4=[b_{\frac n2+1},b_n\)],&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Swap the elements of \(Q_2\) and \(Q_3\)in a single loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;For i=1 to &lt;/code&gt; \( \frac n2\)&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
&lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt; &lt;/code&gt; &lt;code&gt;Swap&lt;/code&gt; \(a_{\frac n2+i}\) &lt;code&gt;and&lt;/code&gt; \(b_i\)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially, we transform the array \(Q_1|Q_2|Q_3|Q_4\) into \(Q_1|Q_3|Q_2|Q_4\).
After this, the algorithm can be applied for the sub arrays \(Q_1|Q_3\) and \(Q_1|Q_4\).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The assumption that \(n=2^m\) helps to halve the array down to length 2.
When the length of the array is not some power of two, the halving is not trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The algorithm running time \(T(n) = 2T(\frac n2) + O(n)\).
The \(O(n)\)term is the time needed to swap the elements of \(Q_2\)and \(Q_3\).
The resulting time complexity is \(O(n \log n)\).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-conclusion-and-takeaway&quot;&gt;6. Conclusion, and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I shared this &quot;simple&quot; algorithmic problem with you.
It is haunting me for a few years.
The beauty of this problem is that it is simple, but not trivial.
If you happen to know the answer, tell me!
I am old enough accepting my limits, and it will more amaze me to see the solution than angry about wy I have not seen it before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;CoPilot&amp;#8217;s suggestion&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;The takeaway is that you should not be afraid of simple problems.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How about AI?
What is the merit of all this?
Should we be afraid of AI?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The answer is no.
There is no point of being afraid, generally.
We can be prepared, aware, but not afraid.
AI in its current form can help us solve problems, but it is immature.
I expect the change and maturing of AI will be extremely rapid to a point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will transform how we work, but will not work instead of us or replace us.
Some people will lose jobs, but new jobs will be created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the 1950s, people were afraid of computers.
As a matter of fact, the women doing the numerical calculations were called computers.
Their job does not exist today, but it did not disappear from day one to the next.
It took years to disappear.
We still do some calculations by hand.
We still use calculators on the job site.
There is even an anachronistic calculator app on the iPhone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something similar will happen with AI.
The change will be gradual.
We will have time to adapt.
AI development is fast, and we feel that the development of new technologies speeds up.
However, this speed is limited by the adoption rate of humans.
Humans do not change that fast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">This article is about an algorithmic problem. I did not find a solution to this problem either thinking about it, searching the net or talking to friends. The problem itself is simple. At the first reading, it may lure the reader into a false sense of simplicity. You may feel that this should not be an issue. But it is. At least for me.</summary></entry><entry><title type="html">Converting Numbers to Roman Numerals</title><link href="https://javax0.github.io/2023/05/23/converting-to-roman-numerals.html" rel="alternate" type="text/html" title="Converting Numbers to Roman Numerals" /><published>2023-05-23T00:00:00+02:00</published><updated>2023-05-23T00:00:00+02:00</updated><id>https://javax0.github.io/2023/05/23/converting-to-roman-numerals</id><content type="html" xml:base="https://javax0.github.io/2023/05/23/converting-to-roman-numerals.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;Article Management Technical Details&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-05-23-converting-to-roman-numerals&quot;&gt;https://github.com/javax0/javax0.github.io/tree/master/_projects/2023-05-23-converting-to-roman-numerals&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Article source &lt;a href=&quot;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-05-23-converting-to-roman-numerals.adoc.jam&quot;&gt;https://github.com/javax0/javax0.github.io/blob/master/_posts/2023-05-23-converting-to-roman-numerals.adoc.jam&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article will look at some Java code that converts a number to Roman numerals.
We will look at different solutions and compare them.
You can read this article as a mental exercise, like a coding kata, but at the same time, we also discuss some coding styles.
If you like to use big words, we can say it is about code architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-the-problem&quot;&gt;1. The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a number and want to convert it to Roman numerals.
Roman numerals are the numbers that we used in the Roman Empire.
They remained in use for a long time and are still used in some places.
A typical example is the face of some watches.
They denoted the numbers with letters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of 1 was denoted with the letter &lt;code&gt;I&lt;/code&gt;, five was denoted with the letter &lt;code&gt;V&lt;/code&gt;, ten was denoted with the letter &lt;code&gt;X&lt;/code&gt;, and so on.
It is a kind of decimal notation with some additions.
The decimals are denoted by different symbols, namely &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, and &lt;code&gt;M&lt;/code&gt;, and not the position.
Additionally, there are symbols for 5, 50, and 500, namely &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, and &lt;code&gt;D&lt;/code&gt;.
1, 2, and 3 are denoted by repeating the symbol &lt;code&gt;I&lt;/code&gt;, so they are &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;II&lt;/code&gt;, and &lt;code&gt;III&lt;/code&gt;.
Similarly, 10, 20, and 30 are denoted as &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;XX&lt;/code&gt; and &lt;code&gt;XXX&lt;/code&gt;, and so on.
A letter does not repeat more than three times in a row.
There are some exceptions in some watches, but that is an exception and not the rule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you need 4, you take the symbol for five and subtract the symbol for 1, so 4 is &lt;code&gt;IV&lt;/code&gt;.
The subtraction is denoted by placing the &lt;code&gt;I&lt;/code&gt; before the &lt;code&gt;V&lt;/code&gt;.
5, 6, 7, and 8 are denoted as &lt;code&gt;VI&lt;/code&gt;, &lt;code&gt;VII&lt;/code&gt;, and &lt;code&gt;VIII&lt;/code&gt;.
Again 9 Would require four &lt;code&gt;I&lt;/code&gt; characters, but that is not allowed.
Nine is denoted as &lt;code&gt;IX&lt;/code&gt;, where the &lt;code&gt;I&lt;/code&gt; is before the &lt;code&gt;X&lt;/code&gt;; again a subtraction.
The same logic applies to the other symbols.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-solution-approach&quot;&gt;2. Solution approach&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-interface&quot;&gt;2.1. Interface&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the solution, we will have an interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. public interface Romans {
 2.     String toRoman(int value);
 3.
 4.     static final int I = 1;
 5.     static final int II = 2;
 6.     static final int III = 3;
 7.     static final int V = 5;
 8.     static final int M = 1000;
 9.     static final int nulla = 0;
10.
11.     static void assertRange(int value) {
12.         if (value &amp;lt; 1 || value &amp;gt; 3999) {
13.             throw new IllegalArgumentException(&quot;Counter &apos;%s&apos; grew too big to be formatted as a roman numeral&quot;.formatted(value));
14.         }
15.     }
16. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The critical part is the &lt;code&gt;toRomans()&lt;/code&gt; method.
We will implement it in three different ways and compare the different approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-2-test&quot;&gt;2.2. Test&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Professional implementation does not exist without tests.
The tests are straightforward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.     @Test
 2.     @DisplayName(&quot;Unitas testis pro minimo numeri converters&quot;)
 3.     void testTrivial() {
 4.         testRomanFormatAll(new RomansTrivial());
 5.     }
 6.
 7.     @Test
 8.     @DisplayName(&quot;Unitas testis pro simplici numeri converters&quot;)
 9.     void testSimple() {
10.         testRomanFormatAll(new RomansSimple());
11.     }
12.
13.     @Test
14.     @DisplayName(&quot;Unitas testis pro complexu numeri converters&quot;)
15.     void testComplex() {
16.         testRomanFormatAll(new RomansComplex());
17.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The actual method that does the testing calls the converter for all possible values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1.     private void testRomanFormatAll(Romans r) {
 2.         final StringBuilder sb = new StringBuilder();
 3.         for (int i = 1; i &amp;lt; 4000; i++) {
 4.             sb.append(i).append(&apos;=&apos;).append(r.toRoman(i)).append(&apos;\n&apos;);
 5.         }
 6.         Assertions.assertEquals(
 7.                 //&amp;lt;editor-fold desc=&quot;omnibus romanis numeris ab I = I ad MMMXCIX&quot;&amp;gt;
 8.                 &quot;&quot;&quot;
 9. 1=I
10. 2=II
11. 3=III
4008. &quot;&quot;&quot;
4009.                 //&amp;lt;/editor-fold&amp;gt;
4010.                 , sb.toString());
4011.     }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
As you can see from the line numbering, we have omitted some lines from the output.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-3-trivial-solution&quot;&gt;2.3. Trivial Solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we have all the roman numerals in a string, the lazy and most straightforward solution is to put them into an array and use indexing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. public class RomansTrivial implements Romans {
 2.
 3.     private static final String[] ROMANS = {
 4.             //&amp;lt;editor-fold desc=&quot;omnibus romanis numeris a I = i ad MMMCMXCIX in linea ordinata&quot;&amp;gt;
 5.             &quot;I&quot;,
 6.             &quot;II&quot;,
 7.             &quot;III&quot;,
 8.             &quot;IV&quot;,
4001.             &quot;MMMCMXCVII&quot;,
4002.             &quot;MMMCMXCVIII&quot;,
4003.             &quot;MMMCMXCIX&quot;
4004.             //&amp;lt;/editor-fold&amp;gt;
4005.     };
4006.
4007.     public String toRoman(int value) {
4008.         Romans.assertRange(value);
4009.         return ROMANS[value - I];
4010.     }
4011. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Again, we have omitted some lines from the output.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following approach is to be a bit more complex.
Storing 3999 numbers in an array may be simple, but somehow, it is not elegant.
We are programmers, solving problems with algorithms and not simply listing all the results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-4-simple-solution&quot;&gt;2.4. Simple Solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more complex approach still uses a string array.
After all, the selection of the letters representing Roman numerals was arbitrary at the time.
The Roman scholars did not consult their 2000 years descendants to find out the best way to represent the numbers aligning with modern computer technology like ASCII codes and Unicode.
We have to list the numbers and the corresponding Roman numerals in the same order, either in a data structure or the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. public class RomansSimple implements Romans {
 2.     int [] places = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
 3.     String [] numerals = {&quot;M&quot;, &quot;CM&quot;, &quot;D&quot;, &quot;CD&quot;, &quot;C&quot;, &quot;XC&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;X&quot;, &quot;IX&quot;, &quot;V&quot;, &quot;IV&quot;, &quot;I&quot;};
 4.
 5.     public String toRoman(int value) {
 6.         Romans.assertRange(value);
 7.         final var s = new StringBuilder();
 8.         for( int j = 0; j &amp;lt; places.length; j++ ) {
 9.             while( value &amp;gt;= places[j] ) {
10.                 s.append(numerals[j]);
11.                 value -= places[j];
12.             }
13.         }
14.         return s.toString();
15.     }
16. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look at the number; if it is larger than 1000, it will start with &lt;code&gt;M&lt;/code&gt;.
If it is larger than 3000, it will start with &lt;code&gt;MMM&lt;/code&gt;; if it is larger than 2000, it will start with &lt;code&gt;MM&lt;/code&gt;; and if it is larger than 1000, it will start with one &lt;code&gt;M&lt;/code&gt;.
Roman numerals are the sum of the letters, except for the subtraction rule.
However, we can look at &lt;code&gt;CM&lt;/code&gt;, &lt;code&gt;CD&lt;/code&gt;, &lt;code&gt;XC&lt;/code&gt;, &lt;code&gt;XL&lt;/code&gt;, &lt;code&gt;IX&lt;/code&gt;, and &lt;code&gt;IV&lt;/code&gt; as individual symbols.
They are two letters, but the algorithm never relies on the fact that the other values are represented with single letters.
That way, we can go on with all elements, from large to smaller ones.
When the value is larger than the actual number, we add the symbol to the output string and remove the number from the value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I suspect that this is the solution that fits most of the developers.
Simple and does not require the excessive list of the roman numerals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-5-complex-solution&quot;&gt;2.5. Complex Solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A real developer, however, does not like a solution that implements logic in the data structure.
The rule that a symbol representing a smaller number than the subsequent one is subtracted from the subsequent one is something that can be programmed.
It does not need a data structure.
The data structure is redundant, and any redundancy in the code is against maintainability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or not.
Mind my words; we will revisit it in the following main section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code for the solution that does not use an excessive data structure is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1. public class RomansComplex implements Romans {
 2.     private static final char[] NUMERI = {&apos;M&apos;, &apos;D&apos;, &apos;C&apos;, &apos;L&apos;, &apos;X&apos;, &apos;V&apos;, &apos;I&apos;};
 3.
 4.     /**
 5.      * Haec methodus datam rationem ad numeros Romanos convertit. Modulus &quot;id&quot; solum nuntium errorem componere pro casu
 6.      * cum numerus affirmativus vel nimius non est.
 7.      * Hunc codicem legamus in honorem Octaviani imperatoris nostri, qui numerum octonarium induxit.
 8.      *
 9.      * @param valorem ad valorem convertendi
10.      * @return Romano numero quasi filum
11.      */
12.     public String toRoman(int valorem) {
13.         Romans.assertRange(valorem);
14.         var lineaAedificator = new StringBuilder();
15.         int numeralis = M;
16.         int inclinatio = nulla;
17.         for (int j = nulla; j &amp;lt; NUMERI.length; j++) {
18.             while (valorem &amp;gt;= numeralis) {
19.                 lineaAedificator.append(NUMERI[j]);
20.                 valorem -= numeralis;
21.             }
22.             final var compensatio = II - inclinatio;
23.             final var decimales = numeralis / (V * compensatio);
24.             if (valorem &amp;gt;= numeralis - decimales) {
25.                 lineaAedificator.append(NUMERI[j + compensatio]).append(NUMERI[j]);
26.                 valorem -= numeralis - decimales;
27.             }
28.             numeralis /= II + III * inclinatio;
29.             inclinatio = I - inclinatio;
30.         }
31.         return lineaAedificator.toString();
32.     }
33. }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a real geek implementation with a minimal data structure and all logic in the code.
The source of this was a stone tablet found in the ruins of the ancient Roman Empire.
As such, it can be treated as a reference implementation, and it does not need explanation.
The code is evident.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-selecting-a-solution&quot;&gt;3. Selecting a Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have seen three different solutions.
Two were extreme in pushing the scale from minimal code maximum data to maximum code minimum data.
The simple solution was a solution in the middle of the scale.
Which one should we use in a professional application?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, think about it, and have an opinion.
When you have that, then think about the reason.
Why would you select that solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now read on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we create a professional solution, we usually follow engineering practices.
One of these is to avoid code redundancy.
But at the same time, we also hate data redundancy.
The reason is that any redundancy in the code or data is a potential source of errors.
In the case of code, we call these errors bugs.
In the case of data, we call these errors data errors or data corruption.
We do not like either of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not want to be rude, but who cares what we like or hate?
The client certainly does not.
What matters is client satisfaction.
What the client cares about in a business environment is money.
In this case, the money they spend on the solution and the money they gain using the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look at it for this specific example.
It may seem intriguing, and it is.
The example is too simple to be a real-world problem.
However, this simplicity makes it pure and a prime and hopefully entertaining example for the demonstration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is there any difference in what the client can earn depending on the solution we choose?
In this case, barely.
The speed may be a differentiating factor.
Functionality is not.
Functionality is the same in all three cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When one solution is significantly faster than the other, then it should be considered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what is significant in this case?
Is 10% significant?
Or a 100 times speed up?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-speed-difference&quot;&gt;3.1. Speed Difference&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The speed difference is significant if the client can earn more money with the faster solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;3-1-1-execution-speed&quot;&gt;3.1.1. Execution Speed&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client uses a server application starting once every month once.
The startup of the application takes 1 second.
We can invest some effort to speed up this startup time to be under 10ms.
It probably does not matter.
This 100 times speed up is not significant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client uses an application that does a geology calculation.
The geo engineer uses the result, and based on that, he starts a new calculation.
In this iterative way, he finds the optimal solution for &amp;#8230;&amp;#8203; whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The calculation takes 8 hours and 30 minutes.
They start it every time before going home, and they have the result the next morning.
This way, they can do one iteration per day.
They are very strict about not doing overtime or overwork.
They are not German.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Optimizing the application and speeding it up 10% so that it finishes in 7 hours and 39 minutes does not seem, at first sight, to be significant.
However, such a speed-up means the geo-engineer can do two iterations daily.
Starting one in the morning, looking at the result, and starting the next one in the afternoon before they leave for their &lt;em&gt;repas du soir&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bottom line is the money, precisely the client&amp;#8217;s money.
In the example of converting numbers to roman numerals, it is hard to say without knowing the specific business application in which one creates more money for the client.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;3-1-2-development-speed&quot;&gt;3.1.2. Development Speed&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other speed difference is the speed of development.
It is significant if one solution can be finished sooner and can start earning money for the client.
The money the client gains this way has to be put into the equation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many years ago, I was working on a project where the client was managing debts.
The company got a CSV file of 10,000 debtors.
The people were calling them, texting them, writing emails, and so on.
Every contact was recorded into the Excell file.
At the end of the month, they sent the csv, including the transactions, back to the lenders&apos; aggregator.
The following month they started with 10,000 different debtors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The company&amp;#8217;s added value was the knowledge of how to convince the debtors to pay.
I had known the owners for a long time; I knew they did not do anything illegal or unethical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One day the aggregator asked them if they could scale up to handle 100,000 debtors every month.
They could hire more people, but that amount of records was already beyond the technical capability of the Excel-based solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They asked for a quote to create an application to handle the 100,000 debtors.
There were two offers.
My company, which I had back in 2007, offered a solution based on Jira with plugins.
We guaranteed to deliver a working version for the import in two weeks, and at the end of the first month, the version capable of exporting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other company offered a solution developed from scratch using Delphi.
Their development time was six months.
The significant advantage of their proposed solution was that it was to be fine-tuned for the specific business application.
Calling one client after the other, the administrator did not need to click three or more times from one issue to the other, like in the case of a Jira-based solution.
It was explained as a click, click, enter, done workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client ordered both solutions.
We delivered in two weeks and finished a rudimentary but usable working solution in six weeks.
They used this solution for the next 13 months until the other solution became ready.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bottom line is the money, specifically the client&amp;#8217;s money.
In converting numbers to roman numerals, the trivial solution was five minutes, including the unit tests.
The simple solution was 30 minutes.
The complex solution was 2 hours, except it was already available since the Roman ages; we just had to copy the characters from the stone tablet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;3-1-3-development-speed-again&quot;&gt;3.1.3. Development Speed Again&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development speed is critical not only for the client but also for the developer.
The more time you spend developing a feature, the more your cost is.
The client pays for the feature, but the developer pays for the time spent.
The market determines the price and is only vaguely coupled with the cost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is already the cost side of the equation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;3-1-4-maintenance&quot;&gt;3.1.4. Maintenance&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following cost factor is the cost of maintenance.
Developing an application is not the end of the story.
The application has to be maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The requirements of the client may change in the future.
The market and environment change and the client must respond to these business changes.
It will require a change in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There may be bugs in the application discovered only after the application is in production.
These also need a change in the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of bugs, it is evident that the maintenance cost is the developer&amp;#8217;s burden.
In the case of new features, it is not so evident, but it is.
Just as in the case of the original development, the client pays for the feature.
They do not care and do not even know what the cost of the development is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development cost is discussed with the client often during the sales negotiation.
It, however, is a sales issue.
The client wants to pay the lowest price, and the salesperson wants to sell the highest.
Neither is interested; however, pushing the price to a range will make the other party stand up from the table and leave now or in the future.
That is why the costs are mentioned at all.
It is all sales negotiation.
The cost is on the production side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Look at the three examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the trivial solution with a vast data set,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the simple solution with a small set, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the complex solution with a non-redundant data set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have to estimate the cost of the maintenance of the different parts.
What is the probability that a discovered bug or a new feature will need a code change or data change?
What is the cost of such a change?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fun in this example is that there is barely any imaginable possibility for a change request.
Roman numerals have been with us for thousands of years, they are literally carved in stone.
They are not going to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I selected this example not only because it was a coding kata a few days ago at the company where I work but also because recently, I had a change request in one of my open-source projects.
Jamal, you can reach &lt;a href=&quot;https://github.com/verhas/jamal&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal&lt;/a&gt;, has a counter that can format the counter value as roman numerals.
Created, done, tested, and released a few years back.
What change could you imagine?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, I could not imagine any, either.
Until someone asked me if it would be possible to format the counter value as &lt;code&gt;IIII&lt;/code&gt; for four.
It is an alternate format for &lt;code&gt;IV&lt;/code&gt; in some cases.
I remember my grandmother had a clock with roman numerals, with &lt;code&gt;IIII&lt;/code&gt; for four.
It was hand-painted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-summary&quot;&gt;4. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had a little fun with the Roman numerals.
Do not take all the sentences in this article as facts, especially not the ones written in Latin.
Or about the Latins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We discussed code and data complexity a bit, though I mainly left it to your imagination.
What we discussed, however, is the base of any professional development decision.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We follow object-oriented programming principles.
We do functional programming.
We avoid copy-paste.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why?
Because, in most cases, it is the right thing to do.
Because, in most cases, it is the practice that will result in the lowest cost for us.
Because in most of the cases&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The emphasis in this article is on the &lt;em&gt;&quot;in most of the cases&quot;&lt;/em&gt; part.
There can be exceptions, and as a true professional, you have to be able to recognize them.
There is only one single thing that you MUST NOT do: use this article as an excuse for wanting to be lazy.
It is not about that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author></entry><entry><title type="html">About Rust</title><link href="https://javax0.github.io/2023/02/13/about-rust.html" rel="alternate" type="text/html" title="About Rust" /><published>2023-02-13T00:00:00+01:00</published><updated>2023-02-13T00:00:00+01:00</updated><id>https://javax0.github.io/2023/02/13/about-rust</id><content type="html" xml:base="https://javax0.github.io/2023/02/13/about-rust.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is for developers and managers who have heard about Rust but do not know much about it.
It is not a tutorial.
I write what I see and give some unsolicited&amp;#8201;&amp;#8212;&amp;#8201;or assuming you read it not by accident, then solicited&amp;#8201;&amp;#8212;&amp;#8201;advice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a few words about Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a ten-year-old programming language.
In my opinion this language will shape the industry in the future comparable to the impact of Java.
Time will tell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New programming languages arise all the time, and then they get forgotten.
I remember when Roger Lang told me in 1997 about Java that it was a paper tiger.
We worked for Digital Equipment Corporation in the Hungarian subsidiary, and Java was relatively new.
The expression &quot;paper tiger&quot; references the Chinese proverb, &quot;The tiger that is paper is not a tiger&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;He failed.&lt;br&gt;
Java did not.&lt;br&gt;
Java was a tiger, though an infant.&lt;br&gt;
Some believed it even then, but nobody could &quot;know&quot;.&lt;br&gt;
The future of Java was not sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same is with Rust now.&lt;br&gt;
Although it is a ten-year-old language, it is still an infant.&lt;br&gt;
Technically it is not.
There are many solutions in the language and in the whole infrastructure architecture that are mature and brilliant.
What is still missing is community and industry acceptance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My prediction is that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust will step over the industry acceptance threshold in 2023, becoming a player in the industry; you can be confident it will not fade and be forgotten soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before going on with the rest of the article, I have to make a statement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am not a Rust expert. I have recently started learning the language and am still a beginner.
I have written more than a simple &quot;Hello,World!&quot; but that is it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, I have more than 40 years of programming experience if we start counting from my first program line, which was executed by a processor (TI-59 calculator) in 1980.
I programmed in FORTRAN, BASIC, Pascal, C, C++, Java, JavaScript, Python, and many other languages.
Java, as you can see from the topic of the blog, is my main charter for now.
May Rust be the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will write a few words about Rust.
I will not teach you Rust.
(After the disclaimer, this should be evident.)
I will write down some of the features that I felt were important and interesting.
I try to focus on the essential features from the commercial point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that they are the features that will make Rust a success or a failure.
You, as a developer, may like some features.
You may say, &quot;how cool Rust is because of&quot; this or that feature.
But if the feature is not essential for the industry, or the managers, then it is not crucial for Rust.
A language is not a hobby project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is about what I have seen so far and what I imply from it for the future of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-rust-is-a-systems-programming-language&quot;&gt;2. Rust is a systems programming language&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being a Java developer, I do not feel threatened by Rust.
Rust is a system programming language like C or C++.
It is a robust language, and I believe writing enterprise applications in it is possible, but not now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust compiles to machine code or WebAssembly.
There is no virtual machine and no garbage collection.
It means that the performance is comparable to C and C.
I would not write it is faster than Java because even C and C are slower than Java in some particular cases.
The important thing is that there are no hiccups in the performance during garbage collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I acknowledge that Java has dramatically improved and has a highly optimized garbage collector.
Still, it collects the garbage and then releases it in batches, affecting performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google&amp;#8217;s Golang garbage collector is also fast.
However, comparing it to any other GC, you should remember that it does not compact the heap.
It simply can not because the language uses pointers, and as such, it is prone to memory fragmentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the way: using pointers also makes Rust prone to this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-memory-safety&quot;&gt;3. Memory Safety&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a technical section in this article.
If you are a manager and impatient, here it is in one sentence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust uses a memory management approach, which delivers the same level of safety as Java without the garbage collection overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Managers can skip to the next section.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Memory safety is the feature that makes Rust outstanding and unique.
C trusts the developer not to make mistakes.
It is a wrong choice.
Developers make mistakes, Rust does not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers have to know when the code is not using an allocated memory chunk anymore, and they have to free it.
This is something that a compiler could do.
In principle, a compiler could identify the memory chunks not used anymore and generate code to free them.
They don&amp;#8217;t do that because the task is computationally expensive.
In short, the compiler cannot identify when to free the memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other end of the scale, Java safeguards everything using the garbage collector.
In this case, the run-time keeps track of all the references and frees the memory when it is not referenced anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust language developers did not accept the statement that the compiler could not do it.
They approached the problem again, and they found a solution.
The solution is called &quot;ownership&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference to a memory location is either owning the resource or borrowing it.
There can be only one resource owner, just like in real life.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, it is a bit hard to grasp the concept and needs a bit of different thinking than C or Java development.
However, it is a brilliant solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-application-management&quot;&gt;4. Application Management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust does not have built-in application management.
The reason for it is that Rust is a systems programming language.
When you have a JVM process, you can attach a debugger, query the memory and thread parameters, and make a memory dump.
With Rust, all you can do is what the operating system lets you do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you run an enterprise application that runs for several months between two maintenance stops for the ubiquitous version update, you need information about the running system to know how well it performs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust may have and certainly will have libraries and tools in the future addressing this issue, but it is not part of the ecosystem and the default run-time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-ease-of-learning&quot;&gt;5. Ease of Learning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a critical point.
Rust is not easy to learn.
Writing the first &quot;Hello, World!&quot; and having it up and running took a few days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel the weight of the language and the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is good news for the developers.
If you know Rust, you have little competition.
Rust developers are expensive.
For the managers, it is bad news.
Rust developers are expensive.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-language-features&quot;&gt;6. Language Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many great features in Rust that developers can like.
The code, after you learn the language, can be very readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it can also be very unreadable.
There are Rust quizzes on the net that I do not understand after a month of learning the language.
Not being able to solve it would be natural, but I often do not understand the explanation.
It is partially my age; 40 years of experience does not come young, but it is also the complexity of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually say that the important question is not&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BAD QUESTION: How readable code can someone write in a language?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rather&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GOOD QUESTION: How unreadable code can a junior developer, who thinks they mastered it all, write?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this regard, Rust is guilty.
The language is open for the developers to be extended.
The developers can write macros, which are part of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is similar to the C preprocessor, but macros run during instead of before the compilation.
The input for the macros is the lexical tokens, and the output is the lexical tokens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To be precise, the macros work on a lexical token tree, not a stream.
It simply means that the paired symbols, like &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, should be in pairs, or else the compiler will complain before passing the lexical tree to the macro.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java, for example, says that such a &quot;preprocessor&quot; or &quot;macro&quot; is counterintuitive.
The language is powerful enough.
If you need any macro to write your code readable, you have done something wrong; you must learn to use the language better.
Developers, on the other hand, welcome such a possibility.
We love to use the tool and not to &quot;learn it more&quot;.
This is the main reason why projects like Lombok are so hated and loved at the same time.
(In addition to the fact that Lombok is using undocumented API.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is on the other end of the scale.
It provides not only macro processing but also allows the developers to interpret the token tree in Rust.
A code written in Rust will start during the compilation and transform part of the lexical tree to another.
Using this possibility, you can significantly alter the language by giving different meanings and semantics to some constructs.
Eventually, you should not do that; it was never intended to introduce procedural macros.
A &quot;clever&quot; junior, however, could.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-backward-compatibility&quot;&gt;7. Backward Compatibility&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Backward compatibility is a critical issue.
Pulling an old 8mm magnetic tape zip archive with some Java 1.0 code will compile and run with the newest Java version.
You can compile with the latest C compiler code written in 1970.
(Most of the cases.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as we can see in the case of Java, this hinders language development.
My favorite example is &lt;code&gt;final&lt;/code&gt;.
By the time Java was introduced, the obvious and reasonable choice was to make everything non &lt;code&gt;final&lt;/code&gt; by default.
Hence, we have the &lt;code&gt;final&lt;/code&gt; keyword in Java and do not have something like &lt;code&gt;nonfinal&lt;/code&gt;.
Today most of us feel that &lt;code&gt;final&lt;/code&gt; would be a better default, but it is too late to change it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust cuts this Gordian knot.
Rust introduces the edition mechanism.
There are different editions of Rust, which are essentially language versions.
Inside an edition, a new version is always backward compatible.
Some old conventions can be thrown away when a new edition comes out.
The new compiler, however, can still work with the old code.
It just has to know which edition it is, and the edition is stated in the project&amp;#8217;s &lt;code&gt;Cargo.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the use of editions in Rust is an innovative approach to address backward compatibility.
Its effectiveness and impact depends on how it is adopted and used by the Rust developers&apos; community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-libraries&quot;&gt;8. Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Libraries are also vital parts of the ecosystem.
There are libraries for Rust, but not as wast as for Java.
It clearly shows that mainly enthusiasts support Rust.
Most of the libraries look like well-designed open-source hobby projects.
Documented, but not excessively, covers most use cases, but sometimes not all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are rooms for library development.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-tooling&quot;&gt;9. Tooling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust tooling is excellent.
Eventually not as good as Java, but it is getting there.
I tried to develop a Rust application using IntelliJ IDEA and CLion.
It works; you can also debug the language interactively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I compiled my sample codes on an Apple M1 machine and coded to generate code for Intel Linux, Intel Windows, and WebAssembly.
Cross-compilation is a strong point of Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two comments, however, that I got from &lt;a href=&quot;https://github.com/KristofSzabados&quot;&gt;Kristof Szabados&lt;/a&gt; and &lt;a href=&quot;https://github.com/scirin&quot;&gt;Irine Kokilashvili&lt;/a&gt;.
One is that you should avoid cross-compilation if possible.
It is not Rust specific.
Cross compilation, setting up the environment contains many pitfalls that target architecture compilation does not have.
Cross compilation is usually a practice for embedded systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other comment is that Rust compilation using LLVM targets only the those provided by LLVM.
C language using GCC has a wider breath.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-implications&quot;&gt;10. Implications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is an important language that we have to pay attention to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-1-use-rust&quot;&gt;10.1. Use Rust?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The big question is: should you use Rust?
When should you use Rust?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a developer, allocate time to learn it.
You will need devotion because it is not trivial.
Find some hobby projects or libraries that you will develop in Rust.
Keep Rust in your toolset; it will pay back sooner or later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a manager, know about it.
Encourage your developers to learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your actual project is low-level, more or less a systems programming project, then Rust must be considered.
I do not advocate selecting Rust, but it must be considered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The decision has to be made based on non-technical requirements.
Rust is mature enough to do anything that C can do.
If there is something prohibited by compile time memory safety, you can still use &lt;code&gt;unsafe&lt;/code&gt; code as a last resort.
Technical requirements make no difference in this case.
The questions you have to ask are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long will the project run? How long will you need to maintain it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many developers will work on the project? Can you afford to have a Rust developer? Can you educate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Rust at the moment is a significant investment.
Rust developers are not available in the market significant amount.
It is a good choice if you can afford to educate your developers to learn Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;10-2-what-will-rust-do&quot;&gt;10.2. What will Rust do ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My opinion is that Rust will be used in many areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-1-systems-programming&quot;&gt;10.2.1. Systems Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For low-level systems programming, it will definitely be a significant player.
The promise to create a memory-safe, &quot;unhackable&quot; program is strong.
There is no general guarantee for the resulting code 100% secure, but a significant share of the security issues use exploits based on memory safety problems.
It is also something that I genuinely believe Rust delivers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-2-application-programming&quot;&gt;10.2.2. Application Programming&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But this is not the whole story.
Rust has the potential to be a significant player in enterprise application development.
It has to evolve to have more commercial-grade libraries and a non-niche developer base to get there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;10-2-3-web-ui-development&quot;&gt;10.2.3. Web UI Development&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also see the possibility of it being a player in Web UI development.
The reason for the possibility is WebAssembly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compiling the code to run in the browser is a prerequisite, but not enough.
The main reason, strangely, is the complexity of Rust.
The needed and delivered code quality of UI projects reflecting the experience of the average UI developer is usually low.
UI developers are usually young and less experienced.
This also means an issue when you have a project that needs more experience.
Finding a senior UI developer may be difficult in the swarm of young developers.
On the other hand, when you find a developer who can program in Rust, you are more likely to find someone who is a senior developer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-summary-and-conclusion&quot;&gt;11. Summary and Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust is a language that we have to pay attention to.
It is technically mature, and it will become commercially mature in the future.
2023 is the year (my opinion) when it will pass the tipping point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a developer, you should learn it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a manager, you should know about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article as a source code was available on GitHub since the start of writing.
The people who contributed to the text with comments before the publishing date are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Juriy&quot;&gt;Iurii Bura&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KristofSzabados&quot;&gt;Kristof Szabados&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/scirin&quot;&gt;Irine Kokilashvili&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author></entry></feed>