---
title: "Documenting API using Concordion" 
layout: posta
comments: on
---
{%@import javax0.jim%}
"link:http://www.concordion.org/[Concordion] is an open source tool for writing automated acceptance tests in Java." It is a handy little tool, simple to use and even the source code of the tool is good style. You describe the tests using HTML with special markups and when you run your special unit tests using the ConcordionRunner it processes the HTML and replaces the special tags with the actual values fetched from the tests. In the end you get an HTML colored with red and green spots where some tests failed or succeeded respectively. This is a result good for the eyes, BAs and easy to spot any error. This way it is similar to link:http://www.fitnesse.org/[fitnesse] and link:http://www.greenpeppersoftware.com/[GreenPepper].

Even though the tool was designed for automated acceptance test &mdash; which one could argue is a non-sense term &mdash; I wanted to use it to document API.

The usual way to document API is JavaDoc. JavaDoc includes the signature of the methods, and comments. The comments are supposed to depict the way the method should be used. This is fairly good approach but has some shortages:


	* The comments become outdated. Developers change the way the method is to be used, but forget to update the JavaDoc.
	* A method many times should be used in different ways together with other objects and methods.


For this reason many developers believe that unit tests are the real documentation of an API. Two approaches with good and bad aspects. How could we leverage the best of the both world?

I decided to write a small library that can be included into Concordion fixtures using delegation and which can read the source code of the fixture or just any other source code, cut off some lines from the code and return them as string. Referencing the method Concordion output can include (presumably preformatted) Java code. This way the resulting HTML will contain living documentation including actual code without manual copy pasting that decreases the danger of the documentation getting outdated.

The link:https://github.com/verhas/concordionsnippet[project] is available from GitHub and also from Sonatype repo. The link:http://verhas.github.io/concordionsnippet/[documentation] of the project was also created this way.



=== Comments imported from Wordpress


*Peter Verhas* 2014-03-19 10:16:04
{%@comment id: 158 %}
{%@comment author_email: peter@verhas.com %}
{%@comment author_url: http://tifyty.wordpress.com %}
{%@comment author_IP: 165.222.184.132 %}
{%@comment date_gmt: 2014-03-19 09:16:04 %}
[quote]
____
That comes from the locale setting on my mac. It is just funny. I did not recog that but it does not hurt :-)
____
{%@comment approved: 1 %}
{%@comment type:  %}
{%@comment parent: 157 %}
{%@comment user_id: 31131067 %}

*kirunews* 2014-03-19 10:12:29
{%@comment id: 157 %}
{%@comment author_email: kirunews@gmail.com %}
{%@comment author_url: http://europeana.eu %}
{%@comment author_IP: 194.171.184.14 %}
{%@comment date_gmt: 2014-03-19 09:12:29 %}
[quote]
____
Thanks for the tip. I did not hear about Concordion so far, but I'll give it a try.
A small note. The http://verhas.github.io/concordionsnippet/ page says: "Results generated by Concordion in 409 ms on 13-márc.-2014 at 20:00:54 CET". "on 13-márc.", seriously?
____
{%@comment approved: 1 %}
{%@comment type:  %}
{%@comment parent: 0 %}
{%@comment user_id: 0 %}
